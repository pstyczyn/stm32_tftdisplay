
stm32_nauka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a590  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0801a718  0801a718  0001b718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a858  0801a858  0001c390  2**0
                  CONTENTS
  4 .ARM          00000008  0801a858  0801a858  0001b858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a860  0801a860  0001c390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a860  0801a860  0001b860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a864  0801a864  0001b864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000390  20000000  0801a868  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000390  0801abf8  0001c390  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  0801abf8  0001c594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c390  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016358  00000000  00000000  0001c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c52  00000000  00000000  00032718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00035370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e1e  00000000  00000000  00036588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028836  00000000  00000000  000373a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002566a  00000000  00000000  0005fbdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffc62  00000000  00000000  00085246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184ea8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e14  00000000  00000000  00184eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00189d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000390 	.word	0x20000390
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0801a700 	.word	0x0801a700

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000394 	.word	0x20000394
 80001c4:	0801a700 	.word	0x0801a700

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2f>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008ac:	bf24      	itt	cs
 80008ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008b6:	d90d      	bls.n	80008d4 <__aeabi_d2f+0x30>
 80008b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008cc:	bf08      	it	eq
 80008ce:	f020 0001 	biceq.w	r0, r0, #1
 80008d2:	4770      	bx	lr
 80008d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008d8:	d121      	bne.n	800091e <__aeabi_d2f+0x7a>
 80008da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008de:	bfbc      	itt	lt
 80008e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008e4:	4770      	bxlt	lr
 80008e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008ee:	f1c2 0218 	rsb	r2, r2, #24
 80008f2:	f1c2 0c20 	rsb	ip, r2, #32
 80008f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008fa:	fa20 f002 	lsr.w	r0, r0, r2
 80008fe:	bf18      	it	ne
 8000900:	f040 0001 	orrne.w	r0, r0, #1
 8000904:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000908:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800090c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000910:	ea40 000c 	orr.w	r0, r0, ip
 8000914:	fa23 f302 	lsr.w	r3, r3, r2
 8000918:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800091c:	e7cc      	b.n	80008b8 <__aeabi_d2f+0x14>
 800091e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000922:	d107      	bne.n	8000934 <__aeabi_d2f+0x90>
 8000924:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000928:	bf1e      	ittt	ne
 800092a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800092e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000932:	4770      	bxne	lr
 8000934:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000938:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800093c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295
 8000954:	f04f 30ff 	movne.w	r0, #4294967295
 8000958:	f000 b96a 	b.w	8000c30 <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f806 	bl	8000974 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__udivmoddi4>:
 8000974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000978:	9d08      	ldr	r5, [sp, #32]
 800097a:	460c      	mov	r4, r1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d14e      	bne.n	8000a1e <__udivmoddi4+0xaa>
 8000980:	4694      	mov	ip, r2
 8000982:	458c      	cmp	ip, r1
 8000984:	4686      	mov	lr, r0
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	d962      	bls.n	8000a52 <__udivmoddi4+0xde>
 800098c:	b14a      	cbz	r2, 80009a2 <__udivmoddi4+0x2e>
 800098e:	f1c2 0320 	rsb	r3, r2, #32
 8000992:	4091      	lsls	r1, r2
 8000994:	fa20 f303 	lsr.w	r3, r0, r3
 8000998:	fa0c fc02 	lsl.w	ip, ip, r2
 800099c:	4319      	orrs	r1, r3
 800099e:	fa00 fe02 	lsl.w	lr, r0, r2
 80009a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a6:	fa1f f68c 	uxth.w	r6, ip
 80009aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80009ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b2:	fb07 1114 	mls	r1, r7, r4, r1
 80009b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ba:	fb04 f106 	mul.w	r1, r4, r6
 80009be:	4299      	cmp	r1, r3
 80009c0:	d90a      	bls.n	80009d8 <__udivmoddi4+0x64>
 80009c2:	eb1c 0303 	adds.w	r3, ip, r3
 80009c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80009ca:	f080 8112 	bcs.w	8000bf2 <__udivmoddi4+0x27e>
 80009ce:	4299      	cmp	r1, r3
 80009d0:	f240 810f 	bls.w	8000bf2 <__udivmoddi4+0x27e>
 80009d4:	3c02      	subs	r4, #2
 80009d6:	4463      	add	r3, ip
 80009d8:	1a59      	subs	r1, r3, r1
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e2:	fb07 1110 	mls	r1, r7, r0, r1
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f606 	mul.w	r6, r0, r6
 80009ee:	429e      	cmp	r6, r3
 80009f0:	d90a      	bls.n	8000a08 <__udivmoddi4+0x94>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80009fa:	f080 80fc 	bcs.w	8000bf6 <__udivmoddi4+0x282>
 80009fe:	429e      	cmp	r6, r3
 8000a00:	f240 80f9 	bls.w	8000bf6 <__udivmoddi4+0x282>
 8000a04:	4463      	add	r3, ip
 8000a06:	3802      	subs	r0, #2
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a0e:	2100      	movs	r1, #0
 8000a10:	b11d      	cbz	r5, 8000a1a <__udivmoddi4+0xa6>
 8000a12:	40d3      	lsrs	r3, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	e9c5 3200 	strd	r3, r2, [r5]
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d905      	bls.n	8000a2e <__udivmoddi4+0xba>
 8000a22:	b10d      	cbz	r5, 8000a28 <__udivmoddi4+0xb4>
 8000a24:	e9c5 0100 	strd	r0, r1, [r5]
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e7f5      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a2e:	fab3 f183 	clz	r1, r3
 8000a32:	2900      	cmp	r1, #0
 8000a34:	d146      	bne.n	8000ac4 <__udivmoddi4+0x150>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d302      	bcc.n	8000a40 <__udivmoddi4+0xcc>
 8000a3a:	4290      	cmp	r0, r2
 8000a3c:	f0c0 80f0 	bcc.w	8000c20 <__udivmoddi4+0x2ac>
 8000a40:	1a86      	subs	r6, r0, r2
 8000a42:	eb64 0303 	sbc.w	r3, r4, r3
 8000a46:	2001      	movs	r0, #1
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d0e6      	beq.n	8000a1a <__udivmoddi4+0xa6>
 8000a4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a50:	e7e3      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	f040 8090 	bne.w	8000b78 <__udivmoddi4+0x204>
 8000a58:	eba1 040c 	sub.w	r4, r1, ip
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	2101      	movs	r1, #1
 8000a66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000a72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a76:	fb07 f006 	mul.w	r0, r7, r6
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x11c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a86:	d202      	bcs.n	8000a8e <__udivmoddi4+0x11a>
 8000a88:	4298      	cmp	r0, r3
 8000a8a:	f200 80cd 	bhi.w	8000c28 <__udivmoddi4+0x2b4>
 8000a8e:	4626      	mov	r6, r4
 8000a90:	1a1c      	subs	r4, r3, r0
 8000a92:	fa1f f38e 	uxth.w	r3, lr
 8000a96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000a9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aa2:	fb00 f707 	mul.w	r7, r0, r7
 8000aa6:	429f      	cmp	r7, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x148>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab2:	d202      	bcs.n	8000aba <__udivmoddi4+0x146>
 8000ab4:	429f      	cmp	r7, r3
 8000ab6:	f200 80b0 	bhi.w	8000c1a <__udivmoddi4+0x2a6>
 8000aba:	4620      	mov	r0, r4
 8000abc:	1bdb      	subs	r3, r3, r7
 8000abe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac2:	e7a5      	b.n	8000a10 <__udivmoddi4+0x9c>
 8000ac4:	f1c1 0620 	rsb	r6, r1, #32
 8000ac8:	408b      	lsls	r3, r1
 8000aca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ace:	431f      	orrs	r7, r3
 8000ad0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ad4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ad8:	ea43 030c 	orr.w	r3, r3, ip
 8000adc:	40f4      	lsrs	r4, r6
 8000ade:	fa00 f801 	lsl.w	r8, r0, r1
 8000ae2:	0c38      	lsrs	r0, r7, #16
 8000ae4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ae8:	fbb4 fef0 	udiv	lr, r4, r0
 8000aec:	fa1f fc87 	uxth.w	ip, r7
 8000af0:	fb00 441e 	mls	r4, r0, lr, r4
 8000af4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af8:	fb0e f90c 	mul.w	r9, lr, ip
 8000afc:	45a1      	cmp	r9, r4
 8000afe:	fa02 f201 	lsl.w	r2, r2, r1
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x1a6>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b0a:	f080 8084 	bcs.w	8000c16 <__udivmoddi4+0x2a2>
 8000b0e:	45a1      	cmp	r9, r4
 8000b10:	f240 8081 	bls.w	8000c16 <__udivmoddi4+0x2a2>
 8000b14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b18:	443c      	add	r4, r7
 8000b1a:	eba4 0409 	sub.w	r4, r4, r9
 8000b1e:	fa1f f983 	uxth.w	r9, r3
 8000b22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b26:	fb00 4413 	mls	r4, r0, r3, r4
 8000b2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b32:	45a4      	cmp	ip, r4
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x1d2>
 8000b36:	193c      	adds	r4, r7, r4
 8000b38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b3c:	d267      	bcs.n	8000c0e <__udivmoddi4+0x29a>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0x29a>
 8000b42:	3b02      	subs	r3, #2
 8000b44:	443c      	add	r4, r7
 8000b46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b4e:	eba4 040c 	sub.w	r4, r4, ip
 8000b52:	429c      	cmp	r4, r3
 8000b54:	46ce      	mov	lr, r9
 8000b56:	469c      	mov	ip, r3
 8000b58:	d351      	bcc.n	8000bfe <__udivmoddi4+0x28a>
 8000b5a:	d04e      	beq.n	8000bfa <__udivmoddi4+0x286>
 8000b5c:	b155      	cbz	r5, 8000b74 <__udivmoddi4+0x200>
 8000b5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000b62:	eb64 040c 	sbc.w	r4, r4, ip
 8000b66:	fa04 f606 	lsl.w	r6, r4, r6
 8000b6a:	40cb      	lsrs	r3, r1
 8000b6c:	431e      	orrs	r6, r3
 8000b6e:	40cc      	lsrs	r4, r1
 8000b70:	e9c5 6400 	strd	r6, r4, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	e750      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	fa24 f303 	lsr.w	r3, r4, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	430c      	orrs	r4, r1
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b94:	fa1f f78c 	uxth.w	r7, ip
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ba0:	0c23      	lsrs	r3, r4, #16
 8000ba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba6:	fb00 f107 	mul.w	r1, r0, r7
 8000baa:	4299      	cmp	r1, r3
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x24c>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bb6:	d22c      	bcs.n	8000c12 <__udivmoddi4+0x29e>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d92a      	bls.n	8000c12 <__udivmoddi4+0x29e>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb01 f307 	mul.w	r3, r1, r7
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x276>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000be0:	d213      	bcs.n	8000c0a <__udivmoddi4+0x296>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d911      	bls.n	8000c0a <__udivmoddi4+0x296>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4464      	add	r4, ip
 8000bea:	1ae4      	subs	r4, r4, r3
 8000bec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bf0:	e739      	b.n	8000a66 <__udivmoddi4+0xf2>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	e6f0      	b.n	80009d8 <__udivmoddi4+0x64>
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e706      	b.n	8000a08 <__udivmoddi4+0x94>
 8000bfa:	45c8      	cmp	r8, r9
 8000bfc:	d2ae      	bcs.n	8000b5c <__udivmoddi4+0x1e8>
 8000bfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c06:	3801      	subs	r0, #1
 8000c08:	e7a8      	b.n	8000b5c <__udivmoddi4+0x1e8>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	e7ed      	b.n	8000bea <__udivmoddi4+0x276>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	e799      	b.n	8000b46 <__udivmoddi4+0x1d2>
 8000c12:	4630      	mov	r0, r6
 8000c14:	e7d4      	b.n	8000bc0 <__udivmoddi4+0x24c>
 8000c16:	46d6      	mov	lr, sl
 8000c18:	e77f      	b.n	8000b1a <__udivmoddi4+0x1a6>
 8000c1a:	4463      	add	r3, ip
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	e74d      	b.n	8000abc <__udivmoddi4+0x148>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	e70f      	b.n	8000a48 <__udivmoddi4+0xd4>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	e730      	b.n	8000a90 <__udivmoddi4+0x11c>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_idiv0>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	@ 0x28
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c56:	4b31      	ldr	r3, [pc, #196]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000c58:	4a31      	ldr	r2, [pc, #196]	@ (8000d20 <MX_ADC1_Init+0xec>)
 8000c5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c62:	4b2e      	ldr	r3, [pc, #184]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c68:	4b2c      	ldr	r3, [pc, #176]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c74:	4b29      	ldr	r3, [pc, #164]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000c76:	2204      	movs	r2, #4
 8000c78:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c7a:	4b28      	ldr	r3, [pc, #160]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c80:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c86:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c8c:	4b23      	ldr	r3, [pc, #140]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c94:	4b21      	ldr	r3, [pc, #132]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c9a:	4b20      	ldr	r3, [pc, #128]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cae:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb6:	4819      	ldr	r0, [pc, #100]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000cb8:	f014 f9fc 	bl	80150b4 <HAL_ADC_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000cc2:	f013 fd57 	bl	8014774 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000cc6:	2306      	movs	r3, #6
 8000cc8:	61fb      	str	r3, [r7, #28]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4810      	ldr	r0, [pc, #64]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000cda:	f015 fd33 	bl	8016744 <HAL_ADCEx_MultiModeConfigChannel>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000ce4:	f013 fd46 	bl	8014774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <MX_ADC1_Init+0xf0>)
 8000cea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cec:	2306      	movs	r3, #6
 8000cee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cf4:	237f      	movs	r3, #127	@ 0x7f
 8000cf6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_ADC1_Init+0xe8>)
 8000d06:	f014 ff31 	bl	8015b6c <HAL_ADC_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000d10:	f013 fd30 	bl	8014774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	@ 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200003ac 	.word	0x200003ac
 8000d20:	50040000 	.word	0x50040000
 8000d24:	10c00010 	.word	0x10c00010

08000d28 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2e:	463b      	mov	r3, r7
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d3e:	4b26      	ldr	r3, [pc, #152]	@ (8000dd8 <MX_ADC2_Init+0xb0>)
 8000d40:	4a26      	ldr	r2, [pc, #152]	@ (8000ddc <MX_ADC2_Init+0xb4>)
 8000d42:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d44:	4b24      	ldr	r3, [pc, #144]	@ (8000dd8 <MX_ADC2_Init+0xb0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d4a:	4b23      	ldr	r3, [pc, #140]	@ (8000dd8 <MX_ADC2_Init+0xb0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d50:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <MX_ADC2_Init+0xb0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d56:	4b20      	ldr	r3, [pc, #128]	@ (8000dd8 <MX_ADC2_Init+0xb0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <MX_ADC2_Init+0xb0>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d62:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <MX_ADC2_Init+0xb0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000d68:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <MX_ADC2_Init+0xb0>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <MX_ADC2_Init+0xb0>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d74:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <MX_ADC2_Init+0xb0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <MX_ADC2_Init+0xb0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d84:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <MX_ADC2_Init+0xb0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <MX_ADC2_Init+0xb0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d92:	4811      	ldr	r0, [pc, #68]	@ (8000dd8 <MX_ADC2_Init+0xb0>)
 8000d94:	f014 f98e 	bl	80150b4 <HAL_ADC_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 8000d9e:	f013 fce9 	bl	8014774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000da2:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <MX_ADC2_Init+0xb8>)
 8000da4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da6:	2306      	movs	r3, #6
 8000da8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dae:	237f      	movs	r3, #127	@ 0x7f
 8000db0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000db2:	2304      	movs	r3, #4
 8000db4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dba:	463b      	mov	r3, r7
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	@ (8000dd8 <MX_ADC2_Init+0xb0>)
 8000dc0:	f014 fed4 	bl	8015b6c <HAL_ADC_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8000dca:	f013 fcd3 	bl	8014774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000410 	.word	0x20000410
 8000ddc:	50040100 	.word	0x50040100
 8000de0:	0c900008 	.word	0x0c900008

08000de4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08c      	sub	sp, #48	@ 0x30
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a3b      	ldr	r2, [pc, #236]	@ (8000ef0 <HAL_ADC_MspInit+0x10c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d135      	bne.n	8000e72 <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000e06:	4b3b      	ldr	r3, [pc, #236]	@ (8000ef4 <HAL_ADC_MspInit+0x110>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	4a39      	ldr	r2, [pc, #228]	@ (8000ef4 <HAL_ADC_MspInit+0x110>)
 8000e0e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000e10:	4b38      	ldr	r3, [pc, #224]	@ (8000ef4 <HAL_ADC_MspInit+0x110>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d10b      	bne.n	8000e30 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000e18:	4b37      	ldr	r3, [pc, #220]	@ (8000ef8 <HAL_ADC_MspInit+0x114>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1c:	4a36      	ldr	r2, [pc, #216]	@ (8000ef8 <HAL_ADC_MspInit+0x114>)
 8000e1e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e24:	4b34      	ldr	r3, [pc, #208]	@ (8000ef8 <HAL_ADC_MspInit+0x114>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e2c:	61bb      	str	r3, [r7, #24]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e30:	4b31      	ldr	r3, [pc, #196]	@ (8000ef8 <HAL_ADC_MspInit+0x114>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e34:	4a30      	ldr	r2, [pc, #192]	@ (8000ef8 <HAL_ADC_MspInit+0x114>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef8 <HAL_ADC_MspInit+0x114>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e4c:	230b      	movs	r3, #11
 8000e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4828      	ldr	r0, [pc, #160]	@ (8000efc <HAL_ADC_MspInit+0x118>)
 8000e5c:	f015 feb2 	bl	8016bc4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2101      	movs	r1, #1
 8000e64:	2012      	movs	r0, #18
 8000e66:	f015 fdf8 	bl	8016a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e6a:	2012      	movs	r0, #18
 8000e6c:	f015 fe11 	bl	8016a92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000e70:	e039      	b.n	8000ee6 <HAL_ADC_MspInit+0x102>
  else if(adcHandle->Instance==ADC2)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a22      	ldr	r2, [pc, #136]	@ (8000f00 <HAL_ADC_MspInit+0x11c>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d134      	bne.n	8000ee6 <HAL_ADC_MspInit+0x102>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef4 <HAL_ADC_MspInit+0x110>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3301      	adds	r3, #1
 8000e82:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef4 <HAL_ADC_MspInit+0x110>)
 8000e84:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <HAL_ADC_MspInit+0x110>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d10b      	bne.n	8000ea6 <HAL_ADC_MspInit+0xc2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <HAL_ADC_MspInit+0x114>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e92:	4a19      	ldr	r2, [pc, #100]	@ (8000ef8 <HAL_ADC_MspInit+0x114>)
 8000e94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <HAL_ADC_MspInit+0x114>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <HAL_ADC_MspInit+0x114>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	4a13      	ldr	r2, [pc, #76]	@ (8000ef8 <HAL_ADC_MspInit+0x114>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <HAL_ADC_MspInit+0x114>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ec2:	230b      	movs	r3, #11
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480a      	ldr	r0, [pc, #40]	@ (8000efc <HAL_ADC_MspInit+0x118>)
 8000ed2:	f015 fe77 	bl	8016bc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 1);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2101      	movs	r1, #1
 8000eda:	2012      	movs	r0, #18
 8000edc:	f015 fdbd 	bl	8016a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ee0:	2012      	movs	r0, #18
 8000ee2:	f015 fdd6 	bl	8016a92 <HAL_NVIC_EnableIRQ>
}
 8000ee6:	bf00      	nop
 8000ee8:	3730      	adds	r7, #48	@ 0x30
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	50040000 	.word	0x50040000
 8000ef4:	20000474 	.word	0x20000474
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	48000800 	.word	0x48000800
 8000f00:	50040100 	.word	0x50040100

08000f04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8001018 <MX_GPIO_Init+0x114>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	4a3e      	ldr	r2, [pc, #248]	@ (8001018 <MX_GPIO_Init+0x114>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f26:	4b3c      	ldr	r3, [pc, #240]	@ (8001018 <MX_GPIO_Init+0x114>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b39      	ldr	r3, [pc, #228]	@ (8001018 <MX_GPIO_Init+0x114>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f36:	4a38      	ldr	r2, [pc, #224]	@ (8001018 <MX_GPIO_Init+0x114>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3e:	4b36      	ldr	r3, [pc, #216]	@ (8001018 <MX_GPIO_Init+0x114>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	4b33      	ldr	r3, [pc, #204]	@ (8001018 <MX_GPIO_Init+0x114>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4e:	4a32      	ldr	r2, [pc, #200]	@ (8001018 <MX_GPIO_Init+0x114>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f56:	4b30      	ldr	r3, [pc, #192]	@ (8001018 <MX_GPIO_Init+0x114>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|E_Pin|F_Pin
 8000f62:	2200      	movs	r2, #0
 8000f64:	f649 4173 	movw	r1, #40051	@ 0x9c73
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6c:	f015 ffec 	bl	8016f48 <HAL_GPIO_WritePin>
                          |G_Pin|DC_Pin|D_Pin|C_Pin
                          |CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2110      	movs	r1, #16
 8000f74:	4829      	ldr	r0, [pc, #164]	@ (800101c <MX_GPIO_Init+0x118>)
 8000f76:	f015 ffe7 	bl	8016f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Zielony_1_Pin|Zolty_1_Pin|Czerwony_1_Pin|Czerwony_2_Pin
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 6136 	mov.w	r1, #2912	@ 0xb60
 8000f80:	4826      	ldr	r0, [pc, #152]	@ (800101c <MX_GPIO_Init+0x118>)
 8000f82:	f015 ffe1 	bl	8016f48 <HAL_GPIO_WritePin>
                          |Gd2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Ad2_Pin|Bd2_Pin|Cd2_Pin|Dd2_Pin
 8000f86:	2200      	movs	r2, #0
 8000f88:	f240 313f 	movw	r1, #831	@ 0x33f
 8000f8c:	4824      	ldr	r0, [pc, #144]	@ (8001020 <MX_GPIO_Init+0x11c>)
 8000f8e:	f015 ffdb 	bl	8016f48 <HAL_GPIO_WritePin>
                          |Ed2_Pin|Fd2_Pin|Zolty_2_Pin|Zielony_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|E_Pin|F_Pin
 8000f92:	f649 0373 	movw	r3, #39027	@ 0x9873
 8000f96:	60fb      	str	r3, [r7, #12]
                          |G_Pin|D_Pin|C_Pin|CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fae:	f015 fe09 	bl	8016bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RESET_Pin|Zielony_1_Pin|Zolty_1_Pin|Czerwony_1_Pin
 8000fb2:	f44f 6337 	mov.w	r3, #2928	@ 0xb70
 8000fb6:	60fb      	str	r3, [r7, #12]
                          |Czerwony_2_Pin|Gd2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4814      	ldr	r0, [pc, #80]	@ (800101c <MX_GPIO_Init+0x118>)
 8000fcc:	f015 fdfa 	bl	8016bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Ad2_Pin|Bd2_Pin|Cd2_Pin|Dd2_Pin
 8000fd0:	f240 333f 	movw	r3, #831	@ 0x33f
 8000fd4:	60fb      	str	r3, [r7, #12]
                          |Ed2_Pin|Fd2_Pin|Zolty_2_Pin|Zielony_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480d      	ldr	r0, [pc, #52]	@ (8001020 <MX_GPIO_Init+0x11c>)
 8000fea:	f015 fdeb 	bl	8016bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DC_Pin;
 8000fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	4619      	mov	r1, r3
 8001006:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100a:	f015 fddb 	bl	8016bc4 <HAL_GPIO_Init>

}
 800100e:	bf00      	nop
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	48000800 	.word	0x48000800
 8001020:	48000400 	.word	0x48000400

08001024 <CS_ON>:
	uint8_t Mbyte2;
}adres_t;


void CS_ON(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_Pin, SET);
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800102e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001032:	f015 ff89 	bl	8016f48 <HAL_GPIO_WritePin>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}

0800103a <CS_OFF>:
void CS_OFF(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, CS_Pin, RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001044:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001048:	f015 ff7e 	bl	8016f48 <HAL_GPIO_WritePin>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <DC_ON>:
void DC_ON(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, DC_Pin, SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800105a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800105e:	f015 ff73 	bl	8016f48 <HAL_GPIO_WritePin>
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}

08001066 <DC_OFF>:
void DC_OFF(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, DC_Pin, RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001074:	f015 ff68 	bl	8016f48 <HAL_GPIO_WritePin>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <RESET_ON>:
void RESET_ON(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, RESET_Pin, RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2110      	movs	r1, #16
 8001084:	4802      	ldr	r0, [pc, #8]	@ (8001090 <RESET_ON+0x14>)
 8001086:	f015 ff5f 	bl	8016f48 <HAL_GPIO_WritePin>
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	48000800 	.word	0x48000800

08001094 <RESET_OFF>:
void RESET_OFF(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, RESET_Pin, SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2110      	movs	r1, #16
 800109c:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <RESET_OFF+0x14>)
 800109e:	f015 ff53 	bl	8016f48 <HAL_GPIO_WritePin>
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	48000800 	.word	0x48000800

080010ac <LCD_komenda>:

void LCD_komenda(uint8_t komenda)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	DC_OFF();
 80010b6:	f7ff ffd6 	bl	8001066 <DC_OFF>
	CS_OFF();
 80010ba:	f7ff ffbe 	bl	800103a <CS_OFF>
	HAL_SPI_Transmit(&hspi3, &komenda, 1, HAL_MAX_DELAY);
 80010be:	1df9      	adds	r1, r7, #7
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	2201      	movs	r2, #1
 80010c6:	4804      	ldr	r0, [pc, #16]	@ (80010d8 <LCD_komenda+0x2c>)
 80010c8:	f017 fb19 	bl	80186fe <HAL_SPI_Transmit>
	CS_ON();
 80010cc:	f7ff ffaa 	bl	8001024 <CS_ON>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200004a4 	.word	0x200004a4

080010dc <LCD_dana>:
void LCD_dana(uint8_t dana)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	DC_ON();
 80010e6:	f7ff ffb3 	bl	8001050 <DC_ON>
	CS_OFF();
 80010ea:	f7ff ffa6 	bl	800103a <CS_OFF>
	HAL_SPI_Transmit(&hspi3, &dana, 1, HAL_MAX_DELAY);
 80010ee:	1df9      	adds	r1, r7, #7
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	2201      	movs	r2, #1
 80010f6:	4804      	ldr	r0, [pc, #16]	@ (8001108 <LCD_dana+0x2c>)
 80010f8:	f017 fb01 	bl	80186fe <HAL_SPI_Transmit>
	CS_ON();
 80010fc:	f7ff ff92 	bl	8001024 <CS_ON>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200004a4 	.word	0x200004a4

0800110c <LCD_init>:

void LCD_init(adres_t *ADRES)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	RESET_ON();
 8001114:	f7ff ffb2 	bl	800107c <RESET_ON>
	HAL_Delay(50);
 8001118:	2032      	movs	r0, #50	@ 0x32
 800111a:	f013 fd63 	bl	8014be4 <HAL_Delay>
	RESET_OFF();
 800111e:	f7ff ffb9 	bl	8001094 <RESET_OFF>
	HAL_Delay(50);
 8001122:	2032      	movs	r0, #50	@ 0x32
 8001124:	f013 fd5e 	bl	8014be4 <HAL_Delay>
	LCD_komenda(ADRES->SOFTWARERESET);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	785b      	ldrb	r3, [r3, #1]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ffbd 	bl	80010ac <LCD_komenda>
	HAL_Delay(130);
 8001132:	2082      	movs	r0, #130	@ 0x82
 8001134:	f013 fd56 	bl	8014be4 <HAL_Delay>
	LCD_komenda(ADRES->SLEEPOUT);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	789b      	ldrb	r3, [r3, #2]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffb5 	bl	80010ac <LCD_komenda>
	HAL_Delay(130);
 8001142:	2082      	movs	r0, #130	@ 0x82
 8001144:	f013 fd4e 	bl	8014be4 <HAL_Delay>
	LCD_komenda(ADRES->INTERFEJSON);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	795b      	ldrb	r3, [r3, #5]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ffad 	bl	80010ac <LCD_komenda>
	LCD_dana(ADRES->BIT_16_ON_PIXEL);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	79db      	ldrb	r3, [r3, #7]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ffc0 	bl	80010dc <LCD_dana>
	LCD_komenda(ADRES->DISPLAYON);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	791b      	ldrb	r3, [r3, #4]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ffa3 	bl	80010ac <LCD_komenda>
	HAL_Delay(100);
 8001166:	2064      	movs	r0, #100	@ 0x64
 8001168:	f013 fd3c 	bl	8014be4 <HAL_Delay>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <LCD_set_adressing>:

void LCD_set_adressing(adres_t *ADRES)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	LCD_komenda(ADRES->CASET);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7a5b      	ldrb	r3, [r3, #9]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff93 	bl	80010ac <LCD_komenda>
	LCD_dana(ADRES->ZERO);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ffa6 	bl	80010dc <LCD_dana>
	LCD_dana(ADRES->X0_SET);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7b1b      	ldrb	r3, [r3, #12]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ffa1 	bl	80010dc <LCD_dana>
	LCD_dana(ADRES->ZERO);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff9c 	bl	80010dc <LCD_dana>
	LCD_dana(ADRES->X_END_SET);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7b9b      	ldrb	r3, [r3, #14]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff97 	bl	80010dc <LCD_dana>
	LCD_komenda(ADRES->RASET);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7a9b      	ldrb	r3, [r3, #10]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff7a 	bl	80010ac <LCD_komenda>
	LCD_dana(ADRES->ZERO);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff8d 	bl	80010dc <LCD_dana>
	LCD_dana(ADRES->Y0_SET);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7b5b      	ldrb	r3, [r3, #13]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff88 	bl	80010dc <LCD_dana>
	LCD_dana(ADRES->ZERO);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff83 	bl	80010dc <LCD_dana>
	LCD_dana(ADRES->Y_END_SET);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7bdb      	ldrb	r3, [r3, #15]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff7e 	bl	80010dc <LCD_dana>
	LCD_komenda(ADRES->MEMWRITE);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	7adb      	ldrb	r3, [r3, #11]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff61 	bl	80010ac <LCD_komenda>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <LCD_printM>:
void LCD_printM(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
 8001200:	460b      	mov	r3, r1
 8001202:	71bb      	strb	r3, [r7, #6]
 8001204:	4613      	mov	r3, r2
 8001206:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	2200      	movs	r2, #0
 8001214:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	223f      	movs	r2, #63	@ 0x3f
 800121a:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	221f      	movs	r2, #31
 8001220:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	2200      	movs	r2, #0
 8001226:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	2200      	movs	r2, #0
 800122c:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	7cda      	ldrb	r2, [r3, #19]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	7c1b      	ldrb	r3, [r3, #16]
 8001236:	4053      	eors	r3, r2
 8001238:	b2db      	uxtb	r3, r3
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	b25a      	sxtb	r2, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	7c5b      	ldrb	r3, [r3, #17]
 8001242:	b25b      	sxtb	r3, r3
 8001244:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001248:	b25b      	sxtb	r3, r3
 800124a:	4053      	eors	r3, r2
 800124c:	b25b      	sxtb	r3, r3
 800124e:	b2da      	uxtb	r2, r3
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	7d1b      	ldrb	r3, [r3, #20]
 8001258:	461a      	mov	r2, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	7c5b      	ldrb	r3, [r3, #17]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	4053      	eors	r3, r2
 8001264:	015b      	lsls	r3, r3, #5
 8001266:	b25a      	sxtb	r2, r3
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	7c9b      	ldrb	r3, [r3, #18]
 800126c:	b25b      	sxtb	r3, r3
 800126e:	4053      	eors	r3, r2
 8001270:	b25b      	sxtb	r3, r3
 8001272:	b2da      	uxtb	r2, r3
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	7cdb      	ldrb	r3, [r3, #19]
 800127c:	733b      	strb	r3, [r7, #12]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	7d1b      	ldrb	r3, [r3, #20]
 8001282:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8001288:	2300      	movs	r3, #0
 800128a:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	4053      	eors	r3, r2
 8001292:	b2db      	uxtb	r3, r3
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	b25a      	sxtb	r2, r3
 8001298:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800129c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80012a0:	b25b      	sxtb	r3, r3
 80012a2:	4053      	eors	r3, r2
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 80012a8:	7bba      	ldrb	r2, [r7, #14]
 80012aa:	79bb      	ldrb	r3, [r7, #6]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	4053      	eors	r3, r2
 80012b2:	015b      	lsls	r3, r3, #5
 80012b4:	b25a      	sxtb	r2, r3
 80012b6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012ba:	4053      	eors	r3, r2
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	723b      	strb	r3, [r7, #8]
 80012c4:	7bbb      	ldrb	r3, [r7, #14]
 80012c6:	727b      	strb	r3, [r7, #9]
	DC_ON();
 80012c8:	f7ff fec2 	bl	8001050 <DC_ON>
	CS_OFF();
 80012cc:	f7ff feb5 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<=ADRES->Y_END_SET;wiersz++)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	7b5b      	ldrb	r3, [r3, #13]
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	e0c5      	b.n	8001464 <LCD_printM+0x270>
	{
		for(kolumna=ADRES->X0_SET;kolumna<=ADRES->X_END_SET;kolumna++)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	7b1b      	ldrb	r3, [r3, #12]
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	e0b7      	b.n	8001450 <LCD_printM+0x25c>
		{
			if(kolumna==(ADRES->X0_SET+2) && wiersz>=(ADRES->Y0_SET+1) && wiersz<(ADRES->Y_END_SET+1))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	7b1b      	ldrb	r3, [r3, #12]
 80012e4:	3302      	adds	r3, #2
 80012e6:	461a      	mov	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d116      	bne.n	800131c <LCD_printM+0x128>
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	7b5b      	ldrb	r3, [r3, #13]
 80012f2:	3301      	adds	r3, #1
 80012f4:	461a      	mov	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d30f      	bcc.n	800131c <LCD_printM+0x128>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	7bdb      	ldrb	r3, [r3, #15]
 8001300:	3301      	adds	r3, #1
 8001302:	461a      	mov	r2, r3
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4293      	cmp	r3, r2
 8001308:	d208      	bcs.n	800131c <LCD_printM+0x128>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800130a:	f107 010c 	add.w	r1, r7, #12
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	2202      	movs	r2, #2
 8001314:	485a      	ldr	r0, [pc, #360]	@ (8001480 <LCD_printM+0x28c>)
 8001316:	f017 f9f2 	bl	80186fe <HAL_SPI_Transmit>
 800131a:	e096      	b.n	800144a <LCD_printM+0x256>
			}
			else if(kolumna==(ADRES->X0_SET+10) && wiersz>=(ADRES->Y0_SET+1) && wiersz<(ADRES->Y_END_SET+1))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	7b1b      	ldrb	r3, [r3, #12]
 8001320:	330a      	adds	r3, #10
 8001322:	461a      	mov	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	4293      	cmp	r3, r2
 8001328:	d116      	bne.n	8001358 <LCD_printM+0x164>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	7b5b      	ldrb	r3, [r3, #13]
 800132e:	3301      	adds	r3, #1
 8001330:	461a      	mov	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4293      	cmp	r3, r2
 8001336:	d30f      	bcc.n	8001358 <LCD_printM+0x164>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	7bdb      	ldrb	r3, [r3, #15]
 800133c:	3301      	adds	r3, #1
 800133e:	461a      	mov	r2, r3
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4293      	cmp	r3, r2
 8001344:	d208      	bcs.n	8001358 <LCD_printM+0x164>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001346:	f107 010c 	add.w	r1, r7, #12
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	2202      	movs	r2, #2
 8001350:	484b      	ldr	r0, [pc, #300]	@ (8001480 <LCD_printM+0x28c>)
 8001352:	f017 f9d4 	bl	80186fe <HAL_SPI_Transmit>
 8001356:	e078      	b.n	800144a <LCD_printM+0x256>
			}
			else if(wiersz==(ADRES->Y0_SET+2) && (kolumna==(ADRES->X0_SET+3) || kolumna==(ADRES->X0_SET+9)))
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	7b5b      	ldrb	r3, [r3, #13]
 800135c:	3302      	adds	r3, #2
 800135e:	461a      	mov	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4293      	cmp	r3, r2
 8001364:	d116      	bne.n	8001394 <LCD_printM+0x1a0>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	7b1b      	ldrb	r3, [r3, #12]
 800136a:	3303      	adds	r3, #3
 800136c:	461a      	mov	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	4293      	cmp	r3, r2
 8001372:	d006      	beq.n	8001382 <LCD_printM+0x18e>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	7b1b      	ldrb	r3, [r3, #12]
 8001378:	3309      	adds	r3, #9
 800137a:	461a      	mov	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	4293      	cmp	r3, r2
 8001380:	d108      	bne.n	8001394 <LCD_printM+0x1a0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001382:	f107 010c 	add.w	r1, r7, #12
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	2202      	movs	r2, #2
 800138c:	483c      	ldr	r0, [pc, #240]	@ (8001480 <LCD_printM+0x28c>)
 800138e:	f017 f9b6 	bl	80186fe <HAL_SPI_Transmit>
 8001392:	e05a      	b.n	800144a <LCD_printM+0x256>
			}
			else if(wiersz==(ADRES->Y0_SET+3) && (kolumna==(ADRES->X0_SET+4) || kolumna==(ADRES->X0_SET+8)))
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	7b5b      	ldrb	r3, [r3, #13]
 8001398:	3303      	adds	r3, #3
 800139a:	461a      	mov	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4293      	cmp	r3, r2
 80013a0:	d116      	bne.n	80013d0 <LCD_printM+0x1dc>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	7b1b      	ldrb	r3, [r3, #12]
 80013a6:	3304      	adds	r3, #4
 80013a8:	461a      	mov	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d006      	beq.n	80013be <LCD_printM+0x1ca>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	7b1b      	ldrb	r3, [r3, #12]
 80013b4:	3308      	adds	r3, #8
 80013b6:	461a      	mov	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d108      	bne.n	80013d0 <LCD_printM+0x1dc>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80013be:	f107 010c 	add.w	r1, r7, #12
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	2202      	movs	r2, #2
 80013c8:	482d      	ldr	r0, [pc, #180]	@ (8001480 <LCD_printM+0x28c>)
 80013ca:	f017 f998 	bl	80186fe <HAL_SPI_Transmit>
 80013ce:	e03c      	b.n	800144a <LCD_printM+0x256>
			}
			else if(wiersz==(ADRES->Y0_SET+4) && (kolumna==(ADRES->X0_SET+5) || kolumna==(ADRES->X0_SET+7)))
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	7b5b      	ldrb	r3, [r3, #13]
 80013d4:	3304      	adds	r3, #4
 80013d6:	461a      	mov	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4293      	cmp	r3, r2
 80013dc:	d116      	bne.n	800140c <LCD_printM+0x218>
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	7b1b      	ldrb	r3, [r3, #12]
 80013e2:	3305      	adds	r3, #5
 80013e4:	461a      	mov	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d006      	beq.n	80013fa <LCD_printM+0x206>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	7b1b      	ldrb	r3, [r3, #12]
 80013f0:	3307      	adds	r3, #7
 80013f2:	461a      	mov	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d108      	bne.n	800140c <LCD_printM+0x218>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80013fa:	f107 010c 	add.w	r1, r7, #12
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	2202      	movs	r2, #2
 8001404:	481e      	ldr	r0, [pc, #120]	@ (8001480 <LCD_printM+0x28c>)
 8001406:	f017 f97a 	bl	80186fe <HAL_SPI_Transmit>
 800140a:	e01e      	b.n	800144a <LCD_printM+0x256>
			}
			else if(wiersz==(ADRES->Y0_SET+5) && kolumna==(ADRES->X0_SET+6))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	7b5b      	ldrb	r3, [r3, #13]
 8001410:	3305      	adds	r3, #5
 8001412:	461a      	mov	r2, r3
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4293      	cmp	r3, r2
 8001418:	d10f      	bne.n	800143a <LCD_printM+0x246>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	7b1b      	ldrb	r3, [r3, #12]
 800141e:	3306      	adds	r3, #6
 8001420:	461a      	mov	r2, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	4293      	cmp	r3, r2
 8001426:	d108      	bne.n	800143a <LCD_printM+0x246>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001428:	f107 010c 	add.w	r1, r7, #12
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	2202      	movs	r2, #2
 8001432:	4813      	ldr	r0, [pc, #76]	@ (8001480 <LCD_printM+0x28c>)
 8001434:	f017 f963 	bl	80186fe <HAL_SPI_Transmit>
 8001438:	e007      	b.n	800144a <LCD_printM+0x256>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800143a:	f107 0108 	add.w	r1, r7, #8
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	2202      	movs	r2, #2
 8001444:	480e      	ldr	r0, [pc, #56]	@ (8001480 <LCD_printM+0x28c>)
 8001446:	f017 f95a 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<=ADRES->X_END_SET;kolumna++)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3301      	adds	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	7b9b      	ldrb	r3, [r3, #14]
 8001454:	461a      	mov	r2, r3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	4293      	cmp	r3, r2
 800145a:	f67f af41 	bls.w	80012e0 <LCD_printM+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<=ADRES->Y_END_SET;wiersz++)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	3301      	adds	r3, #1
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	7bdb      	ldrb	r3, [r3, #15]
 8001468:	461a      	mov	r2, r3
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4293      	cmp	r3, r2
 800146e:	f67f af33 	bls.w	80012d8 <LCD_printM+0xe4>
			}
		}
	}
	CS_ON();
 8001472:	f7ff fdd7 	bl	8001024 <CS_ON>

}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200004a4 	.word	0x200004a4

08001484 <LCD_printE>:

void LCD_printE(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
 8001490:	460b      	mov	r3, r1
 8001492:	71bb      	strb	r3, [r7, #6]
 8001494:	4613      	mov	r3, r2
 8001496:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2200      	movs	r2, #0
 80014a4:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	223f      	movs	r2, #63	@ 0x3f
 80014aa:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	221f      	movs	r2, #31
 80014b0:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2200      	movs	r2, #0
 80014b6:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2200      	movs	r2, #0
 80014bc:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	7cda      	ldrb	r2, [r3, #19]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	7c1b      	ldrb	r3, [r3, #16]
 80014c6:	4053      	eors	r3, r2
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	b25a      	sxtb	r2, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	7c5b      	ldrb	r3, [r3, #17]
 80014d2:	b25b      	sxtb	r3, r3
 80014d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	4053      	eors	r3, r2
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	7d1b      	ldrb	r3, [r3, #20]
 80014e8:	461a      	mov	r2, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	7c5b      	ldrb	r3, [r3, #17]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	4053      	eors	r3, r2
 80014f4:	015b      	lsls	r3, r3, #5
 80014f6:	b25a      	sxtb	r2, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	7c9b      	ldrb	r3, [r3, #18]
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	4053      	eors	r3, r2
 8001500:	b25b      	sxtb	r3, r3
 8001502:	b2da      	uxtb	r2, r3
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	7cdb      	ldrb	r3, [r3, #19]
 800150c:	733b      	strb	r3, [r7, #12]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	7d1b      	ldrb	r3, [r3, #20]
 8001512:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8001518:	2300      	movs	r3, #0
 800151a:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	4053      	eors	r3, r2
 8001522:	b2db      	uxtb	r3, r3
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	b25a      	sxtb	r2, r3
 8001528:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800152c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001530:	b25b      	sxtb	r3, r3
 8001532:	4053      	eors	r3, r2
 8001534:	b25b      	sxtb	r3, r3
 8001536:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8001538:	7bba      	ldrb	r2, [r7, #14]
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	4053      	eors	r3, r2
 8001542:	015b      	lsls	r3, r3, #5
 8001544:	b25a      	sxtb	r2, r3
 8001546:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800154a:	4053      	eors	r3, r2
 800154c:	b25b      	sxtb	r3, r3
 800154e:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	723b      	strb	r3, [r7, #8]
 8001554:	7bbb      	ldrb	r3, [r7, #14]
 8001556:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8001558:	f7ff fd7a 	bl	8001050 <DC_ON>
	CS_OFF();
 800155c:	f7ff fd6d 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<=ADRES->Y_END_SET;wiersz++)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	7b5b      	ldrb	r3, [r3, #13]
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	e090      	b.n	800168a <LCD_printE+0x206>
	{
		for(kolumna=ADRES->X0_SET;kolumna<=ADRES->X_END_SET;kolumna++)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	7b1b      	ldrb	r3, [r3, #12]
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e082      	b.n	8001676 <LCD_printE+0x1f2>
		{
			if(kolumna==(ADRES->X0_SET+1) && wiersz>=(ADRES->Y0_SET+1) && wiersz<(ADRES->Y_END_SET+1))
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	7b1b      	ldrb	r3, [r3, #12]
 8001574:	3301      	adds	r3, #1
 8001576:	461a      	mov	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	4293      	cmp	r3, r2
 800157c:	d116      	bne.n	80015ac <LCD_printE+0x128>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	7b5b      	ldrb	r3, [r3, #13]
 8001582:	3301      	adds	r3, #1
 8001584:	461a      	mov	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4293      	cmp	r3, r2
 800158a:	d30f      	bcc.n	80015ac <LCD_printE+0x128>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	7bdb      	ldrb	r3, [r3, #15]
 8001590:	3301      	adds	r3, #1
 8001592:	461a      	mov	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4293      	cmp	r3, r2
 8001598:	d208      	bcs.n	80015ac <LCD_printE+0x128>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800159a:	f107 010c 	add.w	r1, r7, #12
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	2202      	movs	r2, #2
 80015a4:	483f      	ldr	r0, [pc, #252]	@ (80016a4 <LCD_printE+0x220>)
 80015a6:	f017 f8aa 	bl	80186fe <HAL_SPI_Transmit>
 80015aa:	e061      	b.n	8001670 <LCD_printE+0x1ec>
			}
			else if(kolumna>=(ADRES->X0_SET+1) && kolumna<(ADRES->X_END_SET+1) && wiersz==(ADRES->Y0_SET+8))
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	7b1b      	ldrb	r3, [r3, #12]
 80015b0:	3301      	adds	r3, #1
 80015b2:	461a      	mov	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d316      	bcc.n	80015e8 <LCD_printE+0x164>
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	7b9b      	ldrb	r3, [r3, #14]
 80015be:	3301      	adds	r3, #1
 80015c0:	461a      	mov	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d20f      	bcs.n	80015e8 <LCD_printE+0x164>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	7b5b      	ldrb	r3, [r3, #13]
 80015cc:	3308      	adds	r3, #8
 80015ce:	461a      	mov	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d108      	bne.n	80015e8 <LCD_printE+0x164>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80015d6:	f107 010c 	add.w	r1, r7, #12
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	2202      	movs	r2, #2
 80015e0:	4830      	ldr	r0, [pc, #192]	@ (80016a4 <LCD_printE+0x220>)
 80015e2:	f017 f88c 	bl	80186fe <HAL_SPI_Transmit>
 80015e6:	e043      	b.n	8001670 <LCD_printE+0x1ec>
			}
			else if(kolumna>=(ADRES->X0_SET+1) && kolumna<(ADRES->X_END_SET+1) && wiersz==(ADRES->Y0_SET+1))
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	7b1b      	ldrb	r3, [r3, #12]
 80015ec:	3301      	adds	r3, #1
 80015ee:	461a      	mov	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d316      	bcc.n	8001624 <LCD_printE+0x1a0>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	7b9b      	ldrb	r3, [r3, #14]
 80015fa:	3301      	adds	r3, #1
 80015fc:	461a      	mov	r2, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	4293      	cmp	r3, r2
 8001602:	d20f      	bcs.n	8001624 <LCD_printE+0x1a0>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	7b5b      	ldrb	r3, [r3, #13]
 8001608:	3301      	adds	r3, #1
 800160a:	461a      	mov	r2, r3
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4293      	cmp	r3, r2
 8001610:	d108      	bne.n	8001624 <LCD_printE+0x1a0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001612:	f107 010c 	add.w	r1, r7, #12
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	2202      	movs	r2, #2
 800161c:	4821      	ldr	r0, [pc, #132]	@ (80016a4 <LCD_printE+0x220>)
 800161e:	f017 f86e 	bl	80186fe <HAL_SPI_Transmit>
 8001622:	e025      	b.n	8001670 <LCD_printE+0x1ec>
			}
			else if(kolumna>=(ADRES->X0_SET+1) && kolumna<(ADRES->X_END_SET+1) && wiersz==(ADRES->Y_END_SET-1))
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	7b1b      	ldrb	r3, [r3, #12]
 8001628:	3301      	adds	r3, #1
 800162a:	461a      	mov	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	4293      	cmp	r3, r2
 8001630:	d316      	bcc.n	8001660 <LCD_printE+0x1dc>
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	7b9b      	ldrb	r3, [r3, #14]
 8001636:	3301      	adds	r3, #1
 8001638:	461a      	mov	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	4293      	cmp	r3, r2
 800163e:	d20f      	bcs.n	8001660 <LCD_printE+0x1dc>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	7bdb      	ldrb	r3, [r3, #15]
 8001644:	3b01      	subs	r3, #1
 8001646:	461a      	mov	r2, r3
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4293      	cmp	r3, r2
 800164c:	d108      	bne.n	8001660 <LCD_printE+0x1dc>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800164e:	f107 010c 	add.w	r1, r7, #12
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	2202      	movs	r2, #2
 8001658:	4812      	ldr	r0, [pc, #72]	@ (80016a4 <LCD_printE+0x220>)
 800165a:	f017 f850 	bl	80186fe <HAL_SPI_Transmit>
 800165e:	e007      	b.n	8001670 <LCD_printE+0x1ec>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8001660:	f107 0108 	add.w	r1, r7, #8
 8001664:	f04f 33ff 	mov.w	r3, #4294967295
 8001668:	2202      	movs	r2, #2
 800166a:	480e      	ldr	r0, [pc, #56]	@ (80016a4 <LCD_printE+0x220>)
 800166c:	f017 f847 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<=ADRES->X_END_SET;kolumna++)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	3301      	adds	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	7b9b      	ldrb	r3, [r3, #14]
 800167a:	461a      	mov	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	4293      	cmp	r3, r2
 8001680:	f67f af76 	bls.w	8001570 <LCD_printE+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<=ADRES->Y_END_SET;wiersz++)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	3301      	adds	r3, #1
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	7bdb      	ldrb	r3, [r3, #15]
 800168e:	461a      	mov	r2, r3
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4293      	cmp	r3, r2
 8001694:	f67f af68 	bls.w	8001568 <LCD_printE+0xe4>
			}
		}
	}
	CS_ON();
 8001698:	f7ff fcc4 	bl	8001024 <CS_ON>

}
 800169c:	bf00      	nop
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200004a4 	.word	0x200004a4

080016a8 <LCD_printN>:

void LCD_printN(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]
 80016b4:	460b      	mov	r3, r1
 80016b6:	71bb      	strb	r3, [r7, #6]
 80016b8:	4613      	mov	r3, r2
 80016ba:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2200      	movs	r2, #0
 80016c8:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	223f      	movs	r2, #63	@ 0x3f
 80016ce:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	221f      	movs	r2, #31
 80016d4:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	2200      	movs	r2, #0
 80016da:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	2200      	movs	r2, #0
 80016e0:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	7cda      	ldrb	r2, [r3, #19]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	7c1b      	ldrb	r3, [r3, #16]
 80016ea:	4053      	eors	r3, r2
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	b25a      	sxtb	r2, r3
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	7c5b      	ldrb	r3, [r3, #17]
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	4053      	eors	r3, r2
 8001700:	b25b      	sxtb	r3, r3
 8001702:	b2da      	uxtb	r2, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	7d1b      	ldrb	r3, [r3, #20]
 800170c:	461a      	mov	r2, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	7c5b      	ldrb	r3, [r3, #17]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	4053      	eors	r3, r2
 8001718:	015b      	lsls	r3, r3, #5
 800171a:	b25a      	sxtb	r2, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	7c9b      	ldrb	r3, [r3, #18]
 8001720:	b25b      	sxtb	r3, r3
 8001722:	4053      	eors	r3, r2
 8001724:	b25b      	sxtb	r3, r3
 8001726:	b2da      	uxtb	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	7cdb      	ldrb	r3, [r3, #19]
 8001730:	733b      	strb	r3, [r7, #12]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	7d1b      	ldrb	r3, [r3, #20]
 8001736:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8001738:	2300      	movs	r3, #0
 800173a:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 800173c:	2300      	movs	r3, #0
 800173e:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8001740:	7bfa      	ldrb	r2, [r7, #15]
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	4053      	eors	r3, r2
 8001746:	b2db      	uxtb	r3, r3
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	b25a      	sxtb	r2, r3
 800174c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001750:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001754:	b25b      	sxtb	r3, r3
 8001756:	4053      	eors	r3, r2
 8001758:	b25b      	sxtb	r3, r3
 800175a:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 800175c:	7bba      	ldrb	r2, [r7, #14]
 800175e:	79bb      	ldrb	r3, [r7, #6]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	4053      	eors	r3, r2
 8001766:	015b      	lsls	r3, r3, #5
 8001768:	b25a      	sxtb	r2, r3
 800176a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800176e:	4053      	eors	r3, r2
 8001770:	b25b      	sxtb	r3, r3
 8001772:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	723b      	strb	r3, [r7, #8]
 8001778:	7bbb      	ldrb	r3, [r7, #14]
 800177a:	727b      	strb	r3, [r7, #9]
	DC_ON();
 800177c:	f7ff fc68 	bl	8001050 <DC_ON>
	CS_OFF();
 8001780:	f7ff fc5b 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<=ADRES->Y_END_SET;wiersz++)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	7b5b      	ldrb	r3, [r3, #13]
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	e0f5      	b.n	8001978 <LCD_printN+0x2d0>
	{
		for(kolumna=ADRES->X0_SET;kolumna<=ADRES->X_END_SET;kolumna++)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	7b1b      	ldrb	r3, [r3, #12]
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e0e7      	b.n	8001964 <LCD_printN+0x2bc>
		{
			if(kolumna==(ADRES->X0_SET+1) && wiersz>=(ADRES->Y0_SET+1) && wiersz<(ADRES->Y0_SET+14))
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	7b1b      	ldrb	r3, [r3, #12]
 8001798:	3301      	adds	r3, #1
 800179a:	461a      	mov	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	4293      	cmp	r3, r2
 80017a0:	d116      	bne.n	80017d0 <LCD_printN+0x128>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	7b5b      	ldrb	r3, [r3, #13]
 80017a6:	3301      	adds	r3, #1
 80017a8:	461a      	mov	r2, r3
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d30f      	bcc.n	80017d0 <LCD_printN+0x128>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	7b5b      	ldrb	r3, [r3, #13]
 80017b4:	330e      	adds	r3, #14
 80017b6:	461a      	mov	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d208      	bcs.n	80017d0 <LCD_printN+0x128>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80017be:	f107 010c 	add.w	r1, r7, #12
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	2202      	movs	r2, #2
 80017c8:	4872      	ldr	r0, [pc, #456]	@ (8001994 <LCD_printN+0x2ec>)
 80017ca:	f016 ff98 	bl	80186fe <HAL_SPI_Transmit>
 80017ce:	e0c6      	b.n	800195e <LCD_printN+0x2b6>
			}
			else if(kolumna==(ADRES->X0_SET+10) && wiersz>=(ADRES->Y0_SET+1) && wiersz<(ADRES->Y0_SET+14))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	7b1b      	ldrb	r3, [r3, #12]
 80017d4:	330a      	adds	r3, #10
 80017d6:	461a      	mov	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	4293      	cmp	r3, r2
 80017dc:	d116      	bne.n	800180c <LCD_printN+0x164>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	7b5b      	ldrb	r3, [r3, #13]
 80017e2:	3301      	adds	r3, #1
 80017e4:	461a      	mov	r2, r3
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d30f      	bcc.n	800180c <LCD_printN+0x164>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	7b5b      	ldrb	r3, [r3, #13]
 80017f0:	330e      	adds	r3, #14
 80017f2:	461a      	mov	r2, r3
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d208      	bcs.n	800180c <LCD_printN+0x164>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80017fa:	f107 010c 	add.w	r1, r7, #12
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	2202      	movs	r2, #2
 8001804:	4863      	ldr	r0, [pc, #396]	@ (8001994 <LCD_printN+0x2ec>)
 8001806:	f016 ff7a 	bl	80186fe <HAL_SPI_Transmit>
 800180a:	e0a8      	b.n	800195e <LCD_printN+0x2b6>
			}
			else if(kolumna==(ADRES->X0_SET+2) && wiersz==(ADRES->Y0_SET+2))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	7b1b      	ldrb	r3, [r3, #12]
 8001810:	3302      	adds	r3, #2
 8001812:	461a      	mov	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	4293      	cmp	r3, r2
 8001818:	d10f      	bne.n	800183a <LCD_printN+0x192>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	7b5b      	ldrb	r3, [r3, #13]
 800181e:	3302      	adds	r3, #2
 8001820:	461a      	mov	r2, r3
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4293      	cmp	r3, r2
 8001826:	d108      	bne.n	800183a <LCD_printN+0x192>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001828:	f107 010c 	add.w	r1, r7, #12
 800182c:	f04f 33ff 	mov.w	r3, #4294967295
 8001830:	2202      	movs	r2, #2
 8001832:	4858      	ldr	r0, [pc, #352]	@ (8001994 <LCD_printN+0x2ec>)
 8001834:	f016 ff63 	bl	80186fe <HAL_SPI_Transmit>
 8001838:	e091      	b.n	800195e <LCD_printN+0x2b6>
			}
			else if(kolumna==(ADRES->X0_SET+3) && wiersz==(ADRES->Y0_SET+4))
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	7b1b      	ldrb	r3, [r3, #12]
 800183e:	3303      	adds	r3, #3
 8001840:	461a      	mov	r2, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	4293      	cmp	r3, r2
 8001846:	d10f      	bne.n	8001868 <LCD_printN+0x1c0>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	7b5b      	ldrb	r3, [r3, #13]
 800184c:	3304      	adds	r3, #4
 800184e:	461a      	mov	r2, r3
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4293      	cmp	r3, r2
 8001854:	d108      	bne.n	8001868 <LCD_printN+0x1c0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001856:	f107 010c 	add.w	r1, r7, #12
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	2202      	movs	r2, #2
 8001860:	484c      	ldr	r0, [pc, #304]	@ (8001994 <LCD_printN+0x2ec>)
 8001862:	f016 ff4c 	bl	80186fe <HAL_SPI_Transmit>
 8001866:	e07a      	b.n	800195e <LCD_printN+0x2b6>
			}
			else if(kolumna==(ADRES->X0_SET+4) && wiersz==(ADRES->Y0_SET+6))
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	7b1b      	ldrb	r3, [r3, #12]
 800186c:	3304      	adds	r3, #4
 800186e:	461a      	mov	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	4293      	cmp	r3, r2
 8001874:	d10f      	bne.n	8001896 <LCD_printN+0x1ee>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	7b5b      	ldrb	r3, [r3, #13]
 800187a:	3306      	adds	r3, #6
 800187c:	461a      	mov	r2, r3
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4293      	cmp	r3, r2
 8001882:	d108      	bne.n	8001896 <LCD_printN+0x1ee>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001884:	f107 010c 	add.w	r1, r7, #12
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	2202      	movs	r2, #2
 800188e:	4841      	ldr	r0, [pc, #260]	@ (8001994 <LCD_printN+0x2ec>)
 8001890:	f016 ff35 	bl	80186fe <HAL_SPI_Transmit>
 8001894:	e063      	b.n	800195e <LCD_printN+0x2b6>
			}
			else if(kolumna==(ADRES->X0_SET+5) && wiersz==(ADRES->Y0_SET+8))
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	7b1b      	ldrb	r3, [r3, #12]
 800189a:	3305      	adds	r3, #5
 800189c:	461a      	mov	r2, r3
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d10f      	bne.n	80018c4 <LCD_printN+0x21c>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	7b5b      	ldrb	r3, [r3, #13]
 80018a8:	3308      	adds	r3, #8
 80018aa:	461a      	mov	r2, r3
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d108      	bne.n	80018c4 <LCD_printN+0x21c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80018b2:	f107 010c 	add.w	r1, r7, #12
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	2202      	movs	r2, #2
 80018bc:	4835      	ldr	r0, [pc, #212]	@ (8001994 <LCD_printN+0x2ec>)
 80018be:	f016 ff1e 	bl	80186fe <HAL_SPI_Transmit>
 80018c2:	e04c      	b.n	800195e <LCD_printN+0x2b6>
			}
			else if(kolumna==(ADRES->X0_SET+6) && wiersz==(ADRES->Y0_SET+10))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	7b1b      	ldrb	r3, [r3, #12]
 80018c8:	3306      	adds	r3, #6
 80018ca:	461a      	mov	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d10f      	bne.n	80018f2 <LCD_printN+0x24a>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	7b5b      	ldrb	r3, [r3, #13]
 80018d6:	330a      	adds	r3, #10
 80018d8:	461a      	mov	r2, r3
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4293      	cmp	r3, r2
 80018de:	d108      	bne.n	80018f2 <LCD_printN+0x24a>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80018e0:	f107 010c 	add.w	r1, r7, #12
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295
 80018e8:	2202      	movs	r2, #2
 80018ea:	482a      	ldr	r0, [pc, #168]	@ (8001994 <LCD_printN+0x2ec>)
 80018ec:	f016 ff07 	bl	80186fe <HAL_SPI_Transmit>
 80018f0:	e035      	b.n	800195e <LCD_printN+0x2b6>
			}
			else if(kolumna==(ADRES->X0_SET+7) && wiersz==(ADRES->Y0_SET+12))
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	7b1b      	ldrb	r3, [r3, #12]
 80018f6:	3307      	adds	r3, #7
 80018f8:	461a      	mov	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d10f      	bne.n	8001920 <LCD_printN+0x278>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	7b5b      	ldrb	r3, [r3, #13]
 8001904:	330c      	adds	r3, #12
 8001906:	461a      	mov	r2, r3
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4293      	cmp	r3, r2
 800190c:	d108      	bne.n	8001920 <LCD_printN+0x278>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800190e:	f107 010c 	add.w	r1, r7, #12
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	2202      	movs	r2, #2
 8001918:	481e      	ldr	r0, [pc, #120]	@ (8001994 <LCD_printN+0x2ec>)
 800191a:	f016 fef0 	bl	80186fe <HAL_SPI_Transmit>
 800191e:	e01e      	b.n	800195e <LCD_printN+0x2b6>
			}
			else if(kolumna==(ADRES->X0_SET+8) && wiersz==(ADRES->Y0_SET+14))
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	7b1b      	ldrb	r3, [r3, #12]
 8001924:	3308      	adds	r3, #8
 8001926:	461a      	mov	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	4293      	cmp	r3, r2
 800192c:	d10f      	bne.n	800194e <LCD_printN+0x2a6>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	7b5b      	ldrb	r3, [r3, #13]
 8001932:	330e      	adds	r3, #14
 8001934:	461a      	mov	r2, r3
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4293      	cmp	r3, r2
 800193a:	d108      	bne.n	800194e <LCD_printN+0x2a6>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800193c:	f107 010c 	add.w	r1, r7, #12
 8001940:	f04f 33ff 	mov.w	r3, #4294967295
 8001944:	2202      	movs	r2, #2
 8001946:	4813      	ldr	r0, [pc, #76]	@ (8001994 <LCD_printN+0x2ec>)
 8001948:	f016 fed9 	bl	80186fe <HAL_SPI_Transmit>
 800194c:	e007      	b.n	800195e <LCD_printN+0x2b6>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800194e:	f107 0108 	add.w	r1, r7, #8
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	2202      	movs	r2, #2
 8001958:	480e      	ldr	r0, [pc, #56]	@ (8001994 <LCD_printN+0x2ec>)
 800195a:	f016 fed0 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<=ADRES->X_END_SET;kolumna++)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	7b9b      	ldrb	r3, [r3, #14]
 8001968:	461a      	mov	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	4293      	cmp	r3, r2
 800196e:	f67f af11 	bls.w	8001794 <LCD_printN+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<=ADRES->Y_END_SET;wiersz++)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	3301      	adds	r3, #1
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	7bdb      	ldrb	r3, [r3, #15]
 800197c:	461a      	mov	r2, r3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4293      	cmp	r3, r2
 8001982:	f67f af03 	bls.w	800178c <LCD_printN+0xe4>
			}

		}
	}
	CS_ON();
 8001986:	f7ff fb4d 	bl	8001024 <CS_ON>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200004a4 	.word	0x200004a4

08001998 <LCD_printU>:

void LCD_printU(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
 80019a4:	460b      	mov	r3, r1
 80019a6:	71bb      	strb	r3, [r7, #6]
 80019a8:	4613      	mov	r3, r2
 80019aa:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	2200      	movs	r2, #0
 80019b8:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	223f      	movs	r2, #63	@ 0x3f
 80019be:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	221f      	movs	r2, #31
 80019c4:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2200      	movs	r2, #0
 80019ca:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2200      	movs	r2, #0
 80019d0:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	7cda      	ldrb	r2, [r3, #19]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	7c1b      	ldrb	r3, [r3, #16]
 80019da:	4053      	eors	r3, r2
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	b25a      	sxtb	r2, r3
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	7c5b      	ldrb	r3, [r3, #17]
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019ec:	b25b      	sxtb	r3, r3
 80019ee:	4053      	eors	r3, r2
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	7d1b      	ldrb	r3, [r3, #20]
 80019fc:	461a      	mov	r2, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	7c5b      	ldrb	r3, [r3, #17]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	4053      	eors	r3, r2
 8001a08:	015b      	lsls	r3, r3, #5
 8001a0a:	b25a      	sxtb	r2, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	7c9b      	ldrb	r3, [r3, #18]
 8001a10:	b25b      	sxtb	r3, r3
 8001a12:	4053      	eors	r3, r2
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	7cdb      	ldrb	r3, [r3, #19]
 8001a20:	733b      	strb	r3, [r7, #12]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	7d1b      	ldrb	r3, [r3, #20]
 8001a26:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8001a30:	7bfa      	ldrb	r2, [r7, #15]
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	4053      	eors	r3, r2
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	b25a      	sxtb	r2, r3
 8001a3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	4053      	eors	r3, r2
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8001a4c:	7bba      	ldrb	r2, [r7, #14]
 8001a4e:	79bb      	ldrb	r3, [r7, #6]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4053      	eors	r3, r2
 8001a56:	015b      	lsls	r3, r3, #5
 8001a58:	b25a      	sxtb	r2, r3
 8001a5a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a5e:	4053      	eors	r3, r2
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	723b      	strb	r3, [r7, #8]
 8001a68:	7bbb      	ldrb	r3, [r7, #14]
 8001a6a:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8001a6c:	f7ff faf0 	bl	8001050 <DC_ON>
	CS_OFF();
 8001a70:	f7ff fae3 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<=ADRES->Y_END_SET;wiersz++)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	7b5b      	ldrb	r3, [r3, #13]
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	e0ad      	b.n	8001bd8 <LCD_printU+0x240>
	{
		for(kolumna=ADRES->X0_SET;kolumna<=ADRES->X_END_SET;kolumna++)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	7b1b      	ldrb	r3, [r3, #12]
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	e09f      	b.n	8001bc4 <LCD_printU+0x22c>
		{
			if(kolumna==(ADRES->X0_SET+1) && wiersz>=(ADRES->Y0_SET+1) && wiersz<(ADRES->Y_END_SET-3))
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	7b1b      	ldrb	r3, [r3, #12]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d116      	bne.n	8001ac0 <LCD_printU+0x128>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	7b5b      	ldrb	r3, [r3, #13]
 8001a96:	3301      	adds	r3, #1
 8001a98:	461a      	mov	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d30f      	bcc.n	8001ac0 <LCD_printU+0x128>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	7bdb      	ldrb	r3, [r3, #15]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d208      	bcs.n	8001ac0 <LCD_printU+0x128>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001aae:	f107 010c 	add.w	r1, r7, #12
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	484e      	ldr	r0, [pc, #312]	@ (8001bf4 <LCD_printU+0x25c>)
 8001aba:	f016 fe20 	bl	80186fe <HAL_SPI_Transmit>
 8001abe:	e07e      	b.n	8001bbe <LCD_printU+0x226>
			}
			else if(kolumna==(ADRES->X_END_SET) && wiersz>=(ADRES->Y0_SET+1) && wiersz<(ADRES->Y_END_SET-3))
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	7b9b      	ldrb	r3, [r3, #14]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d116      	bne.n	8001afa <LCD_printU+0x162>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	7b5b      	ldrb	r3, [r3, #13]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d30f      	bcc.n	8001afa <LCD_printU+0x162>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	7bdb      	ldrb	r3, [r3, #15]
 8001ade:	3b03      	subs	r3, #3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d208      	bcs.n	8001afa <LCD_printU+0x162>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001ae8:	f107 010c 	add.w	r1, r7, #12
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
 8001af0:	2202      	movs	r2, #2
 8001af2:	4840      	ldr	r0, [pc, #256]	@ (8001bf4 <LCD_printU+0x25c>)
 8001af4:	f016 fe03 	bl	80186fe <HAL_SPI_Transmit>
 8001af8:	e061      	b.n	8001bbe <LCD_printU+0x226>
			}
			else if(kolumna>=(ADRES->X0_SET+3) && kolumna<(ADRES->X_END_SET-3) && wiersz==(ADRES->Y_END_SET-1))
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	7b1b      	ldrb	r3, [r3, #12]
 8001afe:	3303      	adds	r3, #3
 8001b00:	461a      	mov	r2, r3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d316      	bcc.n	8001b36 <LCD_printU+0x19e>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	7b9b      	ldrb	r3, [r3, #14]
 8001b0c:	3b03      	subs	r3, #3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d20f      	bcs.n	8001b36 <LCD_printU+0x19e>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	7bdb      	ldrb	r3, [r3, #15]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d108      	bne.n	8001b36 <LCD_printU+0x19e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001b24:	f107 010c 	add.w	r1, r7, #12
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	4831      	ldr	r0, [pc, #196]	@ (8001bf4 <LCD_printU+0x25c>)
 8001b30:	f016 fde5 	bl	80186fe <HAL_SPI_Transmit>
 8001b34:	e043      	b.n	8001bbe <LCD_printU+0x226>
			}
			else if((kolumna==(ADRES->X0_SET+2) || kolumna==(ADRES->X_END_SET-1)) && wiersz==(ADRES->Y_END_SET-3))
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	7b1b      	ldrb	r3, [r3, #12]
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d006      	beq.n	8001b52 <LCD_printU+0x1ba>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	7b9b      	ldrb	r3, [r3, #14]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d10f      	bne.n	8001b72 <LCD_printU+0x1da>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	7bdb      	ldrb	r3, [r3, #15]
 8001b56:	3b03      	subs	r3, #3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d108      	bne.n	8001b72 <LCD_printU+0x1da>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001b60:	f107 010c 	add.w	r1, r7, #12
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
 8001b68:	2202      	movs	r2, #2
 8001b6a:	4822      	ldr	r0, [pc, #136]	@ (8001bf4 <LCD_printU+0x25c>)
 8001b6c:	f016 fdc7 	bl	80186fe <HAL_SPI_Transmit>
 8001b70:	e025      	b.n	8001bbe <LCD_printU+0x226>
			}
			else if((kolumna==(ADRES->X0_SET+3) || kolumna==(ADRES->X_END_SET-2)) && wiersz==(ADRES->Y_END_SET-2))
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	7b1b      	ldrb	r3, [r3, #12]
 8001b76:	3303      	adds	r3, #3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d006      	beq.n	8001b8e <LCD_printU+0x1f6>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	7b9b      	ldrb	r3, [r3, #14]
 8001b84:	3b02      	subs	r3, #2
 8001b86:	461a      	mov	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d10f      	bne.n	8001bae <LCD_printU+0x216>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	7bdb      	ldrb	r3, [r3, #15]
 8001b92:	3b02      	subs	r3, #2
 8001b94:	461a      	mov	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d108      	bne.n	8001bae <LCD_printU+0x216>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001b9c:	f107 010c 	add.w	r1, r7, #12
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	4813      	ldr	r0, [pc, #76]	@ (8001bf4 <LCD_printU+0x25c>)
 8001ba8:	f016 fda9 	bl	80186fe <HAL_SPI_Transmit>
 8001bac:	e007      	b.n	8001bbe <LCD_printU+0x226>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8001bae:	f107 0108 	add.w	r1, r7, #8
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	480e      	ldr	r0, [pc, #56]	@ (8001bf4 <LCD_printU+0x25c>)
 8001bba:	f016 fda0 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<=ADRES->X_END_SET;kolumna++)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	7b9b      	ldrb	r3, [r3, #14]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	f67f af59 	bls.w	8001a84 <LCD_printU+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<=ADRES->Y_END_SET;wiersz++)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	7bdb      	ldrb	r3, [r3, #15]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4293      	cmp	r3, r2
 8001be2:	f67f af4b 	bls.w	8001a7c <LCD_printU+0xe4>
			}
		}
	}
	CS_ON();
 8001be6:	f7ff fa1d 	bl	8001024 <CS_ON>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200004a4 	.word	0x200004a4

08001bf8 <LCD_printA>:

void LCD_printA(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	4603      	mov	r3, r0
 8001c02:	71fb      	strb	r3, [r7, #7]
 8001c04:	460b      	mov	r3, r1
 8001c06:	71bb      	strb	r3, [r7, #6]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2200      	movs	r2, #0
 8001c18:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	223f      	movs	r2, #63	@ 0x3f
 8001c1e:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	221f      	movs	r2, #31
 8001c24:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	7cda      	ldrb	r2, [r3, #19]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	7c1b      	ldrb	r3, [r3, #16]
 8001c3a:	4053      	eors	r3, r2
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	b25a      	sxtb	r2, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	7c5b      	ldrb	r3, [r3, #17]
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c4c:	b25b      	sxtb	r3, r3
 8001c4e:	4053      	eors	r3, r2
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	7d1b      	ldrb	r3, [r3, #20]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	7c5b      	ldrb	r3, [r3, #17]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	4053      	eors	r3, r2
 8001c68:	015b      	lsls	r3, r3, #5
 8001c6a:	b25a      	sxtb	r2, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	7c9b      	ldrb	r3, [r3, #18]
 8001c70:	b25b      	sxtb	r3, r3
 8001c72:	4053      	eors	r3, r2
 8001c74:	b25b      	sxtb	r3, r3
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	7cdb      	ldrb	r3, [r3, #19]
 8001c80:	733b      	strb	r3, [r7, #12]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	7d1b      	ldrb	r3, [r3, #20]
 8001c86:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	4053      	eors	r3, r2
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	b25a      	sxtb	r2, r3
 8001c9c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ca0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ca4:	b25b      	sxtb	r3, r3
 8001ca6:	4053      	eors	r3, r2
 8001ca8:	b25b      	sxtb	r3, r3
 8001caa:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8001cac:	7bba      	ldrb	r2, [r7, #14]
 8001cae:	79bb      	ldrb	r3, [r7, #6]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4053      	eors	r3, r2
 8001cb6:	015b      	lsls	r3, r3, #5
 8001cb8:	b25a      	sxtb	r2, r3
 8001cba:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001cbe:	4053      	eors	r3, r2
 8001cc0:	b25b      	sxtb	r3, r3
 8001cc2:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	723b      	strb	r3, [r7, #8]
 8001cc8:	7bbb      	ldrb	r3, [r7, #14]
 8001cca:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8001ccc:	f7ff f9c0 	bl	8001050 <DC_ON>
	CS_OFF();
 8001cd0:	f7ff f9b3 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	7b5b      	ldrb	r3, [r3, #13]
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	e0f6      	b.n	8001eca <LCD_printA+0x2d2>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	7b1b      	ldrb	r3, [r3, #12]
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	e0e7      	b.n	8001eb4 <LCD_printA+0x2bc>
		{
			if((kolumna==(ADRES->X0_SET+2) || kolumna==(ADRES->X0_SET+10)) && (wiersz==(ADRES->Y0_SET+13) || wiersz==(ADRES->Y0_SET+14)))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	7b1b      	ldrb	r3, [r3, #12]
 8001ce8:	3302      	adds	r3, #2
 8001cea:	461a      	mov	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d006      	beq.n	8001d00 <LCD_printA+0x108>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	7b1b      	ldrb	r3, [r3, #12]
 8001cf6:	330a      	adds	r3, #10
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d116      	bne.n	8001d2e <LCD_printA+0x136>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	7b5b      	ldrb	r3, [r3, #13]
 8001d04:	330d      	adds	r3, #13
 8001d06:	461a      	mov	r2, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d006      	beq.n	8001d1c <LCD_printA+0x124>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	7b5b      	ldrb	r3, [r3, #13]
 8001d12:	330e      	adds	r3, #14
 8001d14:	461a      	mov	r2, r3
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d108      	bne.n	8001d2e <LCD_printA+0x136>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001d1c:	f107 010c 	add.w	r1, r7, #12
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
 8001d24:	2202      	movs	r2, #2
 8001d26:	486f      	ldr	r0, [pc, #444]	@ (8001ee4 <LCD_printA+0x2ec>)
 8001d28:	f016 fce9 	bl	80186fe <HAL_SPI_Transmit>
 8001d2c:	e0bf      	b.n	8001eae <LCD_printA+0x2b6>
			}
			else if((kolumna==(ADRES->X0_SET+3) || kolumna==(ADRES->X0_SET+9)) && (wiersz==(ADRES->Y0_SET+9) || wiersz==(ADRES->Y0_SET+10)||  wiersz==(ADRES->Y0_SET+11)))
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	7b1b      	ldrb	r3, [r3, #12]
 8001d32:	3303      	adds	r3, #3
 8001d34:	461a      	mov	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d006      	beq.n	8001d4a <LCD_printA+0x152>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	7b1b      	ldrb	r3, [r3, #12]
 8001d40:	3309      	adds	r3, #9
 8001d42:	461a      	mov	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d11d      	bne.n	8001d86 <LCD_printA+0x18e>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	7b5b      	ldrb	r3, [r3, #13]
 8001d4e:	3309      	adds	r3, #9
 8001d50:	461a      	mov	r2, r3
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00d      	beq.n	8001d74 <LCD_printA+0x17c>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	7b5b      	ldrb	r3, [r3, #13]
 8001d5c:	330a      	adds	r3, #10
 8001d5e:	461a      	mov	r2, r3
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d006      	beq.n	8001d74 <LCD_printA+0x17c>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	7b5b      	ldrb	r3, [r3, #13]
 8001d6a:	330b      	adds	r3, #11
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d108      	bne.n	8001d86 <LCD_printA+0x18e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001d74:	f107 010c 	add.w	r1, r7, #12
 8001d78:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	4859      	ldr	r0, [pc, #356]	@ (8001ee4 <LCD_printA+0x2ec>)
 8001d80:	f016 fcbd 	bl	80186fe <HAL_SPI_Transmit>
 8001d84:	e093      	b.n	8001eae <LCD_printA+0x2b6>
			}
			else if((kolumna==(ADRES->X0_SET+4) || kolumna==(ADRES->X0_SET+8)) && (wiersz==(ADRES->Y0_SET+4) || wiersz==(ADRES->Y0_SET+5) || wiersz==(ADRES->Y0_SET+7)))
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	7b1b      	ldrb	r3, [r3, #12]
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d006      	beq.n	8001da2 <LCD_printA+0x1aa>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	7b1b      	ldrb	r3, [r3, #12]
 8001d98:	3308      	adds	r3, #8
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d11d      	bne.n	8001dde <LCD_printA+0x1e6>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	7b5b      	ldrb	r3, [r3, #13]
 8001da6:	3304      	adds	r3, #4
 8001da8:	461a      	mov	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d00d      	beq.n	8001dcc <LCD_printA+0x1d4>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	7b5b      	ldrb	r3, [r3, #13]
 8001db4:	3305      	adds	r3, #5
 8001db6:	461a      	mov	r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d006      	beq.n	8001dcc <LCD_printA+0x1d4>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	7b5b      	ldrb	r3, [r3, #13]
 8001dc2:	3307      	adds	r3, #7
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d108      	bne.n	8001dde <LCD_printA+0x1e6>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001dcc:	f107 010c 	add.w	r1, r7, #12
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	4843      	ldr	r0, [pc, #268]	@ (8001ee4 <LCD_printA+0x2ec>)
 8001dd8:	f016 fc91 	bl	80186fe <HAL_SPI_Transmit>
 8001ddc:	e067      	b.n	8001eae <LCD_printA+0x2b6>
			}
			else if((kolumna==(ADRES->X0_SET+5) || kolumna==(ADRES->X0_SET+7)) && (wiersz==(ADRES->Y0_SET+2) || wiersz==(ADRES->Y0_SET+3)))
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	7b1b      	ldrb	r3, [r3, #12]
 8001de2:	3305      	adds	r3, #5
 8001de4:	461a      	mov	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d006      	beq.n	8001dfa <LCD_printA+0x202>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	7b1b      	ldrb	r3, [r3, #12]
 8001df0:	3307      	adds	r3, #7
 8001df2:	461a      	mov	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d116      	bne.n	8001e28 <LCD_printA+0x230>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	7b5b      	ldrb	r3, [r3, #13]
 8001dfe:	3302      	adds	r3, #2
 8001e00:	461a      	mov	r2, r3
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d006      	beq.n	8001e16 <LCD_printA+0x21e>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	7b5b      	ldrb	r3, [r3, #13]
 8001e0c:	3303      	adds	r3, #3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d108      	bne.n	8001e28 <LCD_printA+0x230>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001e16:	f107 010c 	add.w	r1, r7, #12
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1e:	2202      	movs	r2, #2
 8001e20:	4830      	ldr	r0, [pc, #192]	@ (8001ee4 <LCD_printA+0x2ec>)
 8001e22:	f016 fc6c 	bl	80186fe <HAL_SPI_Transmit>
 8001e26:	e042      	b.n	8001eae <LCD_printA+0x2b6>
			}
			else if(kolumna==(ADRES->X0_SET+6) && (wiersz==(ADRES->Y0_SET+0) || wiersz==(ADRES->Y0_SET+1)))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	7b1b      	ldrb	r3, [r3, #12]
 8001e2c:	3306      	adds	r3, #6
 8001e2e:	461a      	mov	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d115      	bne.n	8001e62 <LCD_printA+0x26a>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	7b5b      	ldrb	r3, [r3, #13]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d006      	beq.n	8001e50 <LCD_printA+0x258>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	7b5b      	ldrb	r3, [r3, #13]
 8001e46:	3301      	adds	r3, #1
 8001e48:	461a      	mov	r2, r3
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d108      	bne.n	8001e62 <LCD_printA+0x26a>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001e50:	f107 010c 	add.w	r1, r7, #12
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295
 8001e58:	2202      	movs	r2, #2
 8001e5a:	4822      	ldr	r0, [pc, #136]	@ (8001ee4 <LCD_printA+0x2ec>)
 8001e5c:	f016 fc4f 	bl	80186fe <HAL_SPI_Transmit>
 8001e60:	e025      	b.n	8001eae <LCD_printA+0x2b6>
			}
			else if((kolumna>=(ADRES->X0_SET+5) && kolumna<=(ADRES->X0_SET+8)) && wiersz==(ADRES->Y0_SET+7))
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	7b1b      	ldrb	r3, [r3, #12]
 8001e66:	3305      	adds	r3, #5
 8001e68:	461a      	mov	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d316      	bcc.n	8001e9e <LCD_printA+0x2a6>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	7b1b      	ldrb	r3, [r3, #12]
 8001e74:	3308      	adds	r3, #8
 8001e76:	461a      	mov	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d80f      	bhi.n	8001e9e <LCD_printA+0x2a6>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	7b5b      	ldrb	r3, [r3, #13]
 8001e82:	3307      	adds	r3, #7
 8001e84:	461a      	mov	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d108      	bne.n	8001e9e <LCD_printA+0x2a6>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001e8c:	f107 010c 	add.w	r1, r7, #12
 8001e90:	f04f 33ff 	mov.w	r3, #4294967295
 8001e94:	2202      	movs	r2, #2
 8001e96:	4813      	ldr	r0, [pc, #76]	@ (8001ee4 <LCD_printA+0x2ec>)
 8001e98:	f016 fc31 	bl	80186fe <HAL_SPI_Transmit>
 8001e9c:	e007      	b.n	8001eae <LCD_printA+0x2b6>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8001e9e:	f107 0108 	add.w	r1, r7, #8
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	480e      	ldr	r0, [pc, #56]	@ (8001ee4 <LCD_printA+0x2ec>)
 8001eaa:	f016 fc28 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	7b9b      	ldrb	r3, [r3, #14]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	461a      	mov	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	f4ff af10 	bcc.w	8001ce4 <LCD_printA+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	7bdb      	ldrb	r3, [r3, #15]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	f4ff af02 	bcc.w	8001cdc <LCD_printA+0xe4>
			}
		}
	}
	CS_ON();
 8001ed8:	f7ff f8a4 	bl	8001024 <CS_ON>
}
 8001edc:	bf00      	nop
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	200004a4 	.word	0x200004a4

08001ee8 <LCD_printB>:

void LCD_printB(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	71bb      	strb	r3, [r7, #6]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	2300      	movs	r3, #0
 8001f02:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2200      	movs	r2, #0
 8001f08:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	223f      	movs	r2, #63	@ 0x3f
 8001f0e:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	221f      	movs	r2, #31
 8001f14:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	7cda      	ldrb	r2, [r3, #19]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	7c1b      	ldrb	r3, [r3, #16]
 8001f2a:	4053      	eors	r3, r2
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	b25a      	sxtb	r2, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	7c5b      	ldrb	r3, [r3, #17]
 8001f36:	b25b      	sxtb	r3, r3
 8001f38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f3c:	b25b      	sxtb	r3, r3
 8001f3e:	4053      	eors	r3, r2
 8001f40:	b25b      	sxtb	r3, r3
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	7d1b      	ldrb	r3, [r3, #20]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	7c5b      	ldrb	r3, [r3, #17]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	4053      	eors	r3, r2
 8001f58:	015b      	lsls	r3, r3, #5
 8001f5a:	b25a      	sxtb	r2, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	7c9b      	ldrb	r3, [r3, #18]
 8001f60:	b25b      	sxtb	r3, r3
 8001f62:	4053      	eors	r3, r2
 8001f64:	b25b      	sxtb	r3, r3
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	7cdb      	ldrb	r3, [r3, #19]
 8001f70:	733b      	strb	r3, [r7, #12]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	7d1b      	ldrb	r3, [r3, #20]
 8001f76:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	4053      	eors	r3, r2
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	b25a      	sxtb	r2, r3
 8001f8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	4053      	eors	r3, r2
 8001f98:	b25b      	sxtb	r3, r3
 8001f9a:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8001f9c:	7bba      	ldrb	r2, [r7, #14]
 8001f9e:	79bb      	ldrb	r3, [r7, #6]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4053      	eors	r3, r2
 8001fa6:	015b      	lsls	r3, r3, #5
 8001fa8:	b25a      	sxtb	r2, r3
 8001faa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001fae:	4053      	eors	r3, r2
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	723b      	strb	r3, [r7, #8]
 8001fb8:	7bbb      	ldrb	r3, [r7, #14]
 8001fba:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8001fbc:	f7ff f848 	bl	8001050 <DC_ON>
	CS_OFF();
 8001fc0:	f7ff f83b 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	7b5b      	ldrb	r3, [r3, #13]
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	e0f3      	b.n	80021b4 <LCD_printB+0x2cc>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	7b1b      	ldrb	r3, [r3, #12]
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	e0e4      	b.n	800219e <LCD_printB+0x2b6>
		{
			if(kolumna==(ADRES->X0_SET+2)  && (wiersz<ADRES->Y_END_SET))
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	7b1b      	ldrb	r3, [r3, #12]
 8001fd8:	3302      	adds	r3, #2
 8001fda:	461a      	mov	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10e      	bne.n	8002000 <LCD_printB+0x118>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	7bdb      	ldrb	r3, [r3, #15]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d208      	bcs.n	8002000 <LCD_printB+0x118>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8001fee:	f107 010c 	add.w	r1, r7, #12
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	4875      	ldr	r0, [pc, #468]	@ (80021d0 <LCD_printB+0x2e8>)
 8001ffa:	f016 fb80 	bl	80186fe <HAL_SPI_Transmit>
 8001ffe:	e0cb      	b.n	8002198 <LCD_printB+0x2b0>
			}
			else if((kolumna>=(ADRES->X0_SET+3) &&  kolumna<=(ADRES->X0_SET+6)) && (wiersz==(ADRES->Y0_SET+0) || wiersz==(ADRES->Y0_SET+1) || wiersz==(ADRES->Y0_SET+7) || wiersz==(ADRES->Y0_SET+8) || wiersz==(ADRES->Y0_SET+13)|| wiersz==(ADRES->Y0_SET+14)))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	7b1b      	ldrb	r3, [r3, #12]
 8002004:	3303      	adds	r3, #3
 8002006:	461a      	mov	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	4293      	cmp	r3, r2
 800200c:	d338      	bcc.n	8002080 <LCD_printB+0x198>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	7b1b      	ldrb	r3, [r3, #12]
 8002012:	3306      	adds	r3, #6
 8002014:	461a      	mov	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	4293      	cmp	r3, r2
 800201a:	d831      	bhi.n	8002080 <LCD_printB+0x198>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	7b5b      	ldrb	r3, [r3, #13]
 8002020:	461a      	mov	r2, r3
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4293      	cmp	r3, r2
 8002026:	d022      	beq.n	800206e <LCD_printB+0x186>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	7b5b      	ldrb	r3, [r3, #13]
 800202c:	3301      	adds	r3, #1
 800202e:	461a      	mov	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4293      	cmp	r3, r2
 8002034:	d01b      	beq.n	800206e <LCD_printB+0x186>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	7b5b      	ldrb	r3, [r3, #13]
 800203a:	3307      	adds	r3, #7
 800203c:	461a      	mov	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4293      	cmp	r3, r2
 8002042:	d014      	beq.n	800206e <LCD_printB+0x186>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	7b5b      	ldrb	r3, [r3, #13]
 8002048:	3308      	adds	r3, #8
 800204a:	461a      	mov	r2, r3
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4293      	cmp	r3, r2
 8002050:	d00d      	beq.n	800206e <LCD_printB+0x186>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	7b5b      	ldrb	r3, [r3, #13]
 8002056:	330d      	adds	r3, #13
 8002058:	461a      	mov	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4293      	cmp	r3, r2
 800205e:	d006      	beq.n	800206e <LCD_printB+0x186>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	7b5b      	ldrb	r3, [r3, #13]
 8002064:	330e      	adds	r3, #14
 8002066:	461a      	mov	r2, r3
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4293      	cmp	r3, r2
 800206c:	d108      	bne.n	8002080 <LCD_printB+0x198>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800206e:	f107 010c 	add.w	r1, r7, #12
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	2202      	movs	r2, #2
 8002078:	4855      	ldr	r0, [pc, #340]	@ (80021d0 <LCD_printB+0x2e8>)
 800207a:	f016 fb40 	bl	80186fe <HAL_SPI_Transmit>
 800207e:	e08b      	b.n	8002198 <LCD_printB+0x2b0>
			}
			else if(kolumna==(ADRES->X0_SET+7) && (wiersz==(ADRES->Y0_SET+1) || wiersz==(ADRES->Y0_SET+7) || wiersz==(ADRES->Y0_SET+9) || wiersz==(ADRES->Y0_SET+14)))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	7b1b      	ldrb	r3, [r3, #12]
 8002084:	3307      	adds	r3, #7
 8002086:	461a      	mov	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	4293      	cmp	r3, r2
 800208c:	d124      	bne.n	80020d8 <LCD_printB+0x1f0>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	7b5b      	ldrb	r3, [r3, #13]
 8002092:	3301      	adds	r3, #1
 8002094:	461a      	mov	r2, r3
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4293      	cmp	r3, r2
 800209a:	d014      	beq.n	80020c6 <LCD_printB+0x1de>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	7b5b      	ldrb	r3, [r3, #13]
 80020a0:	3307      	adds	r3, #7
 80020a2:	461a      	mov	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00d      	beq.n	80020c6 <LCD_printB+0x1de>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	7b5b      	ldrb	r3, [r3, #13]
 80020ae:	3309      	adds	r3, #9
 80020b0:	461a      	mov	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d006      	beq.n	80020c6 <LCD_printB+0x1de>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	7b5b      	ldrb	r3, [r3, #13]
 80020bc:	330e      	adds	r3, #14
 80020be:	461a      	mov	r2, r3
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d108      	bne.n	80020d8 <LCD_printB+0x1f0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80020c6:	f107 010c 	add.w	r1, r7, #12
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
 80020ce:	2202      	movs	r2, #2
 80020d0:	483f      	ldr	r0, [pc, #252]	@ (80021d0 <LCD_printB+0x2e8>)
 80020d2:	f016 fb14 	bl	80186fe <HAL_SPI_Transmit>
 80020d6:	e05f      	b.n	8002198 <LCD_printB+0x2b0>
			}
			else if(kolumna==(ADRES->X0_SET+8) && (wiersz==(ADRES->Y0_SET+2) || wiersz==(ADRES->Y0_SET+6) || wiersz==(ADRES->Y0_SET+10) || wiersz==(ADRES->Y0_SET+13)))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	7b1b      	ldrb	r3, [r3, #12]
 80020dc:	3308      	adds	r3, #8
 80020de:	461a      	mov	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d124      	bne.n	8002130 <LCD_printB+0x248>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	7b5b      	ldrb	r3, [r3, #13]
 80020ea:	3302      	adds	r3, #2
 80020ec:	461a      	mov	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d014      	beq.n	800211e <LCD_printB+0x236>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	7b5b      	ldrb	r3, [r3, #13]
 80020f8:	3306      	adds	r3, #6
 80020fa:	461a      	mov	r2, r3
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00d      	beq.n	800211e <LCD_printB+0x236>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	7b5b      	ldrb	r3, [r3, #13]
 8002106:	330a      	adds	r3, #10
 8002108:	461a      	mov	r2, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4293      	cmp	r3, r2
 800210e:	d006      	beq.n	800211e <LCD_printB+0x236>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	7b5b      	ldrb	r3, [r3, #13]
 8002114:	330d      	adds	r3, #13
 8002116:	461a      	mov	r2, r3
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4293      	cmp	r3, r2
 800211c:	d108      	bne.n	8002130 <LCD_printB+0x248>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800211e:	f107 010c 	add.w	r1, r7, #12
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
 8002126:	2202      	movs	r2, #2
 8002128:	4829      	ldr	r0, [pc, #164]	@ (80021d0 <LCD_printB+0x2e8>)
 800212a:	f016 fae8 	bl	80186fe <HAL_SPI_Transmit>
 800212e:	e033      	b.n	8002198 <LCD_printB+0x2b0>
			}
			else if(kolumna==(ADRES->X0_SET+9) && (wiersz==(ADRES->Y0_SET+3) || wiersz==(ADRES->Y0_SET+4) || wiersz==(ADRES->Y0_SET+11) || wiersz==(ADRES->Y0_SET+12)))
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	7b1b      	ldrb	r3, [r3, #12]
 8002134:	3309      	adds	r3, #9
 8002136:	461a      	mov	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	4293      	cmp	r3, r2
 800213c:	d124      	bne.n	8002188 <LCD_printB+0x2a0>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	7b5b      	ldrb	r3, [r3, #13]
 8002142:	3303      	adds	r3, #3
 8002144:	461a      	mov	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4293      	cmp	r3, r2
 800214a:	d014      	beq.n	8002176 <LCD_printB+0x28e>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	7b5b      	ldrb	r3, [r3, #13]
 8002150:	3304      	adds	r3, #4
 8002152:	461a      	mov	r2, r3
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4293      	cmp	r3, r2
 8002158:	d00d      	beq.n	8002176 <LCD_printB+0x28e>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	7b5b      	ldrb	r3, [r3, #13]
 800215e:	330b      	adds	r3, #11
 8002160:	461a      	mov	r2, r3
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4293      	cmp	r3, r2
 8002166:	d006      	beq.n	8002176 <LCD_printB+0x28e>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	7b5b      	ldrb	r3, [r3, #13]
 800216c:	330c      	adds	r3, #12
 800216e:	461a      	mov	r2, r3
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4293      	cmp	r3, r2
 8002174:	d108      	bne.n	8002188 <LCD_printB+0x2a0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002176:	f107 010c 	add.w	r1, r7, #12
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
 800217e:	2202      	movs	r2, #2
 8002180:	4813      	ldr	r0, [pc, #76]	@ (80021d0 <LCD_printB+0x2e8>)
 8002182:	f016 fabc 	bl	80186fe <HAL_SPI_Transmit>
 8002186:	e007      	b.n	8002198 <LCD_printB+0x2b0>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8002188:	f107 0108 	add.w	r1, r7, #8
 800218c:	f04f 33ff 	mov.w	r3, #4294967295
 8002190:	2202      	movs	r2, #2
 8002192:	480f      	ldr	r0, [pc, #60]	@ (80021d0 <LCD_printB+0x2e8>)
 8002194:	f016 fab3 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3301      	adds	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	7b9b      	ldrb	r3, [r3, #14]
 80021a2:	3301      	adds	r3, #1
 80021a4:	461a      	mov	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	4293      	cmp	r3, r2
 80021aa:	f4ff af13 	bcc.w	8001fd4 <LCD_printB+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	3301      	adds	r3, #1
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	7bdb      	ldrb	r3, [r3, #15]
 80021b8:	461a      	mov	r2, r3
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4293      	cmp	r3, r2
 80021be:	f4ff af05 	bcc.w	8001fcc <LCD_printB+0xe4>
			}}
	}
	CS_ON();
 80021c2:	f7fe ff2f 	bl	8001024 <CS_ON>
}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200004a4 	.word	0x200004a4

080021d4 <LCD_printC>:

void LCD_printC(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	4603      	mov	r3, r0
 80021de:	71fb      	strb	r3, [r7, #7]
 80021e0:	460b      	mov	r3, r1
 80021e2:	71bb      	strb	r3, [r7, #6]
 80021e4:	4613      	mov	r3, r2
 80021e6:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2200      	movs	r2, #0
 80021f4:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	223f      	movs	r2, #63	@ 0x3f
 80021fa:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	221f      	movs	r2, #31
 8002200:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2200      	movs	r2, #0
 8002206:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2200      	movs	r2, #0
 800220c:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	7cda      	ldrb	r2, [r3, #19]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	7c1b      	ldrb	r3, [r3, #16]
 8002216:	4053      	eors	r3, r2
 8002218:	b2db      	uxtb	r3, r3
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	b25a      	sxtb	r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	7c5b      	ldrb	r3, [r3, #17]
 8002222:	b25b      	sxtb	r3, r3
 8002224:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002228:	b25b      	sxtb	r3, r3
 800222a:	4053      	eors	r3, r2
 800222c:	b25b      	sxtb	r3, r3
 800222e:	b2da      	uxtb	r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	7d1b      	ldrb	r3, [r3, #20]
 8002238:	461a      	mov	r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	7c5b      	ldrb	r3, [r3, #17]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	4053      	eors	r3, r2
 8002244:	015b      	lsls	r3, r3, #5
 8002246:	b25a      	sxtb	r2, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	7c9b      	ldrb	r3, [r3, #18]
 800224c:	b25b      	sxtb	r3, r3
 800224e:	4053      	eors	r3, r2
 8002250:	b25b      	sxtb	r3, r3
 8002252:	b2da      	uxtb	r2, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	7cdb      	ldrb	r3, [r3, #19]
 800225c:	733b      	strb	r3, [r7, #12]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	7d1b      	ldrb	r3, [r3, #20]
 8002262:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8002264:	2300      	movs	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8002268:	2300      	movs	r3, #0
 800226a:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	4053      	eors	r3, r2
 8002272:	b2db      	uxtb	r3, r3
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	b25a      	sxtb	r2, r3
 8002278:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800227c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002280:	b25b      	sxtb	r3, r3
 8002282:	4053      	eors	r3, r2
 8002284:	b25b      	sxtb	r3, r3
 8002286:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8002288:	7bba      	ldrb	r2, [r7, #14]
 800228a:	79bb      	ldrb	r3, [r7, #6]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	4053      	eors	r3, r2
 8002292:	015b      	lsls	r3, r3, #5
 8002294:	b25a      	sxtb	r2, r3
 8002296:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800229a:	4053      	eors	r3, r2
 800229c:	b25b      	sxtb	r3, r3
 800229e:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	723b      	strb	r3, [r7, #8]
 80022a4:	7bbb      	ldrb	r3, [r7, #14]
 80022a6:	727b      	strb	r3, [r7, #9]
	DC_ON();
 80022a8:	f7fe fed2 	bl	8001050 <DC_ON>
	CS_OFF();
 80022ac:	f7fe fec5 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	7b5b      	ldrb	r3, [r3, #13]
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	e0d3      	b.n	8002460 <LCD_printC+0x28c>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	7b1b      	ldrb	r3, [r3, #12]
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	e0c4      	b.n	800244a <LCD_printC+0x276>
		{
			if(kolumna==(ADRES->X0_SET+2)  && (wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+7)))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	7b1b      	ldrb	r3, [r3, #12]
 80022c4:	3302      	adds	r3, #2
 80022c6:	461a      	mov	r2, r3
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d116      	bne.n	80022fc <LCD_printC+0x128>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	7b5b      	ldrb	r3, [r3, #13]
 80022d2:	3305      	adds	r3, #5
 80022d4:	461a      	mov	r2, r3
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4293      	cmp	r3, r2
 80022da:	d30f      	bcc.n	80022fc <LCD_printC+0x128>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	7b5b      	ldrb	r3, [r3, #13]
 80022e0:	3307      	adds	r3, #7
 80022e2:	461a      	mov	r2, r3
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d808      	bhi.n	80022fc <LCD_printC+0x128>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80022ea:	f107 010c 	add.w	r1, r7, #12
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
 80022f2:	2202      	movs	r2, #2
 80022f4:	4861      	ldr	r0, [pc, #388]	@ (800247c <LCD_printC+0x2a8>)
 80022f6:	f016 fa02 	bl	80186fe <HAL_SPI_Transmit>
 80022fa:	e0a3      	b.n	8002444 <LCD_printC+0x270>
			}
			else if((kolumna>=(ADRES->X0_SET+7) &&  kolumna<=(ADRES->X0_SET+10)) && (wiersz==(ADRES->Y0_SET+0) || wiersz==(ADRES->Y0_SET+12)))
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	7b1b      	ldrb	r3, [r3, #12]
 8002300:	3307      	adds	r3, #7
 8002302:	461a      	mov	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	4293      	cmp	r3, r2
 8002308:	d31c      	bcc.n	8002344 <LCD_printC+0x170>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	7b1b      	ldrb	r3, [r3, #12]
 800230e:	330a      	adds	r3, #10
 8002310:	461a      	mov	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	4293      	cmp	r3, r2
 8002316:	d815      	bhi.n	8002344 <LCD_printC+0x170>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	7b5b      	ldrb	r3, [r3, #13]
 800231c:	461a      	mov	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4293      	cmp	r3, r2
 8002322:	d006      	beq.n	8002332 <LCD_printC+0x15e>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	7b5b      	ldrb	r3, [r3, #13]
 8002328:	330c      	adds	r3, #12
 800232a:	461a      	mov	r2, r3
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4293      	cmp	r3, r2
 8002330:	d108      	bne.n	8002344 <LCD_printC+0x170>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002332:	f107 010c 	add.w	r1, r7, #12
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	2202      	movs	r2, #2
 800233c:	484f      	ldr	r0, [pc, #316]	@ (800247c <LCD_printC+0x2a8>)
 800233e:	f016 f9de 	bl	80186fe <HAL_SPI_Transmit>
 8002342:	e07f      	b.n	8002444 <LCD_printC+0x270>
			}
			else if(kolumna==(ADRES->X0_SET+3) && (wiersz==(ADRES->Y0_SET+4) || wiersz==(ADRES->Y0_SET+8)))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	7b1b      	ldrb	r3, [r3, #12]
 8002348:	3303      	adds	r3, #3
 800234a:	461a      	mov	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	4293      	cmp	r3, r2
 8002350:	d116      	bne.n	8002380 <LCD_printC+0x1ac>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	7b5b      	ldrb	r3, [r3, #13]
 8002356:	3304      	adds	r3, #4
 8002358:	461a      	mov	r2, r3
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4293      	cmp	r3, r2
 800235e:	d006      	beq.n	800236e <LCD_printC+0x19a>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	7b5b      	ldrb	r3, [r3, #13]
 8002364:	3308      	adds	r3, #8
 8002366:	461a      	mov	r2, r3
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4293      	cmp	r3, r2
 800236c:	d108      	bne.n	8002380 <LCD_printC+0x1ac>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800236e:	f107 010c 	add.w	r1, r7, #12
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	2202      	movs	r2, #2
 8002378:	4840      	ldr	r0, [pc, #256]	@ (800247c <LCD_printC+0x2a8>)
 800237a:	f016 f9c0 	bl	80186fe <HAL_SPI_Transmit>
 800237e:	e061      	b.n	8002444 <LCD_printC+0x270>
			}
			else if(kolumna==(ADRES->X0_SET+4) && (wiersz==(ADRES->Y0_SET+3) || wiersz==(ADRES->Y0_SET+9)))
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	7b1b      	ldrb	r3, [r3, #12]
 8002384:	3304      	adds	r3, #4
 8002386:	461a      	mov	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	4293      	cmp	r3, r2
 800238c:	d116      	bne.n	80023bc <LCD_printC+0x1e8>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	7b5b      	ldrb	r3, [r3, #13]
 8002392:	3303      	adds	r3, #3
 8002394:	461a      	mov	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4293      	cmp	r3, r2
 800239a:	d006      	beq.n	80023aa <LCD_printC+0x1d6>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	7b5b      	ldrb	r3, [r3, #13]
 80023a0:	3309      	adds	r3, #9
 80023a2:	461a      	mov	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d108      	bne.n	80023bc <LCD_printC+0x1e8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80023aa:	f107 010c 	add.w	r1, r7, #12
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
 80023b2:	2202      	movs	r2, #2
 80023b4:	4831      	ldr	r0, [pc, #196]	@ (800247c <LCD_printC+0x2a8>)
 80023b6:	f016 f9a2 	bl	80186fe <HAL_SPI_Transmit>
 80023ba:	e043      	b.n	8002444 <LCD_printC+0x270>
			}
			else if(kolumna==(ADRES->X0_SET+5) && (wiersz==(ADRES->Y0_SET+2) || wiersz==(ADRES->Y0_SET+10)))
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	7b1b      	ldrb	r3, [r3, #12]
 80023c0:	3305      	adds	r3, #5
 80023c2:	461a      	mov	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d116      	bne.n	80023f8 <LCD_printC+0x224>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	7b5b      	ldrb	r3, [r3, #13]
 80023ce:	3302      	adds	r3, #2
 80023d0:	461a      	mov	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d006      	beq.n	80023e6 <LCD_printC+0x212>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	7b5b      	ldrb	r3, [r3, #13]
 80023dc:	330a      	adds	r3, #10
 80023de:	461a      	mov	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d108      	bne.n	80023f8 <LCD_printC+0x224>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80023e6:	f107 010c 	add.w	r1, r7, #12
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
 80023ee:	2202      	movs	r2, #2
 80023f0:	4822      	ldr	r0, [pc, #136]	@ (800247c <LCD_printC+0x2a8>)
 80023f2:	f016 f984 	bl	80186fe <HAL_SPI_Transmit>
 80023f6:	e025      	b.n	8002444 <LCD_printC+0x270>
			}
			else if(kolumna==(ADRES->X0_SET+6) && (wiersz==(ADRES->Y0_SET+1) || wiersz==(ADRES->Y0_SET+11)))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	7b1b      	ldrb	r3, [r3, #12]
 80023fc:	3306      	adds	r3, #6
 80023fe:	461a      	mov	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	4293      	cmp	r3, r2
 8002404:	d116      	bne.n	8002434 <LCD_printC+0x260>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	7b5b      	ldrb	r3, [r3, #13]
 800240a:	3301      	adds	r3, #1
 800240c:	461a      	mov	r2, r3
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4293      	cmp	r3, r2
 8002412:	d006      	beq.n	8002422 <LCD_printC+0x24e>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	7b5b      	ldrb	r3, [r3, #13]
 8002418:	330b      	adds	r3, #11
 800241a:	461a      	mov	r2, r3
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4293      	cmp	r3, r2
 8002420:	d108      	bne.n	8002434 <LCD_printC+0x260>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002422:	f107 010c 	add.w	r1, r7, #12
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
 800242a:	2202      	movs	r2, #2
 800242c:	4813      	ldr	r0, [pc, #76]	@ (800247c <LCD_printC+0x2a8>)
 800242e:	f016 f966 	bl	80186fe <HAL_SPI_Transmit>
 8002432:	e007      	b.n	8002444 <LCD_printC+0x270>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8002434:	f107 0108 	add.w	r1, r7, #8
 8002438:	f04f 33ff 	mov.w	r3, #4294967295
 800243c:	2202      	movs	r2, #2
 800243e:	480f      	ldr	r0, [pc, #60]	@ (800247c <LCD_printC+0x2a8>)
 8002440:	f016 f95d 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	3301      	adds	r3, #1
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	7b9b      	ldrb	r3, [r3, #14]
 800244e:	3301      	adds	r3, #1
 8002450:	461a      	mov	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	4293      	cmp	r3, r2
 8002456:	f4ff af33 	bcc.w	80022c0 <LCD_printC+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	3301      	adds	r3, #1
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	7bdb      	ldrb	r3, [r3, #15]
 8002464:	461a      	mov	r2, r3
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4293      	cmp	r3, r2
 800246a:	f4ff af25 	bcc.w	80022b8 <LCD_printC+0xe4>
			}
		}
	}
	CS_ON();
 800246e:	f7fe fdd9 	bl	8001024 <CS_ON>
}
 8002472:	bf00      	nop
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200004a4 	.word	0x200004a4

08002480 <LCD_printD>:

void LCD_printD(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	4603      	mov	r3, r0
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	460b      	mov	r3, r1
 800248e:	71bb      	strb	r3, [r7, #6]
 8002490:	4613      	mov	r3, r2
 8002492:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	2200      	movs	r2, #0
 80024a0:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	223f      	movs	r2, #63	@ 0x3f
 80024a6:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	221f      	movs	r2, #31
 80024ac:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2200      	movs	r2, #0
 80024b2:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2200      	movs	r2, #0
 80024b8:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	7cda      	ldrb	r2, [r3, #19]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	7c1b      	ldrb	r3, [r3, #16]
 80024c2:	4053      	eors	r3, r2
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	b25a      	sxtb	r2, r3
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	7c5b      	ldrb	r3, [r3, #17]
 80024ce:	b25b      	sxtb	r3, r3
 80024d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024d4:	b25b      	sxtb	r3, r3
 80024d6:	4053      	eors	r3, r2
 80024d8:	b25b      	sxtb	r3, r3
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	7d1b      	ldrb	r3, [r3, #20]
 80024e4:	461a      	mov	r2, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	7c5b      	ldrb	r3, [r3, #17]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	4053      	eors	r3, r2
 80024f0:	015b      	lsls	r3, r3, #5
 80024f2:	b25a      	sxtb	r2, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	7c9b      	ldrb	r3, [r3, #18]
 80024f8:	b25b      	sxtb	r3, r3
 80024fa:	4053      	eors	r3, r2
 80024fc:	b25b      	sxtb	r3, r3
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	7cdb      	ldrb	r3, [r3, #19]
 8002508:	733b      	strb	r3, [r7, #12]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	7d1b      	ldrb	r3, [r3, #20]
 800250e:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8002514:	2300      	movs	r3, #0
 8002516:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8002518:	7bfa      	ldrb	r2, [r7, #15]
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	4053      	eors	r3, r2
 800251e:	b2db      	uxtb	r3, r3
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	b25a      	sxtb	r2, r3
 8002524:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002528:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800252c:	b25b      	sxtb	r3, r3
 800252e:	4053      	eors	r3, r2
 8002530:	b25b      	sxtb	r3, r3
 8002532:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8002534:	7bba      	ldrb	r2, [r7, #14]
 8002536:	79bb      	ldrb	r3, [r7, #6]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	4053      	eors	r3, r2
 800253e:	015b      	lsls	r3, r3, #5
 8002540:	b25a      	sxtb	r2, r3
 8002542:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002546:	4053      	eors	r3, r2
 8002548:	b25b      	sxtb	r3, r3
 800254a:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	723b      	strb	r3, [r7, #8]
 8002550:	7bbb      	ldrb	r3, [r7, #14]
 8002552:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8002554:	f7fe fd7c 	bl	8001050 <DC_ON>
	CS_OFF();
 8002558:	f7fe fd6f 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	7b5b      	ldrb	r3, [r3, #13]
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	e138      	b.n	80027d6 <LCD_printD+0x356>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	7b1b      	ldrb	r3, [r3, #12]
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	e129      	b.n	80027c0 <LCD_printD+0x340>
		{
			if(kolumna==(ADRES->X0_SET+2) && wiersz<(ADRES->Y0_SET+15))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	7b1b      	ldrb	r3, [r3, #12]
 8002570:	3302      	adds	r3, #2
 8002572:	461a      	mov	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	4293      	cmp	r3, r2
 8002578:	d10f      	bne.n	800259a <LCD_printD+0x11a>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	7b5b      	ldrb	r3, [r3, #13]
 800257e:	330f      	adds	r3, #15
 8002580:	461a      	mov	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4293      	cmp	r3, r2
 8002586:	d208      	bcs.n	800259a <LCD_printD+0x11a>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002588:	f107 010c 	add.w	r1, r7, #12
 800258c:	f04f 33ff 	mov.w	r3, #4294967295
 8002590:	2202      	movs	r2, #2
 8002592:	4897      	ldr	r0, [pc, #604]	@ (80027f0 <LCD_printD+0x370>)
 8002594:	f016 f8b3 	bl	80186fe <HAL_SPI_Transmit>
 8002598:	e10f      	b.n	80027ba <LCD_printD+0x33a>
			}
			else if(kolumna==(ADRES->X0_SET+3) && (wiersz==(ADRES->Y0_SET+0) || wiersz==(ADRES->Y0_SET+14)))
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	7b1b      	ldrb	r3, [r3, #12]
 800259e:	3303      	adds	r3, #3
 80025a0:	461a      	mov	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d115      	bne.n	80025d4 <LCD_printD+0x154>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	7b5b      	ldrb	r3, [r3, #13]
 80025ac:	461a      	mov	r2, r3
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d006      	beq.n	80025c2 <LCD_printD+0x142>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	7b5b      	ldrb	r3, [r3, #13]
 80025b8:	330e      	adds	r3, #14
 80025ba:	461a      	mov	r2, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4293      	cmp	r3, r2
 80025c0:	d108      	bne.n	80025d4 <LCD_printD+0x154>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80025c2:	f107 010c 	add.w	r1, r7, #12
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	2202      	movs	r2, #2
 80025cc:	4888      	ldr	r0, [pc, #544]	@ (80027f0 <LCD_printD+0x370>)
 80025ce:	f016 f896 	bl	80186fe <HAL_SPI_Transmit>
 80025d2:	e0f2      	b.n	80027ba <LCD_printD+0x33a>
			}
			else if(kolumna==(ADRES->X0_SET+4) && (wiersz==(ADRES->Y0_SET+0) || wiersz==(ADRES->Y0_SET+1) || wiersz==(ADRES->Y0_SET+13) || wiersz==(ADRES->Y0_SET+14)))
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	7b1b      	ldrb	r3, [r3, #12]
 80025d8:	3304      	adds	r3, #4
 80025da:	461a      	mov	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	4293      	cmp	r3, r2
 80025e0:	d123      	bne.n	800262a <LCD_printD+0x1aa>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	7b5b      	ldrb	r3, [r3, #13]
 80025e6:	461a      	mov	r2, r3
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d014      	beq.n	8002618 <LCD_printD+0x198>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	7b5b      	ldrb	r3, [r3, #13]
 80025f2:	3301      	adds	r3, #1
 80025f4:	461a      	mov	r2, r3
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00d      	beq.n	8002618 <LCD_printD+0x198>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	7b5b      	ldrb	r3, [r3, #13]
 8002600:	330d      	adds	r3, #13
 8002602:	461a      	mov	r2, r3
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4293      	cmp	r3, r2
 8002608:	d006      	beq.n	8002618 <LCD_printD+0x198>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	7b5b      	ldrb	r3, [r3, #13]
 800260e:	330e      	adds	r3, #14
 8002610:	461a      	mov	r2, r3
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4293      	cmp	r3, r2
 8002616:	d108      	bne.n	800262a <LCD_printD+0x1aa>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002618:	f107 010c 	add.w	r1, r7, #12
 800261c:	f04f 33ff 	mov.w	r3, #4294967295
 8002620:	2202      	movs	r2, #2
 8002622:	4873      	ldr	r0, [pc, #460]	@ (80027f0 <LCD_printD+0x370>)
 8002624:	f016 f86b 	bl	80186fe <HAL_SPI_Transmit>
 8002628:	e0c7      	b.n	80027ba <LCD_printD+0x33a>
			}
			else if(kolumna==(ADRES->X0_SET+5) && (wiersz==(ADRES->Y0_SET+1) || wiersz==(ADRES->Y0_SET+2) || wiersz==(ADRES->Y0_SET+12) || wiersz==(ADRES->Y0_SET+13)))
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	7b1b      	ldrb	r3, [r3, #12]
 800262e:	3305      	adds	r3, #5
 8002630:	461a      	mov	r2, r3
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	4293      	cmp	r3, r2
 8002636:	d124      	bne.n	8002682 <LCD_printD+0x202>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	7b5b      	ldrb	r3, [r3, #13]
 800263c:	3301      	adds	r3, #1
 800263e:	461a      	mov	r2, r3
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4293      	cmp	r3, r2
 8002644:	d014      	beq.n	8002670 <LCD_printD+0x1f0>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	7b5b      	ldrb	r3, [r3, #13]
 800264a:	3302      	adds	r3, #2
 800264c:	461a      	mov	r2, r3
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4293      	cmp	r3, r2
 8002652:	d00d      	beq.n	8002670 <LCD_printD+0x1f0>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	7b5b      	ldrb	r3, [r3, #13]
 8002658:	330c      	adds	r3, #12
 800265a:	461a      	mov	r2, r3
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4293      	cmp	r3, r2
 8002660:	d006      	beq.n	8002670 <LCD_printD+0x1f0>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	7b5b      	ldrb	r3, [r3, #13]
 8002666:	330d      	adds	r3, #13
 8002668:	461a      	mov	r2, r3
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4293      	cmp	r3, r2
 800266e:	d108      	bne.n	8002682 <LCD_printD+0x202>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002670:	f107 010c 	add.w	r1, r7, #12
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
 8002678:	2202      	movs	r2, #2
 800267a:	485d      	ldr	r0, [pc, #372]	@ (80027f0 <LCD_printD+0x370>)
 800267c:	f016 f83f 	bl	80186fe <HAL_SPI_Transmit>
 8002680:	e09b      	b.n	80027ba <LCD_printD+0x33a>
			}
			else if(kolumna==(ADRES->X0_SET+6) && (wiersz==(ADRES->Y0_SET+2) || wiersz==(ADRES->Y0_SET+3) || wiersz==(ADRES->Y0_SET+11) || wiersz==(ADRES->Y0_SET+12)))
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	7b1b      	ldrb	r3, [r3, #12]
 8002686:	3306      	adds	r3, #6
 8002688:	461a      	mov	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	4293      	cmp	r3, r2
 800268e:	d124      	bne.n	80026da <LCD_printD+0x25a>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	7b5b      	ldrb	r3, [r3, #13]
 8002694:	3302      	adds	r3, #2
 8002696:	461a      	mov	r2, r3
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4293      	cmp	r3, r2
 800269c:	d014      	beq.n	80026c8 <LCD_printD+0x248>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	7b5b      	ldrb	r3, [r3, #13]
 80026a2:	3303      	adds	r3, #3
 80026a4:	461a      	mov	r2, r3
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00d      	beq.n	80026c8 <LCD_printD+0x248>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	7b5b      	ldrb	r3, [r3, #13]
 80026b0:	330b      	adds	r3, #11
 80026b2:	461a      	mov	r2, r3
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d006      	beq.n	80026c8 <LCD_printD+0x248>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	7b5b      	ldrb	r3, [r3, #13]
 80026be:	330c      	adds	r3, #12
 80026c0:	461a      	mov	r2, r3
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d108      	bne.n	80026da <LCD_printD+0x25a>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80026c8:	f107 010c 	add.w	r1, r7, #12
 80026cc:	f04f 33ff 	mov.w	r3, #4294967295
 80026d0:	2202      	movs	r2, #2
 80026d2:	4847      	ldr	r0, [pc, #284]	@ (80027f0 <LCD_printD+0x370>)
 80026d4:	f016 f813 	bl	80186fe <HAL_SPI_Transmit>
 80026d8:	e06f      	b.n	80027ba <LCD_printD+0x33a>
			}
			else if(kolumna==(ADRES->X0_SET+7) && (wiersz==(ADRES->Y0_SET+3) || wiersz==(ADRES->Y0_SET+4) || wiersz==(ADRES->Y0_SET+10) || wiersz==(ADRES->Y0_SET+11)))
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	7b1b      	ldrb	r3, [r3, #12]
 80026de:	3307      	adds	r3, #7
 80026e0:	461a      	mov	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d124      	bne.n	8002732 <LCD_printD+0x2b2>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	7b5b      	ldrb	r3, [r3, #13]
 80026ec:	3303      	adds	r3, #3
 80026ee:	461a      	mov	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d014      	beq.n	8002720 <LCD_printD+0x2a0>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	7b5b      	ldrb	r3, [r3, #13]
 80026fa:	3304      	adds	r3, #4
 80026fc:	461a      	mov	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4293      	cmp	r3, r2
 8002702:	d00d      	beq.n	8002720 <LCD_printD+0x2a0>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	7b5b      	ldrb	r3, [r3, #13]
 8002708:	330a      	adds	r3, #10
 800270a:	461a      	mov	r2, r3
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4293      	cmp	r3, r2
 8002710:	d006      	beq.n	8002720 <LCD_printD+0x2a0>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	7b5b      	ldrb	r3, [r3, #13]
 8002716:	330b      	adds	r3, #11
 8002718:	461a      	mov	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4293      	cmp	r3, r2
 800271e:	d108      	bne.n	8002732 <LCD_printD+0x2b2>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002720:	f107 010c 	add.w	r1, r7, #12
 8002724:	f04f 33ff 	mov.w	r3, #4294967295
 8002728:	2202      	movs	r2, #2
 800272a:	4831      	ldr	r0, [pc, #196]	@ (80027f0 <LCD_printD+0x370>)
 800272c:	f015 ffe7 	bl	80186fe <HAL_SPI_Transmit>
 8002730:	e043      	b.n	80027ba <LCD_printD+0x33a>
			}
			else if(kolumna==(ADRES->X0_SET+8) && (wiersz>=(ADRES->Y0_SET+4) && wiersz<=(ADRES->Y0_SET+10)))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	7b1b      	ldrb	r3, [r3, #12]
 8002736:	3308      	adds	r3, #8
 8002738:	461a      	mov	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	4293      	cmp	r3, r2
 800273e:	d116      	bne.n	800276e <LCD_printD+0x2ee>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	7b5b      	ldrb	r3, [r3, #13]
 8002744:	3304      	adds	r3, #4
 8002746:	461a      	mov	r2, r3
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4293      	cmp	r3, r2
 800274c:	d30f      	bcc.n	800276e <LCD_printD+0x2ee>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	7b5b      	ldrb	r3, [r3, #13]
 8002752:	330a      	adds	r3, #10
 8002754:	461a      	mov	r2, r3
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4293      	cmp	r3, r2
 800275a:	d808      	bhi.n	800276e <LCD_printD+0x2ee>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800275c:	f107 010c 	add.w	r1, r7, #12
 8002760:	f04f 33ff 	mov.w	r3, #4294967295
 8002764:	2202      	movs	r2, #2
 8002766:	4822      	ldr	r0, [pc, #136]	@ (80027f0 <LCD_printD+0x370>)
 8002768:	f015 ffc9 	bl	80186fe <HAL_SPI_Transmit>
 800276c:	e025      	b.n	80027ba <LCD_printD+0x33a>
			}
			else if(kolumna==(ADRES->X0_SET+9) && (wiersz>(ADRES->Y0_SET+4) && wiersz<(ADRES->Y0_SET+10)))
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	7b1b      	ldrb	r3, [r3, #12]
 8002772:	3309      	adds	r3, #9
 8002774:	461a      	mov	r2, r3
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	4293      	cmp	r3, r2
 800277a:	d116      	bne.n	80027aa <LCD_printD+0x32a>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	7b5b      	ldrb	r3, [r3, #13]
 8002780:	3304      	adds	r3, #4
 8002782:	461a      	mov	r2, r3
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4293      	cmp	r3, r2
 8002788:	d90f      	bls.n	80027aa <LCD_printD+0x32a>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	7b5b      	ldrb	r3, [r3, #13]
 800278e:	330a      	adds	r3, #10
 8002790:	461a      	mov	r2, r3
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4293      	cmp	r3, r2
 8002796:	d208      	bcs.n	80027aa <LCD_printD+0x32a>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002798:	f107 010c 	add.w	r1, r7, #12
 800279c:	f04f 33ff 	mov.w	r3, #4294967295
 80027a0:	2202      	movs	r2, #2
 80027a2:	4813      	ldr	r0, [pc, #76]	@ (80027f0 <LCD_printD+0x370>)
 80027a4:	f015 ffab 	bl	80186fe <HAL_SPI_Transmit>
 80027a8:	e007      	b.n	80027ba <LCD_printD+0x33a>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 80027aa:	f107 0108 	add.w	r1, r7, #8
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	2202      	movs	r2, #2
 80027b4:	480e      	ldr	r0, [pc, #56]	@ (80027f0 <LCD_printD+0x370>)
 80027b6:	f015 ffa2 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	3301      	adds	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	7b9b      	ldrb	r3, [r3, #14]
 80027c4:	3301      	adds	r3, #1
 80027c6:	461a      	mov	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	4293      	cmp	r3, r2
 80027cc:	f4ff aece 	bcc.w	800256c <LCD_printD+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	3301      	adds	r3, #1
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	7bdb      	ldrb	r3, [r3, #15]
 80027da:	461a      	mov	r2, r3
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4293      	cmp	r3, r2
 80027e0:	f4ff aec0 	bcc.w	8002564 <LCD_printD+0xe4>
			}
		}
	}
	CS_ON();
 80027e4:	f7fe fc1e 	bl	8001024 <CS_ON>
}
 80027e8:	bf00      	nop
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	200004a4 	.word	0x200004a4

080027f4 <LCD_printG>:
	}
	CS_ON();
}

void LCD_printG(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	4603      	mov	r3, r0
 80027fe:	71fb      	strb	r3, [r7, #7]
 8002800:	460b      	mov	r3, r1
 8002802:	71bb      	strb	r3, [r7, #6]
 8002804:	4613      	mov	r3, r2
 8002806:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2200      	movs	r2, #0
 8002814:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	223f      	movs	r2, #63	@ 0x3f
 800281a:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	221f      	movs	r2, #31
 8002820:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2200      	movs	r2, #0
 8002826:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2200      	movs	r2, #0
 800282c:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	7cda      	ldrb	r2, [r3, #19]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	7c1b      	ldrb	r3, [r3, #16]
 8002836:	4053      	eors	r3, r2
 8002838:	b2db      	uxtb	r3, r3
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	b25a      	sxtb	r2, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	7c5b      	ldrb	r3, [r3, #17]
 8002842:	b25b      	sxtb	r3, r3
 8002844:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002848:	b25b      	sxtb	r3, r3
 800284a:	4053      	eors	r3, r2
 800284c:	b25b      	sxtb	r3, r3
 800284e:	b2da      	uxtb	r2, r3
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	7d1b      	ldrb	r3, [r3, #20]
 8002858:	461a      	mov	r2, r3
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	7c5b      	ldrb	r3, [r3, #17]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	4053      	eors	r3, r2
 8002864:	015b      	lsls	r3, r3, #5
 8002866:	b25a      	sxtb	r2, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	7c9b      	ldrb	r3, [r3, #18]
 800286c:	b25b      	sxtb	r3, r3
 800286e:	4053      	eors	r3, r2
 8002870:	b25b      	sxtb	r3, r3
 8002872:	b2da      	uxtb	r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	7cdb      	ldrb	r3, [r3, #19]
 800287c:	733b      	strb	r3, [r7, #12]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	7d1b      	ldrb	r3, [r3, #20]
 8002882:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8002888:	2300      	movs	r3, #0
 800288a:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	4053      	eors	r3, r2
 8002892:	b2db      	uxtb	r3, r3
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	b25a      	sxtb	r2, r3
 8002898:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800289c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028a0:	b25b      	sxtb	r3, r3
 80028a2:	4053      	eors	r3, r2
 80028a4:	b25b      	sxtb	r3, r3
 80028a6:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 80028a8:	7bba      	ldrb	r2, [r7, #14]
 80028aa:	79bb      	ldrb	r3, [r7, #6]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	4053      	eors	r3, r2
 80028b2:	015b      	lsls	r3, r3, #5
 80028b4:	b25a      	sxtb	r2, r3
 80028b6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80028ba:	4053      	eors	r3, r2
 80028bc:	b25b      	sxtb	r3, r3
 80028be:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	723b      	strb	r3, [r7, #8]
 80028c4:	7bbb      	ldrb	r3, [r7, #14]
 80028c6:	727b      	strb	r3, [r7, #9]
	DC_ON();
 80028c8:	f7fe fbc2 	bl	8001050 <DC_ON>
	CS_OFF();
 80028cc:	f7fe fbb5 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	7b5b      	ldrb	r3, [r3, #13]
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	e0ea      	b.n	8002aae <LCD_printG+0x2ba>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	7b1b      	ldrb	r3, [r3, #12]
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	e0db      	b.n	8002a98 <LCD_printG+0x2a4>
		{
			if(kolumna==(ADRES->X0_SET+2) && (wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+12)))
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	7b1b      	ldrb	r3, [r3, #12]
 80028e4:	3302      	adds	r3, #2
 80028e6:	461a      	mov	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d116      	bne.n	800291c <LCD_printG+0x128>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	7b5b      	ldrb	r3, [r3, #13]
 80028f2:	3303      	adds	r3, #3
 80028f4:	461a      	mov	r2, r3
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d30f      	bcc.n	800291c <LCD_printG+0x128>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	7b5b      	ldrb	r3, [r3, #13]
 8002900:	330c      	adds	r3, #12
 8002902:	461a      	mov	r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4293      	cmp	r3, r2
 8002908:	d808      	bhi.n	800291c <LCD_printG+0x128>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800290a:	f107 010c 	add.w	r1, r7, #12
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
 8002912:	2202      	movs	r2, #2
 8002914:	486c      	ldr	r0, [pc, #432]	@ (8002ac8 <LCD_printG+0x2d4>)
 8002916:	f015 fef2 	bl	80186fe <HAL_SPI_Transmit>
 800291a:	e0ba      	b.n	8002a92 <LCD_printG+0x29e>
			}
			else if((kolumna>=(ADRES->X0_SET+5) && kolumna<=(ADRES->X0_SET+10)) && wiersz==(ADRES->Y0_SET+0))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	7b1b      	ldrb	r3, [r3, #12]
 8002920:	3305      	adds	r3, #5
 8002922:	461a      	mov	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	4293      	cmp	r3, r2
 8002928:	d315      	bcc.n	8002956 <LCD_printG+0x162>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	7b1b      	ldrb	r3, [r3, #12]
 800292e:	330a      	adds	r3, #10
 8002930:	461a      	mov	r2, r3
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	4293      	cmp	r3, r2
 8002936:	d80e      	bhi.n	8002956 <LCD_printG+0x162>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	7b5b      	ldrb	r3, [r3, #13]
 800293c:	461a      	mov	r2, r3
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4293      	cmp	r3, r2
 8002942:	d108      	bne.n	8002956 <LCD_printG+0x162>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002944:	f107 010c 	add.w	r1, r7, #12
 8002948:	f04f 33ff 	mov.w	r3, #4294967295
 800294c:	2202      	movs	r2, #2
 800294e:	485e      	ldr	r0, [pc, #376]	@ (8002ac8 <LCD_printG+0x2d4>)
 8002950:	f015 fed5 	bl	80186fe <HAL_SPI_Transmit>
 8002954:	e09d      	b.n	8002a92 <LCD_printG+0x29e>
			}
			else if((kolumna>=(ADRES->X0_SET+5) && kolumna<=(ADRES->X0_SET+10)) && wiersz==(ADRES->Y0_SET+6))
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	7b1b      	ldrb	r3, [r3, #12]
 800295a:	3305      	adds	r3, #5
 800295c:	461a      	mov	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	4293      	cmp	r3, r2
 8002962:	d316      	bcc.n	8002992 <LCD_printG+0x19e>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	7b1b      	ldrb	r3, [r3, #12]
 8002968:	330a      	adds	r3, #10
 800296a:	461a      	mov	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	4293      	cmp	r3, r2
 8002970:	d80f      	bhi.n	8002992 <LCD_printG+0x19e>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	7b5b      	ldrb	r3, [r3, #13]
 8002976:	3306      	adds	r3, #6
 8002978:	461a      	mov	r2, r3
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4293      	cmp	r3, r2
 800297e:	d108      	bne.n	8002992 <LCD_printG+0x19e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002980:	f107 010c 	add.w	r1, r7, #12
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
 8002988:	2202      	movs	r2, #2
 800298a:	484f      	ldr	r0, [pc, #316]	@ (8002ac8 <LCD_printG+0x2d4>)
 800298c:	f015 feb7 	bl	80186fe <HAL_SPI_Transmit>
 8002990:	e07f      	b.n	8002a92 <LCD_printG+0x29e>
			}
			else if((kolumna>=(ADRES->X0_SET+5) && kolumna<=(ADRES->X0_SET+10)) && wiersz==(ADRES->Y0_SET+14))
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	7b1b      	ldrb	r3, [r3, #12]
 8002996:	3305      	adds	r3, #5
 8002998:	461a      	mov	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	4293      	cmp	r3, r2
 800299e:	d316      	bcc.n	80029ce <LCD_printG+0x1da>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	7b1b      	ldrb	r3, [r3, #12]
 80029a4:	330a      	adds	r3, #10
 80029a6:	461a      	mov	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d80f      	bhi.n	80029ce <LCD_printG+0x1da>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	7b5b      	ldrb	r3, [r3, #13]
 80029b2:	330e      	adds	r3, #14
 80029b4:	461a      	mov	r2, r3
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d108      	bne.n	80029ce <LCD_printG+0x1da>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80029bc:	f107 010c 	add.w	r1, r7, #12
 80029c0:	f04f 33ff 	mov.w	r3, #4294967295
 80029c4:	2202      	movs	r2, #2
 80029c6:	4840      	ldr	r0, [pc, #256]	@ (8002ac8 <LCD_printG+0x2d4>)
 80029c8:	f015 fe99 	bl	80186fe <HAL_SPI_Transmit>
 80029cc:	e061      	b.n	8002a92 <LCD_printG+0x29e>
			}
			else if(kolumna==(ADRES->X0_SET+10) && (wiersz>=(ADRES->Y0_SET+6) && wiersz<=(ADRES->Y0_SET+14)))
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	7b1b      	ldrb	r3, [r3, #12]
 80029d2:	330a      	adds	r3, #10
 80029d4:	461a      	mov	r2, r3
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	4293      	cmp	r3, r2
 80029da:	d116      	bne.n	8002a0a <LCD_printG+0x216>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	7b5b      	ldrb	r3, [r3, #13]
 80029e0:	3306      	adds	r3, #6
 80029e2:	461a      	mov	r2, r3
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d30f      	bcc.n	8002a0a <LCD_printG+0x216>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	7b5b      	ldrb	r3, [r3, #13]
 80029ee:	330e      	adds	r3, #14
 80029f0:	461a      	mov	r2, r3
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d808      	bhi.n	8002a0a <LCD_printG+0x216>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80029f8:	f107 010c 	add.w	r1, r7, #12
 80029fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002a00:	2202      	movs	r2, #2
 8002a02:	4831      	ldr	r0, [pc, #196]	@ (8002ac8 <LCD_printG+0x2d4>)
 8002a04:	f015 fe7b 	bl	80186fe <HAL_SPI_Transmit>
 8002a08:	e043      	b.n	8002a92 <LCD_printG+0x29e>
			}
			else if(kolumna==(ADRES->X0_SET+3) && (wiersz==(ADRES->Y0_SET+2) || wiersz==(ADRES->Y0_SET+13)))
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	7b1b      	ldrb	r3, [r3, #12]
 8002a0e:	3303      	adds	r3, #3
 8002a10:	461a      	mov	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d116      	bne.n	8002a46 <LCD_printG+0x252>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	7b5b      	ldrb	r3, [r3, #13]
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	461a      	mov	r2, r3
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d006      	beq.n	8002a34 <LCD_printG+0x240>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	7b5b      	ldrb	r3, [r3, #13]
 8002a2a:	330d      	adds	r3, #13
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d108      	bne.n	8002a46 <LCD_printG+0x252>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002a34:	f107 010c 	add.w	r1, r7, #12
 8002a38:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	4822      	ldr	r0, [pc, #136]	@ (8002ac8 <LCD_printG+0x2d4>)
 8002a40:	f015 fe5d 	bl	80186fe <HAL_SPI_Transmit>
 8002a44:	e025      	b.n	8002a92 <LCD_printG+0x29e>
			}
			else if(kolumna==(ADRES->X0_SET+4) && (wiersz==(ADRES->Y0_SET+1) || wiersz==(ADRES->Y0_SET+14)))
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	7b1b      	ldrb	r3, [r3, #12]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d116      	bne.n	8002a82 <LCD_printG+0x28e>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	7b5b      	ldrb	r3, [r3, #13]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d006      	beq.n	8002a70 <LCD_printG+0x27c>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	7b5b      	ldrb	r3, [r3, #13]
 8002a66:	330e      	adds	r3, #14
 8002a68:	461a      	mov	r2, r3
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d108      	bne.n	8002a82 <LCD_printG+0x28e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002a70:	f107 010c 	add.w	r1, r7, #12
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295
 8002a78:	2202      	movs	r2, #2
 8002a7a:	4813      	ldr	r0, [pc, #76]	@ (8002ac8 <LCD_printG+0x2d4>)
 8002a7c:	f015 fe3f 	bl	80186fe <HAL_SPI_Transmit>
 8002a80:	e007      	b.n	8002a92 <LCD_printG+0x29e>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8002a82:	f107 0108 	add.w	r1, r7, #8
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	480e      	ldr	r0, [pc, #56]	@ (8002ac8 <LCD_printG+0x2d4>)
 8002a8e:	f015 fe36 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	3301      	adds	r3, #1
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	7b9b      	ldrb	r3, [r3, #14]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	f4ff af1c 	bcc.w	80028e0 <LCD_printG+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	7bdb      	ldrb	r3, [r3, #15]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	f4ff af0e 	bcc.w	80028d8 <LCD_printG+0xe4>
			}
		}
	}
	CS_ON();
 8002abc:	f7fe fab2 	bl	8001024 <CS_ON>
}
 8002ac0:	bf00      	nop
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	200004a4 	.word	0x200004a4

08002acc <LCD_printI>:
	}
	CS_ON();
}

void LCD_printI(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	71fb      	strb	r3, [r7, #7]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	71bb      	strb	r3, [r7, #6]
 8002adc:	4613      	mov	r3, r2
 8002ade:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	2200      	movs	r2, #0
 8002aec:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	223f      	movs	r2, #63	@ 0x3f
 8002af2:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	221f      	movs	r2, #31
 8002af8:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2200      	movs	r2, #0
 8002afe:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	7cda      	ldrb	r2, [r3, #19]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	7c1b      	ldrb	r3, [r3, #16]
 8002b0e:	4053      	eors	r3, r2
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	b25a      	sxtb	r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	7c5b      	ldrb	r3, [r3, #17]
 8002b1a:	b25b      	sxtb	r3, r3
 8002b1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b20:	b25b      	sxtb	r3, r3
 8002b22:	4053      	eors	r3, r2
 8002b24:	b25b      	sxtb	r3, r3
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	7d1b      	ldrb	r3, [r3, #20]
 8002b30:	461a      	mov	r2, r3
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	7c5b      	ldrb	r3, [r3, #17]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	4053      	eors	r3, r2
 8002b3c:	015b      	lsls	r3, r3, #5
 8002b3e:	b25a      	sxtb	r2, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	7c9b      	ldrb	r3, [r3, #18]
 8002b44:	b25b      	sxtb	r3, r3
 8002b46:	4053      	eors	r3, r2
 8002b48:	b25b      	sxtb	r3, r3
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	7cdb      	ldrb	r3, [r3, #19]
 8002b54:	733b      	strb	r3, [r7, #12]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	7d1b      	ldrb	r3, [r3, #20]
 8002b5a:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	4053      	eors	r3, r2
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	b25a      	sxtb	r2, r3
 8002b70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b78:	b25b      	sxtb	r3, r3
 8002b7a:	4053      	eors	r3, r2
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8002b80:	7bba      	ldrb	r2, [r7, #14]
 8002b82:	79bb      	ldrb	r3, [r7, #6]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	4053      	eors	r3, r2
 8002b8a:	015b      	lsls	r3, r3, #5
 8002b8c:	b25a      	sxtb	r2, r3
 8002b8e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002b92:	4053      	eors	r3, r2
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	723b      	strb	r3, [r7, #8]
 8002b9c:	7bbb      	ldrb	r3, [r7, #14]
 8002b9e:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8002ba0:	f7fe fa56 	bl	8001050 <DC_ON>
	CS_OFF();
 8002ba4:	f7fe fa49 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	7b5b      	ldrb	r3, [r3, #13]
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	e070      	b.n	8002c92 <LCD_printI+0x1c6>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	7b1b      	ldrb	r3, [r3, #12]
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	e062      	b.n	8002c7e <LCD_printI+0x1b2>
		{
			if(kolumna==(ADRES->X0_SET+6) && (wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+14)))
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	7b1b      	ldrb	r3, [r3, #12]
 8002bbc:	3306      	adds	r3, #6
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d115      	bne.n	8002bf2 <LCD_printI+0x126>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	7b5b      	ldrb	r3, [r3, #13]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d30f      	bcc.n	8002bf2 <LCD_printI+0x126>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	7b5b      	ldrb	r3, [r3, #13]
 8002bd6:	330e      	adds	r3, #14
 8002bd8:	461a      	mov	r2, r3
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d808      	bhi.n	8002bf2 <LCD_printI+0x126>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002be0:	f107 010c 	add.w	r1, r7, #12
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
 8002be8:	2202      	movs	r2, #2
 8002bea:	4830      	ldr	r0, [pc, #192]	@ (8002cac <LCD_printI+0x1e0>)
 8002bec:	f015 fd87 	bl	80186fe <HAL_SPI_Transmit>
 8002bf0:	e042      	b.n	8002c78 <LCD_printI+0x1ac>
			}
			else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+8)) && wiersz==(ADRES->Y0_SET+0))
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	7b1b      	ldrb	r3, [r3, #12]
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d315      	bcc.n	8002c2c <LCD_printI+0x160>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	7b1b      	ldrb	r3, [r3, #12]
 8002c04:	3308      	adds	r3, #8
 8002c06:	461a      	mov	r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d80e      	bhi.n	8002c2c <LCD_printI+0x160>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	7b5b      	ldrb	r3, [r3, #13]
 8002c12:	461a      	mov	r2, r3
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d108      	bne.n	8002c2c <LCD_printI+0x160>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002c1a:	f107 010c 	add.w	r1, r7, #12
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c22:	2202      	movs	r2, #2
 8002c24:	4821      	ldr	r0, [pc, #132]	@ (8002cac <LCD_printI+0x1e0>)
 8002c26:	f015 fd6a 	bl	80186fe <HAL_SPI_Transmit>
 8002c2a:	e025      	b.n	8002c78 <LCD_printI+0x1ac>
			}
			else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+8)) && wiersz==(ADRES->Y0_SET+14))
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	7b1b      	ldrb	r3, [r3, #12]
 8002c30:	3304      	adds	r3, #4
 8002c32:	461a      	mov	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d316      	bcc.n	8002c68 <LCD_printI+0x19c>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	7b1b      	ldrb	r3, [r3, #12]
 8002c3e:	3308      	adds	r3, #8
 8002c40:	461a      	mov	r2, r3
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d80f      	bhi.n	8002c68 <LCD_printI+0x19c>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	7b5b      	ldrb	r3, [r3, #13]
 8002c4c:	330e      	adds	r3, #14
 8002c4e:	461a      	mov	r2, r3
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d108      	bne.n	8002c68 <LCD_printI+0x19c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002c56:	f107 010c 	add.w	r1, r7, #12
 8002c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5e:	2202      	movs	r2, #2
 8002c60:	4812      	ldr	r0, [pc, #72]	@ (8002cac <LCD_printI+0x1e0>)
 8002c62:	f015 fd4c 	bl	80186fe <HAL_SPI_Transmit>
 8002c66:	e007      	b.n	8002c78 <LCD_printI+0x1ac>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8002c68:	f107 0108 	add.w	r1, r7, #8
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c70:	2202      	movs	r2, #2
 8002c72:	480e      	ldr	r0, [pc, #56]	@ (8002cac <LCD_printI+0x1e0>)
 8002c74:	f015 fd43 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	7b9b      	ldrb	r3, [r3, #14]
 8002c82:	3301      	adds	r3, #1
 8002c84:	461a      	mov	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d395      	bcc.n	8002bb8 <LCD_printI+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	7bdb      	ldrb	r3, [r3, #15]
 8002c96:	461a      	mov	r2, r3
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d388      	bcc.n	8002bb0 <LCD_printI+0xe4>
			}
		}
	}
	CS_ON();
 8002c9e:	f7fe f9c1 	bl	8001024 <CS_ON>
}
 8002ca2:	bf00      	nop
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	200004a4 	.word	0x200004a4

08002cb0 <LCD_printJ>:

void LCD_printJ(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	4603      	mov	r3, r0
 8002cba:	71fb      	strb	r3, [r7, #7]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	71bb      	strb	r3, [r7, #6]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	223f      	movs	r2, #63	@ 0x3f
 8002cd6:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	221f      	movs	r2, #31
 8002cdc:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	7cda      	ldrb	r2, [r3, #19]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	7c1b      	ldrb	r3, [r3, #16]
 8002cf2:	4053      	eors	r3, r2
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	b25a      	sxtb	r2, r3
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	7c5b      	ldrb	r3, [r3, #17]
 8002cfe:	b25b      	sxtb	r3, r3
 8002d00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d04:	b25b      	sxtb	r3, r3
 8002d06:	4053      	eors	r3, r2
 8002d08:	b25b      	sxtb	r3, r3
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	7d1b      	ldrb	r3, [r3, #20]
 8002d14:	461a      	mov	r2, r3
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	7c5b      	ldrb	r3, [r3, #17]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	4053      	eors	r3, r2
 8002d20:	015b      	lsls	r3, r3, #5
 8002d22:	b25a      	sxtb	r2, r3
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	7c9b      	ldrb	r3, [r3, #18]
 8002d28:	b25b      	sxtb	r3, r3
 8002d2a:	4053      	eors	r3, r2
 8002d2c:	b25b      	sxtb	r3, r3
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	7cdb      	ldrb	r3, [r3, #19]
 8002d38:	733b      	strb	r3, [r7, #12]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	7d1b      	ldrb	r3, [r3, #20]
 8002d3e:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8002d44:	2300      	movs	r3, #0
 8002d46:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	4053      	eors	r3, r2
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	b25a      	sxtb	r2, r3
 8002d54:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d5c:	b25b      	sxtb	r3, r3
 8002d5e:	4053      	eors	r3, r2
 8002d60:	b25b      	sxtb	r3, r3
 8002d62:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8002d64:	7bba      	ldrb	r2, [r7, #14]
 8002d66:	79bb      	ldrb	r3, [r7, #6]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4053      	eors	r3, r2
 8002d6e:	015b      	lsls	r3, r3, #5
 8002d70:	b25a      	sxtb	r2, r3
 8002d72:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002d76:	4053      	eors	r3, r2
 8002d78:	b25b      	sxtb	r3, r3
 8002d7a:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	723b      	strb	r3, [r7, #8]
 8002d80:	7bbb      	ldrb	r3, [r7, #14]
 8002d82:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8002d84:	f7fe f964 	bl	8001050 <DC_ON>
	CS_OFF();
 8002d88:	f7fe f957 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	7b5b      	ldrb	r3, [r3, #13]
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	e0a6      	b.n	8002ee2 <LCD_printJ+0x232>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	7b1b      	ldrb	r3, [r3, #12]
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e097      	b.n	8002ecc <LCD_printJ+0x21c>
		{
			if(kolumna==(ADRES->X0_SET+8) && (wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+13)))
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	7b1b      	ldrb	r3, [r3, #12]
 8002da0:	3308      	adds	r3, #8
 8002da2:	461a      	mov	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d115      	bne.n	8002dd6 <LCD_printJ+0x126>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	7b5b      	ldrb	r3, [r3, #13]
 8002dae:	461a      	mov	r2, r3
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d30f      	bcc.n	8002dd6 <LCD_printJ+0x126>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	7b5b      	ldrb	r3, [r3, #13]
 8002dba:	330d      	adds	r3, #13
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d808      	bhi.n	8002dd6 <LCD_printJ+0x126>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002dc4:	f107 010c 	add.w	r1, r7, #12
 8002dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dcc:	2202      	movs	r2, #2
 8002dce:	484b      	ldr	r0, [pc, #300]	@ (8002efc <LCD_printJ+0x24c>)
 8002dd0:	f015 fc95 	bl	80186fe <HAL_SPI_Transmit>
 8002dd4:	e077      	b.n	8002ec6 <LCD_printJ+0x216>
			}
			else if((kolumna>=(ADRES->X0_SET+5) && kolumna<=(ADRES->X0_SET+10)) && wiersz==(ADRES->Y0_SET+0))
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	7b1b      	ldrb	r3, [r3, #12]
 8002dda:	3305      	adds	r3, #5
 8002ddc:	461a      	mov	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d315      	bcc.n	8002e10 <LCD_printJ+0x160>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	7b1b      	ldrb	r3, [r3, #12]
 8002de8:	330a      	adds	r3, #10
 8002dea:	461a      	mov	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d80e      	bhi.n	8002e10 <LCD_printJ+0x160>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	7b5b      	ldrb	r3, [r3, #13]
 8002df6:	461a      	mov	r2, r3
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d108      	bne.n	8002e10 <LCD_printJ+0x160>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002dfe:	f107 010c 	add.w	r1, r7, #12
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295
 8002e06:	2202      	movs	r2, #2
 8002e08:	483c      	ldr	r0, [pc, #240]	@ (8002efc <LCD_printJ+0x24c>)
 8002e0a:	f015 fc78 	bl	80186fe <HAL_SPI_Transmit>
 8002e0e:	e05a      	b.n	8002ec6 <LCD_printJ+0x216>
			}
			else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+7)) && wiersz==(ADRES->Y0_SET+14))
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	7b1b      	ldrb	r3, [r3, #12]
 8002e14:	3304      	adds	r3, #4
 8002e16:	461a      	mov	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d316      	bcc.n	8002e4c <LCD_printJ+0x19c>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	7b1b      	ldrb	r3, [r3, #12]
 8002e22:	3307      	adds	r3, #7
 8002e24:	461a      	mov	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d80f      	bhi.n	8002e4c <LCD_printJ+0x19c>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	7b5b      	ldrb	r3, [r3, #13]
 8002e30:	330e      	adds	r3, #14
 8002e32:	461a      	mov	r2, r3
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d108      	bne.n	8002e4c <LCD_printJ+0x19c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002e3a:	f107 010c 	add.w	r1, r7, #12
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e42:	2202      	movs	r2, #2
 8002e44:	482d      	ldr	r0, [pc, #180]	@ (8002efc <LCD_printJ+0x24c>)
 8002e46:	f015 fc5a 	bl	80186fe <HAL_SPI_Transmit>
 8002e4a:	e03c      	b.n	8002ec6 <LCD_printJ+0x216>
			}
			else if(kolumna==(ADRES->X0_SET+2) && (wiersz>=(ADRES->Y0_SET+9) && wiersz<=(ADRES->Y0_SET+12)))
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	7b1b      	ldrb	r3, [r3, #12]
 8002e50:	3302      	adds	r3, #2
 8002e52:	461a      	mov	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d116      	bne.n	8002e88 <LCD_printJ+0x1d8>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	7b5b      	ldrb	r3, [r3, #13]
 8002e5e:	3309      	adds	r3, #9
 8002e60:	461a      	mov	r2, r3
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d30f      	bcc.n	8002e88 <LCD_printJ+0x1d8>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	7b5b      	ldrb	r3, [r3, #13]
 8002e6c:	330c      	adds	r3, #12
 8002e6e:	461a      	mov	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d808      	bhi.n	8002e88 <LCD_printJ+0x1d8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002e76:	f107 010c 	add.w	r1, r7, #12
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	2202      	movs	r2, #2
 8002e80:	481e      	ldr	r0, [pc, #120]	@ (8002efc <LCD_printJ+0x24c>)
 8002e82:	f015 fc3c 	bl	80186fe <HAL_SPI_Transmit>
 8002e86:	e01e      	b.n	8002ec6 <LCD_printJ+0x216>
			}
			else if(kolumna==(ADRES->X0_SET+3) && wiersz==(ADRES->Y0_SET+13))
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	7b1b      	ldrb	r3, [r3, #12]
 8002e8c:	3303      	adds	r3, #3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d10f      	bne.n	8002eb6 <LCD_printJ+0x206>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	7b5b      	ldrb	r3, [r3, #13]
 8002e9a:	330d      	adds	r3, #13
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d108      	bne.n	8002eb6 <LCD_printJ+0x206>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8002ea4:	f107 010c 	add.w	r1, r7, #12
 8002ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8002eac:	2202      	movs	r2, #2
 8002eae:	4813      	ldr	r0, [pc, #76]	@ (8002efc <LCD_printJ+0x24c>)
 8002eb0:	f015 fc25 	bl	80186fe <HAL_SPI_Transmit>
 8002eb4:	e007      	b.n	8002ec6 <LCD_printJ+0x216>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8002eb6:	f107 0108 	add.w	r1, r7, #8
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	480e      	ldr	r0, [pc, #56]	@ (8002efc <LCD_printJ+0x24c>)
 8002ec2:	f015 fc1c 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	7b9b      	ldrb	r3, [r3, #14]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	f4ff af60 	bcc.w	8002d9c <LCD_printJ+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	7bdb      	ldrb	r3, [r3, #15]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4293      	cmp	r3, r2
 8002eec:	f4ff af52 	bcc.w	8002d94 <LCD_printJ+0xe4>
			}
		}
	}
	CS_ON();
 8002ef0:	f7fe f898 	bl	8001024 <CS_ON>
}
 8002ef4:	bf00      	nop
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	200004a4 	.word	0x200004a4

08002f00 <LCD_printK>:

void LCD_printK(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	4603      	mov	r3, r0
 8002f0a:	71fb      	strb	r3, [r7, #7]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	71bb      	strb	r3, [r7, #6]
 8002f10:	4613      	mov	r3, r2
 8002f12:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	223f      	movs	r2, #63	@ 0x3f
 8002f26:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	221f      	movs	r2, #31
 8002f2c:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2200      	movs	r2, #0
 8002f32:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2200      	movs	r2, #0
 8002f38:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	7cda      	ldrb	r2, [r3, #19]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	7c1b      	ldrb	r3, [r3, #16]
 8002f42:	4053      	eors	r3, r2
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	b25a      	sxtb	r2, r3
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	7c5b      	ldrb	r3, [r3, #17]
 8002f4e:	b25b      	sxtb	r3, r3
 8002f50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f54:	b25b      	sxtb	r3, r3
 8002f56:	4053      	eors	r3, r2
 8002f58:	b25b      	sxtb	r3, r3
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	7d1b      	ldrb	r3, [r3, #20]
 8002f64:	461a      	mov	r2, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	7c5b      	ldrb	r3, [r3, #17]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	4053      	eors	r3, r2
 8002f70:	015b      	lsls	r3, r3, #5
 8002f72:	b25a      	sxtb	r2, r3
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	7c9b      	ldrb	r3, [r3, #18]
 8002f78:	b25b      	sxtb	r3, r3
 8002f7a:	4053      	eors	r3, r2
 8002f7c:	b25b      	sxtb	r3, r3
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	7cdb      	ldrb	r3, [r3, #19]
 8002f88:	733b      	strb	r3, [r7, #12]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	7d1b      	ldrb	r3, [r3, #20]
 8002f8e:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8002f94:	2300      	movs	r3, #0
 8002f96:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8002f98:	7bfa      	ldrb	r2, [r7, #15]
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	4053      	eors	r3, r2
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	b25a      	sxtb	r2, r3
 8002fa4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002fa8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fac:	b25b      	sxtb	r3, r3
 8002fae:	4053      	eors	r3, r2
 8002fb0:	b25b      	sxtb	r3, r3
 8002fb2:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8002fb4:	7bba      	ldrb	r2, [r7, #14]
 8002fb6:	79bb      	ldrb	r3, [r7, #6]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	4053      	eors	r3, r2
 8002fbe:	015b      	lsls	r3, r3, #5
 8002fc0:	b25a      	sxtb	r2, r3
 8002fc2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002fc6:	4053      	eors	r3, r2
 8002fc8:	b25b      	sxtb	r3, r3
 8002fca:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	723b      	strb	r3, [r7, #8]
 8002fd0:	7bbb      	ldrb	r3, [r7, #14]
 8002fd2:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8002fd4:	f7fe f83c 	bl	8001050 <DC_ON>
	CS_OFF();
 8002fd8:	f7fe f82f 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	7b5b      	ldrb	r3, [r3, #13]
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	e141      	b.n	8003268 <LCD_printK+0x368>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	7b1b      	ldrb	r3, [r3, #12]
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	e132      	b.n	8003252 <LCD_printK+0x352>
		{
			if(kolumna==(ADRES->X0_SET+3) && (wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+14)))
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	7b1b      	ldrb	r3, [r3, #12]
 8002ff0:	3303      	adds	r3, #3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d115      	bne.n	8003026 <LCD_printK+0x126>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	7b5b      	ldrb	r3, [r3, #13]
 8002ffe:	461a      	mov	r2, r3
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4293      	cmp	r3, r2
 8003004:	d30f      	bcc.n	8003026 <LCD_printK+0x126>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	7b5b      	ldrb	r3, [r3, #13]
 800300a:	330e      	adds	r3, #14
 800300c:	461a      	mov	r2, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4293      	cmp	r3, r2
 8003012:	d808      	bhi.n	8003026 <LCD_printK+0x126>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003014:	f107 010c 	add.w	r1, r7, #12
 8003018:	f04f 33ff 	mov.w	r3, #4294967295
 800301c:	2202      	movs	r2, #2
 800301e:	4899      	ldr	r0, [pc, #612]	@ (8003284 <LCD_printK+0x384>)
 8003020:	f015 fb6d 	bl	80186fe <HAL_SPI_Transmit>
 8003024:	e112      	b.n	800324c <LCD_printK+0x34c>
			}
			else if(((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+4)) || (kolumna>=(ADRES->X0_SET+8) && kolumna<=(ADRES->X0_SET+10))) && wiersz==(ADRES->Y0_SET+0))
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	7b1b      	ldrb	r3, [r3, #12]
 800302a:	3302      	adds	r3, #2
 800302c:	461a      	mov	r2, r3
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	4293      	cmp	r3, r2
 8003032:	d306      	bcc.n	8003042 <LCD_printK+0x142>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	7b1b      	ldrb	r3, [r3, #12]
 8003038:	3304      	adds	r3, #4
 800303a:	461a      	mov	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	4293      	cmp	r3, r2
 8003040:	d90d      	bls.n	800305e <LCD_printK+0x15e>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	7b1b      	ldrb	r3, [r3, #12]
 8003046:	3308      	adds	r3, #8
 8003048:	461a      	mov	r2, r3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	4293      	cmp	r3, r2
 800304e:	d315      	bcc.n	800307c <LCD_printK+0x17c>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	7b1b      	ldrb	r3, [r3, #12]
 8003054:	330a      	adds	r3, #10
 8003056:	461a      	mov	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	4293      	cmp	r3, r2
 800305c:	d80e      	bhi.n	800307c <LCD_printK+0x17c>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	7b5b      	ldrb	r3, [r3, #13]
 8003062:	461a      	mov	r2, r3
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4293      	cmp	r3, r2
 8003068:	d108      	bne.n	800307c <LCD_printK+0x17c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800306a:	f107 010c 	add.w	r1, r7, #12
 800306e:	f04f 33ff 	mov.w	r3, #4294967295
 8003072:	2202      	movs	r2, #2
 8003074:	4883      	ldr	r0, [pc, #524]	@ (8003284 <LCD_printK+0x384>)
 8003076:	f015 fb42 	bl	80186fe <HAL_SPI_Transmit>
 800307a:	e0e7      	b.n	800324c <LCD_printK+0x34c>
			}
			else if(((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+4)) || (kolumna>=(ADRES->X0_SET+8) && kolumna<=(ADRES->X0_SET+10))) && wiersz==(ADRES->Y0_SET+14))
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	7b1b      	ldrb	r3, [r3, #12]
 8003080:	3302      	adds	r3, #2
 8003082:	461a      	mov	r2, r3
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	4293      	cmp	r3, r2
 8003088:	d306      	bcc.n	8003098 <LCD_printK+0x198>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	7b1b      	ldrb	r3, [r3, #12]
 800308e:	3304      	adds	r3, #4
 8003090:	461a      	mov	r2, r3
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	4293      	cmp	r3, r2
 8003096:	d90d      	bls.n	80030b4 <LCD_printK+0x1b4>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	7b1b      	ldrb	r3, [r3, #12]
 800309c:	3308      	adds	r3, #8
 800309e:	461a      	mov	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d316      	bcc.n	80030d4 <LCD_printK+0x1d4>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	7b1b      	ldrb	r3, [r3, #12]
 80030aa:	330a      	adds	r3, #10
 80030ac:	461a      	mov	r2, r3
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d80f      	bhi.n	80030d4 <LCD_printK+0x1d4>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	7b5b      	ldrb	r3, [r3, #13]
 80030b8:	330e      	adds	r3, #14
 80030ba:	461a      	mov	r2, r3
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4293      	cmp	r3, r2
 80030c0:	d108      	bne.n	80030d4 <LCD_printK+0x1d4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80030c2:	f107 010c 	add.w	r1, r7, #12
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ca:	2202      	movs	r2, #2
 80030cc:	486d      	ldr	r0, [pc, #436]	@ (8003284 <LCD_printK+0x384>)
 80030ce:	f015 fb16 	bl	80186fe <HAL_SPI_Transmit>
 80030d2:	e0bb      	b.n	800324c <LCD_printK+0x34c>
			}
			else if(kolumna==(ADRES->X0_SET+4) && (wiersz==(ADRES->Y0_SET+6) || wiersz==(ADRES->Y0_SET+8)))
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	7b1b      	ldrb	r3, [r3, #12]
 80030d8:	3304      	adds	r3, #4
 80030da:	461a      	mov	r2, r3
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	4293      	cmp	r3, r2
 80030e0:	d116      	bne.n	8003110 <LCD_printK+0x210>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	7b5b      	ldrb	r3, [r3, #13]
 80030e6:	3306      	adds	r3, #6
 80030e8:	461a      	mov	r2, r3
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d006      	beq.n	80030fe <LCD_printK+0x1fe>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	7b5b      	ldrb	r3, [r3, #13]
 80030f4:	3308      	adds	r3, #8
 80030f6:	461a      	mov	r2, r3
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d108      	bne.n	8003110 <LCD_printK+0x210>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80030fe:	f107 010c 	add.w	r1, r7, #12
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	2202      	movs	r2, #2
 8003108:	485e      	ldr	r0, [pc, #376]	@ (8003284 <LCD_printK+0x384>)
 800310a:	f015 faf8 	bl	80186fe <HAL_SPI_Transmit>
 800310e:	e09d      	b.n	800324c <LCD_printK+0x34c>
			}
			else if(kolumna==(ADRES->X0_SET+5) && (wiersz==(ADRES->Y0_SET+5) || wiersz==(ADRES->Y0_SET+9)))
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	7b1b      	ldrb	r3, [r3, #12]
 8003114:	3305      	adds	r3, #5
 8003116:	461a      	mov	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	4293      	cmp	r3, r2
 800311c:	d116      	bne.n	800314c <LCD_printK+0x24c>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	7b5b      	ldrb	r3, [r3, #13]
 8003122:	3305      	adds	r3, #5
 8003124:	461a      	mov	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4293      	cmp	r3, r2
 800312a:	d006      	beq.n	800313a <LCD_printK+0x23a>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	7b5b      	ldrb	r3, [r3, #13]
 8003130:	3309      	adds	r3, #9
 8003132:	461a      	mov	r2, r3
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4293      	cmp	r3, r2
 8003138:	d108      	bne.n	800314c <LCD_printK+0x24c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800313a:	f107 010c 	add.w	r1, r7, #12
 800313e:	f04f 33ff 	mov.w	r3, #4294967295
 8003142:	2202      	movs	r2, #2
 8003144:	484f      	ldr	r0, [pc, #316]	@ (8003284 <LCD_printK+0x384>)
 8003146:	f015 fada 	bl	80186fe <HAL_SPI_Transmit>
 800314a:	e07f      	b.n	800324c <LCD_printK+0x34c>
			}
			else if(kolumna==(ADRES->X0_SET+6) && (wiersz==(ADRES->Y0_SET+4) || wiersz==(ADRES->Y0_SET+10)))
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	7b1b      	ldrb	r3, [r3, #12]
 8003150:	3306      	adds	r3, #6
 8003152:	461a      	mov	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	4293      	cmp	r3, r2
 8003158:	d116      	bne.n	8003188 <LCD_printK+0x288>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	7b5b      	ldrb	r3, [r3, #13]
 800315e:	3304      	adds	r3, #4
 8003160:	461a      	mov	r2, r3
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4293      	cmp	r3, r2
 8003166:	d006      	beq.n	8003176 <LCD_printK+0x276>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	7b5b      	ldrb	r3, [r3, #13]
 800316c:	330a      	adds	r3, #10
 800316e:	461a      	mov	r2, r3
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4293      	cmp	r3, r2
 8003174:	d108      	bne.n	8003188 <LCD_printK+0x288>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003176:	f107 010c 	add.w	r1, r7, #12
 800317a:	f04f 33ff 	mov.w	r3, #4294967295
 800317e:	2202      	movs	r2, #2
 8003180:	4840      	ldr	r0, [pc, #256]	@ (8003284 <LCD_printK+0x384>)
 8003182:	f015 fabc 	bl	80186fe <HAL_SPI_Transmit>
 8003186:	e061      	b.n	800324c <LCD_printK+0x34c>
			}
			else if(kolumna==(ADRES->X0_SET+7) && (wiersz==(ADRES->Y0_SET+3) || wiersz==(ADRES->Y0_SET+11)))
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	7b1b      	ldrb	r3, [r3, #12]
 800318c:	3307      	adds	r3, #7
 800318e:	461a      	mov	r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	4293      	cmp	r3, r2
 8003194:	d116      	bne.n	80031c4 <LCD_printK+0x2c4>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	7b5b      	ldrb	r3, [r3, #13]
 800319a:	3303      	adds	r3, #3
 800319c:	461a      	mov	r2, r3
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d006      	beq.n	80031b2 <LCD_printK+0x2b2>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	7b5b      	ldrb	r3, [r3, #13]
 80031a8:	330b      	adds	r3, #11
 80031aa:	461a      	mov	r2, r3
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d108      	bne.n	80031c4 <LCD_printK+0x2c4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80031b2:	f107 010c 	add.w	r1, r7, #12
 80031b6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ba:	2202      	movs	r2, #2
 80031bc:	4831      	ldr	r0, [pc, #196]	@ (8003284 <LCD_printK+0x384>)
 80031be:	f015 fa9e 	bl	80186fe <HAL_SPI_Transmit>
 80031c2:	e043      	b.n	800324c <LCD_printK+0x34c>
			}
			else if(kolumna==(ADRES->X0_SET+8) && (wiersz==(ADRES->Y0_SET+2) || wiersz==(ADRES->Y0_SET+12)))
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	7b1b      	ldrb	r3, [r3, #12]
 80031c8:	3308      	adds	r3, #8
 80031ca:	461a      	mov	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d116      	bne.n	8003200 <LCD_printK+0x300>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	7b5b      	ldrb	r3, [r3, #13]
 80031d6:	3302      	adds	r3, #2
 80031d8:	461a      	mov	r2, r3
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4293      	cmp	r3, r2
 80031de:	d006      	beq.n	80031ee <LCD_printK+0x2ee>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	7b5b      	ldrb	r3, [r3, #13]
 80031e4:	330c      	adds	r3, #12
 80031e6:	461a      	mov	r2, r3
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d108      	bne.n	8003200 <LCD_printK+0x300>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80031ee:	f107 010c 	add.w	r1, r7, #12
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
 80031f6:	2202      	movs	r2, #2
 80031f8:	4822      	ldr	r0, [pc, #136]	@ (8003284 <LCD_printK+0x384>)
 80031fa:	f015 fa80 	bl	80186fe <HAL_SPI_Transmit>
 80031fe:	e025      	b.n	800324c <LCD_printK+0x34c>
			}
			else if(kolumna==(ADRES->X0_SET+9) && (wiersz==(ADRES->Y0_SET+1) || wiersz==(ADRES->Y0_SET+13)))
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	7b1b      	ldrb	r3, [r3, #12]
 8003204:	3309      	adds	r3, #9
 8003206:	461a      	mov	r2, r3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	4293      	cmp	r3, r2
 800320c:	d116      	bne.n	800323c <LCD_printK+0x33c>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	7b5b      	ldrb	r3, [r3, #13]
 8003212:	3301      	adds	r3, #1
 8003214:	461a      	mov	r2, r3
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4293      	cmp	r3, r2
 800321a:	d006      	beq.n	800322a <LCD_printK+0x32a>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	7b5b      	ldrb	r3, [r3, #13]
 8003220:	330d      	adds	r3, #13
 8003222:	461a      	mov	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4293      	cmp	r3, r2
 8003228:	d108      	bne.n	800323c <LCD_printK+0x33c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800322a:	f107 010c 	add.w	r1, r7, #12
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	2202      	movs	r2, #2
 8003234:	4813      	ldr	r0, [pc, #76]	@ (8003284 <LCD_printK+0x384>)
 8003236:	f015 fa62 	bl	80186fe <HAL_SPI_Transmit>
 800323a:	e007      	b.n	800324c <LCD_printK+0x34c>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800323c:	f107 0108 	add.w	r1, r7, #8
 8003240:	f04f 33ff 	mov.w	r3, #4294967295
 8003244:	2202      	movs	r2, #2
 8003246:	480f      	ldr	r0, [pc, #60]	@ (8003284 <LCD_printK+0x384>)
 8003248:	f015 fa59 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	3301      	adds	r3, #1
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	7b9b      	ldrb	r3, [r3, #14]
 8003256:	3301      	adds	r3, #1
 8003258:	461a      	mov	r2, r3
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	4293      	cmp	r3, r2
 800325e:	f4ff aec5 	bcc.w	8002fec <LCD_printK+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	3301      	adds	r3, #1
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	7bdb      	ldrb	r3, [r3, #15]
 800326c:	461a      	mov	r2, r3
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4293      	cmp	r3, r2
 8003272:	f4ff aeb7 	bcc.w	8002fe4 <LCD_printK+0xe4>
			}
		}
	}
	CS_ON();
 8003276:	f7fd fed5 	bl	8001024 <CS_ON>
}
 800327a:	bf00      	nop
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	200004a4 	.word	0x200004a4

08003288 <LCD_printL>:

void LCD_printL(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	4603      	mov	r3, r0
 8003292:	71fb      	strb	r3, [r7, #7]
 8003294:	460b      	mov	r3, r1
 8003296:	71bb      	strb	r3, [r7, #6]
 8003298:	4613      	mov	r3, r2
 800329a:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2200      	movs	r2, #0
 80032a8:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	223f      	movs	r2, #63	@ 0x3f
 80032ae:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	221f      	movs	r2, #31
 80032b4:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2200      	movs	r2, #0
 80032ba:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2200      	movs	r2, #0
 80032c0:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	7cda      	ldrb	r2, [r3, #19]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	7c1b      	ldrb	r3, [r3, #16]
 80032ca:	4053      	eors	r3, r2
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	b25a      	sxtb	r2, r3
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	7c5b      	ldrb	r3, [r3, #17]
 80032d6:	b25b      	sxtb	r3, r3
 80032d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032dc:	b25b      	sxtb	r3, r3
 80032de:	4053      	eors	r3, r2
 80032e0:	b25b      	sxtb	r3, r3
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	7d1b      	ldrb	r3, [r3, #20]
 80032ec:	461a      	mov	r2, r3
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	7c5b      	ldrb	r3, [r3, #17]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	4053      	eors	r3, r2
 80032f8:	015b      	lsls	r3, r3, #5
 80032fa:	b25a      	sxtb	r2, r3
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	7c9b      	ldrb	r3, [r3, #18]
 8003300:	b25b      	sxtb	r3, r3
 8003302:	4053      	eors	r3, r2
 8003304:	b25b      	sxtb	r3, r3
 8003306:	b2da      	uxtb	r2, r3
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	7cdb      	ldrb	r3, [r3, #19]
 8003310:	733b      	strb	r3, [r7, #12]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	7d1b      	ldrb	r3, [r3, #20]
 8003316:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8003318:	2300      	movs	r3, #0
 800331a:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 800331c:	2300      	movs	r3, #0
 800331e:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8003320:	7bfa      	ldrb	r2, [r7, #15]
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	4053      	eors	r3, r2
 8003326:	b2db      	uxtb	r3, r3
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	b25a      	sxtb	r2, r3
 800332c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003330:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003334:	b25b      	sxtb	r3, r3
 8003336:	4053      	eors	r3, r2
 8003338:	b25b      	sxtb	r3, r3
 800333a:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 800333c:	7bba      	ldrb	r2, [r7, #14]
 800333e:	79bb      	ldrb	r3, [r7, #6]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4053      	eors	r3, r2
 8003346:	015b      	lsls	r3, r3, #5
 8003348:	b25a      	sxtb	r2, r3
 800334a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800334e:	4053      	eors	r3, r2
 8003350:	b25b      	sxtb	r3, r3
 8003352:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	723b      	strb	r3, [r7, #8]
 8003358:	7bbb      	ldrb	r3, [r7, #14]
 800335a:	727b      	strb	r3, [r7, #9]
	DC_ON();
 800335c:	f7fd fe78 	bl	8001050 <DC_ON>
	CS_OFF();
 8003360:	f7fd fe6b 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	7b5b      	ldrb	r3, [r3, #13]
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	e08f      	b.n	800348c <LCD_printL+0x204>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	7b1b      	ldrb	r3, [r3, #12]
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	e080      	b.n	8003476 <LCD_printL+0x1ee>
		{
			if(kolumna==(ADRES->X0_SET+3) && (wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+14)))
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	7b1b      	ldrb	r3, [r3, #12]
 8003378:	3303      	adds	r3, #3
 800337a:	461a      	mov	r2, r3
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	4293      	cmp	r3, r2
 8003380:	d115      	bne.n	80033ae <LCD_printL+0x126>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	7b5b      	ldrb	r3, [r3, #13]
 8003386:	461a      	mov	r2, r3
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4293      	cmp	r3, r2
 800338c:	d30f      	bcc.n	80033ae <LCD_printL+0x126>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	7b5b      	ldrb	r3, [r3, #13]
 8003392:	330e      	adds	r3, #14
 8003394:	461a      	mov	r2, r3
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4293      	cmp	r3, r2
 800339a:	d808      	bhi.n	80033ae <LCD_printL+0x126>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800339c:	f107 010c 	add.w	r1, r7, #12
 80033a0:	f04f 33ff 	mov.w	r3, #4294967295
 80033a4:	2202      	movs	r2, #2
 80033a6:	4840      	ldr	r0, [pc, #256]	@ (80034a8 <LCD_printL+0x220>)
 80033a8:	f015 f9a9 	bl	80186fe <HAL_SPI_Transmit>
 80033ac:	e060      	b.n	8003470 <LCD_printL+0x1e8>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+10)) && wiersz==(ADRES->Y0_SET+14))
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	7b1b      	ldrb	r3, [r3, #12]
 80033b2:	3302      	adds	r3, #2
 80033b4:	461a      	mov	r2, r3
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d316      	bcc.n	80033ea <LCD_printL+0x162>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	7b1b      	ldrb	r3, [r3, #12]
 80033c0:	330a      	adds	r3, #10
 80033c2:	461a      	mov	r2, r3
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d80f      	bhi.n	80033ea <LCD_printL+0x162>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	7b5b      	ldrb	r3, [r3, #13]
 80033ce:	330e      	adds	r3, #14
 80033d0:	461a      	mov	r2, r3
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d108      	bne.n	80033ea <LCD_printL+0x162>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80033d8:	f107 010c 	add.w	r1, r7, #12
 80033dc:	f04f 33ff 	mov.w	r3, #4294967295
 80033e0:	2202      	movs	r2, #2
 80033e2:	4831      	ldr	r0, [pc, #196]	@ (80034a8 <LCD_printL+0x220>)
 80033e4:	f015 f98b 	bl	80186fe <HAL_SPI_Transmit>
 80033e8:	e042      	b.n	8003470 <LCD_printL+0x1e8>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+4)) && wiersz==(ADRES->Y0_SET+0))
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	7b1b      	ldrb	r3, [r3, #12]
 80033ee:	3302      	adds	r3, #2
 80033f0:	461a      	mov	r2, r3
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d315      	bcc.n	8003424 <LCD_printL+0x19c>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	7b1b      	ldrb	r3, [r3, #12]
 80033fc:	3304      	adds	r3, #4
 80033fe:	461a      	mov	r2, r3
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	4293      	cmp	r3, r2
 8003404:	d80e      	bhi.n	8003424 <LCD_printL+0x19c>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	7b5b      	ldrb	r3, [r3, #13]
 800340a:	461a      	mov	r2, r3
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4293      	cmp	r3, r2
 8003410:	d108      	bne.n	8003424 <LCD_printL+0x19c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003412:	f107 010c 	add.w	r1, r7, #12
 8003416:	f04f 33ff 	mov.w	r3, #4294967295
 800341a:	2202      	movs	r2, #2
 800341c:	4822      	ldr	r0, [pc, #136]	@ (80034a8 <LCD_printL+0x220>)
 800341e:	f015 f96e 	bl	80186fe <HAL_SPI_Transmit>
 8003422:	e025      	b.n	8003470 <LCD_printL+0x1e8>
			}
			else if(kolumna==(ADRES->X0_SET+10) && (wiersz>=(ADRES->Y0_SET+11) && wiersz<=(ADRES->Y0_SET+14)))
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	7b1b      	ldrb	r3, [r3, #12]
 8003428:	330a      	adds	r3, #10
 800342a:	461a      	mov	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	4293      	cmp	r3, r2
 8003430:	d116      	bne.n	8003460 <LCD_printL+0x1d8>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	7b5b      	ldrb	r3, [r3, #13]
 8003436:	330b      	adds	r3, #11
 8003438:	461a      	mov	r2, r3
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4293      	cmp	r3, r2
 800343e:	d30f      	bcc.n	8003460 <LCD_printL+0x1d8>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	7b5b      	ldrb	r3, [r3, #13]
 8003444:	330e      	adds	r3, #14
 8003446:	461a      	mov	r2, r3
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4293      	cmp	r3, r2
 800344c:	d808      	bhi.n	8003460 <LCD_printL+0x1d8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800344e:	f107 010c 	add.w	r1, r7, #12
 8003452:	f04f 33ff 	mov.w	r3, #4294967295
 8003456:	2202      	movs	r2, #2
 8003458:	4813      	ldr	r0, [pc, #76]	@ (80034a8 <LCD_printL+0x220>)
 800345a:	f015 f950 	bl	80186fe <HAL_SPI_Transmit>
 800345e:	e007      	b.n	8003470 <LCD_printL+0x1e8>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8003460:	f107 0108 	add.w	r1, r7, #8
 8003464:	f04f 33ff 	mov.w	r3, #4294967295
 8003468:	2202      	movs	r2, #2
 800346a:	480f      	ldr	r0, [pc, #60]	@ (80034a8 <LCD_printL+0x220>)
 800346c:	f015 f947 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	3301      	adds	r3, #1
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	7b9b      	ldrb	r3, [r3, #14]
 800347a:	3301      	adds	r3, #1
 800347c:	461a      	mov	r2, r3
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	4293      	cmp	r3, r2
 8003482:	f4ff af77 	bcc.w	8003374 <LCD_printL+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	3301      	adds	r3, #1
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	7bdb      	ldrb	r3, [r3, #15]
 8003490:	461a      	mov	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4293      	cmp	r3, r2
 8003496:	f4ff af69 	bcc.w	800336c <LCD_printL+0xe4>
			}
		}
	}
	CS_ON();
 800349a:	f7fd fdc3 	bl	8001024 <CS_ON>
}
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200004a4 	.word	0x200004a4

080034ac <LCD_printO>:

void LCD_printO(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	4603      	mov	r3, r0
 80034b6:	71fb      	strb	r3, [r7, #7]
 80034b8:	460b      	mov	r3, r1
 80034ba:	71bb      	strb	r3, [r7, #6]
 80034bc:	4613      	mov	r3, r2
 80034be:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	2300      	movs	r3, #0
 80034c6:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2200      	movs	r2, #0
 80034cc:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	223f      	movs	r2, #63	@ 0x3f
 80034d2:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	221f      	movs	r2, #31
 80034d8:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2200      	movs	r2, #0
 80034de:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2200      	movs	r2, #0
 80034e4:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	7cda      	ldrb	r2, [r3, #19]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	7c1b      	ldrb	r3, [r3, #16]
 80034ee:	4053      	eors	r3, r2
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	b25a      	sxtb	r2, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	7c5b      	ldrb	r3, [r3, #17]
 80034fa:	b25b      	sxtb	r3, r3
 80034fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003500:	b25b      	sxtb	r3, r3
 8003502:	4053      	eors	r3, r2
 8003504:	b25b      	sxtb	r3, r3
 8003506:	b2da      	uxtb	r2, r3
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	7d1b      	ldrb	r3, [r3, #20]
 8003510:	461a      	mov	r2, r3
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	7c5b      	ldrb	r3, [r3, #17]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	4053      	eors	r3, r2
 800351c:	015b      	lsls	r3, r3, #5
 800351e:	b25a      	sxtb	r2, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	7c9b      	ldrb	r3, [r3, #18]
 8003524:	b25b      	sxtb	r3, r3
 8003526:	4053      	eors	r3, r2
 8003528:	b25b      	sxtb	r3, r3
 800352a:	b2da      	uxtb	r2, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	7cdb      	ldrb	r3, [r3, #19]
 8003534:	733b      	strb	r3, [r7, #12]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	7d1b      	ldrb	r3, [r3, #20]
 800353a:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 800353c:	2300      	movs	r3, #0
 800353e:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8003540:	2300      	movs	r3, #0
 8003542:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	4053      	eors	r3, r2
 800354a:	b2db      	uxtb	r3, r3
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	b25a      	sxtb	r2, r3
 8003550:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003554:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003558:	b25b      	sxtb	r3, r3
 800355a:	4053      	eors	r3, r2
 800355c:	b25b      	sxtb	r3, r3
 800355e:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8003560:	7bba      	ldrb	r2, [r7, #14]
 8003562:	79bb      	ldrb	r3, [r7, #6]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	4053      	eors	r3, r2
 800356a:	015b      	lsls	r3, r3, #5
 800356c:	b25a      	sxtb	r2, r3
 800356e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003572:	4053      	eors	r3, r2
 8003574:	b25b      	sxtb	r3, r3
 8003576:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	723b      	strb	r3, [r7, #8]
 800357c:	7bbb      	ldrb	r3, [r7, #14]
 800357e:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8003580:	f7fd fd66 	bl	8001050 <DC_ON>
	CS_OFF();
 8003584:	f7fd fd59 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	7b5b      	ldrb	r3, [r3, #13]
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	e0da      	b.n	8003746 <LCD_printO+0x29a>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	7b1b      	ldrb	r3, [r3, #12]
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e0cb      	b.n	8003730 <LCD_printO+0x284>
		{
			if((kolumna==(ADRES->X0_SET+2) || kolumna==(ADRES->X0_SET+10))  && (wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+11)))
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	7b1b      	ldrb	r3, [r3, #12]
 800359c:	3302      	adds	r3, #2
 800359e:	461a      	mov	r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d006      	beq.n	80035b4 <LCD_printO+0x108>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	7b1b      	ldrb	r3, [r3, #12]
 80035aa:	330a      	adds	r3, #10
 80035ac:	461a      	mov	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d116      	bne.n	80035e2 <LCD_printO+0x136>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	7b5b      	ldrb	r3, [r3, #13]
 80035b8:	3303      	adds	r3, #3
 80035ba:	461a      	mov	r2, r3
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4293      	cmp	r3, r2
 80035c0:	d30f      	bcc.n	80035e2 <LCD_printO+0x136>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	7b5b      	ldrb	r3, [r3, #13]
 80035c6:	330b      	adds	r3, #11
 80035c8:	461a      	mov	r2, r3
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d808      	bhi.n	80035e2 <LCD_printO+0x136>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80035d0:	f107 010c 	add.w	r1, r7, #12
 80035d4:	f04f 33ff 	mov.w	r3, #4294967295
 80035d8:	2202      	movs	r2, #2
 80035da:	4861      	ldr	r0, [pc, #388]	@ (8003760 <LCD_printO+0x2b4>)
 80035dc:	f015 f88f 	bl	80186fe <HAL_SPI_Transmit>
 80035e0:	e0a3      	b.n	800372a <LCD_printO+0x27e>
			}
			else if((kolumna>=(ADRES->X0_SET+5) && kolumna<=(ADRES->X0_SET+7)) && (wiersz==(ADRES->Y0_SET+0) || wiersz==(ADRES->Y0_SET+14)))
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	7b1b      	ldrb	r3, [r3, #12]
 80035e6:	3305      	adds	r3, #5
 80035e8:	461a      	mov	r2, r3
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d31c      	bcc.n	800362a <LCD_printO+0x17e>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	7b1b      	ldrb	r3, [r3, #12]
 80035f4:	3307      	adds	r3, #7
 80035f6:	461a      	mov	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d815      	bhi.n	800362a <LCD_printO+0x17e>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	7b5b      	ldrb	r3, [r3, #13]
 8003602:	461a      	mov	r2, r3
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4293      	cmp	r3, r2
 8003608:	d006      	beq.n	8003618 <LCD_printO+0x16c>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	7b5b      	ldrb	r3, [r3, #13]
 800360e:	330e      	adds	r3, #14
 8003610:	461a      	mov	r2, r3
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4293      	cmp	r3, r2
 8003616:	d108      	bne.n	800362a <LCD_printO+0x17e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003618:	f107 010c 	add.w	r1, r7, #12
 800361c:	f04f 33ff 	mov.w	r3, #4294967295
 8003620:	2202      	movs	r2, #2
 8003622:	484f      	ldr	r0, [pc, #316]	@ (8003760 <LCD_printO+0x2b4>)
 8003624:	f015 f86b 	bl	80186fe <HAL_SPI_Transmit>
 8003628:	e07f      	b.n	800372a <LCD_printO+0x27e>
			}
			else if((kolumna==(ADRES->X0_SET+3)) && (wiersz==(ADRES->Y0_SET+2) || wiersz==(ADRES->Y0_SET+12)))
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	7b1b      	ldrb	r3, [r3, #12]
 800362e:	3303      	adds	r3, #3
 8003630:	461a      	mov	r2, r3
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	4293      	cmp	r3, r2
 8003636:	d116      	bne.n	8003666 <LCD_printO+0x1ba>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	7b5b      	ldrb	r3, [r3, #13]
 800363c:	3302      	adds	r3, #2
 800363e:	461a      	mov	r2, r3
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4293      	cmp	r3, r2
 8003644:	d006      	beq.n	8003654 <LCD_printO+0x1a8>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	7b5b      	ldrb	r3, [r3, #13]
 800364a:	330c      	adds	r3, #12
 800364c:	461a      	mov	r2, r3
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4293      	cmp	r3, r2
 8003652:	d108      	bne.n	8003666 <LCD_printO+0x1ba>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003654:	f107 010c 	add.w	r1, r7, #12
 8003658:	f04f 33ff 	mov.w	r3, #4294967295
 800365c:	2202      	movs	r2, #2
 800365e:	4840      	ldr	r0, [pc, #256]	@ (8003760 <LCD_printO+0x2b4>)
 8003660:	f015 f84d 	bl	80186fe <HAL_SPI_Transmit>
 8003664:	e061      	b.n	800372a <LCD_printO+0x27e>
			}
			else if((kolumna==(ADRES->X0_SET+4)) && (wiersz==(ADRES->Y0_SET+1) || wiersz==(ADRES->Y0_SET+13)))
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	7b1b      	ldrb	r3, [r3, #12]
 800366a:	3304      	adds	r3, #4
 800366c:	461a      	mov	r2, r3
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	4293      	cmp	r3, r2
 8003672:	d116      	bne.n	80036a2 <LCD_printO+0x1f6>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	7b5b      	ldrb	r3, [r3, #13]
 8003678:	3301      	adds	r3, #1
 800367a:	461a      	mov	r2, r3
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4293      	cmp	r3, r2
 8003680:	d006      	beq.n	8003690 <LCD_printO+0x1e4>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	7b5b      	ldrb	r3, [r3, #13]
 8003686:	330d      	adds	r3, #13
 8003688:	461a      	mov	r2, r3
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4293      	cmp	r3, r2
 800368e:	d108      	bne.n	80036a2 <LCD_printO+0x1f6>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003690:	f107 010c 	add.w	r1, r7, #12
 8003694:	f04f 33ff 	mov.w	r3, #4294967295
 8003698:	2202      	movs	r2, #2
 800369a:	4831      	ldr	r0, [pc, #196]	@ (8003760 <LCD_printO+0x2b4>)
 800369c:	f015 f82f 	bl	80186fe <HAL_SPI_Transmit>
 80036a0:	e043      	b.n	800372a <LCD_printO+0x27e>
			}
			else if((kolumna==(ADRES->X0_SET+9)) && (wiersz==(ADRES->Y0_SET+2) || wiersz==(ADRES->Y0_SET+12)))
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	7b1b      	ldrb	r3, [r3, #12]
 80036a6:	3309      	adds	r3, #9
 80036a8:	461a      	mov	r2, r3
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d116      	bne.n	80036de <LCD_printO+0x232>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	7b5b      	ldrb	r3, [r3, #13]
 80036b4:	3302      	adds	r3, #2
 80036b6:	461a      	mov	r2, r3
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d006      	beq.n	80036cc <LCD_printO+0x220>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	7b5b      	ldrb	r3, [r3, #13]
 80036c2:	330c      	adds	r3, #12
 80036c4:	461a      	mov	r2, r3
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d108      	bne.n	80036de <LCD_printO+0x232>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80036cc:	f107 010c 	add.w	r1, r7, #12
 80036d0:	f04f 33ff 	mov.w	r3, #4294967295
 80036d4:	2202      	movs	r2, #2
 80036d6:	4822      	ldr	r0, [pc, #136]	@ (8003760 <LCD_printO+0x2b4>)
 80036d8:	f015 f811 	bl	80186fe <HAL_SPI_Transmit>
 80036dc:	e025      	b.n	800372a <LCD_printO+0x27e>
			}
			else if((kolumna==(ADRES->X0_SET+8)) && (wiersz==(ADRES->Y0_SET+1) || wiersz==(ADRES->Y0_SET+13)))
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	7b1b      	ldrb	r3, [r3, #12]
 80036e2:	3308      	adds	r3, #8
 80036e4:	461a      	mov	r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d116      	bne.n	800371a <LCD_printO+0x26e>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	7b5b      	ldrb	r3, [r3, #13]
 80036f0:	3301      	adds	r3, #1
 80036f2:	461a      	mov	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d006      	beq.n	8003708 <LCD_printO+0x25c>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	7b5b      	ldrb	r3, [r3, #13]
 80036fe:	330d      	adds	r3, #13
 8003700:	461a      	mov	r2, r3
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4293      	cmp	r3, r2
 8003706:	d108      	bne.n	800371a <LCD_printO+0x26e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003708:	f107 010c 	add.w	r1, r7, #12
 800370c:	f04f 33ff 	mov.w	r3, #4294967295
 8003710:	2202      	movs	r2, #2
 8003712:	4813      	ldr	r0, [pc, #76]	@ (8003760 <LCD_printO+0x2b4>)
 8003714:	f014 fff3 	bl	80186fe <HAL_SPI_Transmit>
 8003718:	e007      	b.n	800372a <LCD_printO+0x27e>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800371a:	f107 0108 	add.w	r1, r7, #8
 800371e:	f04f 33ff 	mov.w	r3, #4294967295
 8003722:	2202      	movs	r2, #2
 8003724:	480e      	ldr	r0, [pc, #56]	@ (8003760 <LCD_printO+0x2b4>)
 8003726:	f014 ffea 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	3301      	adds	r3, #1
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	7b9b      	ldrb	r3, [r3, #14]
 8003734:	3301      	adds	r3, #1
 8003736:	461a      	mov	r2, r3
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	4293      	cmp	r3, r2
 800373c:	f4ff af2c 	bcc.w	8003598 <LCD_printO+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	3301      	adds	r3, #1
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	7bdb      	ldrb	r3, [r3, #15]
 800374a:	461a      	mov	r2, r3
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4293      	cmp	r3, r2
 8003750:	f4ff af1e 	bcc.w	8003590 <LCD_printO+0xe4>
			}
		}
	}
	CS_ON();
 8003754:	f7fd fc66 	bl	8001024 <CS_ON>
}
 8003758:	bf00      	nop
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	200004a4 	.word	0x200004a4

08003764 <LCD_printS>:
	}
	CS_ON();
}

void LCD_printS(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	4603      	mov	r3, r0
 800376e:	71fb      	strb	r3, [r7, #7]
 8003770:	460b      	mov	r3, r1
 8003772:	71bb      	strb	r3, [r7, #6]
 8003774:	4613      	mov	r3, r2
 8003776:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	2300      	movs	r3, #0
 800377e:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2200      	movs	r2, #0
 8003784:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	223f      	movs	r2, #63	@ 0x3f
 800378a:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	221f      	movs	r2, #31
 8003790:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2200      	movs	r2, #0
 8003796:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2200      	movs	r2, #0
 800379c:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	7cda      	ldrb	r2, [r3, #19]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	7c1b      	ldrb	r3, [r3, #16]
 80037a6:	4053      	eors	r3, r2
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	b25a      	sxtb	r2, r3
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	7c5b      	ldrb	r3, [r3, #17]
 80037b2:	b25b      	sxtb	r3, r3
 80037b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037b8:	b25b      	sxtb	r3, r3
 80037ba:	4053      	eors	r3, r2
 80037bc:	b25b      	sxtb	r3, r3
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	7d1b      	ldrb	r3, [r3, #20]
 80037c8:	461a      	mov	r2, r3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	7c5b      	ldrb	r3, [r3, #17]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	4053      	eors	r3, r2
 80037d4:	015b      	lsls	r3, r3, #5
 80037d6:	b25a      	sxtb	r2, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	7c9b      	ldrb	r3, [r3, #18]
 80037dc:	b25b      	sxtb	r3, r3
 80037de:	4053      	eors	r3, r2
 80037e0:	b25b      	sxtb	r3, r3
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	7cdb      	ldrb	r3, [r3, #19]
 80037ec:	733b      	strb	r3, [r7, #12]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	7d1b      	ldrb	r3, [r3, #20]
 80037f2:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 80037f4:	2300      	movs	r3, #0
 80037f6:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 80037f8:	2300      	movs	r3, #0
 80037fa:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 80037fc:	7bfa      	ldrb	r2, [r7, #15]
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	4053      	eors	r3, r2
 8003802:	b2db      	uxtb	r3, r3
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	b25a      	sxtb	r2, r3
 8003808:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800380c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003810:	b25b      	sxtb	r3, r3
 8003812:	4053      	eors	r3, r2
 8003814:	b25b      	sxtb	r3, r3
 8003816:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8003818:	7bba      	ldrb	r2, [r7, #14]
 800381a:	79bb      	ldrb	r3, [r7, #6]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	4053      	eors	r3, r2
 8003822:	015b      	lsls	r3, r3, #5
 8003824:	b25a      	sxtb	r2, r3
 8003826:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800382a:	4053      	eors	r3, r2
 800382c:	b25b      	sxtb	r3, r3
 800382e:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	723b      	strb	r3, [r7, #8]
 8003834:	7bbb      	ldrb	r3, [r7, #14]
 8003836:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8003838:	f7fd fc0a 	bl	8001050 <DC_ON>
	CS_OFF();
 800383c:	f7fd fbfd 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	7b5b      	ldrb	r3, [r3, #13]
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	e13a      	b.n	8003abe <LCD_printS+0x35a>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	7b1b      	ldrb	r3, [r3, #12]
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	e12b      	b.n	8003aa8 <LCD_printS+0x344>
		{
			if(kolumna==(ADRES->X0_SET+2) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+5)) || (wiersz>=(ADRES->Y0_SET+13) && wiersz<=(ADRES->Y0_SET+14))))
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	7b1b      	ldrb	r3, [r3, #12]
 8003854:	3302      	adds	r3, #2
 8003856:	461a      	mov	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	4293      	cmp	r3, r2
 800385c:	d124      	bne.n	80038a8 <LCD_printS+0x144>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	7b5b      	ldrb	r3, [r3, #13]
 8003862:	3303      	adds	r3, #3
 8003864:	461a      	mov	r2, r3
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4293      	cmp	r3, r2
 800386a:	d306      	bcc.n	800387a <LCD_printS+0x116>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	7b5b      	ldrb	r3, [r3, #13]
 8003870:	3305      	adds	r3, #5
 8003872:	461a      	mov	r2, r3
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4293      	cmp	r3, r2
 8003878:	d90d      	bls.n	8003896 <LCD_printS+0x132>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	7b5b      	ldrb	r3, [r3, #13]
 800387e:	330d      	adds	r3, #13
 8003880:	461a      	mov	r2, r3
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4293      	cmp	r3, r2
 8003886:	d30f      	bcc.n	80038a8 <LCD_printS+0x144>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	7b5b      	ldrb	r3, [r3, #13]
 800388c:	330e      	adds	r3, #14
 800388e:	461a      	mov	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4293      	cmp	r3, r2
 8003894:	d808      	bhi.n	80038a8 <LCD_printS+0x144>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003896:	f107 010c 	add.w	r1, r7, #12
 800389a:	f04f 33ff 	mov.w	r3, #4294967295
 800389e:	2202      	movs	r2, #2
 80038a0:	488d      	ldr	r0, [pc, #564]	@ (8003ad8 <LCD_printS+0x374>)
 80038a2:	f014 ff2c 	bl	80186fe <HAL_SPI_Transmit>
 80038a6:	e0fc      	b.n	8003aa2 <LCD_printS+0x33e>
			}
			else if((kolumna>=(ADRES->X0_SET+5) && kolumna<=(ADRES->X0_SET+9)) && wiersz==(ADRES->Y0_SET+0))
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	7b1b      	ldrb	r3, [r3, #12]
 80038ac:	3305      	adds	r3, #5
 80038ae:	461a      	mov	r2, r3
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d315      	bcc.n	80038e2 <LCD_printS+0x17e>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	7b1b      	ldrb	r3, [r3, #12]
 80038ba:	3309      	adds	r3, #9
 80038bc:	461a      	mov	r2, r3
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d80e      	bhi.n	80038e2 <LCD_printS+0x17e>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	7b5b      	ldrb	r3, [r3, #13]
 80038c8:	461a      	mov	r2, r3
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d108      	bne.n	80038e2 <LCD_printS+0x17e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80038d0:	f107 010c 	add.w	r1, r7, #12
 80038d4:	f04f 33ff 	mov.w	r3, #4294967295
 80038d8:	2202      	movs	r2, #2
 80038da:	487f      	ldr	r0, [pc, #508]	@ (8003ad8 <LCD_printS+0x374>)
 80038dc:	f014 ff0f 	bl	80186fe <HAL_SPI_Transmit>
 80038e0:	e0df      	b.n	8003aa2 <LCD_printS+0x33e>
			}
			else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+8)) && wiersz==(ADRES->Y0_SET+7))
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	7b1b      	ldrb	r3, [r3, #12]
 80038e6:	3304      	adds	r3, #4
 80038e8:	461a      	mov	r2, r3
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d316      	bcc.n	800391e <LCD_printS+0x1ba>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	7b1b      	ldrb	r3, [r3, #12]
 80038f4:	3308      	adds	r3, #8
 80038f6:	461a      	mov	r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d80f      	bhi.n	800391e <LCD_printS+0x1ba>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	7b5b      	ldrb	r3, [r3, #13]
 8003902:	3307      	adds	r3, #7
 8003904:	461a      	mov	r2, r3
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4293      	cmp	r3, r2
 800390a:	d108      	bne.n	800391e <LCD_printS+0x1ba>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800390c:	f107 010c 	add.w	r1, r7, #12
 8003910:	f04f 33ff 	mov.w	r3, #4294967295
 8003914:	2202      	movs	r2, #2
 8003916:	4870      	ldr	r0, [pc, #448]	@ (8003ad8 <LCD_printS+0x374>)
 8003918:	f014 fef1 	bl	80186fe <HAL_SPI_Transmit>
 800391c:	e0c1      	b.n	8003aa2 <LCD_printS+0x33e>
			}
			else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+7)) && wiersz==(ADRES->Y0_SET+14))
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	7b1b      	ldrb	r3, [r3, #12]
 8003922:	3303      	adds	r3, #3
 8003924:	461a      	mov	r2, r3
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	4293      	cmp	r3, r2
 800392a:	d316      	bcc.n	800395a <LCD_printS+0x1f6>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	7b1b      	ldrb	r3, [r3, #12]
 8003930:	3307      	adds	r3, #7
 8003932:	461a      	mov	r2, r3
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	4293      	cmp	r3, r2
 8003938:	d80f      	bhi.n	800395a <LCD_printS+0x1f6>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	7b5b      	ldrb	r3, [r3, #13]
 800393e:	330e      	adds	r3, #14
 8003940:	461a      	mov	r2, r3
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4293      	cmp	r3, r2
 8003946:	d108      	bne.n	800395a <LCD_printS+0x1f6>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003948:	f107 010c 	add.w	r1, r7, #12
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
 8003950:	2202      	movs	r2, #2
 8003952:	4861      	ldr	r0, [pc, #388]	@ (8003ad8 <LCD_printS+0x374>)
 8003954:	f014 fed3 	bl	80186fe <HAL_SPI_Transmit>
 8003958:	e0a3      	b.n	8003aa2 <LCD_printS+0x33e>
			}
			else if((kolumna==(ADRES->X0_SET+10)) && (wiersz>=(ADRES->Y0_SET+9) && wiersz<=(ADRES->Y0_SET+11) || wiersz==(ADRES->Y0_SET+0) || wiersz==(ADRES->Y0_SET+1)))
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	7b1b      	ldrb	r3, [r3, #12]
 800395e:	330a      	adds	r3, #10
 8003960:	461a      	mov	r2, r3
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	4293      	cmp	r3, r2
 8003966:	d123      	bne.n	80039b0 <LCD_printS+0x24c>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	7b5b      	ldrb	r3, [r3, #13]
 800396c:	3309      	adds	r3, #9
 800396e:	461a      	mov	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4293      	cmp	r3, r2
 8003974:	d306      	bcc.n	8003984 <LCD_printS+0x220>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	7b5b      	ldrb	r3, [r3, #13]
 800397a:	330b      	adds	r3, #11
 800397c:	461a      	mov	r2, r3
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4293      	cmp	r3, r2
 8003982:	d90c      	bls.n	800399e <LCD_printS+0x23a>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	7b5b      	ldrb	r3, [r3, #13]
 8003988:	461a      	mov	r2, r3
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4293      	cmp	r3, r2
 800398e:	d006      	beq.n	800399e <LCD_printS+0x23a>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	7b5b      	ldrb	r3, [r3, #13]
 8003994:	3301      	adds	r3, #1
 8003996:	461a      	mov	r2, r3
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4293      	cmp	r3, r2
 800399c:	d108      	bne.n	80039b0 <LCD_printS+0x24c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800399e:	f107 010c 	add.w	r1, r7, #12
 80039a2:	f04f 33ff 	mov.w	r3, #4294967295
 80039a6:	2202      	movs	r2, #2
 80039a8:	484b      	ldr	r0, [pc, #300]	@ (8003ad8 <LCD_printS+0x374>)
 80039aa:	f014 fea8 	bl	80186fe <HAL_SPI_Transmit>
 80039ae:	e078      	b.n	8003aa2 <LCD_printS+0x33e>
			}
			else if((kolumna==(ADRES->X0_SET+3)) && (wiersz==(ADRES->Y0_SET+2) || wiersz==(ADRES->Y0_SET+6)))
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	7b1b      	ldrb	r3, [r3, #12]
 80039b4:	3303      	adds	r3, #3
 80039b6:	461a      	mov	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d116      	bne.n	80039ec <LCD_printS+0x288>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	7b5b      	ldrb	r3, [r3, #13]
 80039c2:	3302      	adds	r3, #2
 80039c4:	461a      	mov	r2, r3
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d006      	beq.n	80039da <LCD_printS+0x276>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	7b5b      	ldrb	r3, [r3, #13]
 80039d0:	3306      	adds	r3, #6
 80039d2:	461a      	mov	r2, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d108      	bne.n	80039ec <LCD_printS+0x288>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80039da:	f107 010c 	add.w	r1, r7, #12
 80039de:	f04f 33ff 	mov.w	r3, #4294967295
 80039e2:	2202      	movs	r2, #2
 80039e4:	483c      	ldr	r0, [pc, #240]	@ (8003ad8 <LCD_printS+0x374>)
 80039e6:	f014 fe8a 	bl	80186fe <HAL_SPI_Transmit>
 80039ea:	e05a      	b.n	8003aa2 <LCD_printS+0x33e>
			}
			else if((kolumna==(ADRES->X0_SET+4)) && (wiersz==(ADRES->Y0_SET+1) || wiersz==(ADRES->Y0_SET+7)))
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	7b1b      	ldrb	r3, [r3, #12]
 80039f0:	3304      	adds	r3, #4
 80039f2:	461a      	mov	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d116      	bne.n	8003a28 <LCD_printS+0x2c4>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	7b5b      	ldrb	r3, [r3, #13]
 80039fe:	3301      	adds	r3, #1
 8003a00:	461a      	mov	r2, r3
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d006      	beq.n	8003a16 <LCD_printS+0x2b2>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	7b5b      	ldrb	r3, [r3, #13]
 8003a0c:	3307      	adds	r3, #7
 8003a0e:	461a      	mov	r2, r3
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d108      	bne.n	8003a28 <LCD_printS+0x2c4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003a16:	f107 010c 	add.w	r1, r7, #12
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1e:	2202      	movs	r2, #2
 8003a20:	482d      	ldr	r0, [pc, #180]	@ (8003ad8 <LCD_printS+0x374>)
 8003a22:	f014 fe6c 	bl	80186fe <HAL_SPI_Transmit>
 8003a26:	e03c      	b.n	8003aa2 <LCD_printS+0x33e>
			}
			else if((kolumna==(ADRES->X0_SET+8)) && (wiersz==(ADRES->Y0_SET+13)))
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	7b1b      	ldrb	r3, [r3, #12]
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	461a      	mov	r2, r3
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d10f      	bne.n	8003a56 <LCD_printS+0x2f2>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	7b5b      	ldrb	r3, [r3, #13]
 8003a3a:	330d      	adds	r3, #13
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d108      	bne.n	8003a56 <LCD_printS+0x2f2>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003a44:	f107 010c 	add.w	r1, r7, #12
 8003a48:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	4822      	ldr	r0, [pc, #136]	@ (8003ad8 <LCD_printS+0x374>)
 8003a50:	f014 fe55 	bl	80186fe <HAL_SPI_Transmit>
 8003a54:	e025      	b.n	8003aa2 <LCD_printS+0x33e>
			}
			else if((kolumna==(ADRES->X0_SET+9)) && (wiersz==(ADRES->Y0_SET+8) || wiersz==(ADRES->Y0_SET+12)))
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	7b1b      	ldrb	r3, [r3, #12]
 8003a5a:	3309      	adds	r3, #9
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d116      	bne.n	8003a92 <LCD_printS+0x32e>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	7b5b      	ldrb	r3, [r3, #13]
 8003a68:	3308      	adds	r3, #8
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d006      	beq.n	8003a80 <LCD_printS+0x31c>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	7b5b      	ldrb	r3, [r3, #13]
 8003a76:	330c      	adds	r3, #12
 8003a78:	461a      	mov	r2, r3
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d108      	bne.n	8003a92 <LCD_printS+0x32e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003a80:	f107 010c 	add.w	r1, r7, #12
 8003a84:	f04f 33ff 	mov.w	r3, #4294967295
 8003a88:	2202      	movs	r2, #2
 8003a8a:	4813      	ldr	r0, [pc, #76]	@ (8003ad8 <LCD_printS+0x374>)
 8003a8c:	f014 fe37 	bl	80186fe <HAL_SPI_Transmit>
 8003a90:	e007      	b.n	8003aa2 <LCD_printS+0x33e>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8003a92:	f107 0108 	add.w	r1, r7, #8
 8003a96:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	480e      	ldr	r0, [pc, #56]	@ (8003ad8 <LCD_printS+0x374>)
 8003a9e:	f014 fe2e 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	7b9b      	ldrb	r3, [r3, #14]
 8003aac:	3301      	adds	r3, #1
 8003aae:	461a      	mov	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	f4ff aecc 	bcc.w	8003850 <LCD_printS+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	3301      	adds	r3, #1
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	7bdb      	ldrb	r3, [r3, #15]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	f4ff aebe 	bcc.w	8003848 <LCD_printS+0xe4>
			}
		}
	}
	CS_ON();
 8003acc:	f7fd faaa 	bl	8001024 <CS_ON>
}
 8003ad0:	bf00      	nop
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	200004a4 	.word	0x200004a4

08003adc <LCD_printT>:

void LCD_printT(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	71fb      	strb	r3, [r7, #7]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	71bb      	strb	r3, [r7, #6]
 8003aec:	4613      	mov	r3, r2
 8003aee:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	2300      	movs	r3, #0
 8003af6:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2200      	movs	r2, #0
 8003afc:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	223f      	movs	r2, #63	@ 0x3f
 8003b02:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	221f      	movs	r2, #31
 8003b08:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2200      	movs	r2, #0
 8003b14:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	7cda      	ldrb	r2, [r3, #19]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	7c1b      	ldrb	r3, [r3, #16]
 8003b1e:	4053      	eors	r3, r2
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	b25a      	sxtb	r2, r3
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	7c5b      	ldrb	r3, [r3, #17]
 8003b2a:	b25b      	sxtb	r3, r3
 8003b2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b30:	b25b      	sxtb	r3, r3
 8003b32:	4053      	eors	r3, r2
 8003b34:	b25b      	sxtb	r3, r3
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	7d1b      	ldrb	r3, [r3, #20]
 8003b40:	461a      	mov	r2, r3
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	7c5b      	ldrb	r3, [r3, #17]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	4053      	eors	r3, r2
 8003b4c:	015b      	lsls	r3, r3, #5
 8003b4e:	b25a      	sxtb	r2, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	7c9b      	ldrb	r3, [r3, #18]
 8003b54:	b25b      	sxtb	r3, r3
 8003b56:	4053      	eors	r3, r2
 8003b58:	b25b      	sxtb	r3, r3
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	7cdb      	ldrb	r3, [r3, #19]
 8003b64:	733b      	strb	r3, [r7, #12]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	7d1b      	ldrb	r3, [r3, #20]
 8003b6a:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8003b70:	2300      	movs	r3, #0
 8003b72:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	4053      	eors	r3, r2
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	b25a      	sxtb	r2, r3
 8003b80:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003b84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b88:	b25b      	sxtb	r3, r3
 8003b8a:	4053      	eors	r3, r2
 8003b8c:	b25b      	sxtb	r3, r3
 8003b8e:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8003b90:	7bba      	ldrb	r2, [r7, #14]
 8003b92:	79bb      	ldrb	r3, [r7, #6]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	4053      	eors	r3, r2
 8003b9a:	015b      	lsls	r3, r3, #5
 8003b9c:	b25a      	sxtb	r2, r3
 8003b9e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003ba2:	4053      	eors	r3, r2
 8003ba4:	b25b      	sxtb	r3, r3
 8003ba6:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	723b      	strb	r3, [r7, #8]
 8003bac:	7bbb      	ldrb	r3, [r7, #14]
 8003bae:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8003bb0:	f7fd fa4e 	bl	8001050 <DC_ON>
	CS_OFF();
 8003bb4:	f7fd fa41 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	7b5b      	ldrb	r3, [r3, #13]
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	e070      	b.n	8003ca2 <LCD_printT+0x1c6>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	7b1b      	ldrb	r3, [r3, #12]
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	e062      	b.n	8003c8e <LCD_printT+0x1b2>
		{
			if(kolumna==(ADRES->X0_SET+6) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+14))))
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	7b1b      	ldrb	r3, [r3, #12]
 8003bcc:	3306      	adds	r3, #6
 8003bce:	461a      	mov	r2, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d115      	bne.n	8003c02 <LCD_printT+0x126>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	7b5b      	ldrb	r3, [r3, #13]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d30f      	bcc.n	8003c02 <LCD_printT+0x126>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	7b5b      	ldrb	r3, [r3, #13]
 8003be6:	330e      	adds	r3, #14
 8003be8:	461a      	mov	r2, r3
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d808      	bhi.n	8003c02 <LCD_printT+0x126>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003bf0:	f107 010c 	add.w	r1, r7, #12
 8003bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	4830      	ldr	r0, [pc, #192]	@ (8003cbc <LCD_printT+0x1e0>)
 8003bfc:	f014 fd7f 	bl	80186fe <HAL_SPI_Transmit>
 8003c00:	e042      	b.n	8003c88 <LCD_printT+0x1ac>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+10)) && wiersz==(ADRES->Y0_SET+0))
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	7b1b      	ldrb	r3, [r3, #12]
 8003c06:	3302      	adds	r3, #2
 8003c08:	461a      	mov	r2, r3
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d315      	bcc.n	8003c3c <LCD_printT+0x160>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	7b1b      	ldrb	r3, [r3, #12]
 8003c14:	330a      	adds	r3, #10
 8003c16:	461a      	mov	r2, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d80e      	bhi.n	8003c3c <LCD_printT+0x160>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	7b5b      	ldrb	r3, [r3, #13]
 8003c22:	461a      	mov	r2, r3
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d108      	bne.n	8003c3c <LCD_printT+0x160>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003c2a:	f107 010c 	add.w	r1, r7, #12
 8003c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c32:	2202      	movs	r2, #2
 8003c34:	4821      	ldr	r0, [pc, #132]	@ (8003cbc <LCD_printT+0x1e0>)
 8003c36:	f014 fd62 	bl	80186fe <HAL_SPI_Transmit>
 8003c3a:	e025      	b.n	8003c88 <LCD_printT+0x1ac>
			}
			else if((kolumna==(ADRES->X0_SET+2) || kolumna==(ADRES->X0_SET+10)) && wiersz==(ADRES->Y0_SET+1))
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	7b1b      	ldrb	r3, [r3, #12]
 8003c40:	3302      	adds	r3, #2
 8003c42:	461a      	mov	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d006      	beq.n	8003c58 <LCD_printT+0x17c>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	7b1b      	ldrb	r3, [r3, #12]
 8003c4e:	330a      	adds	r3, #10
 8003c50:	461a      	mov	r2, r3
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d10f      	bne.n	8003c78 <LCD_printT+0x19c>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	7b5b      	ldrb	r3, [r3, #13]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	461a      	mov	r2, r3
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d108      	bne.n	8003c78 <LCD_printT+0x19c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003c66:	f107 010c 	add.w	r1, r7, #12
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6e:	2202      	movs	r2, #2
 8003c70:	4812      	ldr	r0, [pc, #72]	@ (8003cbc <LCD_printT+0x1e0>)
 8003c72:	f014 fd44 	bl	80186fe <HAL_SPI_Transmit>
 8003c76:	e007      	b.n	8003c88 <LCD_printT+0x1ac>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8003c78:	f107 0108 	add.w	r1, r7, #8
 8003c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c80:	2202      	movs	r2, #2
 8003c82:	480e      	ldr	r0, [pc, #56]	@ (8003cbc <LCD_printT+0x1e0>)
 8003c84:	f014 fd3b 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	7b9b      	ldrb	r3, [r3, #14]
 8003c92:	3301      	adds	r3, #1
 8003c94:	461a      	mov	r2, r3
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d395      	bcc.n	8003bc8 <LCD_printT+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	7bdb      	ldrb	r3, [r3, #15]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d388      	bcc.n	8003bc0 <LCD_printT+0xe4>
			}
		}
	}
	CS_ON();
 8003cae:	f7fd f9b9 	bl	8001024 <CS_ON>
}
 8003cb2:	bf00      	nop
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	200004a4 	.word	0x200004a4

08003cc0 <LCD_print1>:
	}
	CS_ON();
}

void LCD_print1(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	4603      	mov	r3, r0
 8003cca:	71fb      	strb	r3, [r7, #7]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	71bb      	strb	r3, [r7, #6]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	223f      	movs	r2, #63	@ 0x3f
 8003ce6:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	221f      	movs	r2, #31
 8003cec:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	7cda      	ldrb	r2, [r3, #19]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	7c1b      	ldrb	r3, [r3, #16]
 8003d02:	4053      	eors	r3, r2
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	b25a      	sxtb	r2, r3
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	7c5b      	ldrb	r3, [r3, #17]
 8003d0e:	b25b      	sxtb	r3, r3
 8003d10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d14:	b25b      	sxtb	r3, r3
 8003d16:	4053      	eors	r3, r2
 8003d18:	b25b      	sxtb	r3, r3
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	7d1b      	ldrb	r3, [r3, #20]
 8003d24:	461a      	mov	r2, r3
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	7c5b      	ldrb	r3, [r3, #17]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	4053      	eors	r3, r2
 8003d30:	015b      	lsls	r3, r3, #5
 8003d32:	b25a      	sxtb	r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	7c9b      	ldrb	r3, [r3, #18]
 8003d38:	b25b      	sxtb	r3, r3
 8003d3a:	4053      	eors	r3, r2
 8003d3c:	b25b      	sxtb	r3, r3
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	7cdb      	ldrb	r3, [r3, #19]
 8003d48:	733b      	strb	r3, [r7, #12]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	7d1b      	ldrb	r3, [r3, #20]
 8003d4e:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8003d50:	2300      	movs	r3, #0
 8003d52:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8003d58:	7bfa      	ldrb	r2, [r7, #15]
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	4053      	eors	r3, r2
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	b25a      	sxtb	r2, r3
 8003d64:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003d68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d6c:	b25b      	sxtb	r3, r3
 8003d6e:	4053      	eors	r3, r2
 8003d70:	b25b      	sxtb	r3, r3
 8003d72:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8003d74:	7bba      	ldrb	r2, [r7, #14]
 8003d76:	79bb      	ldrb	r3, [r7, #6]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	4053      	eors	r3, r2
 8003d7e:	015b      	lsls	r3, r3, #5
 8003d80:	b25a      	sxtb	r2, r3
 8003d82:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003d86:	4053      	eors	r3, r2
 8003d88:	b25b      	sxtb	r3, r3
 8003d8a:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	723b      	strb	r3, [r7, #8]
 8003d90:	7bbb      	ldrb	r3, [r7, #14]
 8003d92:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8003d94:	f7fd f95c 	bl	8001050 <DC_ON>
	CS_OFF();
 8003d98:	f7fd f94f 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	7b5b      	ldrb	r3, [r3, #13]
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	e099      	b.n	8003ed8 <LCD_print1+0x218>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	7b1b      	ldrb	r3, [r3, #12]
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	e08a      	b.n	8003ec2 <LCD_print1+0x202>
		{
			if(kolumna==(ADRES->X0_SET+9) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+14))))
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	7b1b      	ldrb	r3, [r3, #12]
 8003db0:	3309      	adds	r3, #9
 8003db2:	461a      	mov	r2, r3
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d115      	bne.n	8003de6 <LCD_print1+0x126>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	7b5b      	ldrb	r3, [r3, #13]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d30f      	bcc.n	8003de6 <LCD_print1+0x126>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	7b5b      	ldrb	r3, [r3, #13]
 8003dca:	330e      	adds	r3, #14
 8003dcc:	461a      	mov	r2, r3
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d808      	bhi.n	8003de6 <LCD_print1+0x126>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003dd4:	f107 010c 	add.w	r1, r7, #12
 8003dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ddc:	2202      	movs	r2, #2
 8003dde:	4845      	ldr	r0, [pc, #276]	@ (8003ef4 <LCD_print1+0x234>)
 8003de0:	f014 fc8d 	bl	80186fe <HAL_SPI_Transmit>
 8003de4:	e06a      	b.n	8003ebc <LCD_print1+0x1fc>
			}
			else if((kolumna>=(ADRES->X0_SET+7) && kolumna<=(ADRES->X0_SET+10)) && wiersz==(ADRES->Y0_SET+14))
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	7b1b      	ldrb	r3, [r3, #12]
 8003dea:	3307      	adds	r3, #7
 8003dec:	461a      	mov	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d316      	bcc.n	8003e22 <LCD_print1+0x162>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	7b1b      	ldrb	r3, [r3, #12]
 8003df8:	330a      	adds	r3, #10
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d80f      	bhi.n	8003e22 <LCD_print1+0x162>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	7b5b      	ldrb	r3, [r3, #13]
 8003e06:	330e      	adds	r3, #14
 8003e08:	461a      	mov	r2, r3
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d108      	bne.n	8003e22 <LCD_print1+0x162>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003e10:	f107 010c 	add.w	r1, r7, #12
 8003e14:	f04f 33ff 	mov.w	r3, #4294967295
 8003e18:	2202      	movs	r2, #2
 8003e1a:	4836      	ldr	r0, [pc, #216]	@ (8003ef4 <LCD_print1+0x234>)
 8003e1c:	f014 fc6f 	bl	80186fe <HAL_SPI_Transmit>
 8003e20:	e04c      	b.n	8003ebc <LCD_print1+0x1fc>
			}
			else if((kolumna==(ADRES->X0_SET+6)) && wiersz==(ADRES->Y0_SET+3))
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	7b1b      	ldrb	r3, [r3, #12]
 8003e26:	3306      	adds	r3, #6
 8003e28:	461a      	mov	r2, r3
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d10f      	bne.n	8003e50 <LCD_print1+0x190>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	7b5b      	ldrb	r3, [r3, #13]
 8003e34:	3303      	adds	r3, #3
 8003e36:	461a      	mov	r2, r3
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d108      	bne.n	8003e50 <LCD_print1+0x190>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003e3e:	f107 010c 	add.w	r1, r7, #12
 8003e42:	f04f 33ff 	mov.w	r3, #4294967295
 8003e46:	2202      	movs	r2, #2
 8003e48:	482a      	ldr	r0, [pc, #168]	@ (8003ef4 <LCD_print1+0x234>)
 8003e4a:	f014 fc58 	bl	80186fe <HAL_SPI_Transmit>
 8003e4e:	e035      	b.n	8003ebc <LCD_print1+0x1fc>
			}
			else if((kolumna==(ADRES->X0_SET+7)) && wiersz==(ADRES->Y0_SET+2))
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	7b1b      	ldrb	r3, [r3, #12]
 8003e54:	3307      	adds	r3, #7
 8003e56:	461a      	mov	r2, r3
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d10f      	bne.n	8003e7e <LCD_print1+0x1be>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	7b5b      	ldrb	r3, [r3, #13]
 8003e62:	3302      	adds	r3, #2
 8003e64:	461a      	mov	r2, r3
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d108      	bne.n	8003e7e <LCD_print1+0x1be>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003e6c:	f107 010c 	add.w	r1, r7, #12
 8003e70:	f04f 33ff 	mov.w	r3, #4294967295
 8003e74:	2202      	movs	r2, #2
 8003e76:	481f      	ldr	r0, [pc, #124]	@ (8003ef4 <LCD_print1+0x234>)
 8003e78:	f014 fc41 	bl	80186fe <HAL_SPI_Transmit>
 8003e7c:	e01e      	b.n	8003ebc <LCD_print1+0x1fc>
			}
			else if((kolumna==(ADRES->X0_SET+8)) && wiersz==(ADRES->Y0_SET+1))
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	7b1b      	ldrb	r3, [r3, #12]
 8003e82:	3308      	adds	r3, #8
 8003e84:	461a      	mov	r2, r3
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d10f      	bne.n	8003eac <LCD_print1+0x1ec>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	7b5b      	ldrb	r3, [r3, #13]
 8003e90:	3301      	adds	r3, #1
 8003e92:	461a      	mov	r2, r3
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d108      	bne.n	8003eac <LCD_print1+0x1ec>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8003e9a:	f107 010c 	add.w	r1, r7, #12
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	4813      	ldr	r0, [pc, #76]	@ (8003ef4 <LCD_print1+0x234>)
 8003ea6:	f014 fc2a 	bl	80186fe <HAL_SPI_Transmit>
 8003eaa:	e007      	b.n	8003ebc <LCD_print1+0x1fc>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8003eac:	f107 0108 	add.w	r1, r7, #8
 8003eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	480f      	ldr	r0, [pc, #60]	@ (8003ef4 <LCD_print1+0x234>)
 8003eb8:	f014 fc21 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	7b9b      	ldrb	r3, [r3, #14]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	461a      	mov	r2, r3
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	f4ff af6d 	bcc.w	8003dac <LCD_print1+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	7bdb      	ldrb	r3, [r3, #15]
 8003edc:	461a      	mov	r2, r3
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	f4ff af5f 	bcc.w	8003da4 <LCD_print1+0xe4>
			}
		}
	}
	CS_ON();
 8003ee6:	f7fd f89d 	bl	8001024 <CS_ON>
}
 8003eea:	bf00      	nop
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	200004a4 	.word	0x200004a4

08003ef8 <LCD_print2>:

void LCD_print2(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	4603      	mov	r3, r0
 8003f02:	71fb      	strb	r3, [r7, #7]
 8003f04:	460b      	mov	r3, r1
 8003f06:	71bb      	strb	r3, [r7, #6]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	2300      	movs	r3, #0
 8003f12:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2200      	movs	r2, #0
 8003f18:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	223f      	movs	r2, #63	@ 0x3f
 8003f1e:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	221f      	movs	r2, #31
 8003f24:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	7cda      	ldrb	r2, [r3, #19]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	7c1b      	ldrb	r3, [r3, #16]
 8003f3a:	4053      	eors	r3, r2
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	b25a      	sxtb	r2, r3
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	7c5b      	ldrb	r3, [r3, #17]
 8003f46:	b25b      	sxtb	r3, r3
 8003f48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f4c:	b25b      	sxtb	r3, r3
 8003f4e:	4053      	eors	r3, r2
 8003f50:	b25b      	sxtb	r3, r3
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	7d1b      	ldrb	r3, [r3, #20]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	7c5b      	ldrb	r3, [r3, #17]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	4053      	eors	r3, r2
 8003f68:	015b      	lsls	r3, r3, #5
 8003f6a:	b25a      	sxtb	r2, r3
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	7c9b      	ldrb	r3, [r3, #18]
 8003f70:	b25b      	sxtb	r3, r3
 8003f72:	4053      	eors	r3, r2
 8003f74:	b25b      	sxtb	r3, r3
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	7cdb      	ldrb	r3, [r3, #19]
 8003f80:	733b      	strb	r3, [r7, #12]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	7d1b      	ldrb	r3, [r3, #20]
 8003f86:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8003f90:	7bfa      	ldrb	r2, [r7, #15]
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	4053      	eors	r3, r2
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	b25a      	sxtb	r2, r3
 8003f9c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003fa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fa4:	b25b      	sxtb	r3, r3
 8003fa6:	4053      	eors	r3, r2
 8003fa8:	b25b      	sxtb	r3, r3
 8003faa:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8003fac:	7bba      	ldrb	r2, [r7, #14]
 8003fae:	79bb      	ldrb	r3, [r7, #6]
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	4053      	eors	r3, r2
 8003fb6:	015b      	lsls	r3, r3, #5
 8003fb8:	b25a      	sxtb	r2, r3
 8003fba:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003fbe:	4053      	eors	r3, r2
 8003fc0:	b25b      	sxtb	r3, r3
 8003fc2:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	723b      	strb	r3, [r7, #8]
 8003fc8:	7bbb      	ldrb	r3, [r7, #14]
 8003fca:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8003fcc:	f7fd f840 	bl	8001050 <DC_ON>
	CS_OFF();
 8003fd0:	f7fd f833 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	7b5b      	ldrb	r3, [r3, #13]
 8003fd8:	613b      	str	r3, [r7, #16]
 8003fda:	e11f      	b.n	800421c <LCD_print2+0x324>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	7b1b      	ldrb	r3, [r3, #12]
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	e110      	b.n	8004206 <LCD_print2+0x30e>
		{
			if(kolumna==(ADRES->X0_SET+3) && ((wiersz>=(ADRES->Y0_SET+11) && wiersz<=(ADRES->Y0_SET+14) || wiersz==(ADRES->Y0_SET+2))))
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	7b1b      	ldrb	r3, [r3, #12]
 8003fe8:	3303      	adds	r3, #3
 8003fea:	461a      	mov	r2, r3
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d11d      	bne.n	800402e <LCD_print2+0x136>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	7b5b      	ldrb	r3, [r3, #13]
 8003ff6:	330b      	adds	r3, #11
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d306      	bcc.n	800400e <LCD_print2+0x116>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	7b5b      	ldrb	r3, [r3, #13]
 8004004:	330e      	adds	r3, #14
 8004006:	461a      	mov	r2, r3
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4293      	cmp	r3, r2
 800400c:	d906      	bls.n	800401c <LCD_print2+0x124>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	7b5b      	ldrb	r3, [r3, #13]
 8004012:	3302      	adds	r3, #2
 8004014:	461a      	mov	r2, r3
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4293      	cmp	r3, r2
 800401a:	d108      	bne.n	800402e <LCD_print2+0x136>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800401c:	f107 010c 	add.w	r1, r7, #12
 8004020:	f04f 33ff 	mov.w	r3, #4294967295
 8004024:	2202      	movs	r2, #2
 8004026:	4884      	ldr	r0, [pc, #528]	@ (8004238 <LCD_print2+0x340>)
 8004028:	f014 fb69 	bl	80186fe <HAL_SPI_Transmit>
 800402c:	e0e8      	b.n	8004200 <LCD_print2+0x308>
			}
			else if((kolumna>=(ADRES->X0_SET+5) && kolumna<=(ADRES->X0_SET+7)) && wiersz==(ADRES->Y0_SET+0))
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	7b1b      	ldrb	r3, [r3, #12]
 8004032:	3305      	adds	r3, #5
 8004034:	461a      	mov	r2, r3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	4293      	cmp	r3, r2
 800403a:	d315      	bcc.n	8004068 <LCD_print2+0x170>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	7b1b      	ldrb	r3, [r3, #12]
 8004040:	3307      	adds	r3, #7
 8004042:	461a      	mov	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	4293      	cmp	r3, r2
 8004048:	d80e      	bhi.n	8004068 <LCD_print2+0x170>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	7b5b      	ldrb	r3, [r3, #13]
 800404e:	461a      	mov	r2, r3
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4293      	cmp	r3, r2
 8004054:	d108      	bne.n	8004068 <LCD_print2+0x170>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004056:	f107 010c 	add.w	r1, r7, #12
 800405a:	f04f 33ff 	mov.w	r3, #4294967295
 800405e:	2202      	movs	r2, #2
 8004060:	4875      	ldr	r0, [pc, #468]	@ (8004238 <LCD_print2+0x340>)
 8004062:	f014 fb4c 	bl	80186fe <HAL_SPI_Transmit>
 8004066:	e0cb      	b.n	8004200 <LCD_print2+0x308>
			}
			else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+10)) && wiersz==(ADRES->Y0_SET+13))
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	7b1b      	ldrb	r3, [r3, #12]
 800406c:	3303      	adds	r3, #3
 800406e:	461a      	mov	r2, r3
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	4293      	cmp	r3, r2
 8004074:	d316      	bcc.n	80040a4 <LCD_print2+0x1ac>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	7b1b      	ldrb	r3, [r3, #12]
 800407a:	330a      	adds	r3, #10
 800407c:	461a      	mov	r2, r3
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	4293      	cmp	r3, r2
 8004082:	d80f      	bhi.n	80040a4 <LCD_print2+0x1ac>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	7b5b      	ldrb	r3, [r3, #13]
 8004088:	330d      	adds	r3, #13
 800408a:	461a      	mov	r2, r3
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4293      	cmp	r3, r2
 8004090:	d108      	bne.n	80040a4 <LCD_print2+0x1ac>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004092:	f107 010c 	add.w	r1, r7, #12
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	2202      	movs	r2, #2
 800409c:	4866      	ldr	r0, [pc, #408]	@ (8004238 <LCD_print2+0x340>)
 800409e:	f014 fb2e 	bl	80186fe <HAL_SPI_Transmit>
 80040a2:	e0ad      	b.n	8004200 <LCD_print2+0x308>
			}
			else if(kolumna==(ADRES->X0_SET+9) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+5) || wiersz==(ADRES->Y0_SET+13))))
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	7b1b      	ldrb	r3, [r3, #12]
 80040a8:	3309      	adds	r3, #9
 80040aa:	461a      	mov	r2, r3
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d11d      	bne.n	80040ee <LCD_print2+0x1f6>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	7b5b      	ldrb	r3, [r3, #13]
 80040b6:	3302      	adds	r3, #2
 80040b8:	461a      	mov	r2, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4293      	cmp	r3, r2
 80040be:	d306      	bcc.n	80040ce <LCD_print2+0x1d6>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	7b5b      	ldrb	r3, [r3, #13]
 80040c4:	3305      	adds	r3, #5
 80040c6:	461a      	mov	r2, r3
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d906      	bls.n	80040dc <LCD_print2+0x1e4>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	7b5b      	ldrb	r3, [r3, #13]
 80040d2:	330d      	adds	r3, #13
 80040d4:	461a      	mov	r2, r3
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4293      	cmp	r3, r2
 80040da:	d108      	bne.n	80040ee <LCD_print2+0x1f6>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80040dc:	f107 010c 	add.w	r1, r7, #12
 80040e0:	f04f 33ff 	mov.w	r3, #4294967295
 80040e4:	2202      	movs	r2, #2
 80040e6:	4854      	ldr	r0, [pc, #336]	@ (8004238 <LCD_print2+0x340>)
 80040e8:	f014 fb09 	bl	80186fe <HAL_SPI_Transmit>
 80040ec:	e088      	b.n	8004200 <LCD_print2+0x308>
			}
			else if((kolumna==(ADRES->X0_SET+4)) && (wiersz==(ADRES->Y0_SET+1) || wiersz==(ADRES->Y0_SET+10)))
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	7b1b      	ldrb	r3, [r3, #12]
 80040f2:	3304      	adds	r3, #4
 80040f4:	461a      	mov	r2, r3
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d116      	bne.n	800412a <LCD_print2+0x232>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	7b5b      	ldrb	r3, [r3, #13]
 8004100:	3301      	adds	r3, #1
 8004102:	461a      	mov	r2, r3
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4293      	cmp	r3, r2
 8004108:	d006      	beq.n	8004118 <LCD_print2+0x220>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	7b5b      	ldrb	r3, [r3, #13]
 800410e:	330a      	adds	r3, #10
 8004110:	461a      	mov	r2, r3
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4293      	cmp	r3, r2
 8004116:	d108      	bne.n	800412a <LCD_print2+0x232>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004118:	f107 010c 	add.w	r1, r7, #12
 800411c:	f04f 33ff 	mov.w	r3, #4294967295
 8004120:	2202      	movs	r2, #2
 8004122:	4845      	ldr	r0, [pc, #276]	@ (8004238 <LCD_print2+0x340>)
 8004124:	f014 faeb 	bl	80186fe <HAL_SPI_Transmit>
 8004128:	e06a      	b.n	8004200 <LCD_print2+0x308>
			}
			else if((kolumna==(ADRES->X0_SET+8)) && (wiersz==(ADRES->Y0_SET+1) || wiersz==(ADRES->Y0_SET+6)))
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	7b1b      	ldrb	r3, [r3, #12]
 800412e:	3308      	adds	r3, #8
 8004130:	461a      	mov	r2, r3
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	4293      	cmp	r3, r2
 8004136:	d116      	bne.n	8004166 <LCD_print2+0x26e>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	7b5b      	ldrb	r3, [r3, #13]
 800413c:	3301      	adds	r3, #1
 800413e:	461a      	mov	r2, r3
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4293      	cmp	r3, r2
 8004144:	d006      	beq.n	8004154 <LCD_print2+0x25c>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	7b5b      	ldrb	r3, [r3, #13]
 800414a:	3306      	adds	r3, #6
 800414c:	461a      	mov	r2, r3
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4293      	cmp	r3, r2
 8004152:	d108      	bne.n	8004166 <LCD_print2+0x26e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004154:	f107 010c 	add.w	r1, r7, #12
 8004158:	f04f 33ff 	mov.w	r3, #4294967295
 800415c:	2202      	movs	r2, #2
 800415e:	4836      	ldr	r0, [pc, #216]	@ (8004238 <LCD_print2+0x340>)
 8004160:	f014 facd 	bl	80186fe <HAL_SPI_Transmit>
 8004164:	e04c      	b.n	8004200 <LCD_print2+0x308>
			}
			else if((kolumna==(ADRES->X0_SET+5)) && wiersz==(ADRES->Y0_SET+9))
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	7b1b      	ldrb	r3, [r3, #12]
 800416a:	3305      	adds	r3, #5
 800416c:	461a      	mov	r2, r3
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	4293      	cmp	r3, r2
 8004172:	d10f      	bne.n	8004194 <LCD_print2+0x29c>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	7b5b      	ldrb	r3, [r3, #13]
 8004178:	3309      	adds	r3, #9
 800417a:	461a      	mov	r2, r3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4293      	cmp	r3, r2
 8004180:	d108      	bne.n	8004194 <LCD_print2+0x29c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004182:	f107 010c 	add.w	r1, r7, #12
 8004186:	f04f 33ff 	mov.w	r3, #4294967295
 800418a:	2202      	movs	r2, #2
 800418c:	482a      	ldr	r0, [pc, #168]	@ (8004238 <LCD_print2+0x340>)
 800418e:	f014 fab6 	bl	80186fe <HAL_SPI_Transmit>
 8004192:	e035      	b.n	8004200 <LCD_print2+0x308>
			}
			else if((kolumna==(ADRES->X0_SET+6)) && wiersz==(ADRES->Y0_SET+8))
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	7b1b      	ldrb	r3, [r3, #12]
 8004198:	3306      	adds	r3, #6
 800419a:	461a      	mov	r2, r3
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	4293      	cmp	r3, r2
 80041a0:	d10f      	bne.n	80041c2 <LCD_print2+0x2ca>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	7b5b      	ldrb	r3, [r3, #13]
 80041a6:	3308      	adds	r3, #8
 80041a8:	461a      	mov	r2, r3
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d108      	bne.n	80041c2 <LCD_print2+0x2ca>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80041b0:	f107 010c 	add.w	r1, r7, #12
 80041b4:	f04f 33ff 	mov.w	r3, #4294967295
 80041b8:	2202      	movs	r2, #2
 80041ba:	481f      	ldr	r0, [pc, #124]	@ (8004238 <LCD_print2+0x340>)
 80041bc:	f014 fa9f 	bl	80186fe <HAL_SPI_Transmit>
 80041c0:	e01e      	b.n	8004200 <LCD_print2+0x308>
			}
			else if((kolumna==(ADRES->X0_SET+7)) && wiersz==(ADRES->Y0_SET+7))
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	7b1b      	ldrb	r3, [r3, #12]
 80041c6:	3307      	adds	r3, #7
 80041c8:	461a      	mov	r2, r3
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d10f      	bne.n	80041f0 <LCD_print2+0x2f8>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	7b5b      	ldrb	r3, [r3, #13]
 80041d4:	3307      	adds	r3, #7
 80041d6:	461a      	mov	r2, r3
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4293      	cmp	r3, r2
 80041dc:	d108      	bne.n	80041f0 <LCD_print2+0x2f8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80041de:	f107 010c 	add.w	r1, r7, #12
 80041e2:	f04f 33ff 	mov.w	r3, #4294967295
 80041e6:	2202      	movs	r2, #2
 80041e8:	4813      	ldr	r0, [pc, #76]	@ (8004238 <LCD_print2+0x340>)
 80041ea:	f014 fa88 	bl	80186fe <HAL_SPI_Transmit>
 80041ee:	e007      	b.n	8004200 <LCD_print2+0x308>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 80041f0:	f107 0108 	add.w	r1, r7, #8
 80041f4:	f04f 33ff 	mov.w	r3, #4294967295
 80041f8:	2202      	movs	r2, #2
 80041fa:	480f      	ldr	r0, [pc, #60]	@ (8004238 <LCD_print2+0x340>)
 80041fc:	f014 fa7f 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	3301      	adds	r3, #1
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	7b9b      	ldrb	r3, [r3, #14]
 800420a:	3301      	adds	r3, #1
 800420c:	461a      	mov	r2, r3
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	4293      	cmp	r3, r2
 8004212:	f4ff aee7 	bcc.w	8003fe4 <LCD_print2+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	3301      	adds	r3, #1
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	7bdb      	ldrb	r3, [r3, #15]
 8004220:	461a      	mov	r2, r3
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	4293      	cmp	r3, r2
 8004226:	f4ff aed9 	bcc.w	8003fdc <LCD_print2+0xe4>
			}
		}
	}
	CS_ON();
 800422a:	f7fc fefb 	bl	8001024 <CS_ON>
}
 800422e:	bf00      	nop
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	200004a4 	.word	0x200004a4

0800423c <LCD_print3>:

void LCD_print3(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	4603      	mov	r3, r0
 8004246:	71fb      	strb	r3, [r7, #7]
 8004248:	460b      	mov	r3, r1
 800424a:	71bb      	strb	r3, [r7, #6]
 800424c:	4613      	mov	r3, r2
 800424e:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	2300      	movs	r3, #0
 8004256:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2200      	movs	r2, #0
 800425c:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	223f      	movs	r2, #63	@ 0x3f
 8004262:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	221f      	movs	r2, #31
 8004268:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2200      	movs	r2, #0
 800426e:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2200      	movs	r2, #0
 8004274:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	7cda      	ldrb	r2, [r3, #19]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	7c1b      	ldrb	r3, [r3, #16]
 800427e:	4053      	eors	r3, r2
 8004280:	b2db      	uxtb	r3, r3
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	b25a      	sxtb	r2, r3
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	7c5b      	ldrb	r3, [r3, #17]
 800428a:	b25b      	sxtb	r3, r3
 800428c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004290:	b25b      	sxtb	r3, r3
 8004292:	4053      	eors	r3, r2
 8004294:	b25b      	sxtb	r3, r3
 8004296:	b2da      	uxtb	r2, r3
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	7d1b      	ldrb	r3, [r3, #20]
 80042a0:	461a      	mov	r2, r3
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	7c5b      	ldrb	r3, [r3, #17]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	4053      	eors	r3, r2
 80042ac:	015b      	lsls	r3, r3, #5
 80042ae:	b25a      	sxtb	r2, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	7c9b      	ldrb	r3, [r3, #18]
 80042b4:	b25b      	sxtb	r3, r3
 80042b6:	4053      	eors	r3, r2
 80042b8:	b25b      	sxtb	r3, r3
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	7cdb      	ldrb	r3, [r3, #19]
 80042c4:	733b      	strb	r3, [r7, #12]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	7d1b      	ldrb	r3, [r3, #20]
 80042ca:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 80042cc:	2300      	movs	r3, #0
 80042ce:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 80042d0:	2300      	movs	r3, #0
 80042d2:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 80042d4:	7bfa      	ldrb	r2, [r7, #15]
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	4053      	eors	r3, r2
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	b25a      	sxtb	r2, r3
 80042e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80042e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042e8:	b25b      	sxtb	r3, r3
 80042ea:	4053      	eors	r3, r2
 80042ec:	b25b      	sxtb	r3, r3
 80042ee:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 80042f0:	7bba      	ldrb	r2, [r7, #14]
 80042f2:	79bb      	ldrb	r3, [r7, #6]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	4053      	eors	r3, r2
 80042fa:	015b      	lsls	r3, r3, #5
 80042fc:	b25a      	sxtb	r2, r3
 80042fe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004302:	4053      	eors	r3, r2
 8004304:	b25b      	sxtb	r3, r3
 8004306:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	723b      	strb	r3, [r7, #8]
 800430c:	7bbb      	ldrb	r3, [r7, #14]
 800430e:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8004310:	f7fc fe9e 	bl	8001050 <DC_ON>
	CS_OFF();
 8004314:	f7fc fe91 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	7b5b      	ldrb	r3, [r3, #13]
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	e0f6      	b.n	800450e <LCD_print3+0x2d2>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	7b1b      	ldrb	r3, [r3, #12]
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	e0e7      	b.n	80044f8 <LCD_print3+0x2bc>
		{
			if(kolumna==(ADRES->X0_SET+7) && ((wiersz==(ADRES->Y0_SET+1) || wiersz==(ADRES->Y0_SET+6) || wiersz==(ADRES->Y0_SET+8) || wiersz==(ADRES->Y0_SET+13))))
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	7b1b      	ldrb	r3, [r3, #12]
 800432c:	3307      	adds	r3, #7
 800432e:	461a      	mov	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	4293      	cmp	r3, r2
 8004334:	d124      	bne.n	8004380 <LCD_print3+0x144>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	7b5b      	ldrb	r3, [r3, #13]
 800433a:	3301      	adds	r3, #1
 800433c:	461a      	mov	r2, r3
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4293      	cmp	r3, r2
 8004342:	d014      	beq.n	800436e <LCD_print3+0x132>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	7b5b      	ldrb	r3, [r3, #13]
 8004348:	3306      	adds	r3, #6
 800434a:	461a      	mov	r2, r3
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4293      	cmp	r3, r2
 8004350:	d00d      	beq.n	800436e <LCD_print3+0x132>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	7b5b      	ldrb	r3, [r3, #13]
 8004356:	3308      	adds	r3, #8
 8004358:	461a      	mov	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4293      	cmp	r3, r2
 800435e:	d006      	beq.n	800436e <LCD_print3+0x132>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	7b5b      	ldrb	r3, [r3, #13]
 8004364:	330d      	adds	r3, #13
 8004366:	461a      	mov	r2, r3
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	4293      	cmp	r3, r2
 800436c:	d108      	bne.n	8004380 <LCD_print3+0x144>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800436e:	f107 010c 	add.w	r1, r7, #12
 8004372:	f04f 33ff 	mov.w	r3, #4294967295
 8004376:	2202      	movs	r2, #2
 8004378:	486b      	ldr	r0, [pc, #428]	@ (8004528 <LCD_print3+0x2ec>)
 800437a:	f014 f9c0 	bl	80186fe <HAL_SPI_Transmit>
 800437e:	e0b8      	b.n	80044f2 <LCD_print3+0x2b6>
			}
			else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && wiersz==(ADRES->Y0_SET+0))
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	7b1b      	ldrb	r3, [r3, #12]
 8004384:	3303      	adds	r3, #3
 8004386:	461a      	mov	r2, r3
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	4293      	cmp	r3, r2
 800438c:	d315      	bcc.n	80043ba <LCD_print3+0x17e>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	7b1b      	ldrb	r3, [r3, #12]
 8004392:	3306      	adds	r3, #6
 8004394:	461a      	mov	r2, r3
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	4293      	cmp	r3, r2
 800439a:	d80e      	bhi.n	80043ba <LCD_print3+0x17e>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	7b5b      	ldrb	r3, [r3, #13]
 80043a0:	461a      	mov	r2, r3
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d108      	bne.n	80043ba <LCD_print3+0x17e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80043a8:	f107 010c 	add.w	r1, r7, #12
 80043ac:	f04f 33ff 	mov.w	r3, #4294967295
 80043b0:	2202      	movs	r2, #2
 80043b2:	485d      	ldr	r0, [pc, #372]	@ (8004528 <LCD_print3+0x2ec>)
 80043b4:	f014 f9a3 	bl	80186fe <HAL_SPI_Transmit>
 80043b8:	e09b      	b.n	80044f2 <LCD_print3+0x2b6>
			}
			else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+6)) && wiersz==(ADRES->Y0_SET+7))
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	7b1b      	ldrb	r3, [r3, #12]
 80043be:	3304      	adds	r3, #4
 80043c0:	461a      	mov	r2, r3
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d316      	bcc.n	80043f6 <LCD_print3+0x1ba>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	7b1b      	ldrb	r3, [r3, #12]
 80043cc:	3306      	adds	r3, #6
 80043ce:	461a      	mov	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d80f      	bhi.n	80043f6 <LCD_print3+0x1ba>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	7b5b      	ldrb	r3, [r3, #13]
 80043da:	3307      	adds	r3, #7
 80043dc:	461a      	mov	r2, r3
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d108      	bne.n	80043f6 <LCD_print3+0x1ba>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80043e4:	f107 010c 	add.w	r1, r7, #12
 80043e8:	f04f 33ff 	mov.w	r3, #4294967295
 80043ec:	2202      	movs	r2, #2
 80043ee:	484e      	ldr	r0, [pc, #312]	@ (8004528 <LCD_print3+0x2ec>)
 80043f0:	f014 f985 	bl	80186fe <HAL_SPI_Transmit>
 80043f4:	e07d      	b.n	80044f2 <LCD_print3+0x2b6>
			}
			else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && wiersz==(ADRES->Y0_SET+14))
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	7b1b      	ldrb	r3, [r3, #12]
 80043fa:	3303      	adds	r3, #3
 80043fc:	461a      	mov	r2, r3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	4293      	cmp	r3, r2
 8004402:	d316      	bcc.n	8004432 <LCD_print3+0x1f6>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	7b1b      	ldrb	r3, [r3, #12]
 8004408:	3306      	adds	r3, #6
 800440a:	461a      	mov	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	4293      	cmp	r3, r2
 8004410:	d80f      	bhi.n	8004432 <LCD_print3+0x1f6>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	7b5b      	ldrb	r3, [r3, #13]
 8004416:	330e      	adds	r3, #14
 8004418:	461a      	mov	r2, r3
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4293      	cmp	r3, r2
 800441e:	d108      	bne.n	8004432 <LCD_print3+0x1f6>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004420:	f107 010c 	add.w	r1, r7, #12
 8004424:	f04f 33ff 	mov.w	r3, #4294967295
 8004428:	2202      	movs	r2, #2
 800442a:	483f      	ldr	r0, [pc, #252]	@ (8004528 <LCD_print3+0x2ec>)
 800442c:	f014 f967 	bl	80186fe <HAL_SPI_Transmit>
 8004430:	e05f      	b.n	80044f2 <LCD_print3+0x2b6>
			}
			else if(kolumna==(ADRES->X0_SET+8) && ((wiersz==(ADRES->Y0_SET+2) || wiersz==(ADRES->Y0_SET+5) || wiersz==(ADRES->Y0_SET+9) || wiersz==(ADRES->Y0_SET+12))))
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	7b1b      	ldrb	r3, [r3, #12]
 8004436:	3308      	adds	r3, #8
 8004438:	461a      	mov	r2, r3
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	4293      	cmp	r3, r2
 800443e:	d124      	bne.n	800448a <LCD_print3+0x24e>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	7b5b      	ldrb	r3, [r3, #13]
 8004444:	3302      	adds	r3, #2
 8004446:	461a      	mov	r2, r3
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4293      	cmp	r3, r2
 800444c:	d014      	beq.n	8004478 <LCD_print3+0x23c>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	7b5b      	ldrb	r3, [r3, #13]
 8004452:	3305      	adds	r3, #5
 8004454:	461a      	mov	r2, r3
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4293      	cmp	r3, r2
 800445a:	d00d      	beq.n	8004478 <LCD_print3+0x23c>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	7b5b      	ldrb	r3, [r3, #13]
 8004460:	3309      	adds	r3, #9
 8004462:	461a      	mov	r2, r3
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	4293      	cmp	r3, r2
 8004468:	d006      	beq.n	8004478 <LCD_print3+0x23c>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	7b5b      	ldrb	r3, [r3, #13]
 800446e:	330c      	adds	r3, #12
 8004470:	461a      	mov	r2, r3
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	4293      	cmp	r3, r2
 8004476:	d108      	bne.n	800448a <LCD_print3+0x24e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004478:	f107 010c 	add.w	r1, r7, #12
 800447c:	f04f 33ff 	mov.w	r3, #4294967295
 8004480:	2202      	movs	r2, #2
 8004482:	4829      	ldr	r0, [pc, #164]	@ (8004528 <LCD_print3+0x2ec>)
 8004484:	f014 f93b 	bl	80186fe <HAL_SPI_Transmit>
 8004488:	e033      	b.n	80044f2 <LCD_print3+0x2b6>
			}
			else if(kolumna==(ADRES->X0_SET+9) && ((wiersz==(ADRES->Y0_SET+3) || wiersz==(ADRES->Y0_SET+4) || wiersz==(ADRES->Y0_SET+10) || wiersz==(ADRES->Y0_SET+111))))
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	7b1b      	ldrb	r3, [r3, #12]
 800448e:	3309      	adds	r3, #9
 8004490:	461a      	mov	r2, r3
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	4293      	cmp	r3, r2
 8004496:	d124      	bne.n	80044e2 <LCD_print3+0x2a6>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	7b5b      	ldrb	r3, [r3, #13]
 800449c:	3303      	adds	r3, #3
 800449e:	461a      	mov	r2, r3
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d014      	beq.n	80044d0 <LCD_print3+0x294>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	7b5b      	ldrb	r3, [r3, #13]
 80044aa:	3304      	adds	r3, #4
 80044ac:	461a      	mov	r2, r3
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00d      	beq.n	80044d0 <LCD_print3+0x294>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	7b5b      	ldrb	r3, [r3, #13]
 80044b8:	330a      	adds	r3, #10
 80044ba:	461a      	mov	r2, r3
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	4293      	cmp	r3, r2
 80044c0:	d006      	beq.n	80044d0 <LCD_print3+0x294>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	7b5b      	ldrb	r3, [r3, #13]
 80044c6:	336f      	adds	r3, #111	@ 0x6f
 80044c8:	461a      	mov	r2, r3
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d108      	bne.n	80044e2 <LCD_print3+0x2a6>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80044d0:	f107 010c 	add.w	r1, r7, #12
 80044d4:	f04f 33ff 	mov.w	r3, #4294967295
 80044d8:	2202      	movs	r2, #2
 80044da:	4813      	ldr	r0, [pc, #76]	@ (8004528 <LCD_print3+0x2ec>)
 80044dc:	f014 f90f 	bl	80186fe <HAL_SPI_Transmit>
 80044e0:	e007      	b.n	80044f2 <LCD_print3+0x2b6>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 80044e2:	f107 0108 	add.w	r1, r7, #8
 80044e6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ea:	2202      	movs	r2, #2
 80044ec:	480e      	ldr	r0, [pc, #56]	@ (8004528 <LCD_print3+0x2ec>)
 80044ee:	f014 f906 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	3301      	adds	r3, #1
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	7b9b      	ldrb	r3, [r3, #14]
 80044fc:	3301      	adds	r3, #1
 80044fe:	461a      	mov	r2, r3
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	4293      	cmp	r3, r2
 8004504:	f4ff af10 	bcc.w	8004328 <LCD_print3+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	3301      	adds	r3, #1
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	7bdb      	ldrb	r3, [r3, #15]
 8004512:	461a      	mov	r2, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4293      	cmp	r3, r2
 8004518:	f4ff af02 	bcc.w	8004320 <LCD_print3+0xe4>
			}
		}
	}
	CS_ON();
 800451c:	f7fc fd82 	bl	8001024 <CS_ON>
}
 8004520:	bf00      	nop
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	200004a4 	.word	0x200004a4

0800452c <LCD_print4>:

void LCD_print4(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	4603      	mov	r3, r0
 8004536:	71fb      	strb	r3, [r7, #7]
 8004538:	460b      	mov	r3, r1
 800453a:	71bb      	strb	r3, [r7, #6]
 800453c:	4613      	mov	r3, r2
 800453e:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	2300      	movs	r3, #0
 8004546:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2200      	movs	r2, #0
 800454c:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	223f      	movs	r2, #63	@ 0x3f
 8004552:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	221f      	movs	r2, #31
 8004558:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2200      	movs	r2, #0
 800455e:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2200      	movs	r2, #0
 8004564:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	7cda      	ldrb	r2, [r3, #19]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	7c1b      	ldrb	r3, [r3, #16]
 800456e:	4053      	eors	r3, r2
 8004570:	b2db      	uxtb	r3, r3
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	b25a      	sxtb	r2, r3
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	7c5b      	ldrb	r3, [r3, #17]
 800457a:	b25b      	sxtb	r3, r3
 800457c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004580:	b25b      	sxtb	r3, r3
 8004582:	4053      	eors	r3, r2
 8004584:	b25b      	sxtb	r3, r3
 8004586:	b2da      	uxtb	r2, r3
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	7d1b      	ldrb	r3, [r3, #20]
 8004590:	461a      	mov	r2, r3
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	7c5b      	ldrb	r3, [r3, #17]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	4053      	eors	r3, r2
 800459c:	015b      	lsls	r3, r3, #5
 800459e:	b25a      	sxtb	r2, r3
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	7c9b      	ldrb	r3, [r3, #18]
 80045a4:	b25b      	sxtb	r3, r3
 80045a6:	4053      	eors	r3, r2
 80045a8:	b25b      	sxtb	r3, r3
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	7cdb      	ldrb	r3, [r3, #19]
 80045b4:	733b      	strb	r3, [r7, #12]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	7d1b      	ldrb	r3, [r3, #20]
 80045ba:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 80045bc:	2300      	movs	r3, #0
 80045be:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 80045c0:	2300      	movs	r3, #0
 80045c2:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 80045c4:	7bfa      	ldrb	r2, [r7, #15]
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	4053      	eors	r3, r2
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	b25a      	sxtb	r2, r3
 80045d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80045d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045d8:	b25b      	sxtb	r3, r3
 80045da:	4053      	eors	r3, r2
 80045dc:	b25b      	sxtb	r3, r3
 80045de:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 80045e0:	7bba      	ldrb	r2, [r7, #14]
 80045e2:	79bb      	ldrb	r3, [r7, #6]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	4053      	eors	r3, r2
 80045ea:	015b      	lsls	r3, r3, #5
 80045ec:	b25a      	sxtb	r2, r3
 80045ee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80045f2:	4053      	eors	r3, r2
 80045f4:	b25b      	sxtb	r3, r3
 80045f6:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	723b      	strb	r3, [r7, #8]
 80045fc:	7bbb      	ldrb	r3, [r7, #14]
 80045fe:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8004600:	f7fc fd26 	bl	8001050 <DC_ON>
	CS_OFF();
 8004604:	f7fc fd19 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	7b5b      	ldrb	r3, [r3, #13]
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	e0e5      	b.n	80047dc <LCD_print4+0x2b0>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	7b1b      	ldrb	r3, [r3, #12]
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	e0d6      	b.n	80047c6 <LCD_print4+0x29a>
		{
			if(kolumna==(ADRES->X0_SET+8) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+14))))
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	7b1b      	ldrb	r3, [r3, #12]
 800461c:	3308      	adds	r3, #8
 800461e:	461a      	mov	r2, r3
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	4293      	cmp	r3, r2
 8004624:	d115      	bne.n	8004652 <LCD_print4+0x126>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	7b5b      	ldrb	r3, [r3, #13]
 800462a:	461a      	mov	r2, r3
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4293      	cmp	r3, r2
 8004630:	d30f      	bcc.n	8004652 <LCD_print4+0x126>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	7b5b      	ldrb	r3, [r3, #13]
 8004636:	330e      	adds	r3, #14
 8004638:	461a      	mov	r2, r3
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	4293      	cmp	r3, r2
 800463e:	d808      	bhi.n	8004652 <LCD_print4+0x126>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004640:	f107 010c 	add.w	r1, r7, #12
 8004644:	f04f 33ff 	mov.w	r3, #4294967295
 8004648:	2202      	movs	r2, #2
 800464a:	486b      	ldr	r0, [pc, #428]	@ (80047f8 <LCD_print4+0x2cc>)
 800464c:	f014 f857 	bl	80186fe <HAL_SPI_Transmit>
 8004650:	e0b6      	b.n	80047c0 <LCD_print4+0x294>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+10)) && wiersz==(ADRES->Y0_SET+7))
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	7b1b      	ldrb	r3, [r3, #12]
 8004656:	3302      	adds	r3, #2
 8004658:	461a      	mov	r2, r3
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	4293      	cmp	r3, r2
 800465e:	d316      	bcc.n	800468e <LCD_print4+0x162>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	7b1b      	ldrb	r3, [r3, #12]
 8004664:	330a      	adds	r3, #10
 8004666:	461a      	mov	r2, r3
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	4293      	cmp	r3, r2
 800466c:	d80f      	bhi.n	800468e <LCD_print4+0x162>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	7b5b      	ldrb	r3, [r3, #13]
 8004672:	3307      	adds	r3, #7
 8004674:	461a      	mov	r2, r3
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4293      	cmp	r3, r2
 800467a:	d108      	bne.n	800468e <LCD_print4+0x162>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800467c:	f107 010c 	add.w	r1, r7, #12
 8004680:	f04f 33ff 	mov.w	r3, #4294967295
 8004684:	2202      	movs	r2, #2
 8004686:	485c      	ldr	r0, [pc, #368]	@ (80047f8 <LCD_print4+0x2cc>)
 8004688:	f014 f839 	bl	80186fe <HAL_SPI_Transmit>
 800468c:	e098      	b.n	80047c0 <LCD_print4+0x294>
			}
			else if((kolumna==(ADRES->X0_SET+3)) && wiersz==(ADRES->Y0_SET+6))
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	7b1b      	ldrb	r3, [r3, #12]
 8004692:	3303      	adds	r3, #3
 8004694:	461a      	mov	r2, r3
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	4293      	cmp	r3, r2
 800469a:	d10f      	bne.n	80046bc <LCD_print4+0x190>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	7b5b      	ldrb	r3, [r3, #13]
 80046a0:	3306      	adds	r3, #6
 80046a2:	461a      	mov	r2, r3
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d108      	bne.n	80046bc <LCD_print4+0x190>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80046aa:	f107 010c 	add.w	r1, r7, #12
 80046ae:	f04f 33ff 	mov.w	r3, #4294967295
 80046b2:	2202      	movs	r2, #2
 80046b4:	4850      	ldr	r0, [pc, #320]	@ (80047f8 <LCD_print4+0x2cc>)
 80046b6:	f014 f822 	bl	80186fe <HAL_SPI_Transmit>
 80046ba:	e081      	b.n	80047c0 <LCD_print4+0x294>
			}
			else if((kolumna==(ADRES->X0_SET+4)) && wiersz==(ADRES->Y0_SET+5))
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	7b1b      	ldrb	r3, [r3, #12]
 80046c0:	3304      	adds	r3, #4
 80046c2:	461a      	mov	r2, r3
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d10f      	bne.n	80046ea <LCD_print4+0x1be>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	7b5b      	ldrb	r3, [r3, #13]
 80046ce:	3305      	adds	r3, #5
 80046d0:	461a      	mov	r2, r3
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d108      	bne.n	80046ea <LCD_print4+0x1be>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80046d8:	f107 010c 	add.w	r1, r7, #12
 80046dc:	f04f 33ff 	mov.w	r3, #4294967295
 80046e0:	2202      	movs	r2, #2
 80046e2:	4845      	ldr	r0, [pc, #276]	@ (80047f8 <LCD_print4+0x2cc>)
 80046e4:	f014 f80b 	bl	80186fe <HAL_SPI_Transmit>
 80046e8:	e06a      	b.n	80047c0 <LCD_print4+0x294>
			}
			else if((kolumna==(ADRES->X0_SET+5)) && wiersz==(ADRES->Y0_SET+4))
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	7b1b      	ldrb	r3, [r3, #12]
 80046ee:	3305      	adds	r3, #5
 80046f0:	461a      	mov	r2, r3
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d10f      	bne.n	8004718 <LCD_print4+0x1ec>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	7b5b      	ldrb	r3, [r3, #13]
 80046fc:	3304      	adds	r3, #4
 80046fe:	461a      	mov	r2, r3
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	4293      	cmp	r3, r2
 8004704:	d108      	bne.n	8004718 <LCD_print4+0x1ec>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004706:	f107 010c 	add.w	r1, r7, #12
 800470a:	f04f 33ff 	mov.w	r3, #4294967295
 800470e:	2202      	movs	r2, #2
 8004710:	4839      	ldr	r0, [pc, #228]	@ (80047f8 <LCD_print4+0x2cc>)
 8004712:	f013 fff4 	bl	80186fe <HAL_SPI_Transmit>
 8004716:	e053      	b.n	80047c0 <LCD_print4+0x294>
			}
			else if((kolumna==(ADRES->X0_SET+6)) && wiersz==(ADRES->Y0_SET+3))
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	7b1b      	ldrb	r3, [r3, #12]
 800471c:	3306      	adds	r3, #6
 800471e:	461a      	mov	r2, r3
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	4293      	cmp	r3, r2
 8004724:	d10f      	bne.n	8004746 <LCD_print4+0x21a>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	7b5b      	ldrb	r3, [r3, #13]
 800472a:	3303      	adds	r3, #3
 800472c:	461a      	mov	r2, r3
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4293      	cmp	r3, r2
 8004732:	d108      	bne.n	8004746 <LCD_print4+0x21a>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004734:	f107 010c 	add.w	r1, r7, #12
 8004738:	f04f 33ff 	mov.w	r3, #4294967295
 800473c:	2202      	movs	r2, #2
 800473e:	482e      	ldr	r0, [pc, #184]	@ (80047f8 <LCD_print4+0x2cc>)
 8004740:	f013 ffdd 	bl	80186fe <HAL_SPI_Transmit>
 8004744:	e03c      	b.n	80047c0 <LCD_print4+0x294>
			}
			else if((kolumna==(ADRES->X0_SET+7)) && wiersz==(ADRES->Y0_SET+2))
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	7b1b      	ldrb	r3, [r3, #12]
 800474a:	3307      	adds	r3, #7
 800474c:	461a      	mov	r2, r3
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	4293      	cmp	r3, r2
 8004752:	d10f      	bne.n	8004774 <LCD_print4+0x248>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	7b5b      	ldrb	r3, [r3, #13]
 8004758:	3302      	adds	r3, #2
 800475a:	461a      	mov	r2, r3
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4293      	cmp	r3, r2
 8004760:	d108      	bne.n	8004774 <LCD_print4+0x248>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004762:	f107 010c 	add.w	r1, r7, #12
 8004766:	f04f 33ff 	mov.w	r3, #4294967295
 800476a:	2202      	movs	r2, #2
 800476c:	4822      	ldr	r0, [pc, #136]	@ (80047f8 <LCD_print4+0x2cc>)
 800476e:	f013 ffc6 	bl	80186fe <HAL_SPI_Transmit>
 8004772:	e025      	b.n	80047c0 <LCD_print4+0x294>
			}
			else if((kolumna>=(ADRES->X0_SET+8) && kolumna<=(ADRES->X0_SET+10)) && wiersz==(ADRES->Y0_SET+14))
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	7b1b      	ldrb	r3, [r3, #12]
 8004778:	3308      	adds	r3, #8
 800477a:	461a      	mov	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	4293      	cmp	r3, r2
 8004780:	d316      	bcc.n	80047b0 <LCD_print4+0x284>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	7b1b      	ldrb	r3, [r3, #12]
 8004786:	330a      	adds	r3, #10
 8004788:	461a      	mov	r2, r3
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	4293      	cmp	r3, r2
 800478e:	d80f      	bhi.n	80047b0 <LCD_print4+0x284>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	7b5b      	ldrb	r3, [r3, #13]
 8004794:	330e      	adds	r3, #14
 8004796:	461a      	mov	r2, r3
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4293      	cmp	r3, r2
 800479c:	d108      	bne.n	80047b0 <LCD_print4+0x284>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800479e:	f107 010c 	add.w	r1, r7, #12
 80047a2:	f04f 33ff 	mov.w	r3, #4294967295
 80047a6:	2202      	movs	r2, #2
 80047a8:	4813      	ldr	r0, [pc, #76]	@ (80047f8 <LCD_print4+0x2cc>)
 80047aa:	f013 ffa8 	bl	80186fe <HAL_SPI_Transmit>
 80047ae:	e007      	b.n	80047c0 <LCD_print4+0x294>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 80047b0:	f107 0108 	add.w	r1, r7, #8
 80047b4:	f04f 33ff 	mov.w	r3, #4294967295
 80047b8:	2202      	movs	r2, #2
 80047ba:	480f      	ldr	r0, [pc, #60]	@ (80047f8 <LCD_print4+0x2cc>)
 80047bc:	f013 ff9f 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	3301      	adds	r3, #1
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	7b9b      	ldrb	r3, [r3, #14]
 80047ca:	3301      	adds	r3, #1
 80047cc:	461a      	mov	r2, r3
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	4293      	cmp	r3, r2
 80047d2:	f4ff af21 	bcc.w	8004618 <LCD_print4+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	3301      	adds	r3, #1
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	7bdb      	ldrb	r3, [r3, #15]
 80047e0:	461a      	mov	r2, r3
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	4293      	cmp	r3, r2
 80047e6:	f4ff af13 	bcc.w	8004610 <LCD_print4+0xe4>
			}
		}
	}
	CS_ON();
 80047ea:	f7fc fc1b 	bl	8001024 <CS_ON>
}
 80047ee:	bf00      	nop
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	200004a4 	.word	0x200004a4

080047fc <LCD_print5>:

void LCD_print5(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	4603      	mov	r3, r0
 8004806:	71fb      	strb	r3, [r7, #7]
 8004808:	460b      	mov	r3, r1
 800480a:	71bb      	strb	r3, [r7, #6]
 800480c:	4613      	mov	r3, r2
 800480e:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	2300      	movs	r3, #0
 8004816:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2200      	movs	r2, #0
 800481c:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	223f      	movs	r2, #63	@ 0x3f
 8004822:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	221f      	movs	r2, #31
 8004828:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2200      	movs	r2, #0
 800482e:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2200      	movs	r2, #0
 8004834:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	7cda      	ldrb	r2, [r3, #19]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	7c1b      	ldrb	r3, [r3, #16]
 800483e:	4053      	eors	r3, r2
 8004840:	b2db      	uxtb	r3, r3
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	b25a      	sxtb	r2, r3
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	7c5b      	ldrb	r3, [r3, #17]
 800484a:	b25b      	sxtb	r3, r3
 800484c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004850:	b25b      	sxtb	r3, r3
 8004852:	4053      	eors	r3, r2
 8004854:	b25b      	sxtb	r3, r3
 8004856:	b2da      	uxtb	r2, r3
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	7d1b      	ldrb	r3, [r3, #20]
 8004860:	461a      	mov	r2, r3
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	7c5b      	ldrb	r3, [r3, #17]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	4053      	eors	r3, r2
 800486c:	015b      	lsls	r3, r3, #5
 800486e:	b25a      	sxtb	r2, r3
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	7c9b      	ldrb	r3, [r3, #18]
 8004874:	b25b      	sxtb	r3, r3
 8004876:	4053      	eors	r3, r2
 8004878:	b25b      	sxtb	r3, r3
 800487a:	b2da      	uxtb	r2, r3
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	7cdb      	ldrb	r3, [r3, #19]
 8004884:	733b      	strb	r3, [r7, #12]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	7d1b      	ldrb	r3, [r3, #20]
 800488a:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 800488c:	2300      	movs	r3, #0
 800488e:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8004890:	2300      	movs	r3, #0
 8004892:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8004894:	7bfa      	ldrb	r2, [r7, #15]
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	4053      	eors	r3, r2
 800489a:	b2db      	uxtb	r3, r3
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	b25a      	sxtb	r2, r3
 80048a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80048a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048a8:	b25b      	sxtb	r3, r3
 80048aa:	4053      	eors	r3, r2
 80048ac:	b25b      	sxtb	r3, r3
 80048ae:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 80048b0:	7bba      	ldrb	r2, [r7, #14]
 80048b2:	79bb      	ldrb	r3, [r7, #6]
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	4053      	eors	r3, r2
 80048ba:	015b      	lsls	r3, r3, #5
 80048bc:	b25a      	sxtb	r2, r3
 80048be:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80048c2:	4053      	eors	r3, r2
 80048c4:	b25b      	sxtb	r3, r3
 80048c6:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	723b      	strb	r3, [r7, #8]
 80048cc:	7bbb      	ldrb	r3, [r7, #14]
 80048ce:	727b      	strb	r3, [r7, #9]
	DC_ON();
 80048d0:	f7fc fbbe 	bl	8001050 <DC_ON>
	CS_OFF();
 80048d4:	f7fc fbb1 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	7b5b      	ldrb	r3, [r3, #13]
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	e0cc      	b.n	8004a7a <LCD_print5+0x27e>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	7b1b      	ldrb	r3, [r3, #12]
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	e0bd      	b.n	8004a64 <LCD_print5+0x268>
		{
			if(kolumna==(ADRES->X0_SET+2) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+6))))
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	7b1b      	ldrb	r3, [r3, #12]
 80048ec:	3302      	adds	r3, #2
 80048ee:	461a      	mov	r2, r3
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d116      	bne.n	8004924 <LCD_print5+0x128>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	7b5b      	ldrb	r3, [r3, #13]
 80048fa:	3301      	adds	r3, #1
 80048fc:	461a      	mov	r2, r3
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4293      	cmp	r3, r2
 8004902:	d30f      	bcc.n	8004924 <LCD_print5+0x128>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	7b5b      	ldrb	r3, [r3, #13]
 8004908:	3306      	adds	r3, #6
 800490a:	461a      	mov	r2, r3
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	4293      	cmp	r3, r2
 8004910:	d808      	bhi.n	8004924 <LCD_print5+0x128>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004912:	f107 010c 	add.w	r1, r7, #12
 8004916:	f04f 33ff 	mov.w	r3, #4294967295
 800491a:	2202      	movs	r2, #2
 800491c:	485d      	ldr	r0, [pc, #372]	@ (8004a94 <LCD_print5+0x298>)
 800491e:	f013 feee 	bl	80186fe <HAL_SPI_Transmit>
 8004922:	e09c      	b.n	8004a5e <LCD_print5+0x262>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+10)) && wiersz==(ADRES->Y0_SET+0))
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	7b1b      	ldrb	r3, [r3, #12]
 8004928:	3302      	adds	r3, #2
 800492a:	461a      	mov	r2, r3
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	4293      	cmp	r3, r2
 8004930:	d315      	bcc.n	800495e <LCD_print5+0x162>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	7b1b      	ldrb	r3, [r3, #12]
 8004936:	330a      	adds	r3, #10
 8004938:	461a      	mov	r2, r3
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	4293      	cmp	r3, r2
 800493e:	d80e      	bhi.n	800495e <LCD_print5+0x162>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	7b5b      	ldrb	r3, [r3, #13]
 8004944:	461a      	mov	r2, r3
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4293      	cmp	r3, r2
 800494a:	d108      	bne.n	800495e <LCD_print5+0x162>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800494c:	f107 010c 	add.w	r1, r7, #12
 8004950:	f04f 33ff 	mov.w	r3, #4294967295
 8004954:	2202      	movs	r2, #2
 8004956:	484f      	ldr	r0, [pc, #316]	@ (8004a94 <LCD_print5+0x298>)
 8004958:	f013 fed1 	bl	80186fe <HAL_SPI_Transmit>
 800495c:	e07f      	b.n	8004a5e <LCD_print5+0x262>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+8)) && wiersz==(ADRES->Y0_SET+7))
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	7b1b      	ldrb	r3, [r3, #12]
 8004962:	3302      	adds	r3, #2
 8004964:	461a      	mov	r2, r3
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	4293      	cmp	r3, r2
 800496a:	d316      	bcc.n	800499a <LCD_print5+0x19e>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	7b1b      	ldrb	r3, [r3, #12]
 8004970:	3308      	adds	r3, #8
 8004972:	461a      	mov	r2, r3
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	4293      	cmp	r3, r2
 8004978:	d80f      	bhi.n	800499a <LCD_print5+0x19e>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	7b5b      	ldrb	r3, [r3, #13]
 800497e:	3307      	adds	r3, #7
 8004980:	461a      	mov	r2, r3
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4293      	cmp	r3, r2
 8004986:	d108      	bne.n	800499a <LCD_print5+0x19e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004988:	f107 010c 	add.w	r1, r7, #12
 800498c:	f04f 33ff 	mov.w	r3, #4294967295
 8004990:	2202      	movs	r2, #2
 8004992:	4840      	ldr	r0, [pc, #256]	@ (8004a94 <LCD_print5+0x298>)
 8004994:	f013 feb3 	bl	80186fe <HAL_SPI_Transmit>
 8004998:	e061      	b.n	8004a5e <LCD_print5+0x262>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+8)) && wiersz==(ADRES->Y0_SET+14))
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	7b1b      	ldrb	r3, [r3, #12]
 800499e:	3302      	adds	r3, #2
 80049a0:	461a      	mov	r2, r3
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d316      	bcc.n	80049d6 <LCD_print5+0x1da>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	7b1b      	ldrb	r3, [r3, #12]
 80049ac:	3308      	adds	r3, #8
 80049ae:	461a      	mov	r2, r3
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d80f      	bhi.n	80049d6 <LCD_print5+0x1da>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	7b5b      	ldrb	r3, [r3, #13]
 80049ba:	330e      	adds	r3, #14
 80049bc:	461a      	mov	r2, r3
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d108      	bne.n	80049d6 <LCD_print5+0x1da>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80049c4:	f107 010c 	add.w	r1, r7, #12
 80049c8:	f04f 33ff 	mov.w	r3, #4294967295
 80049cc:	2202      	movs	r2, #2
 80049ce:	4831      	ldr	r0, [pc, #196]	@ (8004a94 <LCD_print5+0x298>)
 80049d0:	f013 fe95 	bl	80186fe <HAL_SPI_Transmit>
 80049d4:	e043      	b.n	8004a5e <LCD_print5+0x262>
			}
			else if((kolumna==(ADRES->X0_SET+9)) && (wiersz==(ADRES->Y0_SET+8) || wiersz==(ADRES->Y0_SET+13)))
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	7b1b      	ldrb	r3, [r3, #12]
 80049da:	3309      	adds	r3, #9
 80049dc:	461a      	mov	r2, r3
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d116      	bne.n	8004a12 <LCD_print5+0x216>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	7b5b      	ldrb	r3, [r3, #13]
 80049e8:	3308      	adds	r3, #8
 80049ea:	461a      	mov	r2, r3
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d006      	beq.n	8004a00 <LCD_print5+0x204>
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	7b5b      	ldrb	r3, [r3, #13]
 80049f6:	330d      	adds	r3, #13
 80049f8:	461a      	mov	r2, r3
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d108      	bne.n	8004a12 <LCD_print5+0x216>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004a00:	f107 010c 	add.w	r1, r7, #12
 8004a04:	f04f 33ff 	mov.w	r3, #4294967295
 8004a08:	2202      	movs	r2, #2
 8004a0a:	4822      	ldr	r0, [pc, #136]	@ (8004a94 <LCD_print5+0x298>)
 8004a0c:	f013 fe77 	bl	80186fe <HAL_SPI_Transmit>
 8004a10:	e025      	b.n	8004a5e <LCD_print5+0x262>
			}
			else if(kolumna==(ADRES->X0_SET+10) && ((wiersz>=(ADRES->Y0_SET+9) && wiersz<=(ADRES->Y0_SET+12))))
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	7b1b      	ldrb	r3, [r3, #12]
 8004a16:	330a      	adds	r3, #10
 8004a18:	461a      	mov	r2, r3
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d116      	bne.n	8004a4e <LCD_print5+0x252>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	7b5b      	ldrb	r3, [r3, #13]
 8004a24:	3309      	adds	r3, #9
 8004a26:	461a      	mov	r2, r3
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d30f      	bcc.n	8004a4e <LCD_print5+0x252>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	7b5b      	ldrb	r3, [r3, #13]
 8004a32:	330c      	adds	r3, #12
 8004a34:	461a      	mov	r2, r3
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d808      	bhi.n	8004a4e <LCD_print5+0x252>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004a3c:	f107 010c 	add.w	r1, r7, #12
 8004a40:	f04f 33ff 	mov.w	r3, #4294967295
 8004a44:	2202      	movs	r2, #2
 8004a46:	4813      	ldr	r0, [pc, #76]	@ (8004a94 <LCD_print5+0x298>)
 8004a48:	f013 fe59 	bl	80186fe <HAL_SPI_Transmit>
 8004a4c:	e007      	b.n	8004a5e <LCD_print5+0x262>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8004a4e:	f107 0108 	add.w	r1, r7, #8
 8004a52:	f04f 33ff 	mov.w	r3, #4294967295
 8004a56:	2202      	movs	r2, #2
 8004a58:	480e      	ldr	r0, [pc, #56]	@ (8004a94 <LCD_print5+0x298>)
 8004a5a:	f013 fe50 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	3301      	adds	r3, #1
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	7b9b      	ldrb	r3, [r3, #14]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	f4ff af3a 	bcc.w	80048e8 <LCD_print5+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	3301      	adds	r3, #1
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	7bdb      	ldrb	r3, [r3, #15]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	4293      	cmp	r3, r2
 8004a84:	f4ff af2c 	bcc.w	80048e0 <LCD_print5+0xe4>
			}
		}
	}
	CS_ON();
 8004a88:	f7fc facc 	bl	8001024 <CS_ON>
}
 8004a8c:	bf00      	nop
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	200004a4 	.word	0x200004a4

08004a98 <LCD_print6>:

void LCD_print6(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	71fb      	strb	r3, [r7, #7]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	71bb      	strb	r3, [r7, #6]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	223f      	movs	r2, #63	@ 0x3f
 8004abe:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	221f      	movs	r2, #31
 8004ac4:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	7cda      	ldrb	r2, [r3, #19]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	7c1b      	ldrb	r3, [r3, #16]
 8004ada:	4053      	eors	r3, r2
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	b25a      	sxtb	r2, r3
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	7c5b      	ldrb	r3, [r3, #17]
 8004ae6:	b25b      	sxtb	r3, r3
 8004ae8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004aec:	b25b      	sxtb	r3, r3
 8004aee:	4053      	eors	r3, r2
 8004af0:	b25b      	sxtb	r3, r3
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	7d1b      	ldrb	r3, [r3, #20]
 8004afc:	461a      	mov	r2, r3
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	7c5b      	ldrb	r3, [r3, #17]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	4053      	eors	r3, r2
 8004b08:	015b      	lsls	r3, r3, #5
 8004b0a:	b25a      	sxtb	r2, r3
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	7c9b      	ldrb	r3, [r3, #18]
 8004b10:	b25b      	sxtb	r3, r3
 8004b12:	4053      	eors	r3, r2
 8004b14:	b25b      	sxtb	r3, r3
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	7cdb      	ldrb	r3, [r3, #19]
 8004b20:	733b      	strb	r3, [r7, #12]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	7d1b      	ldrb	r3, [r3, #20]
 8004b26:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8004b30:	7bfa      	ldrb	r2, [r7, #15]
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	4053      	eors	r3, r2
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	b25a      	sxtb	r2, r3
 8004b3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004b40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b44:	b25b      	sxtb	r3, r3
 8004b46:	4053      	eors	r3, r2
 8004b48:	b25b      	sxtb	r3, r3
 8004b4a:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8004b4c:	7bba      	ldrb	r2, [r7, #14]
 8004b4e:	79bb      	ldrb	r3, [r7, #6]
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	4053      	eors	r3, r2
 8004b56:	015b      	lsls	r3, r3, #5
 8004b58:	b25a      	sxtb	r2, r3
 8004b5a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004b5e:	4053      	eors	r3, r2
 8004b60:	b25b      	sxtb	r3, r3
 8004b62:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	723b      	strb	r3, [r7, #8]
 8004b68:	7bbb      	ldrb	r3, [r7, #14]
 8004b6a:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8004b6c:	f7fc fa70 	bl	8001050 <DC_ON>
	CS_OFF();
 8004b70:	f7fc fa63 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	7b5b      	ldrb	r3, [r3, #13]
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	e126      	b.n	8004dca <LCD_print6+0x332>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	7b1b      	ldrb	r3, [r3, #12]
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	e117      	b.n	8004db4 <LCD_print6+0x31c>
		{
			if(kolumna==(ADRES->X0_SET+2) && ((wiersz>=(ADRES->Y0_SET+6) && wiersz<=(ADRES->Y0_SET+11))))
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	7b1b      	ldrb	r3, [r3, #12]
 8004b88:	3302      	adds	r3, #2
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d116      	bne.n	8004bc0 <LCD_print6+0x128>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	7b5b      	ldrb	r3, [r3, #13]
 8004b96:	3306      	adds	r3, #6
 8004b98:	461a      	mov	r2, r3
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d30f      	bcc.n	8004bc0 <LCD_print6+0x128>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	7b5b      	ldrb	r3, [r3, #13]
 8004ba4:	330b      	adds	r3, #11
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d808      	bhi.n	8004bc0 <LCD_print6+0x128>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004bae:	f107 010c 	add.w	r1, r7, #12
 8004bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	488a      	ldr	r0, [pc, #552]	@ (8004de4 <LCD_print6+0x34c>)
 8004bba:	f013 fda0 	bl	80186fe <HAL_SPI_Transmit>
 8004bbe:	e0f6      	b.n	8004dae <LCD_print6+0x316>
			}
			else if((kolumna>=(ADRES->X0_SET+5) && kolumna<=(ADRES->X0_SET+8)) && wiersz==(ADRES->Y0_SET+7))
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	7b1b      	ldrb	r3, [r3, #12]
 8004bc4:	3305      	adds	r3, #5
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d316      	bcc.n	8004bfc <LCD_print6+0x164>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	7b1b      	ldrb	r3, [r3, #12]
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d80f      	bhi.n	8004bfc <LCD_print6+0x164>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	7b5b      	ldrb	r3, [r3, #13]
 8004be0:	3307      	adds	r3, #7
 8004be2:	461a      	mov	r2, r3
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d108      	bne.n	8004bfc <LCD_print6+0x164>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004bea:	f107 010c 	add.w	r1, r7, #12
 8004bee:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	487b      	ldr	r0, [pc, #492]	@ (8004de4 <LCD_print6+0x34c>)
 8004bf6:	f013 fd82 	bl	80186fe <HAL_SPI_Transmit>
 8004bfa:	e0d8      	b.n	8004dae <LCD_print6+0x316>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+8)) && wiersz==(ADRES->Y0_SET+14))
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	7b1b      	ldrb	r3, [r3, #12]
 8004c00:	3302      	adds	r3, #2
 8004c02:	461a      	mov	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d316      	bcc.n	8004c38 <LCD_print6+0x1a0>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	7b1b      	ldrb	r3, [r3, #12]
 8004c0e:	3308      	adds	r3, #8
 8004c10:	461a      	mov	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d80f      	bhi.n	8004c38 <LCD_print6+0x1a0>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	7b5b      	ldrb	r3, [r3, #13]
 8004c1c:	330e      	adds	r3, #14
 8004c1e:	461a      	mov	r2, r3
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d108      	bne.n	8004c38 <LCD_print6+0x1a0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004c26:	f107 010c 	add.w	r1, r7, #12
 8004c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2e:	2202      	movs	r2, #2
 8004c30:	486c      	ldr	r0, [pc, #432]	@ (8004de4 <LCD_print6+0x34c>)
 8004c32:	f013 fd64 	bl	80186fe <HAL_SPI_Transmit>
 8004c36:	e0ba      	b.n	8004dae <LCD_print6+0x316>
			}
			else if((kolumna>=(ADRES->X0_SET+7) && kolumna<=(ADRES->X0_SET+10)) && wiersz==(ADRES->Y0_SET+0))
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	7b1b      	ldrb	r3, [r3, #12]
 8004c3c:	3307      	adds	r3, #7
 8004c3e:	461a      	mov	r2, r3
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d315      	bcc.n	8004c72 <LCD_print6+0x1da>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	7b1b      	ldrb	r3, [r3, #12]
 8004c4a:	330a      	adds	r3, #10
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d80e      	bhi.n	8004c72 <LCD_print6+0x1da>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	7b5b      	ldrb	r3, [r3, #13]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d108      	bne.n	8004c72 <LCD_print6+0x1da>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004c60:	f107 010c 	add.w	r1, r7, #12
 8004c64:	f04f 33ff 	mov.w	r3, #4294967295
 8004c68:	2202      	movs	r2, #2
 8004c6a:	485e      	ldr	r0, [pc, #376]	@ (8004de4 <LCD_print6+0x34c>)
 8004c6c:	f013 fd47 	bl	80186fe <HAL_SPI_Transmit>
 8004c70:	e09d      	b.n	8004dae <LCD_print6+0x316>
			}
			else if((kolumna==(ADRES->X0_SET+3)) && (wiersz==(ADRES->Y0_SET+4) || wiersz==(ADRES->Y0_SET+9) || wiersz==(ADRES->Y0_SET+12)))
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	7b1b      	ldrb	r3, [r3, #12]
 8004c76:	3303      	adds	r3, #3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d11d      	bne.n	8004cbc <LCD_print6+0x224>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	7b5b      	ldrb	r3, [r3, #13]
 8004c84:	3304      	adds	r3, #4
 8004c86:	461a      	mov	r2, r3
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00d      	beq.n	8004caa <LCD_print6+0x212>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	7b5b      	ldrb	r3, [r3, #13]
 8004c92:	3309      	adds	r3, #9
 8004c94:	461a      	mov	r2, r3
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d006      	beq.n	8004caa <LCD_print6+0x212>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	7b5b      	ldrb	r3, [r3, #13]
 8004ca0:	330c      	adds	r3, #12
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d108      	bne.n	8004cbc <LCD_print6+0x224>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004caa:	f107 010c 	add.w	r1, r7, #12
 8004cae:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	484b      	ldr	r0, [pc, #300]	@ (8004de4 <LCD_print6+0x34c>)
 8004cb6:	f013 fd22 	bl	80186fe <HAL_SPI_Transmit>
 8004cba:	e078      	b.n	8004dae <LCD_print6+0x316>
			}
			else if((kolumna==(ADRES->X0_SET+4)) && (wiersz==(ADRES->Y0_SET+3) || wiersz==(ADRES->Y0_SET+8) || wiersz==(ADRES->Y0_SET+13)))
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	7b1b      	ldrb	r3, [r3, #12]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d11d      	bne.n	8004d06 <LCD_print6+0x26e>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	7b5b      	ldrb	r3, [r3, #13]
 8004cce:	3303      	adds	r3, #3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00d      	beq.n	8004cf4 <LCD_print6+0x25c>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	7b5b      	ldrb	r3, [r3, #13]
 8004cdc:	3308      	adds	r3, #8
 8004cde:	461a      	mov	r2, r3
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d006      	beq.n	8004cf4 <LCD_print6+0x25c>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	7b5b      	ldrb	r3, [r3, #13]
 8004cea:	330d      	adds	r3, #13
 8004cec:	461a      	mov	r2, r3
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d108      	bne.n	8004d06 <LCD_print6+0x26e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004cf4:	f107 010c 	add.w	r1, r7, #12
 8004cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	4839      	ldr	r0, [pc, #228]	@ (8004de4 <LCD_print6+0x34c>)
 8004d00:	f013 fcfd 	bl	80186fe <HAL_SPI_Transmit>
 8004d04:	e053      	b.n	8004dae <LCD_print6+0x316>
			}
			else if((kolumna==(ADRES->X0_SET+5)) && (wiersz==(ADRES->Y0_SET+2)))
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	7b1b      	ldrb	r3, [r3, #12]
 8004d0a:	3305      	adds	r3, #5
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d10f      	bne.n	8004d34 <LCD_print6+0x29c>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	7b5b      	ldrb	r3, [r3, #13]
 8004d18:	3302      	adds	r3, #2
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d108      	bne.n	8004d34 <LCD_print6+0x29c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004d22:	f107 010c 	add.w	r1, r7, #12
 8004d26:	f04f 33ff 	mov.w	r3, #4294967295
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	482d      	ldr	r0, [pc, #180]	@ (8004de4 <LCD_print6+0x34c>)
 8004d2e:	f013 fce6 	bl	80186fe <HAL_SPI_Transmit>
 8004d32:	e03c      	b.n	8004dae <LCD_print6+0x316>
			}
			else if((kolumna==(ADRES->X0_SET+6)) && (wiersz==(ADRES->Y0_SET+1)))
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	7b1b      	ldrb	r3, [r3, #12]
 8004d38:	3306      	adds	r3, #6
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d10f      	bne.n	8004d62 <LCD_print6+0x2ca>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	7b5b      	ldrb	r3, [r3, #13]
 8004d46:	3301      	adds	r3, #1
 8004d48:	461a      	mov	r2, r3
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d108      	bne.n	8004d62 <LCD_print6+0x2ca>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004d50:	f107 010c 	add.w	r1, r7, #12
 8004d54:	f04f 33ff 	mov.w	r3, #4294967295
 8004d58:	2202      	movs	r2, #2
 8004d5a:	4822      	ldr	r0, [pc, #136]	@ (8004de4 <LCD_print6+0x34c>)
 8004d5c:	f013 fccf 	bl	80186fe <HAL_SPI_Transmit>
 8004d60:	e025      	b.n	8004dae <LCD_print6+0x316>
			}
			else if((kolumna==(ADRES->X0_SET+9)) && (wiersz==(ADRES->Y0_SET+8) || wiersz==(ADRES->Y0_SET+13)))
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	7b1b      	ldrb	r3, [r3, #12]
 8004d66:	3309      	adds	r3, #9
 8004d68:	461a      	mov	r2, r3
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d116      	bne.n	8004d9e <LCD_print6+0x306>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	7b5b      	ldrb	r3, [r3, #13]
 8004d74:	3308      	adds	r3, #8
 8004d76:	461a      	mov	r2, r3
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d006      	beq.n	8004d8c <LCD_print6+0x2f4>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	7b5b      	ldrb	r3, [r3, #13]
 8004d82:	330d      	adds	r3, #13
 8004d84:	461a      	mov	r2, r3
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d108      	bne.n	8004d9e <LCD_print6+0x306>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004d8c:	f107 010c 	add.w	r1, r7, #12
 8004d90:	f04f 33ff 	mov.w	r3, #4294967295
 8004d94:	2202      	movs	r2, #2
 8004d96:	4813      	ldr	r0, [pc, #76]	@ (8004de4 <LCD_print6+0x34c>)
 8004d98:	f013 fcb1 	bl	80186fe <HAL_SPI_Transmit>
 8004d9c:	e007      	b.n	8004dae <LCD_print6+0x316>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8004d9e:	f107 0108 	add.w	r1, r7, #8
 8004da2:	f04f 33ff 	mov.w	r3, #4294967295
 8004da6:	2202      	movs	r2, #2
 8004da8:	480e      	ldr	r0, [pc, #56]	@ (8004de4 <LCD_print6+0x34c>)
 8004daa:	f013 fca8 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	3301      	adds	r3, #1
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	7b9b      	ldrb	r3, [r3, #14]
 8004db8:	3301      	adds	r3, #1
 8004dba:	461a      	mov	r2, r3
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	f4ff aee0 	bcc.w	8004b84 <LCD_print6+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	7bdb      	ldrb	r3, [r3, #15]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	f4ff aed2 	bcc.w	8004b7c <LCD_print6+0xe4>
			}
		}
	}
	CS_ON();
 8004dd8:	f7fc f924 	bl	8001024 <CS_ON>
}
 8004ddc:	bf00      	nop
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	200004a4 	.word	0x200004a4

08004de8 <LCD_print_dot>:

void LCD_print_dot(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	4603      	mov	r3, r0
 8004df2:	71fb      	strb	r3, [r7, #7]
 8004df4:	460b      	mov	r3, r1
 8004df6:	71bb      	strb	r3, [r7, #6]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	2300      	movs	r3, #0
 8004e02:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2200      	movs	r2, #0
 8004e08:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	223f      	movs	r2, #63	@ 0x3f
 8004e0e:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	221f      	movs	r2, #31
 8004e14:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	7cda      	ldrb	r2, [r3, #19]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	7c1b      	ldrb	r3, [r3, #16]
 8004e2a:	4053      	eors	r3, r2
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	b25a      	sxtb	r2, r3
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	7c5b      	ldrb	r3, [r3, #17]
 8004e36:	b25b      	sxtb	r3, r3
 8004e38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e3c:	b25b      	sxtb	r3, r3
 8004e3e:	4053      	eors	r3, r2
 8004e40:	b25b      	sxtb	r3, r3
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	7d1b      	ldrb	r3, [r3, #20]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	7c5b      	ldrb	r3, [r3, #17]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	4053      	eors	r3, r2
 8004e58:	015b      	lsls	r3, r3, #5
 8004e5a:	b25a      	sxtb	r2, r3
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	7c9b      	ldrb	r3, [r3, #18]
 8004e60:	b25b      	sxtb	r3, r3
 8004e62:	4053      	eors	r3, r2
 8004e64:	b25b      	sxtb	r3, r3
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	7cdb      	ldrb	r3, [r3, #19]
 8004e70:	733b      	strb	r3, [r7, #12]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	7d1b      	ldrb	r3, [r3, #20]
 8004e76:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8004e80:	7bfa      	ldrb	r2, [r7, #15]
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	4053      	eors	r3, r2
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	b25a      	sxtb	r2, r3
 8004e8c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004e90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e94:	b25b      	sxtb	r3, r3
 8004e96:	4053      	eors	r3, r2
 8004e98:	b25b      	sxtb	r3, r3
 8004e9a:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8004e9c:	7bba      	ldrb	r2, [r7, #14]
 8004e9e:	79bb      	ldrb	r3, [r7, #6]
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	4053      	eors	r3, r2
 8004ea6:	015b      	lsls	r3, r3, #5
 8004ea8:	b25a      	sxtb	r2, r3
 8004eaa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004eae:	4053      	eors	r3, r2
 8004eb0:	b25b      	sxtb	r3, r3
 8004eb2:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	723b      	strb	r3, [r7, #8]
 8004eb8:	7bbb      	ldrb	r3, [r7, #14]
 8004eba:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8004ebc:	f7fc f8c8 	bl	8001050 <DC_ON>
	CS_OFF();
 8004ec0:	f7fc f8bb 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	7b5b      	ldrb	r3, [r3, #13]
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	e03d      	b.n	8004f48 <LCD_print_dot+0x160>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	7b1b      	ldrb	r3, [r3, #12]
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	e02f      	b.n	8004f34 <LCD_print_dot+0x14c>
		{
			if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+10)) && ((wiersz>=(ADRES->Y0_SET+42) && wiersz<=(ADRES->Y0_SET+50))))
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	7b1b      	ldrb	r3, [r3, #12]
 8004ed8:	3302      	adds	r3, #2
 8004eda:	461a      	mov	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d31d      	bcc.n	8004f1e <LCD_print_dot+0x136>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	7b1b      	ldrb	r3, [r3, #12]
 8004ee6:	330a      	adds	r3, #10
 8004ee8:	461a      	mov	r2, r3
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d816      	bhi.n	8004f1e <LCD_print_dot+0x136>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	7b5b      	ldrb	r3, [r3, #13]
 8004ef4:	332a      	adds	r3, #42	@ 0x2a
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d30f      	bcc.n	8004f1e <LCD_print_dot+0x136>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	7b5b      	ldrb	r3, [r3, #13]
 8004f02:	3332      	adds	r3, #50	@ 0x32
 8004f04:	461a      	mov	r2, r3
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d808      	bhi.n	8004f1e <LCD_print_dot+0x136>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8004f0c:	f107 010c 	add.w	r1, r7, #12
 8004f10:	f04f 33ff 	mov.w	r3, #4294967295
 8004f14:	2202      	movs	r2, #2
 8004f16:	4812      	ldr	r0, [pc, #72]	@ (8004f60 <LCD_print_dot+0x178>)
 8004f18:	f013 fbf1 	bl	80186fe <HAL_SPI_Transmit>
 8004f1c:	e007      	b.n	8004f2e <LCD_print_dot+0x146>
			}

			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8004f1e:	f107 0108 	add.w	r1, r7, #8
 8004f22:	f04f 33ff 	mov.w	r3, #4294967295
 8004f26:	2202      	movs	r2, #2
 8004f28:	480d      	ldr	r0, [pc, #52]	@ (8004f60 <LCD_print_dot+0x178>)
 8004f2a:	f013 fbe8 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	3301      	adds	r3, #1
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	7b9b      	ldrb	r3, [r3, #14]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d3c8      	bcc.n	8004ed4 <LCD_print_dot+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	3301      	adds	r3, #1
 8004f46:	613b      	str	r3, [r7, #16]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	7bdb      	ldrb	r3, [r3, #15]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d3bb      	bcc.n	8004ecc <LCD_print_dot+0xe4>
			}
		}
	}
	CS_ON();
 8004f54:	f7fc f866 	bl	8001024 <CS_ON>
}
 8004f58:	bf00      	nop
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	200004a4 	.word	0x200004a4

08004f64 <LCD_print_myslnik>:

void LCD_print_myslnik(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	71fb      	strb	r3, [r7, #7]
 8004f70:	460b      	mov	r3, r1
 8004f72:	71bb      	strb	r3, [r7, #6]
 8004f74:	4613      	mov	r3, r2
 8004f76:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	7cdb      	ldrb	r3, [r3, #19]
 8004f84:	733b      	strb	r3, [r7, #12]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	7d1b      	ldrb	r3, [r3, #20]
 8004f8a:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8004f90:	2300      	movs	r3, #0
 8004f92:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8004f94:	7bfa      	ldrb	r2, [r7, #15]
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	4053      	eors	r3, r2
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	b25a      	sxtb	r2, r3
 8004fa0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004fa4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fa8:	b25b      	sxtb	r3, r3
 8004faa:	4053      	eors	r3, r2
 8004fac:	b25b      	sxtb	r3, r3
 8004fae:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8004fb0:	7bba      	ldrb	r2, [r7, #14]
 8004fb2:	79bb      	ldrb	r3, [r7, #6]
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	4053      	eors	r3, r2
 8004fba:	015b      	lsls	r3, r3, #5
 8004fbc:	b25a      	sxtb	r2, r3
 8004fbe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004fc2:	4053      	eors	r3, r2
 8004fc4:	b25b      	sxtb	r3, r3
 8004fc6:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	723b      	strb	r3, [r7, #8]
 8004fcc:	7bbb      	ldrb	r3, [r7, #14]
 8004fce:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8004fd0:	f7fc f83e 	bl	8001050 <DC_ON>
	CS_OFF();
 8004fd4:	f7fc f831 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	7b5b      	ldrb	r3, [r3, #13]
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	e036      	b.n	800504e <LCD_print_myslnik+0xea>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	7b1b      	ldrb	r3, [r3, #12]
 8004fe4:	617b      	str	r3, [r7, #20]
 8004fe6:	e028      	b.n	800503a <LCD_print_myslnik+0xd6>
		{

			if((kolumna>=(ADRES->X0_SET+1) && kolumna<=(ADRES->X0_SET+9)) && wiersz==(ADRES->Y0_SET+7))
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	7b1b      	ldrb	r3, [r3, #12]
 8004fec:	3301      	adds	r3, #1
 8004fee:	461a      	mov	r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d316      	bcc.n	8005024 <LCD_print_myslnik+0xc0>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	7b1b      	ldrb	r3, [r3, #12]
 8004ffa:	3309      	adds	r3, #9
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	4293      	cmp	r3, r2
 8005002:	d80f      	bhi.n	8005024 <LCD_print_myslnik+0xc0>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	7b5b      	ldrb	r3, [r3, #13]
 8005008:	3307      	adds	r3, #7
 800500a:	461a      	mov	r2, r3
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	4293      	cmp	r3, r2
 8005010:	d108      	bne.n	8005024 <LCD_print_myslnik+0xc0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005012:	f107 010c 	add.w	r1, r7, #12
 8005016:	f04f 33ff 	mov.w	r3, #4294967295
 800501a:	2202      	movs	r2, #2
 800501c:	4812      	ldr	r0, [pc, #72]	@ (8005068 <LCD_print_myslnik+0x104>)
 800501e:	f013 fb6e 	bl	80186fe <HAL_SPI_Transmit>
 8005022:	e007      	b.n	8005034 <LCD_print_myslnik+0xd0>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8005024:	f107 0108 	add.w	r1, r7, #8
 8005028:	f04f 33ff 	mov.w	r3, #4294967295
 800502c:	2202      	movs	r2, #2
 800502e:	480e      	ldr	r0, [pc, #56]	@ (8005068 <LCD_print_myslnik+0x104>)
 8005030:	f013 fb65 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	3301      	adds	r3, #1
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	7b9b      	ldrb	r3, [r3, #14]
 800503e:	3301      	adds	r3, #1
 8005040:	461a      	mov	r2, r3
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	4293      	cmp	r3, r2
 8005046:	d3cf      	bcc.n	8004fe8 <LCD_print_myslnik+0x84>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	3301      	adds	r3, #1
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	7bdb      	ldrb	r3, [r3, #15]
 8005052:	461a      	mov	r2, r3
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	4293      	cmp	r3, r2
 8005058:	d3c2      	bcc.n	8004fe0 <LCD_print_myslnik+0x7c>
			}
		}
	}
	CS_ON();
 800505a:	f7fb ffe3 	bl	8001024 <CS_ON>
}
 800505e:	bf00      	nop
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	200004a4 	.word	0x200004a4

0800506c <LCD_print8H>:

void LCD_print8H(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	603b      	str	r3, [r7, #0]
 8005074:	4603      	mov	r3, r0
 8005076:	71fb      	strb	r3, [r7, #7]
 8005078:	460b      	mov	r3, r1
 800507a:	71bb      	strb	r3, [r7, #6]
 800507c:	4613      	mov	r3, r2
 800507e:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	2300      	movs	r3, #0
 8005086:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2200      	movs	r2, #0
 800508c:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	223f      	movs	r2, #63	@ 0x3f
 8005092:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	221f      	movs	r2, #31
 8005098:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2200      	movs	r2, #0
 800509e:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2200      	movs	r2, #0
 80050a4:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	7cda      	ldrb	r2, [r3, #19]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	7c1b      	ldrb	r3, [r3, #16]
 80050ae:	4053      	eors	r3, r2
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	b25a      	sxtb	r2, r3
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	7c5b      	ldrb	r3, [r3, #17]
 80050ba:	b25b      	sxtb	r3, r3
 80050bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050c0:	b25b      	sxtb	r3, r3
 80050c2:	4053      	eors	r3, r2
 80050c4:	b25b      	sxtb	r3, r3
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	7d1b      	ldrb	r3, [r3, #20]
 80050d0:	461a      	mov	r2, r3
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	7c5b      	ldrb	r3, [r3, #17]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	4053      	eors	r3, r2
 80050dc:	015b      	lsls	r3, r3, #5
 80050de:	b25a      	sxtb	r2, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	7c9b      	ldrb	r3, [r3, #18]
 80050e4:	b25b      	sxtb	r3, r3
 80050e6:	4053      	eors	r3, r2
 80050e8:	b25b      	sxtb	r3, r3
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	7cdb      	ldrb	r3, [r3, #19]
 80050f4:	733b      	strb	r3, [r7, #12]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	7d1b      	ldrb	r3, [r3, #20]
 80050fa:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 80050fc:	2300      	movs	r3, #0
 80050fe:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8005100:	2300      	movs	r3, #0
 8005102:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8005104:	7bfa      	ldrb	r2, [r7, #15]
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	4053      	eors	r3, r2
 800510a:	b2db      	uxtb	r3, r3
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	b25a      	sxtb	r2, r3
 8005110:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005114:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005118:	b25b      	sxtb	r3, r3
 800511a:	4053      	eors	r3, r2
 800511c:	b25b      	sxtb	r3, r3
 800511e:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8005120:	7bba      	ldrb	r2, [r7, #14]
 8005122:	79bb      	ldrb	r3, [r7, #6]
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	4053      	eors	r3, r2
 800512a:	015b      	lsls	r3, r3, #5
 800512c:	b25a      	sxtb	r2, r3
 800512e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005132:	4053      	eors	r3, r2
 8005134:	b25b      	sxtb	r3, r3
 8005136:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	723b      	strb	r3, [r7, #8]
 800513c:	7bbb      	ldrb	r3, [r7, #14]
 800513e:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8005140:	f7fb ff86 	bl	8001050 <DC_ON>
	CS_OFF();
 8005144:	f7fb ff79 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	7b5b      	ldrb	r3, [r3, #13]
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	f000 bd3f 	b.w	8005bd0 <LCD_print8H+0xb64>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	7b1b      	ldrb	r3, [r3, #12]
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	f000 bd2f 	b.w	8005bba <LCD_print8H+0xb4e>
		{
			if((kolumna>=(ADRES->X0_SET+10) && kolumna<=(ADRES->X0_SET+21)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+4))))
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	7b1b      	ldrb	r3, [r3, #12]
 8005160:	330a      	adds	r3, #10
 8005162:	461a      	mov	r2, r3
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	4293      	cmp	r3, r2
 8005168:	d31d      	bcc.n	80051a6 <LCD_print8H+0x13a>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	7b1b      	ldrb	r3, [r3, #12]
 800516e:	3315      	adds	r3, #21
 8005170:	461a      	mov	r2, r3
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	4293      	cmp	r3, r2
 8005176:	d816      	bhi.n	80051a6 <LCD_print8H+0x13a>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	7b5b      	ldrb	r3, [r3, #13]
 800517c:	461a      	mov	r2, r3
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4293      	cmp	r3, r2
 8005182:	d310      	bcc.n	80051a6 <LCD_print8H+0x13a>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	7b5b      	ldrb	r3, [r3, #13]
 8005188:	3304      	adds	r3, #4
 800518a:	461a      	mov	r2, r3
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	4293      	cmp	r3, r2
 8005190:	d809      	bhi.n	80051a6 <LCD_print8H+0x13a>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005192:	f107 010c 	add.w	r1, r7, #12
 8005196:	f04f 33ff 	mov.w	r3, #4294967295
 800519a:	2202      	movs	r2, #2
 800519c:	4899      	ldr	r0, [pc, #612]	@ (8005404 <LCD_print8H+0x398>)
 800519e:	f013 faae 	bl	80186fe <HAL_SPI_Transmit>
 80051a2:	f000 bd07 	b.w	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna>=(ADRES->X0_SET+10) && kolumna<=(ADRES->X0_SET+21)) && ((wiersz>=(ADRES->Y0_SET+21) && wiersz<=(ADRES->Y0_SET+28))))
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	7b1b      	ldrb	r3, [r3, #12]
 80051aa:	330a      	adds	r3, #10
 80051ac:	461a      	mov	r2, r3
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d31e      	bcc.n	80051f2 <LCD_print8H+0x186>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	7b1b      	ldrb	r3, [r3, #12]
 80051b8:	3315      	adds	r3, #21
 80051ba:	461a      	mov	r2, r3
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	4293      	cmp	r3, r2
 80051c0:	d817      	bhi.n	80051f2 <LCD_print8H+0x186>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	7b5b      	ldrb	r3, [r3, #13]
 80051c6:	3315      	adds	r3, #21
 80051c8:	461a      	mov	r2, r3
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d310      	bcc.n	80051f2 <LCD_print8H+0x186>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	7b5b      	ldrb	r3, [r3, #13]
 80051d4:	331c      	adds	r3, #28
 80051d6:	461a      	mov	r2, r3
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4293      	cmp	r3, r2
 80051dc:	d809      	bhi.n	80051f2 <LCD_print8H+0x186>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80051de:	f107 010c 	add.w	r1, r7, #12
 80051e2:	f04f 33ff 	mov.w	r3, #4294967295
 80051e6:	2202      	movs	r2, #2
 80051e8:	4886      	ldr	r0, [pc, #536]	@ (8005404 <LCD_print8H+0x398>)
 80051ea:	f013 fa88 	bl	80186fe <HAL_SPI_Transmit>
 80051ee:	f000 bce1 	b.w	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna>=(ADRES->X0_SET+10) && kolumna<=(ADRES->X0_SET+21)) && ((wiersz>=(ADRES->Y0_SET+47) && wiersz<=(ADRES->Y0_SET+50))))
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	7b1b      	ldrb	r3, [r3, #12]
 80051f6:	330a      	adds	r3, #10
 80051f8:	461a      	mov	r2, r3
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d31e      	bcc.n	800523e <LCD_print8H+0x1d2>
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	7b1b      	ldrb	r3, [r3, #12]
 8005204:	3315      	adds	r3, #21
 8005206:	461a      	mov	r2, r3
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	4293      	cmp	r3, r2
 800520c:	d817      	bhi.n	800523e <LCD_print8H+0x1d2>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	7b5b      	ldrb	r3, [r3, #13]
 8005212:	332f      	adds	r3, #47	@ 0x2f
 8005214:	461a      	mov	r2, r3
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	4293      	cmp	r3, r2
 800521a:	d310      	bcc.n	800523e <LCD_print8H+0x1d2>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	7b5b      	ldrb	r3, [r3, #13]
 8005220:	3332      	adds	r3, #50	@ 0x32
 8005222:	461a      	mov	r2, r3
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4293      	cmp	r3, r2
 8005228:	d809      	bhi.n	800523e <LCD_print8H+0x1d2>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800522a:	f107 010c 	add.w	r1, r7, #12
 800522e:	f04f 33ff 	mov.w	r3, #4294967295
 8005232:	2202      	movs	r2, #2
 8005234:	4873      	ldr	r0, [pc, #460]	@ (8005404 <LCD_print8H+0x398>)
 8005236:	f013 fa62 	bl	80186fe <HAL_SPI_Transmit>
 800523a:	f000 bcbb 	b.w	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+5)) && ((wiersz>=(ADRES->Y0_SET+8) && wiersz<=(ADRES->Y0_SET+17))))
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	7b1b      	ldrb	r3, [r3, #12]
 8005242:	3302      	adds	r3, #2
 8005244:	461a      	mov	r2, r3
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	4293      	cmp	r3, r2
 800524a:	d31e      	bcc.n	800528a <LCD_print8H+0x21e>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	7b1b      	ldrb	r3, [r3, #12]
 8005250:	3305      	adds	r3, #5
 8005252:	461a      	mov	r2, r3
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	4293      	cmp	r3, r2
 8005258:	d817      	bhi.n	800528a <LCD_print8H+0x21e>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	7b5b      	ldrb	r3, [r3, #13]
 800525e:	3308      	adds	r3, #8
 8005260:	461a      	mov	r2, r3
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	4293      	cmp	r3, r2
 8005266:	d310      	bcc.n	800528a <LCD_print8H+0x21e>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	7b5b      	ldrb	r3, [r3, #13]
 800526c:	3311      	adds	r3, #17
 800526e:	461a      	mov	r2, r3
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	4293      	cmp	r3, r2
 8005274:	d809      	bhi.n	800528a <LCD_print8H+0x21e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005276:	f107 010c 	add.w	r1, r7, #12
 800527a:	f04f 33ff 	mov.w	r3, #4294967295
 800527e:	2202      	movs	r2, #2
 8005280:	4860      	ldr	r0, [pc, #384]	@ (8005404 <LCD_print8H+0x398>)
 8005282:	f013 fa3c 	bl	80186fe <HAL_SPI_Transmit>
 8005286:	f000 bc95 	b.w	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+5)) && ((wiersz>=(ADRES->Y0_SET+32) && wiersz<=(ADRES->Y0_SET+43))))
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	7b1b      	ldrb	r3, [r3, #12]
 800528e:	3302      	adds	r3, #2
 8005290:	461a      	mov	r2, r3
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	4293      	cmp	r3, r2
 8005296:	d31e      	bcc.n	80052d6 <LCD_print8H+0x26a>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	7b1b      	ldrb	r3, [r3, #12]
 800529c:	3305      	adds	r3, #5
 800529e:	461a      	mov	r2, r3
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d817      	bhi.n	80052d6 <LCD_print8H+0x26a>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	7b5b      	ldrb	r3, [r3, #13]
 80052aa:	3320      	adds	r3, #32
 80052ac:	461a      	mov	r2, r3
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d310      	bcc.n	80052d6 <LCD_print8H+0x26a>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	7b5b      	ldrb	r3, [r3, #13]
 80052b8:	332b      	adds	r3, #43	@ 0x2b
 80052ba:	461a      	mov	r2, r3
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4293      	cmp	r3, r2
 80052c0:	d809      	bhi.n	80052d6 <LCD_print8H+0x26a>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80052c2:	f107 010c 	add.w	r1, r7, #12
 80052c6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ca:	2202      	movs	r2, #2
 80052cc:	484d      	ldr	r0, [pc, #308]	@ (8005404 <LCD_print8H+0x398>)
 80052ce:	f013 fa16 	bl	80186fe <HAL_SPI_Transmit>
 80052d2:	f000 bc6f 	b.w	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna>=(ADRES->X0_SET+25) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+8) && wiersz<=(ADRES->Y0_SET+17))))
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	7b1b      	ldrb	r3, [r3, #12]
 80052da:	3319      	adds	r3, #25
 80052dc:	461a      	mov	r2, r3
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d31e      	bcc.n	8005322 <LCD_print8H+0x2b6>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	7b1b      	ldrb	r3, [r3, #12]
 80052e8:	331d      	adds	r3, #29
 80052ea:	461a      	mov	r2, r3
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d817      	bhi.n	8005322 <LCD_print8H+0x2b6>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	7b5b      	ldrb	r3, [r3, #13]
 80052f6:	3308      	adds	r3, #8
 80052f8:	461a      	mov	r2, r3
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d310      	bcc.n	8005322 <LCD_print8H+0x2b6>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	7b5b      	ldrb	r3, [r3, #13]
 8005304:	3311      	adds	r3, #17
 8005306:	461a      	mov	r2, r3
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	4293      	cmp	r3, r2
 800530c:	d809      	bhi.n	8005322 <LCD_print8H+0x2b6>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800530e:	f107 010c 	add.w	r1, r7, #12
 8005312:	f04f 33ff 	mov.w	r3, #4294967295
 8005316:	2202      	movs	r2, #2
 8005318:	483a      	ldr	r0, [pc, #232]	@ (8005404 <LCD_print8H+0x398>)
 800531a:	f013 f9f0 	bl	80186fe <HAL_SPI_Transmit>
 800531e:	f000 bc49 	b.w	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna>=(ADRES->X0_SET+25) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+32) && wiersz<=(ADRES->Y0_SET+43))))
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	7b1b      	ldrb	r3, [r3, #12]
 8005326:	3319      	adds	r3, #25
 8005328:	461a      	mov	r2, r3
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	4293      	cmp	r3, r2
 800532e:	d31e      	bcc.n	800536e <LCD_print8H+0x302>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	7b1b      	ldrb	r3, [r3, #12]
 8005334:	331d      	adds	r3, #29
 8005336:	461a      	mov	r2, r3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	4293      	cmp	r3, r2
 800533c:	d817      	bhi.n	800536e <LCD_print8H+0x302>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	7b5b      	ldrb	r3, [r3, #13]
 8005342:	3320      	adds	r3, #32
 8005344:	461a      	mov	r2, r3
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	4293      	cmp	r3, r2
 800534a:	d310      	bcc.n	800536e <LCD_print8H+0x302>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	7b5b      	ldrb	r3, [r3, #13]
 8005350:	332b      	adds	r3, #43	@ 0x2b
 8005352:	461a      	mov	r2, r3
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	4293      	cmp	r3, r2
 8005358:	d809      	bhi.n	800536e <LCD_print8H+0x302>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800535a:	f107 010c 	add.w	r1, r7, #12
 800535e:	f04f 33ff 	mov.w	r3, #4294967295
 8005362:	2202      	movs	r2, #2
 8005364:	4827      	ldr	r0, [pc, #156]	@ (8005404 <LCD_print8H+0x398>)
 8005366:	f013 f9ca 	bl	80186fe <HAL_SPI_Transmit>
 800536a:	f000 bc23 	b.w	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+2)) && ((wiersz>=(ADRES->Y0_SET+31) && wiersz<=(ADRES->Y0_SET+43))))
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	7b1b      	ldrb	r3, [r3, #12]
 8005372:	3302      	adds	r3, #2
 8005374:	461a      	mov	r2, r3
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	4293      	cmp	r3, r2
 800537a:	d117      	bne.n	80053ac <LCD_print8H+0x340>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	7b5b      	ldrb	r3, [r3, #13]
 8005380:	331f      	adds	r3, #31
 8005382:	461a      	mov	r2, r3
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4293      	cmp	r3, r2
 8005388:	d310      	bcc.n	80053ac <LCD_print8H+0x340>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	7b5b      	ldrb	r3, [r3, #13]
 800538e:	332b      	adds	r3, #43	@ 0x2b
 8005390:	461a      	mov	r2, r3
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4293      	cmp	r3, r2
 8005396:	d809      	bhi.n	80053ac <LCD_print8H+0x340>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005398:	f107 010c 	add.w	r1, r7, #12
 800539c:	f04f 33ff 	mov.w	r3, #4294967295
 80053a0:	2202      	movs	r2, #2
 80053a2:	4818      	ldr	r0, [pc, #96]	@ (8005404 <LCD_print8H+0x398>)
 80053a4:	f013 f9ab 	bl	80186fe <HAL_SPI_Transmit>
 80053a8:	f000 bc04 	b.w	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+7) && wiersz<=(ADRES->Y0_SET+18)) || (wiersz>=(ADRES->Y0_SET+30) && wiersz<=(ADRES->Y0_SET+44))))
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	7b1b      	ldrb	r3, [r3, #12]
 80053b0:	3303      	adds	r3, #3
 80053b2:	461a      	mov	r2, r3
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d126      	bne.n	8005408 <LCD_print8H+0x39c>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	7b5b      	ldrb	r3, [r3, #13]
 80053be:	3307      	adds	r3, #7
 80053c0:	461a      	mov	r2, r3
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d306      	bcc.n	80053d6 <LCD_print8H+0x36a>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	7b5b      	ldrb	r3, [r3, #13]
 80053cc:	3312      	adds	r3, #18
 80053ce:	461a      	mov	r2, r3
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d90d      	bls.n	80053f2 <LCD_print8H+0x386>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	7b5b      	ldrb	r3, [r3, #13]
 80053da:	331e      	adds	r3, #30
 80053dc:	461a      	mov	r2, r3
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d311      	bcc.n	8005408 <LCD_print8H+0x39c>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	7b5b      	ldrb	r3, [r3, #13]
 80053e8:	332c      	adds	r3, #44	@ 0x2c
 80053ea:	461a      	mov	r2, r3
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d80a      	bhi.n	8005408 <LCD_print8H+0x39c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80053f2:	f107 010c 	add.w	r1, r7, #12
 80053f6:	f04f 33ff 	mov.w	r3, #4294967295
 80053fa:	2202      	movs	r2, #2
 80053fc:	4801      	ldr	r0, [pc, #4]	@ (8005404 <LCD_print8H+0x398>)
 80053fe:	f013 f97e 	bl	80186fe <HAL_SPI_Transmit>
 8005402:	e3d7      	b.n	8005bb4 <LCD_print8H+0xb48>
 8005404:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+4)) && ((wiersz>=(ADRES->Y0_SET+6) && wiersz<=(ADRES->Y0_SET+19)) || (wiersz>=(ADRES->Y0_SET+29) && wiersz<=(ADRES->Y0_SET+45))))
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	7b1b      	ldrb	r3, [r3, #12]
 800540c:	3304      	adds	r3, #4
 800540e:	461a      	mov	r2, r3
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	4293      	cmp	r3, r2
 8005414:	d124      	bne.n	8005460 <LCD_print8H+0x3f4>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	7b5b      	ldrb	r3, [r3, #13]
 800541a:	3306      	adds	r3, #6
 800541c:	461a      	mov	r2, r3
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4293      	cmp	r3, r2
 8005422:	d306      	bcc.n	8005432 <LCD_print8H+0x3c6>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	7b5b      	ldrb	r3, [r3, #13]
 8005428:	3313      	adds	r3, #19
 800542a:	461a      	mov	r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	4293      	cmp	r3, r2
 8005430:	d90d      	bls.n	800544e <LCD_print8H+0x3e2>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	7b5b      	ldrb	r3, [r3, #13]
 8005436:	331d      	adds	r3, #29
 8005438:	461a      	mov	r2, r3
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	4293      	cmp	r3, r2
 800543e:	d30f      	bcc.n	8005460 <LCD_print8H+0x3f4>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	7b5b      	ldrb	r3, [r3, #13]
 8005444:	332d      	adds	r3, #45	@ 0x2d
 8005446:	461a      	mov	r2, r3
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	4293      	cmp	r3, r2
 800544c:	d808      	bhi.n	8005460 <LCD_print8H+0x3f4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800544e:	f107 010c 	add.w	r1, r7, #12
 8005452:	f04f 33ff 	mov.w	r3, #4294967295
 8005456:	2202      	movs	r2, #2
 8005458:	489b      	ldr	r0, [pc, #620]	@ (80056c8 <LCD_print8H+0x65c>)
 800545a:	f013 f950 	bl	80186fe <HAL_SPI_Transmit>
 800545e:	e3a9      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+5)) && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+20)) || (wiersz>=(ADRES->Y0_SET+28) && wiersz<=(ADRES->Y0_SET+46))))
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	7b1b      	ldrb	r3, [r3, #12]
 8005464:	3305      	adds	r3, #5
 8005466:	461a      	mov	r2, r3
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	4293      	cmp	r3, r2
 800546c:	d124      	bne.n	80054b8 <LCD_print8H+0x44c>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	7b5b      	ldrb	r3, [r3, #13]
 8005472:	3305      	adds	r3, #5
 8005474:	461a      	mov	r2, r3
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	4293      	cmp	r3, r2
 800547a:	d306      	bcc.n	800548a <LCD_print8H+0x41e>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	7b5b      	ldrb	r3, [r3, #13]
 8005480:	3314      	adds	r3, #20
 8005482:	461a      	mov	r2, r3
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4293      	cmp	r3, r2
 8005488:	d90d      	bls.n	80054a6 <LCD_print8H+0x43a>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	7b5b      	ldrb	r3, [r3, #13]
 800548e:	331c      	adds	r3, #28
 8005490:	461a      	mov	r2, r3
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	4293      	cmp	r3, r2
 8005496:	d30f      	bcc.n	80054b8 <LCD_print8H+0x44c>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	7b5b      	ldrb	r3, [r3, #13]
 800549c:	332e      	adds	r3, #46	@ 0x2e
 800549e:	461a      	mov	r2, r3
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d808      	bhi.n	80054b8 <LCD_print8H+0x44c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80054a6:	f107 010c 	add.w	r1, r7, #12
 80054aa:	f04f 33ff 	mov.w	r3, #4294967295
 80054ae:	2202      	movs	r2, #2
 80054b0:	4885      	ldr	r0, [pc, #532]	@ (80056c8 <LCD_print8H+0x65c>)
 80054b2:	f013 f924 	bl	80186fe <HAL_SPI_Transmit>
 80054b6:	e37d      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+4) && wiersz<=(ADRES->Y0_SET+7)) || (wiersz>=(ADRES->Y0_SET+18) && wiersz<=(ADRES->Y0_SET+21))))
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	7b1b      	ldrb	r3, [r3, #12]
 80054bc:	3306      	adds	r3, #6
 80054be:	461a      	mov	r2, r3
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d124      	bne.n	8005510 <LCD_print8H+0x4a4>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	7b5b      	ldrb	r3, [r3, #13]
 80054ca:	3304      	adds	r3, #4
 80054cc:	461a      	mov	r2, r3
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d306      	bcc.n	80054e2 <LCD_print8H+0x476>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	7b5b      	ldrb	r3, [r3, #13]
 80054d8:	3307      	adds	r3, #7
 80054da:	461a      	mov	r2, r3
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	4293      	cmp	r3, r2
 80054e0:	d90d      	bls.n	80054fe <LCD_print8H+0x492>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	7b5b      	ldrb	r3, [r3, #13]
 80054e6:	3312      	adds	r3, #18
 80054e8:	461a      	mov	r2, r3
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d30f      	bcc.n	8005510 <LCD_print8H+0x4a4>
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	7b5b      	ldrb	r3, [r3, #13]
 80054f4:	3315      	adds	r3, #21
 80054f6:	461a      	mov	r2, r3
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d808      	bhi.n	8005510 <LCD_print8H+0x4a4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80054fe:	f107 010c 	add.w	r1, r7, #12
 8005502:	f04f 33ff 	mov.w	r3, #4294967295
 8005506:	2202      	movs	r2, #2
 8005508:	486f      	ldr	r0, [pc, #444]	@ (80056c8 <LCD_print8H+0x65c>)
 800550a:	f013 f8f8 	bl	80186fe <HAL_SPI_Transmit>
 800550e:	e351      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+31)) || (wiersz>=(ADRES->Y0_SET+44) && wiersz<=(ADRES->Y0_SET+47))))
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	7b1b      	ldrb	r3, [r3, #12]
 8005514:	3306      	adds	r3, #6
 8005516:	461a      	mov	r2, r3
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	4293      	cmp	r3, r2
 800551c:	d124      	bne.n	8005568 <LCD_print8H+0x4fc>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	7b5b      	ldrb	r3, [r3, #13]
 8005522:	331b      	adds	r3, #27
 8005524:	461a      	mov	r2, r3
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	4293      	cmp	r3, r2
 800552a:	d306      	bcc.n	800553a <LCD_print8H+0x4ce>
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	7b5b      	ldrb	r3, [r3, #13]
 8005530:	331f      	adds	r3, #31
 8005532:	461a      	mov	r2, r3
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4293      	cmp	r3, r2
 8005538:	d90d      	bls.n	8005556 <LCD_print8H+0x4ea>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	7b5b      	ldrb	r3, [r3, #13]
 800553e:	332c      	adds	r3, #44	@ 0x2c
 8005540:	461a      	mov	r2, r3
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4293      	cmp	r3, r2
 8005546:	d30f      	bcc.n	8005568 <LCD_print8H+0x4fc>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	7b5b      	ldrb	r3, [r3, #13]
 800554c:	332f      	adds	r3, #47	@ 0x2f
 800554e:	461a      	mov	r2, r3
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	4293      	cmp	r3, r2
 8005554:	d808      	bhi.n	8005568 <LCD_print8H+0x4fc>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005556:	f107 010c 	add.w	r1, r7, #12
 800555a:	f04f 33ff 	mov.w	r3, #4294967295
 800555e:	2202      	movs	r2, #2
 8005560:	4859      	ldr	r0, [pc, #356]	@ (80056c8 <LCD_print8H+0x65c>)
 8005562:	f013 f8cc 	bl	80186fe <HAL_SPI_Transmit>
 8005566:	e325      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+7)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+6)) || (wiersz>=(ADRES->Y0_SET+19) && wiersz<=(ADRES->Y0_SET+22))))
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	7b1b      	ldrb	r3, [r3, #12]
 800556c:	3307      	adds	r3, #7
 800556e:	461a      	mov	r2, r3
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	4293      	cmp	r3, r2
 8005574:	d124      	bne.n	80055c0 <LCD_print8H+0x554>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	7b5b      	ldrb	r3, [r3, #13]
 800557a:	3303      	adds	r3, #3
 800557c:	461a      	mov	r2, r3
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4293      	cmp	r3, r2
 8005582:	d306      	bcc.n	8005592 <LCD_print8H+0x526>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	7b5b      	ldrb	r3, [r3, #13]
 8005588:	3306      	adds	r3, #6
 800558a:	461a      	mov	r2, r3
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	4293      	cmp	r3, r2
 8005590:	d90d      	bls.n	80055ae <LCD_print8H+0x542>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	7b5b      	ldrb	r3, [r3, #13]
 8005596:	3313      	adds	r3, #19
 8005598:	461a      	mov	r2, r3
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	4293      	cmp	r3, r2
 800559e:	d30f      	bcc.n	80055c0 <LCD_print8H+0x554>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	7b5b      	ldrb	r3, [r3, #13]
 80055a4:	3316      	adds	r3, #22
 80055a6:	461a      	mov	r2, r3
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d808      	bhi.n	80055c0 <LCD_print8H+0x554>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80055ae:	f107 010c 	add.w	r1, r7, #12
 80055b2:	f04f 33ff 	mov.w	r3, #4294967295
 80055b6:	2202      	movs	r2, #2
 80055b8:	4843      	ldr	r0, [pc, #268]	@ (80056c8 <LCD_print8H+0x65c>)
 80055ba:	f013 f8a0 	bl	80186fe <HAL_SPI_Transmit>
 80055be:	e2f9      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+7)) && ((wiersz>=(ADRES->Y0_SET+26) && wiersz<=(ADRES->Y0_SET+30)) || (wiersz>=(ADRES->Y0_SET+45) && wiersz<=(ADRES->Y0_SET+48))))
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	7b1b      	ldrb	r3, [r3, #12]
 80055c4:	3307      	adds	r3, #7
 80055c6:	461a      	mov	r2, r3
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d124      	bne.n	8005618 <LCD_print8H+0x5ac>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	7b5b      	ldrb	r3, [r3, #13]
 80055d2:	331a      	adds	r3, #26
 80055d4:	461a      	mov	r2, r3
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4293      	cmp	r3, r2
 80055da:	d306      	bcc.n	80055ea <LCD_print8H+0x57e>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	7b5b      	ldrb	r3, [r3, #13]
 80055e0:	331e      	adds	r3, #30
 80055e2:	461a      	mov	r2, r3
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d90d      	bls.n	8005606 <LCD_print8H+0x59a>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	7b5b      	ldrb	r3, [r3, #13]
 80055ee:	332d      	adds	r3, #45	@ 0x2d
 80055f0:	461a      	mov	r2, r3
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d30f      	bcc.n	8005618 <LCD_print8H+0x5ac>
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	7b5b      	ldrb	r3, [r3, #13]
 80055fc:	3330      	adds	r3, #48	@ 0x30
 80055fe:	461a      	mov	r2, r3
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	4293      	cmp	r3, r2
 8005604:	d808      	bhi.n	8005618 <LCD_print8H+0x5ac>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005606:	f107 010c 	add.w	r1, r7, #12
 800560a:	f04f 33ff 	mov.w	r3, #4294967295
 800560e:	2202      	movs	r2, #2
 8005610:	482d      	ldr	r0, [pc, #180]	@ (80056c8 <LCD_print8H+0x65c>)
 8005612:	f013 f874 	bl	80186fe <HAL_SPI_Transmit>
 8005616:	e2cd      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+8)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+5)) || (wiersz>=(ADRES->Y0_SET+20) && wiersz<=(ADRES->Y0_SET+23))))
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	7b1b      	ldrb	r3, [r3, #12]
 800561c:	3308      	adds	r3, #8
 800561e:	461a      	mov	r2, r3
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	4293      	cmp	r3, r2
 8005624:	d124      	bne.n	8005670 <LCD_print8H+0x604>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	7b5b      	ldrb	r3, [r3, #13]
 800562a:	3302      	adds	r3, #2
 800562c:	461a      	mov	r2, r3
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4293      	cmp	r3, r2
 8005632:	d306      	bcc.n	8005642 <LCD_print8H+0x5d6>
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	7b5b      	ldrb	r3, [r3, #13]
 8005638:	3305      	adds	r3, #5
 800563a:	461a      	mov	r2, r3
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4293      	cmp	r3, r2
 8005640:	d90d      	bls.n	800565e <LCD_print8H+0x5f2>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	7b5b      	ldrb	r3, [r3, #13]
 8005646:	3314      	adds	r3, #20
 8005648:	461a      	mov	r2, r3
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	4293      	cmp	r3, r2
 800564e:	d30f      	bcc.n	8005670 <LCD_print8H+0x604>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	7b5b      	ldrb	r3, [r3, #13]
 8005654:	3317      	adds	r3, #23
 8005656:	461a      	mov	r2, r3
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4293      	cmp	r3, r2
 800565c:	d808      	bhi.n	8005670 <LCD_print8H+0x604>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800565e:	f107 010c 	add.w	r1, r7, #12
 8005662:	f04f 33ff 	mov.w	r3, #4294967295
 8005666:	2202      	movs	r2, #2
 8005668:	4817      	ldr	r0, [pc, #92]	@ (80056c8 <LCD_print8H+0x65c>)
 800566a:	f013 f848 	bl	80186fe <HAL_SPI_Transmit>
 800566e:	e2a1      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+8)) && ((wiersz>=(ADRES->Y0_SET+20) && wiersz<=(ADRES->Y0_SET+29)) || (wiersz>=(ADRES->Y0_SET+46) && wiersz<=(ADRES->Y0_SET+49))))
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	7b1b      	ldrb	r3, [r3, #12]
 8005674:	3308      	adds	r3, #8
 8005676:	461a      	mov	r2, r3
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	4293      	cmp	r3, r2
 800567c:	d126      	bne.n	80056cc <LCD_print8H+0x660>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	7b5b      	ldrb	r3, [r3, #13]
 8005682:	3314      	adds	r3, #20
 8005684:	461a      	mov	r2, r3
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	4293      	cmp	r3, r2
 800568a:	d306      	bcc.n	800569a <LCD_print8H+0x62e>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	7b5b      	ldrb	r3, [r3, #13]
 8005690:	331d      	adds	r3, #29
 8005692:	461a      	mov	r2, r3
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	4293      	cmp	r3, r2
 8005698:	d90d      	bls.n	80056b6 <LCD_print8H+0x64a>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	7b5b      	ldrb	r3, [r3, #13]
 800569e:	332e      	adds	r3, #46	@ 0x2e
 80056a0:	461a      	mov	r2, r3
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d311      	bcc.n	80056cc <LCD_print8H+0x660>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	7b5b      	ldrb	r3, [r3, #13]
 80056ac:	3331      	adds	r3, #49	@ 0x31
 80056ae:	461a      	mov	r2, r3
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d80a      	bhi.n	80056cc <LCD_print8H+0x660>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80056b6:	f107 010c 	add.w	r1, r7, #12
 80056ba:	f04f 33ff 	mov.w	r3, #4294967295
 80056be:	2202      	movs	r2, #2
 80056c0:	4801      	ldr	r0, [pc, #4]	@ (80056c8 <LCD_print8H+0x65c>)
 80056c2:	f013 f81c 	bl	80186fe <HAL_SPI_Transmit>
 80056c6:	e275      	b.n	8005bb4 <LCD_print8H+0xb48>
 80056c8:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+9)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+4)) || (wiersz>=(ADRES->Y0_SET+21) && wiersz<=(ADRES->Y0_SET+28))))
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	7b1b      	ldrb	r3, [r3, #12]
 80056d0:	3309      	adds	r3, #9
 80056d2:	461a      	mov	r2, r3
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d124      	bne.n	8005724 <LCD_print8H+0x6b8>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	7b5b      	ldrb	r3, [r3, #13]
 80056de:	3301      	adds	r3, #1
 80056e0:	461a      	mov	r2, r3
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d306      	bcc.n	80056f6 <LCD_print8H+0x68a>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	7b5b      	ldrb	r3, [r3, #13]
 80056ec:	3304      	adds	r3, #4
 80056ee:	461a      	mov	r2, r3
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d90d      	bls.n	8005712 <LCD_print8H+0x6a6>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	7b5b      	ldrb	r3, [r3, #13]
 80056fa:	3315      	adds	r3, #21
 80056fc:	461a      	mov	r2, r3
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	4293      	cmp	r3, r2
 8005702:	d30f      	bcc.n	8005724 <LCD_print8H+0x6b8>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	7b5b      	ldrb	r3, [r3, #13]
 8005708:	331c      	adds	r3, #28
 800570a:	461a      	mov	r2, r3
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	4293      	cmp	r3, r2
 8005710:	d808      	bhi.n	8005724 <LCD_print8H+0x6b8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005712:	f107 010c 	add.w	r1, r7, #12
 8005716:	f04f 33ff 	mov.w	r3, #4294967295
 800571a:	2202      	movs	r2, #2
 800571c:	488d      	ldr	r0, [pc, #564]	@ (8005954 <LCD_print8H+0x8e8>)
 800571e:	f012 ffee 	bl	80186fe <HAL_SPI_Transmit>
 8005722:	e247      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+9)) && ((wiersz>=(ADRES->Y0_SET+47) && wiersz<=(ADRES->Y0_SET+50))))
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	7b1b      	ldrb	r3, [r3, #12]
 8005728:	3309      	adds	r3, #9
 800572a:	461a      	mov	r2, r3
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	4293      	cmp	r3, r2
 8005730:	d116      	bne.n	8005760 <LCD_print8H+0x6f4>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	7b5b      	ldrb	r3, [r3, #13]
 8005736:	332f      	adds	r3, #47	@ 0x2f
 8005738:	461a      	mov	r2, r3
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4293      	cmp	r3, r2
 800573e:	d30f      	bcc.n	8005760 <LCD_print8H+0x6f4>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	7b5b      	ldrb	r3, [r3, #13]
 8005744:	3332      	adds	r3, #50	@ 0x32
 8005746:	461a      	mov	r2, r3
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4293      	cmp	r3, r2
 800574c:	d808      	bhi.n	8005760 <LCD_print8H+0x6f4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800574e:	f107 010c 	add.w	r1, r7, #12
 8005752:	f04f 33ff 	mov.w	r3, #4294967295
 8005756:	2202      	movs	r2, #2
 8005758:	487e      	ldr	r0, [pc, #504]	@ (8005954 <LCD_print8H+0x8e8>)
 800575a:	f012 ffd0 	bl	80186fe <HAL_SPI_Transmit>
 800575e:	e229      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+22)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+4)) || (wiersz>=(ADRES->Y0_SET+20) && wiersz<=(ADRES->Y0_SET+29))))
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	7b1b      	ldrb	r3, [r3, #12]
 8005764:	3316      	adds	r3, #22
 8005766:	461a      	mov	r2, r3
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	4293      	cmp	r3, r2
 800576c:	d124      	bne.n	80057b8 <LCD_print8H+0x74c>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	7b5b      	ldrb	r3, [r3, #13]
 8005772:	3301      	adds	r3, #1
 8005774:	461a      	mov	r2, r3
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	4293      	cmp	r3, r2
 800577a:	d306      	bcc.n	800578a <LCD_print8H+0x71e>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	7b5b      	ldrb	r3, [r3, #13]
 8005780:	3304      	adds	r3, #4
 8005782:	461a      	mov	r2, r3
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	4293      	cmp	r3, r2
 8005788:	d90d      	bls.n	80057a6 <LCD_print8H+0x73a>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	7b5b      	ldrb	r3, [r3, #13]
 800578e:	3314      	adds	r3, #20
 8005790:	461a      	mov	r2, r3
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	4293      	cmp	r3, r2
 8005796:	d30f      	bcc.n	80057b8 <LCD_print8H+0x74c>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	7b5b      	ldrb	r3, [r3, #13]
 800579c:	331d      	adds	r3, #29
 800579e:	461a      	mov	r2, r3
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d808      	bhi.n	80057b8 <LCD_print8H+0x74c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80057a6:	f107 010c 	add.w	r1, r7, #12
 80057aa:	f04f 33ff 	mov.w	r3, #4294967295
 80057ae:	2202      	movs	r2, #2
 80057b0:	4868      	ldr	r0, [pc, #416]	@ (8005954 <LCD_print8H+0x8e8>)
 80057b2:	f012 ffa4 	bl	80186fe <HAL_SPI_Transmit>
 80057b6:	e1fd      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+22)) && ((wiersz>=(ADRES->Y0_SET+46) && wiersz<=(ADRES->Y0_SET+50))))
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	7b1b      	ldrb	r3, [r3, #12]
 80057bc:	3316      	adds	r3, #22
 80057be:	461a      	mov	r2, r3
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d116      	bne.n	80057f4 <LCD_print8H+0x788>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	7b5b      	ldrb	r3, [r3, #13]
 80057ca:	332e      	adds	r3, #46	@ 0x2e
 80057cc:	461a      	mov	r2, r3
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d30f      	bcc.n	80057f4 <LCD_print8H+0x788>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	7b5b      	ldrb	r3, [r3, #13]
 80057d8:	3332      	adds	r3, #50	@ 0x32
 80057da:	461a      	mov	r2, r3
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	4293      	cmp	r3, r2
 80057e0:	d808      	bhi.n	80057f4 <LCD_print8H+0x788>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80057e2:	f107 010c 	add.w	r1, r7, #12
 80057e6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ea:	2202      	movs	r2, #2
 80057ec:	4859      	ldr	r0, [pc, #356]	@ (8005954 <LCD_print8H+0x8e8>)
 80057ee:	f012 ff86 	bl	80186fe <HAL_SPI_Transmit>
 80057f2:	e1df      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+5)) || (wiersz>=(ADRES->Y0_SET+19) && wiersz<=(ADRES->Y0_SET+23))))
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	7b1b      	ldrb	r3, [r3, #12]
 80057f8:	3317      	adds	r3, #23
 80057fa:	461a      	mov	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	4293      	cmp	r3, r2
 8005800:	d124      	bne.n	800584c <LCD_print8H+0x7e0>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	7b5b      	ldrb	r3, [r3, #13]
 8005806:	3302      	adds	r3, #2
 8005808:	461a      	mov	r2, r3
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	4293      	cmp	r3, r2
 800580e:	d306      	bcc.n	800581e <LCD_print8H+0x7b2>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	7b5b      	ldrb	r3, [r3, #13]
 8005814:	3305      	adds	r3, #5
 8005816:	461a      	mov	r2, r3
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	4293      	cmp	r3, r2
 800581c:	d90d      	bls.n	800583a <LCD_print8H+0x7ce>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	7b5b      	ldrb	r3, [r3, #13]
 8005822:	3313      	adds	r3, #19
 8005824:	461a      	mov	r2, r3
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	4293      	cmp	r3, r2
 800582a:	d30f      	bcc.n	800584c <LCD_print8H+0x7e0>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	7b5b      	ldrb	r3, [r3, #13]
 8005830:	3317      	adds	r3, #23
 8005832:	461a      	mov	r2, r3
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4293      	cmp	r3, r2
 8005838:	d808      	bhi.n	800584c <LCD_print8H+0x7e0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800583a:	f107 010c 	add.w	r1, r7, #12
 800583e:	f04f 33ff 	mov.w	r3, #4294967295
 8005842:	2202      	movs	r2, #2
 8005844:	4843      	ldr	r0, [pc, #268]	@ (8005954 <LCD_print8H+0x8e8>)
 8005846:	f012 ff5a 	bl	80186fe <HAL_SPI_Transmit>
 800584a:	e1b3      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+25) && wiersz<=(ADRES->Y0_SET+30)) || (wiersz>=(ADRES->Y0_SET+45) && wiersz<=(ADRES->Y0_SET+49))))
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	7b1b      	ldrb	r3, [r3, #12]
 8005850:	3317      	adds	r3, #23
 8005852:	461a      	mov	r2, r3
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	4293      	cmp	r3, r2
 8005858:	d124      	bne.n	80058a4 <LCD_print8H+0x838>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	7b5b      	ldrb	r3, [r3, #13]
 800585e:	3319      	adds	r3, #25
 8005860:	461a      	mov	r2, r3
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	4293      	cmp	r3, r2
 8005866:	d306      	bcc.n	8005876 <LCD_print8H+0x80a>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	7b5b      	ldrb	r3, [r3, #13]
 800586c:	331e      	adds	r3, #30
 800586e:	461a      	mov	r2, r3
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	4293      	cmp	r3, r2
 8005874:	d90d      	bls.n	8005892 <LCD_print8H+0x826>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	7b5b      	ldrb	r3, [r3, #13]
 800587a:	332d      	adds	r3, #45	@ 0x2d
 800587c:	461a      	mov	r2, r3
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4293      	cmp	r3, r2
 8005882:	d30f      	bcc.n	80058a4 <LCD_print8H+0x838>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	7b5b      	ldrb	r3, [r3, #13]
 8005888:	3331      	adds	r3, #49	@ 0x31
 800588a:	461a      	mov	r2, r3
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4293      	cmp	r3, r2
 8005890:	d808      	bhi.n	80058a4 <LCD_print8H+0x838>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005892:	f107 010c 	add.w	r1, r7, #12
 8005896:	f04f 33ff 	mov.w	r3, #4294967295
 800589a:	2202      	movs	r2, #2
 800589c:	482d      	ldr	r0, [pc, #180]	@ (8005954 <LCD_print8H+0x8e8>)
 800589e:	f012 ff2e 	bl	80186fe <HAL_SPI_Transmit>
 80058a2:	e187      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+24)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+6)) || (wiersz>=(ADRES->Y0_SET+18) && wiersz<=(ADRES->Y0_SET+22))))
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	7b1b      	ldrb	r3, [r3, #12]
 80058a8:	3318      	adds	r3, #24
 80058aa:	461a      	mov	r2, r3
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d124      	bne.n	80058fc <LCD_print8H+0x890>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	7b5b      	ldrb	r3, [r3, #13]
 80058b6:	3303      	adds	r3, #3
 80058b8:	461a      	mov	r2, r3
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	4293      	cmp	r3, r2
 80058be:	d306      	bcc.n	80058ce <LCD_print8H+0x862>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	7b5b      	ldrb	r3, [r3, #13]
 80058c4:	3306      	adds	r3, #6
 80058c6:	461a      	mov	r2, r3
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d90d      	bls.n	80058ea <LCD_print8H+0x87e>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	7b5b      	ldrb	r3, [r3, #13]
 80058d2:	3312      	adds	r3, #18
 80058d4:	461a      	mov	r2, r3
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	4293      	cmp	r3, r2
 80058da:	d30f      	bcc.n	80058fc <LCD_print8H+0x890>
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	7b5b      	ldrb	r3, [r3, #13]
 80058e0:	3316      	adds	r3, #22
 80058e2:	461a      	mov	r2, r3
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d808      	bhi.n	80058fc <LCD_print8H+0x890>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80058ea:	f107 010c 	add.w	r1, r7, #12
 80058ee:	f04f 33ff 	mov.w	r3, #4294967295
 80058f2:	2202      	movs	r2, #2
 80058f4:	4817      	ldr	r0, [pc, #92]	@ (8005954 <LCD_print8H+0x8e8>)
 80058f6:	f012 ff02 	bl	80186fe <HAL_SPI_Transmit>
 80058fa:	e15b      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+24)) && ((wiersz>=(ADRES->Y0_SET+26) && wiersz<=(ADRES->Y0_SET+31)) || (wiersz>=(ADRES->Y0_SET+44) && wiersz<=(ADRES->Y0_SET+48))))
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	7b1b      	ldrb	r3, [r3, #12]
 8005900:	3318      	adds	r3, #24
 8005902:	461a      	mov	r2, r3
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	4293      	cmp	r3, r2
 8005908:	d126      	bne.n	8005958 <LCD_print8H+0x8ec>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	7b5b      	ldrb	r3, [r3, #13]
 800590e:	331a      	adds	r3, #26
 8005910:	461a      	mov	r2, r3
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4293      	cmp	r3, r2
 8005916:	d306      	bcc.n	8005926 <LCD_print8H+0x8ba>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	7b5b      	ldrb	r3, [r3, #13]
 800591c:	331f      	adds	r3, #31
 800591e:	461a      	mov	r2, r3
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	4293      	cmp	r3, r2
 8005924:	d90d      	bls.n	8005942 <LCD_print8H+0x8d6>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	7b5b      	ldrb	r3, [r3, #13]
 800592a:	332c      	adds	r3, #44	@ 0x2c
 800592c:	461a      	mov	r2, r3
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	4293      	cmp	r3, r2
 8005932:	d311      	bcc.n	8005958 <LCD_print8H+0x8ec>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	7b5b      	ldrb	r3, [r3, #13]
 8005938:	3330      	adds	r3, #48	@ 0x30
 800593a:	461a      	mov	r2, r3
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	4293      	cmp	r3, r2
 8005940:	d80a      	bhi.n	8005958 <LCD_print8H+0x8ec>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005942:	f107 010c 	add.w	r1, r7, #12
 8005946:	f04f 33ff 	mov.w	r3, #4294967295
 800594a:	2202      	movs	r2, #2
 800594c:	4801      	ldr	r0, [pc, #4]	@ (8005954 <LCD_print8H+0x8e8>)
 800594e:	f012 fed6 	bl	80186fe <HAL_SPI_Transmit>
 8005952:	e12f      	b.n	8005bb4 <LCD_print8H+0xb48>
 8005954:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+25)) && ((wiersz>=(ADRES->Y0_SET+4) && wiersz<=(ADRES->Y0_SET+7)) || (wiersz>=(ADRES->Y0_SET+17) && wiersz<=(ADRES->Y0_SET+21))))
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	7b1b      	ldrb	r3, [r3, #12]
 800595c:	3319      	adds	r3, #25
 800595e:	461a      	mov	r2, r3
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	4293      	cmp	r3, r2
 8005964:	d124      	bne.n	80059b0 <LCD_print8H+0x944>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	7b5b      	ldrb	r3, [r3, #13]
 800596a:	3304      	adds	r3, #4
 800596c:	461a      	mov	r2, r3
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4293      	cmp	r3, r2
 8005972:	d306      	bcc.n	8005982 <LCD_print8H+0x916>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	7b5b      	ldrb	r3, [r3, #13]
 8005978:	3307      	adds	r3, #7
 800597a:	461a      	mov	r2, r3
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	4293      	cmp	r3, r2
 8005980:	d90d      	bls.n	800599e <LCD_print8H+0x932>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	7b5b      	ldrb	r3, [r3, #13]
 8005986:	3311      	adds	r3, #17
 8005988:	461a      	mov	r2, r3
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4293      	cmp	r3, r2
 800598e:	d30f      	bcc.n	80059b0 <LCD_print8H+0x944>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	7b5b      	ldrb	r3, [r3, #13]
 8005994:	3315      	adds	r3, #21
 8005996:	461a      	mov	r2, r3
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4293      	cmp	r3, r2
 800599c:	d808      	bhi.n	80059b0 <LCD_print8H+0x944>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800599e:	f107 010c 	add.w	r1, r7, #12
 80059a2:	f04f 33ff 	mov.w	r3, #4294967295
 80059a6:	2202      	movs	r2, #2
 80059a8:	4890      	ldr	r0, [pc, #576]	@ (8005bec <LCD_print8H+0xb80>)
 80059aa:	f012 fea8 	bl	80186fe <HAL_SPI_Transmit>
 80059ae:	e101      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+25)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+32)) || (wiersz>=(ADRES->Y0_SET+43) && wiersz<=(ADRES->Y0_SET+47))))
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	7b1b      	ldrb	r3, [r3, #12]
 80059b4:	3319      	adds	r3, #25
 80059b6:	461a      	mov	r2, r3
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d124      	bne.n	8005a08 <LCD_print8H+0x99c>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	7b5b      	ldrb	r3, [r3, #13]
 80059c2:	331b      	adds	r3, #27
 80059c4:	461a      	mov	r2, r3
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d306      	bcc.n	80059da <LCD_print8H+0x96e>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	7b5b      	ldrb	r3, [r3, #13]
 80059d0:	3320      	adds	r3, #32
 80059d2:	461a      	mov	r2, r3
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d90d      	bls.n	80059f6 <LCD_print8H+0x98a>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	7b5b      	ldrb	r3, [r3, #13]
 80059de:	332b      	adds	r3, #43	@ 0x2b
 80059e0:	461a      	mov	r2, r3
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d30f      	bcc.n	8005a08 <LCD_print8H+0x99c>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	7b5b      	ldrb	r3, [r3, #13]
 80059ec:	332f      	adds	r3, #47	@ 0x2f
 80059ee:	461a      	mov	r2, r3
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d808      	bhi.n	8005a08 <LCD_print8H+0x99c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80059f6:	f107 010c 	add.w	r1, r7, #12
 80059fa:	f04f 33ff 	mov.w	r3, #4294967295
 80059fe:	2202      	movs	r2, #2
 8005a00:	487a      	ldr	r0, [pc, #488]	@ (8005bec <LCD_print8H+0xb80>)
 8005a02:	f012 fe7c 	bl	80186fe <HAL_SPI_Transmit>
 8005a06:	e0d5      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+26)) && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+7)) || (wiersz>=(ADRES->Y0_SET+17) && wiersz<=(ADRES->Y0_SET+20))))
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	7b1b      	ldrb	r3, [r3, #12]
 8005a0c:	331a      	adds	r3, #26
 8005a0e:	461a      	mov	r2, r3
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d124      	bne.n	8005a60 <LCD_print8H+0x9f4>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	7b5b      	ldrb	r3, [r3, #13]
 8005a1a:	3305      	adds	r3, #5
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d306      	bcc.n	8005a32 <LCD_print8H+0x9c6>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	7b5b      	ldrb	r3, [r3, #13]
 8005a28:	3307      	adds	r3, #7
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d90d      	bls.n	8005a4e <LCD_print8H+0x9e2>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	7b5b      	ldrb	r3, [r3, #13]
 8005a36:	3311      	adds	r3, #17
 8005a38:	461a      	mov	r2, r3
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d30f      	bcc.n	8005a60 <LCD_print8H+0x9f4>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	7b5b      	ldrb	r3, [r3, #13]
 8005a44:	3314      	adds	r3, #20
 8005a46:	461a      	mov	r2, r3
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d808      	bhi.n	8005a60 <LCD_print8H+0x9f4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005a4e:	f107 010c 	add.w	r1, r7, #12
 8005a52:	f04f 33ff 	mov.w	r3, #4294967295
 8005a56:	2202      	movs	r2, #2
 8005a58:	4864      	ldr	r0, [pc, #400]	@ (8005bec <LCD_print8H+0xb80>)
 8005a5a:	f012 fe50 	bl	80186fe <HAL_SPI_Transmit>
 8005a5e:	e0a9      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+26)) && ((wiersz>=(ADRES->Y0_SET+28) && wiersz<=(ADRES->Y0_SET+46))))
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	7b1b      	ldrb	r3, [r3, #12]
 8005a64:	331a      	adds	r3, #26
 8005a66:	461a      	mov	r2, r3
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d116      	bne.n	8005a9c <LCD_print8H+0xa30>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	7b5b      	ldrb	r3, [r3, #13]
 8005a72:	331c      	adds	r3, #28
 8005a74:	461a      	mov	r2, r3
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d30f      	bcc.n	8005a9c <LCD_print8H+0xa30>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	7b5b      	ldrb	r3, [r3, #13]
 8005a80:	332e      	adds	r3, #46	@ 0x2e
 8005a82:	461a      	mov	r2, r3
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d808      	bhi.n	8005a9c <LCD_print8H+0xa30>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005a8a:	f107 010c 	add.w	r1, r7, #12
 8005a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a92:	2202      	movs	r2, #2
 8005a94:	4855      	ldr	r0, [pc, #340]	@ (8005bec <LCD_print8H+0xb80>)
 8005a96:	f012 fe32 	bl	80186fe <HAL_SPI_Transmit>
 8005a9a:	e08b      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+27)) && ((wiersz>=(ADRES->Y0_SET+6) && wiersz<=(ADRES->Y0_SET+19)) || (wiersz>=(ADRES->Y0_SET+29) && wiersz<=(ADRES->Y0_SET+45))))
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	7b1b      	ldrb	r3, [r3, #12]
 8005aa0:	331b      	adds	r3, #27
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d124      	bne.n	8005af4 <LCD_print8H+0xa88>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	7b5b      	ldrb	r3, [r3, #13]
 8005aae:	3306      	adds	r3, #6
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d306      	bcc.n	8005ac6 <LCD_print8H+0xa5a>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	7b5b      	ldrb	r3, [r3, #13]
 8005abc:	3313      	adds	r3, #19
 8005abe:	461a      	mov	r2, r3
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d90d      	bls.n	8005ae2 <LCD_print8H+0xa76>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	7b5b      	ldrb	r3, [r3, #13]
 8005aca:	331d      	adds	r3, #29
 8005acc:	461a      	mov	r2, r3
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d30f      	bcc.n	8005af4 <LCD_print8H+0xa88>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	7b5b      	ldrb	r3, [r3, #13]
 8005ad8:	332d      	adds	r3, #45	@ 0x2d
 8005ada:	461a      	mov	r2, r3
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d808      	bhi.n	8005af4 <LCD_print8H+0xa88>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005ae2:	f107 010c 	add.w	r1, r7, #12
 8005ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aea:	2202      	movs	r2, #2
 8005aec:	483f      	ldr	r0, [pc, #252]	@ (8005bec <LCD_print8H+0xb80>)
 8005aee:	f012 fe06 	bl	80186fe <HAL_SPI_Transmit>
 8005af2:	e05f      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+7) && wiersz<=(ADRES->Y0_SET+18)) || (wiersz>=(ADRES->Y0_SET+30) && wiersz<=(ADRES->Y0_SET+44))))
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	7b1b      	ldrb	r3, [r3, #12]
 8005af8:	331c      	adds	r3, #28
 8005afa:	461a      	mov	r2, r3
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d124      	bne.n	8005b4c <LCD_print8H+0xae0>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	7b5b      	ldrb	r3, [r3, #13]
 8005b06:	3307      	adds	r3, #7
 8005b08:	461a      	mov	r2, r3
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d306      	bcc.n	8005b1e <LCD_print8H+0xab2>
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	7b5b      	ldrb	r3, [r3, #13]
 8005b14:	3312      	adds	r3, #18
 8005b16:	461a      	mov	r2, r3
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d90d      	bls.n	8005b3a <LCD_print8H+0xace>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	7b5b      	ldrb	r3, [r3, #13]
 8005b22:	331e      	adds	r3, #30
 8005b24:	461a      	mov	r2, r3
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d30f      	bcc.n	8005b4c <LCD_print8H+0xae0>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	7b5b      	ldrb	r3, [r3, #13]
 8005b30:	332c      	adds	r3, #44	@ 0x2c
 8005b32:	461a      	mov	r2, r3
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d808      	bhi.n	8005b4c <LCD_print8H+0xae0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005b3a:	f107 010c 	add.w	r1, r7, #12
 8005b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b42:	2202      	movs	r2, #2
 8005b44:	4829      	ldr	r0, [pc, #164]	@ (8005bec <LCD_print8H+0xb80>)
 8005b46:	f012 fdda 	bl	80186fe <HAL_SPI_Transmit>
 8005b4a:	e033      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+8) && wiersz<=(ADRES->Y0_SET+17)) || (wiersz>=(ADRES->Y0_SET+31) && wiersz<=(ADRES->Y0_SET+43))))
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	7b1b      	ldrb	r3, [r3, #12]
 8005b50:	331d      	adds	r3, #29
 8005b52:	461a      	mov	r2, r3
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d124      	bne.n	8005ba4 <LCD_print8H+0xb38>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	7b5b      	ldrb	r3, [r3, #13]
 8005b5e:	3308      	adds	r3, #8
 8005b60:	461a      	mov	r2, r3
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d306      	bcc.n	8005b76 <LCD_print8H+0xb0a>
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	7b5b      	ldrb	r3, [r3, #13]
 8005b6c:	3311      	adds	r3, #17
 8005b6e:	461a      	mov	r2, r3
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d90d      	bls.n	8005b92 <LCD_print8H+0xb26>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	7b5b      	ldrb	r3, [r3, #13]
 8005b7a:	331f      	adds	r3, #31
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d30f      	bcc.n	8005ba4 <LCD_print8H+0xb38>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	7b5b      	ldrb	r3, [r3, #13]
 8005b88:	332b      	adds	r3, #43	@ 0x2b
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d808      	bhi.n	8005ba4 <LCD_print8H+0xb38>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005b92:	f107 010c 	add.w	r1, r7, #12
 8005b96:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	4813      	ldr	r0, [pc, #76]	@ (8005bec <LCD_print8H+0xb80>)
 8005b9e:	f012 fdae 	bl	80186fe <HAL_SPI_Transmit>
 8005ba2:	e007      	b.n	8005bb4 <LCD_print8H+0xb48>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8005ba4:	f107 0108 	add.w	r1, r7, #8
 8005ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bac:	2202      	movs	r2, #2
 8005bae:	480f      	ldr	r0, [pc, #60]	@ (8005bec <LCD_print8H+0xb80>)
 8005bb0:	f012 fda5 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	7b9b      	ldrb	r3, [r3, #14]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	f4ff aac9 	bcc.w	800515c <LCD_print8H+0xf0>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	613b      	str	r3, [r7, #16]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	7bdb      	ldrb	r3, [r3, #15]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	f4ff aaba 	bcc.w	8005152 <LCD_print8H+0xe6>
			}
		}
	}
	CS_ON();
 8005bde:	f7fb fa21 	bl	8001024 <CS_ON>
}
 8005be2:	bf00      	nop
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	200004a4 	.word	0x200004a4

08005bf0 <LCD_print1H>:

void LCD_print1H(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	71fb      	strb	r3, [r7, #7]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	71bb      	strb	r3, [r7, #6]
 8005c00:	4613      	mov	r3, r2
 8005c02:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	223f      	movs	r2, #63	@ 0x3f
 8005c16:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	221f      	movs	r2, #31
 8005c1c:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2200      	movs	r2, #0
 8005c22:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2200      	movs	r2, #0
 8005c28:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	7cda      	ldrb	r2, [r3, #19]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	7c1b      	ldrb	r3, [r3, #16]
 8005c32:	4053      	eors	r3, r2
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	b25a      	sxtb	r2, r3
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	7c5b      	ldrb	r3, [r3, #17]
 8005c3e:	b25b      	sxtb	r3, r3
 8005c40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c44:	b25b      	sxtb	r3, r3
 8005c46:	4053      	eors	r3, r2
 8005c48:	b25b      	sxtb	r3, r3
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	7d1b      	ldrb	r3, [r3, #20]
 8005c54:	461a      	mov	r2, r3
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	7c5b      	ldrb	r3, [r3, #17]
 8005c5a:	f003 0307 	and.w	r3, r3, #7
 8005c5e:	4053      	eors	r3, r2
 8005c60:	015b      	lsls	r3, r3, #5
 8005c62:	b25a      	sxtb	r2, r3
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	7c9b      	ldrb	r3, [r3, #18]
 8005c68:	b25b      	sxtb	r3, r3
 8005c6a:	4053      	eors	r3, r2
 8005c6c:	b25b      	sxtb	r3, r3
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	7cdb      	ldrb	r3, [r3, #19]
 8005c78:	733b      	strb	r3, [r7, #12]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	7d1b      	ldrb	r3, [r3, #20]
 8005c7e:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8005c80:	2300      	movs	r3, #0
 8005c82:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8005c84:	2300      	movs	r3, #0
 8005c86:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8005c88:	7bfa      	ldrb	r2, [r7, #15]
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	4053      	eors	r3, r2
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	b25a      	sxtb	r2, r3
 8005c94:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005c98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c9c:	b25b      	sxtb	r3, r3
 8005c9e:	4053      	eors	r3, r2
 8005ca0:	b25b      	sxtb	r3, r3
 8005ca2:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8005ca4:	7bba      	ldrb	r2, [r7, #14]
 8005ca6:	79bb      	ldrb	r3, [r7, #6]
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	4053      	eors	r3, r2
 8005cae:	015b      	lsls	r3, r3, #5
 8005cb0:	b25a      	sxtb	r2, r3
 8005cb2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005cb6:	4053      	eors	r3, r2
 8005cb8:	b25b      	sxtb	r3, r3
 8005cba:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	723b      	strb	r3, [r7, #8]
 8005cc0:	7bbb      	ldrb	r3, [r7, #14]
 8005cc2:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8005cc4:	f7fb f9c4 	bl	8001050 <DC_ON>
	CS_OFF();
 8005cc8:	f7fb f9b7 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	7b5b      	ldrb	r3, [r3, #13]
 8005cd0:	613b      	str	r3, [r7, #16]
 8005cd2:	e343      	b.n	800635c <LCD_print1H+0x76c>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	7b1b      	ldrb	r3, [r3, #12]
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	e334      	b.n	8006346 <LCD_print1H+0x756>
		{
			if(kolumna==(ADRES->X0_SET+25) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+50))))
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	7b1b      	ldrb	r3, [r3, #12]
 8005ce0:	3319      	adds	r3, #25
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d115      	bne.n	8005d16 <LCD_print1H+0x126>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	7b5b      	ldrb	r3, [r3, #13]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d30f      	bcc.n	8005d16 <LCD_print1H+0x126>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	7b5b      	ldrb	r3, [r3, #13]
 8005cfa:	3332      	adds	r3, #50	@ 0x32
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d808      	bhi.n	8005d16 <LCD_print1H+0x126>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005d04:	f107 010c 	add.w	r1, r7, #12
 8005d08:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	4896      	ldr	r0, [pc, #600]	@ (8005f68 <LCD_print1H+0x378>)
 8005d10:	f012 fcf5 	bl	80186fe <HAL_SPI_Transmit>
 8005d14:	e314      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if(kolumna==(ADRES->X0_SET+26) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+50))))
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	7b1b      	ldrb	r3, [r3, #12]
 8005d1a:	331a      	adds	r3, #26
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d115      	bne.n	8005d50 <LCD_print1H+0x160>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	7b5b      	ldrb	r3, [r3, #13]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d30f      	bcc.n	8005d50 <LCD_print1H+0x160>
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	7b5b      	ldrb	r3, [r3, #13]
 8005d34:	3332      	adds	r3, #50	@ 0x32
 8005d36:	461a      	mov	r2, r3
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d808      	bhi.n	8005d50 <LCD_print1H+0x160>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005d3e:	f107 010c 	add.w	r1, r7, #12
 8005d42:	f04f 33ff 	mov.w	r3, #4294967295
 8005d46:	2202      	movs	r2, #2
 8005d48:	4887      	ldr	r0, [pc, #540]	@ (8005f68 <LCD_print1H+0x378>)
 8005d4a:	f012 fcd8 	bl	80186fe <HAL_SPI_Transmit>
 8005d4e:	e2f7      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if(kolumna==(ADRES->X0_SET+27) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+50))))
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	7b1b      	ldrb	r3, [r3, #12]
 8005d54:	331b      	adds	r3, #27
 8005d56:	461a      	mov	r2, r3
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d115      	bne.n	8005d8a <LCD_print1H+0x19a>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	7b5b      	ldrb	r3, [r3, #13]
 8005d62:	461a      	mov	r2, r3
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d30f      	bcc.n	8005d8a <LCD_print1H+0x19a>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	7b5b      	ldrb	r3, [r3, #13]
 8005d6e:	3332      	adds	r3, #50	@ 0x32
 8005d70:	461a      	mov	r2, r3
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d808      	bhi.n	8005d8a <LCD_print1H+0x19a>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005d78:	f107 010c 	add.w	r1, r7, #12
 8005d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d80:	2202      	movs	r2, #2
 8005d82:	4879      	ldr	r0, [pc, #484]	@ (8005f68 <LCD_print1H+0x378>)
 8005d84:	f012 fcbb 	bl	80186fe <HAL_SPI_Transmit>
 8005d88:	e2da      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if(kolumna==(ADRES->X0_SET+28) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+50))))
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	7b1b      	ldrb	r3, [r3, #12]
 8005d8e:	331c      	adds	r3, #28
 8005d90:	461a      	mov	r2, r3
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d115      	bne.n	8005dc4 <LCD_print1H+0x1d4>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	7b5b      	ldrb	r3, [r3, #13]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d30f      	bcc.n	8005dc4 <LCD_print1H+0x1d4>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	7b5b      	ldrb	r3, [r3, #13]
 8005da8:	3332      	adds	r3, #50	@ 0x32
 8005daa:	461a      	mov	r2, r3
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d808      	bhi.n	8005dc4 <LCD_print1H+0x1d4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005db2:	f107 010c 	add.w	r1, r7, #12
 8005db6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dba:	2202      	movs	r2, #2
 8005dbc:	486a      	ldr	r0, [pc, #424]	@ (8005f68 <LCD_print1H+0x378>)
 8005dbe:	f012 fc9e 	bl	80186fe <HAL_SPI_Transmit>
 8005dc2:	e2bd      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+13) && kolumna<=(ADRES->X0_SET+30)) && wiersz==(ADRES->Y0_SET+49))
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	7b1b      	ldrb	r3, [r3, #12]
 8005dc8:	330d      	adds	r3, #13
 8005dca:	461a      	mov	r2, r3
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d316      	bcc.n	8005e00 <LCD_print1H+0x210>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	7b1b      	ldrb	r3, [r3, #12]
 8005dd6:	331e      	adds	r3, #30
 8005dd8:	461a      	mov	r2, r3
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d80f      	bhi.n	8005e00 <LCD_print1H+0x210>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	7b5b      	ldrb	r3, [r3, #13]
 8005de4:	3331      	adds	r3, #49	@ 0x31
 8005de6:	461a      	mov	r2, r3
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d108      	bne.n	8005e00 <LCD_print1H+0x210>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005dee:	f107 010c 	add.w	r1, r7, #12
 8005df2:	f04f 33ff 	mov.w	r3, #4294967295
 8005df6:	2202      	movs	r2, #2
 8005df8:	485b      	ldr	r0, [pc, #364]	@ (8005f68 <LCD_print1H+0x378>)
 8005dfa:	f012 fc80 	bl	80186fe <HAL_SPI_Transmit>
 8005dfe:	e29f      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+13) && kolumna<=(ADRES->X0_SET+30)) && wiersz==(ADRES->Y0_SET+50))
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	7b1b      	ldrb	r3, [r3, #12]
 8005e04:	330d      	adds	r3, #13
 8005e06:	461a      	mov	r2, r3
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d316      	bcc.n	8005e3c <LCD_print1H+0x24c>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	7b1b      	ldrb	r3, [r3, #12]
 8005e12:	331e      	adds	r3, #30
 8005e14:	461a      	mov	r2, r3
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d80f      	bhi.n	8005e3c <LCD_print1H+0x24c>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	7b5b      	ldrb	r3, [r3, #13]
 8005e20:	3332      	adds	r3, #50	@ 0x32
 8005e22:	461a      	mov	r2, r3
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d108      	bne.n	8005e3c <LCD_print1H+0x24c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005e2a:	f107 010c 	add.w	r1, r7, #12
 8005e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e32:	2202      	movs	r2, #2
 8005e34:	484c      	ldr	r0, [pc, #304]	@ (8005f68 <LCD_print1H+0x378>)
 8005e36:	f012 fc62 	bl	80186fe <HAL_SPI_Transmit>
 8005e3a:	e281      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+13) && kolumna<=(ADRES->X0_SET+30)) && wiersz==(ADRES->Y0_SET+48))
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	7b1b      	ldrb	r3, [r3, #12]
 8005e40:	330d      	adds	r3, #13
 8005e42:	461a      	mov	r2, r3
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d316      	bcc.n	8005e78 <LCD_print1H+0x288>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	7b1b      	ldrb	r3, [r3, #12]
 8005e4e:	331e      	adds	r3, #30
 8005e50:	461a      	mov	r2, r3
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d80f      	bhi.n	8005e78 <LCD_print1H+0x288>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	7b5b      	ldrb	r3, [r3, #13]
 8005e5c:	3330      	adds	r3, #48	@ 0x30
 8005e5e:	461a      	mov	r2, r3
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d108      	bne.n	8005e78 <LCD_print1H+0x288>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005e66:	f107 010c 	add.w	r1, r7, #12
 8005e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e6e:	2202      	movs	r2, #2
 8005e70:	483d      	ldr	r0, [pc, #244]	@ (8005f68 <LCD_print1H+0x378>)
 8005e72:	f012 fc44 	bl	80186fe <HAL_SPI_Transmit>
 8005e76:	e263      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+13) && kolumna<=(ADRES->X0_SET+30)) && wiersz==(ADRES->Y0_SET+46))
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	7b1b      	ldrb	r3, [r3, #12]
 8005e7c:	330d      	adds	r3, #13
 8005e7e:	461a      	mov	r2, r3
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d316      	bcc.n	8005eb4 <LCD_print1H+0x2c4>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	7b1b      	ldrb	r3, [r3, #12]
 8005e8a:	331e      	adds	r3, #30
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d80f      	bhi.n	8005eb4 <LCD_print1H+0x2c4>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	7b5b      	ldrb	r3, [r3, #13]
 8005e98:	332e      	adds	r3, #46	@ 0x2e
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d108      	bne.n	8005eb4 <LCD_print1H+0x2c4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005ea2:	f107 010c 	add.w	r1, r7, #12
 8005ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eaa:	2202      	movs	r2, #2
 8005eac:	482e      	ldr	r0, [pc, #184]	@ (8005f68 <LCD_print1H+0x378>)
 8005eae:	f012 fc26 	bl	80186fe <HAL_SPI_Transmit>
 8005eb2:	e245      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+13) && kolumna<=(ADRES->X0_SET+30)) && wiersz==(ADRES->Y0_SET+47))
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	7b1b      	ldrb	r3, [r3, #12]
 8005eb8:	330d      	adds	r3, #13
 8005eba:	461a      	mov	r2, r3
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d316      	bcc.n	8005ef0 <LCD_print1H+0x300>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	7b1b      	ldrb	r3, [r3, #12]
 8005ec6:	331e      	adds	r3, #30
 8005ec8:	461a      	mov	r2, r3
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d80f      	bhi.n	8005ef0 <LCD_print1H+0x300>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	7b5b      	ldrb	r3, [r3, #13]
 8005ed4:	332f      	adds	r3, #47	@ 0x2f
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d108      	bne.n	8005ef0 <LCD_print1H+0x300>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005ede:	f107 010c 	add.w	r1, r7, #12
 8005ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	481f      	ldr	r0, [pc, #124]	@ (8005f68 <LCD_print1H+0x378>)
 8005eea:	f012 fc08 	bl	80186fe <HAL_SPI_Transmit>
 8005eee:	e227      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+6) && kolumna<=(ADRES->X0_SET+13)) && wiersz==(ADRES->Y0_SET+18))
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	7b1b      	ldrb	r3, [r3, #12]
 8005ef4:	3306      	adds	r3, #6
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d316      	bcc.n	8005f2c <LCD_print1H+0x33c>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	7b1b      	ldrb	r3, [r3, #12]
 8005f02:	330d      	adds	r3, #13
 8005f04:	461a      	mov	r2, r3
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d80f      	bhi.n	8005f2c <LCD_print1H+0x33c>
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	7b5b      	ldrb	r3, [r3, #13]
 8005f10:	3312      	adds	r3, #18
 8005f12:	461a      	mov	r2, r3
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d108      	bne.n	8005f2c <LCD_print1H+0x33c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005f1a:	f107 010c 	add.w	r1, r7, #12
 8005f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f22:	2202      	movs	r2, #2
 8005f24:	4810      	ldr	r0, [pc, #64]	@ (8005f68 <LCD_print1H+0x378>)
 8005f26:	f012 fbea 	bl	80186fe <HAL_SPI_Transmit>
 8005f2a:	e209      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+7) && kolumna<=(ADRES->X0_SET+14)) && wiersz==(ADRES->Y0_SET+17))
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	7b1b      	ldrb	r3, [r3, #12]
 8005f30:	3307      	adds	r3, #7
 8005f32:	461a      	mov	r2, r3
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d318      	bcc.n	8005f6c <LCD_print1H+0x37c>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	7b1b      	ldrb	r3, [r3, #12]
 8005f3e:	330e      	adds	r3, #14
 8005f40:	461a      	mov	r2, r3
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d811      	bhi.n	8005f6c <LCD_print1H+0x37c>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	7b5b      	ldrb	r3, [r3, #13]
 8005f4c:	3311      	adds	r3, #17
 8005f4e:	461a      	mov	r2, r3
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d10a      	bne.n	8005f6c <LCD_print1H+0x37c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005f56:	f107 010c 	add.w	r1, r7, #12
 8005f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f5e:	2202      	movs	r2, #2
 8005f60:	4801      	ldr	r0, [pc, #4]	@ (8005f68 <LCD_print1H+0x378>)
 8005f62:	f012 fbcc 	bl	80186fe <HAL_SPI_Transmit>
 8005f66:	e1eb      	b.n	8006340 <LCD_print1H+0x750>
 8005f68:	200004a4 	.word	0x200004a4
			}
			else if((kolumna>=(ADRES->X0_SET+8) && kolumna<=(ADRES->X0_SET+15)) && wiersz==(ADRES->Y0_SET+16))
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	7b1b      	ldrb	r3, [r3, #12]
 8005f70:	3308      	adds	r3, #8
 8005f72:	461a      	mov	r2, r3
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d316      	bcc.n	8005fa8 <LCD_print1H+0x3b8>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	7b1b      	ldrb	r3, [r3, #12]
 8005f7e:	330f      	adds	r3, #15
 8005f80:	461a      	mov	r2, r3
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d80f      	bhi.n	8005fa8 <LCD_print1H+0x3b8>
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	7b5b      	ldrb	r3, [r3, #13]
 8005f8c:	3310      	adds	r3, #16
 8005f8e:	461a      	mov	r2, r3
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d108      	bne.n	8005fa8 <LCD_print1H+0x3b8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005f96:	f107 010c 	add.w	r1, r7, #12
 8005f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	4897      	ldr	r0, [pc, #604]	@ (8006200 <LCD_print1H+0x610>)
 8005fa2:	f012 fbac 	bl	80186fe <HAL_SPI_Transmit>
 8005fa6:	e1cb      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+16)) && wiersz==(ADRES->Y0_SET+15))
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	7b1b      	ldrb	r3, [r3, #12]
 8005fac:	3309      	adds	r3, #9
 8005fae:	461a      	mov	r2, r3
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d316      	bcc.n	8005fe4 <LCD_print1H+0x3f4>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	7b1b      	ldrb	r3, [r3, #12]
 8005fba:	3310      	adds	r3, #16
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d80f      	bhi.n	8005fe4 <LCD_print1H+0x3f4>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	7b5b      	ldrb	r3, [r3, #13]
 8005fc8:	330f      	adds	r3, #15
 8005fca:	461a      	mov	r2, r3
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d108      	bne.n	8005fe4 <LCD_print1H+0x3f4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8005fd2:	f107 010c 	add.w	r1, r7, #12
 8005fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fda:	2202      	movs	r2, #2
 8005fdc:	4888      	ldr	r0, [pc, #544]	@ (8006200 <LCD_print1H+0x610>)
 8005fde:	f012 fb8e 	bl	80186fe <HAL_SPI_Transmit>
 8005fe2:	e1ad      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+10) && kolumna<=(ADRES->X0_SET+17)) && wiersz==(ADRES->Y0_SET+14))
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	7b1b      	ldrb	r3, [r3, #12]
 8005fe8:	330a      	adds	r3, #10
 8005fea:	461a      	mov	r2, r3
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d316      	bcc.n	8006020 <LCD_print1H+0x430>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	7b1b      	ldrb	r3, [r3, #12]
 8005ff6:	3311      	adds	r3, #17
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d80f      	bhi.n	8006020 <LCD_print1H+0x430>
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	7b5b      	ldrb	r3, [r3, #13]
 8006004:	330e      	adds	r3, #14
 8006006:	461a      	mov	r2, r3
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	4293      	cmp	r3, r2
 800600c:	d108      	bne.n	8006020 <LCD_print1H+0x430>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800600e:	f107 010c 	add.w	r1, r7, #12
 8006012:	f04f 33ff 	mov.w	r3, #4294967295
 8006016:	2202      	movs	r2, #2
 8006018:	4879      	ldr	r0, [pc, #484]	@ (8006200 <LCD_print1H+0x610>)
 800601a:	f012 fb70 	bl	80186fe <HAL_SPI_Transmit>
 800601e:	e18f      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+11) && kolumna<=(ADRES->X0_SET+18)) && wiersz==(ADRES->Y0_SET+13))
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	7b1b      	ldrb	r3, [r3, #12]
 8006024:	330b      	adds	r3, #11
 8006026:	461a      	mov	r2, r3
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	4293      	cmp	r3, r2
 800602c:	d316      	bcc.n	800605c <LCD_print1H+0x46c>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	7b1b      	ldrb	r3, [r3, #12]
 8006032:	3312      	adds	r3, #18
 8006034:	461a      	mov	r2, r3
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	4293      	cmp	r3, r2
 800603a:	d80f      	bhi.n	800605c <LCD_print1H+0x46c>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	7b5b      	ldrb	r3, [r3, #13]
 8006040:	330d      	adds	r3, #13
 8006042:	461a      	mov	r2, r3
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	4293      	cmp	r3, r2
 8006048:	d108      	bne.n	800605c <LCD_print1H+0x46c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800604a:	f107 010c 	add.w	r1, r7, #12
 800604e:	f04f 33ff 	mov.w	r3, #4294967295
 8006052:	2202      	movs	r2, #2
 8006054:	486a      	ldr	r0, [pc, #424]	@ (8006200 <LCD_print1H+0x610>)
 8006056:	f012 fb52 	bl	80186fe <HAL_SPI_Transmit>
 800605a:	e171      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+12) && kolumna<=(ADRES->X0_SET+19)) && wiersz==(ADRES->Y0_SET+12))
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	7b1b      	ldrb	r3, [r3, #12]
 8006060:	330c      	adds	r3, #12
 8006062:	461a      	mov	r2, r3
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	4293      	cmp	r3, r2
 8006068:	d316      	bcc.n	8006098 <LCD_print1H+0x4a8>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	7b1b      	ldrb	r3, [r3, #12]
 800606e:	3313      	adds	r3, #19
 8006070:	461a      	mov	r2, r3
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	4293      	cmp	r3, r2
 8006076:	d80f      	bhi.n	8006098 <LCD_print1H+0x4a8>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	7b5b      	ldrb	r3, [r3, #13]
 800607c:	330c      	adds	r3, #12
 800607e:	461a      	mov	r2, r3
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	4293      	cmp	r3, r2
 8006084:	d108      	bne.n	8006098 <LCD_print1H+0x4a8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006086:	f107 010c 	add.w	r1, r7, #12
 800608a:	f04f 33ff 	mov.w	r3, #4294967295
 800608e:	2202      	movs	r2, #2
 8006090:	485b      	ldr	r0, [pc, #364]	@ (8006200 <LCD_print1H+0x610>)
 8006092:	f012 fb34 	bl	80186fe <HAL_SPI_Transmit>
 8006096:	e153      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+13) && kolumna<=(ADRES->X0_SET+20)) && wiersz==(ADRES->Y0_SET+11))
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	7b1b      	ldrb	r3, [r3, #12]
 800609c:	330d      	adds	r3, #13
 800609e:	461a      	mov	r2, r3
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d316      	bcc.n	80060d4 <LCD_print1H+0x4e4>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	7b1b      	ldrb	r3, [r3, #12]
 80060aa:	3314      	adds	r3, #20
 80060ac:	461a      	mov	r2, r3
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d80f      	bhi.n	80060d4 <LCD_print1H+0x4e4>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	7b5b      	ldrb	r3, [r3, #13]
 80060b8:	330b      	adds	r3, #11
 80060ba:	461a      	mov	r2, r3
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	4293      	cmp	r3, r2
 80060c0:	d108      	bne.n	80060d4 <LCD_print1H+0x4e4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80060c2:	f107 010c 	add.w	r1, r7, #12
 80060c6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ca:	2202      	movs	r2, #2
 80060cc:	484c      	ldr	r0, [pc, #304]	@ (8006200 <LCD_print1H+0x610>)
 80060ce:	f012 fb16 	bl	80186fe <HAL_SPI_Transmit>
 80060d2:	e135      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+14) && kolumna<=(ADRES->X0_SET+21)) && wiersz==(ADRES->Y0_SET+10))
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	7b1b      	ldrb	r3, [r3, #12]
 80060d8:	330e      	adds	r3, #14
 80060da:	461a      	mov	r2, r3
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	4293      	cmp	r3, r2
 80060e0:	d316      	bcc.n	8006110 <LCD_print1H+0x520>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	7b1b      	ldrb	r3, [r3, #12]
 80060e6:	3315      	adds	r3, #21
 80060e8:	461a      	mov	r2, r3
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d80f      	bhi.n	8006110 <LCD_print1H+0x520>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	7b5b      	ldrb	r3, [r3, #13]
 80060f4:	330a      	adds	r3, #10
 80060f6:	461a      	mov	r2, r3
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d108      	bne.n	8006110 <LCD_print1H+0x520>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80060fe:	f107 010c 	add.w	r1, r7, #12
 8006102:	f04f 33ff 	mov.w	r3, #4294967295
 8006106:	2202      	movs	r2, #2
 8006108:	483d      	ldr	r0, [pc, #244]	@ (8006200 <LCD_print1H+0x610>)
 800610a:	f012 faf8 	bl	80186fe <HAL_SPI_Transmit>
 800610e:	e117      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+15) && kolumna<=(ADRES->X0_SET+22)) && wiersz==(ADRES->Y0_SET+9))
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	7b1b      	ldrb	r3, [r3, #12]
 8006114:	330f      	adds	r3, #15
 8006116:	461a      	mov	r2, r3
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	4293      	cmp	r3, r2
 800611c:	d316      	bcc.n	800614c <LCD_print1H+0x55c>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	7b1b      	ldrb	r3, [r3, #12]
 8006122:	3316      	adds	r3, #22
 8006124:	461a      	mov	r2, r3
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	4293      	cmp	r3, r2
 800612a:	d80f      	bhi.n	800614c <LCD_print1H+0x55c>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	7b5b      	ldrb	r3, [r3, #13]
 8006130:	3309      	adds	r3, #9
 8006132:	461a      	mov	r2, r3
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	4293      	cmp	r3, r2
 8006138:	d108      	bne.n	800614c <LCD_print1H+0x55c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800613a:	f107 010c 	add.w	r1, r7, #12
 800613e:	f04f 33ff 	mov.w	r3, #4294967295
 8006142:	2202      	movs	r2, #2
 8006144:	482e      	ldr	r0, [pc, #184]	@ (8006200 <LCD_print1H+0x610>)
 8006146:	f012 fada 	bl	80186fe <HAL_SPI_Transmit>
 800614a:	e0f9      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+16) && kolumna<=(ADRES->X0_SET+23)) && wiersz==(ADRES->Y0_SET+8))
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	7b1b      	ldrb	r3, [r3, #12]
 8006150:	3310      	adds	r3, #16
 8006152:	461a      	mov	r2, r3
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	4293      	cmp	r3, r2
 8006158:	d316      	bcc.n	8006188 <LCD_print1H+0x598>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	7b1b      	ldrb	r3, [r3, #12]
 800615e:	3317      	adds	r3, #23
 8006160:	461a      	mov	r2, r3
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	4293      	cmp	r3, r2
 8006166:	d80f      	bhi.n	8006188 <LCD_print1H+0x598>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	7b5b      	ldrb	r3, [r3, #13]
 800616c:	3308      	adds	r3, #8
 800616e:	461a      	mov	r2, r3
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	4293      	cmp	r3, r2
 8006174:	d108      	bne.n	8006188 <LCD_print1H+0x598>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006176:	f107 010c 	add.w	r1, r7, #12
 800617a:	f04f 33ff 	mov.w	r3, #4294967295
 800617e:	2202      	movs	r2, #2
 8006180:	481f      	ldr	r0, [pc, #124]	@ (8006200 <LCD_print1H+0x610>)
 8006182:	f012 fabc 	bl	80186fe <HAL_SPI_Transmit>
 8006186:	e0db      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+17) && kolumna<=(ADRES->X0_SET+24)) && wiersz==(ADRES->Y0_SET+7))
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	7b1b      	ldrb	r3, [r3, #12]
 800618c:	3311      	adds	r3, #17
 800618e:	461a      	mov	r2, r3
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	4293      	cmp	r3, r2
 8006194:	d316      	bcc.n	80061c4 <LCD_print1H+0x5d4>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	7b1b      	ldrb	r3, [r3, #12]
 800619a:	3318      	adds	r3, #24
 800619c:	461a      	mov	r2, r3
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d80f      	bhi.n	80061c4 <LCD_print1H+0x5d4>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	7b5b      	ldrb	r3, [r3, #13]
 80061a8:	3307      	adds	r3, #7
 80061aa:	461a      	mov	r2, r3
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d108      	bne.n	80061c4 <LCD_print1H+0x5d4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80061b2:	f107 010c 	add.w	r1, r7, #12
 80061b6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ba:	2202      	movs	r2, #2
 80061bc:	4810      	ldr	r0, [pc, #64]	@ (8006200 <LCD_print1H+0x610>)
 80061be:	f012 fa9e 	bl	80186fe <HAL_SPI_Transmit>
 80061c2:	e0bd      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+18) && kolumna<=(ADRES->X0_SET+25)) && wiersz==(ADRES->Y0_SET+6))
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	7b1b      	ldrb	r3, [r3, #12]
 80061c8:	3312      	adds	r3, #18
 80061ca:	461a      	mov	r2, r3
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d318      	bcc.n	8006204 <LCD_print1H+0x614>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	7b1b      	ldrb	r3, [r3, #12]
 80061d6:	3319      	adds	r3, #25
 80061d8:	461a      	mov	r2, r3
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	4293      	cmp	r3, r2
 80061de:	d811      	bhi.n	8006204 <LCD_print1H+0x614>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	7b5b      	ldrb	r3, [r3, #13]
 80061e4:	3306      	adds	r3, #6
 80061e6:	461a      	mov	r2, r3
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d10a      	bne.n	8006204 <LCD_print1H+0x614>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80061ee:	f107 010c 	add.w	r1, r7, #12
 80061f2:	f04f 33ff 	mov.w	r3, #4294967295
 80061f6:	2202      	movs	r2, #2
 80061f8:	4801      	ldr	r0, [pc, #4]	@ (8006200 <LCD_print1H+0x610>)
 80061fa:	f012 fa80 	bl	80186fe <HAL_SPI_Transmit>
 80061fe:	e09f      	b.n	8006340 <LCD_print1H+0x750>
 8006200:	200004a4 	.word	0x200004a4
			}
			else if((kolumna>=(ADRES->X0_SET+19) && kolumna<=(ADRES->X0_SET+24)) && wiersz==(ADRES->Y0_SET+5))
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	7b1b      	ldrb	r3, [r3, #12]
 8006208:	3313      	adds	r3, #19
 800620a:	461a      	mov	r2, r3
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	4293      	cmp	r3, r2
 8006210:	d316      	bcc.n	8006240 <LCD_print1H+0x650>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	7b1b      	ldrb	r3, [r3, #12]
 8006216:	3318      	adds	r3, #24
 8006218:	461a      	mov	r2, r3
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	4293      	cmp	r3, r2
 800621e:	d80f      	bhi.n	8006240 <LCD_print1H+0x650>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	7b5b      	ldrb	r3, [r3, #13]
 8006224:	3305      	adds	r3, #5
 8006226:	461a      	mov	r2, r3
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	4293      	cmp	r3, r2
 800622c:	d108      	bne.n	8006240 <LCD_print1H+0x650>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800622e:	f107 010c 	add.w	r1, r7, #12
 8006232:	f04f 33ff 	mov.w	r3, #4294967295
 8006236:	2202      	movs	r2, #2
 8006238:	484f      	ldr	r0, [pc, #316]	@ (8006378 <LCD_print1H+0x788>)
 800623a:	f012 fa60 	bl	80186fe <HAL_SPI_Transmit>
 800623e:	e07f      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+20) && kolumna<=(ADRES->X0_SET+24)) && wiersz==(ADRES->Y0_SET+4))
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	7b1b      	ldrb	r3, [r3, #12]
 8006244:	3314      	adds	r3, #20
 8006246:	461a      	mov	r2, r3
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	4293      	cmp	r3, r2
 800624c:	d316      	bcc.n	800627c <LCD_print1H+0x68c>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	7b1b      	ldrb	r3, [r3, #12]
 8006252:	3318      	adds	r3, #24
 8006254:	461a      	mov	r2, r3
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	4293      	cmp	r3, r2
 800625a:	d80f      	bhi.n	800627c <LCD_print1H+0x68c>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	7b5b      	ldrb	r3, [r3, #13]
 8006260:	3304      	adds	r3, #4
 8006262:	461a      	mov	r2, r3
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	4293      	cmp	r3, r2
 8006268:	d108      	bne.n	800627c <LCD_print1H+0x68c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800626a:	f107 010c 	add.w	r1, r7, #12
 800626e:	f04f 33ff 	mov.w	r3, #4294967295
 8006272:	2202      	movs	r2, #2
 8006274:	4840      	ldr	r0, [pc, #256]	@ (8006378 <LCD_print1H+0x788>)
 8006276:	f012 fa42 	bl	80186fe <HAL_SPI_Transmit>
 800627a:	e061      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+21) && kolumna<=(ADRES->X0_SET+24)) && wiersz==(ADRES->Y0_SET+3))
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	7b1b      	ldrb	r3, [r3, #12]
 8006280:	3315      	adds	r3, #21
 8006282:	461a      	mov	r2, r3
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	4293      	cmp	r3, r2
 8006288:	d316      	bcc.n	80062b8 <LCD_print1H+0x6c8>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	7b1b      	ldrb	r3, [r3, #12]
 800628e:	3318      	adds	r3, #24
 8006290:	461a      	mov	r2, r3
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	4293      	cmp	r3, r2
 8006296:	d80f      	bhi.n	80062b8 <LCD_print1H+0x6c8>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	7b5b      	ldrb	r3, [r3, #13]
 800629c:	3303      	adds	r3, #3
 800629e:	461a      	mov	r2, r3
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d108      	bne.n	80062b8 <LCD_print1H+0x6c8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80062a6:	f107 010c 	add.w	r1, r7, #12
 80062aa:	f04f 33ff 	mov.w	r3, #4294967295
 80062ae:	2202      	movs	r2, #2
 80062b0:	4831      	ldr	r0, [pc, #196]	@ (8006378 <LCD_print1H+0x788>)
 80062b2:	f012 fa24 	bl	80186fe <HAL_SPI_Transmit>
 80062b6:	e043      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+22) && kolumna<=(ADRES->X0_SET+24)) && wiersz==(ADRES->Y0_SET+2))
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	7b1b      	ldrb	r3, [r3, #12]
 80062bc:	3316      	adds	r3, #22
 80062be:	461a      	mov	r2, r3
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d316      	bcc.n	80062f4 <LCD_print1H+0x704>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	7b1b      	ldrb	r3, [r3, #12]
 80062ca:	3318      	adds	r3, #24
 80062cc:	461a      	mov	r2, r3
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d80f      	bhi.n	80062f4 <LCD_print1H+0x704>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	7b5b      	ldrb	r3, [r3, #13]
 80062d8:	3302      	adds	r3, #2
 80062da:	461a      	mov	r2, r3
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	4293      	cmp	r3, r2
 80062e0:	d108      	bne.n	80062f4 <LCD_print1H+0x704>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80062e2:	f107 010c 	add.w	r1, r7, #12
 80062e6:	f04f 33ff 	mov.w	r3, #4294967295
 80062ea:	2202      	movs	r2, #2
 80062ec:	4822      	ldr	r0, [pc, #136]	@ (8006378 <LCD_print1H+0x788>)
 80062ee:	f012 fa06 	bl	80186fe <HAL_SPI_Transmit>
 80062f2:	e025      	b.n	8006340 <LCD_print1H+0x750>
			}
			else if((kolumna>=(ADRES->X0_SET+23) && kolumna<=(ADRES->X0_SET+24)) && wiersz==(ADRES->Y0_SET+1))
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	7b1b      	ldrb	r3, [r3, #12]
 80062f8:	3317      	adds	r3, #23
 80062fa:	461a      	mov	r2, r3
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	4293      	cmp	r3, r2
 8006300:	d316      	bcc.n	8006330 <LCD_print1H+0x740>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	7b1b      	ldrb	r3, [r3, #12]
 8006306:	3318      	adds	r3, #24
 8006308:	461a      	mov	r2, r3
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	4293      	cmp	r3, r2
 800630e:	d80f      	bhi.n	8006330 <LCD_print1H+0x740>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	7b5b      	ldrb	r3, [r3, #13]
 8006314:	3301      	adds	r3, #1
 8006316:	461a      	mov	r2, r3
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	4293      	cmp	r3, r2
 800631c:	d108      	bne.n	8006330 <LCD_print1H+0x740>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800631e:	f107 010c 	add.w	r1, r7, #12
 8006322:	f04f 33ff 	mov.w	r3, #4294967295
 8006326:	2202      	movs	r2, #2
 8006328:	4813      	ldr	r0, [pc, #76]	@ (8006378 <LCD_print1H+0x788>)
 800632a:	f012 f9e8 	bl	80186fe <HAL_SPI_Transmit>
 800632e:	e007      	b.n	8006340 <LCD_print1H+0x750>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8006330:	f107 0108 	add.w	r1, r7, #8
 8006334:	f04f 33ff 	mov.w	r3, #4294967295
 8006338:	2202      	movs	r2, #2
 800633a:	480f      	ldr	r0, [pc, #60]	@ (8006378 <LCD_print1H+0x788>)
 800633c:	f012 f9df 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	3301      	adds	r3, #1
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	7b9b      	ldrb	r3, [r3, #14]
 800634a:	3301      	adds	r3, #1
 800634c:	461a      	mov	r2, r3
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	4293      	cmp	r3, r2
 8006352:	f4ff acc3 	bcc.w	8005cdc <LCD_print1H+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	3301      	adds	r3, #1
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	7bdb      	ldrb	r3, [r3, #15]
 8006360:	461a      	mov	r2, r3
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	4293      	cmp	r3, r2
 8006366:	f4ff acb5 	bcc.w	8005cd4 <LCD_print1H+0xe4>
			}
		}
	}
	CS_ON();
 800636a:	f7fa fe5b 	bl	8001024 <CS_ON>
}
 800636e:	bf00      	nop
 8006370:	3718      	adds	r7, #24
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	200004a4 	.word	0x200004a4

0800637c <LCD_print2H>:

void LCD_print2H(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	4603      	mov	r3, r0
 8006386:	71fb      	strb	r3, [r7, #7]
 8006388:	460b      	mov	r3, r1
 800638a:	71bb      	strb	r3, [r7, #6]
 800638c:	4613      	mov	r3, r2
 800638e:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	2300      	movs	r3, #0
 8006396:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2200      	movs	r2, #0
 800639c:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	223f      	movs	r2, #63	@ 0x3f
 80063a2:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	221f      	movs	r2, #31
 80063a8:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2200      	movs	r2, #0
 80063ae:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2200      	movs	r2, #0
 80063b4:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	7cda      	ldrb	r2, [r3, #19]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	7c1b      	ldrb	r3, [r3, #16]
 80063be:	4053      	eors	r3, r2
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	b25a      	sxtb	r2, r3
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	7c5b      	ldrb	r3, [r3, #17]
 80063ca:	b25b      	sxtb	r3, r3
 80063cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063d0:	b25b      	sxtb	r3, r3
 80063d2:	4053      	eors	r3, r2
 80063d4:	b25b      	sxtb	r3, r3
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	7d1b      	ldrb	r3, [r3, #20]
 80063e0:	461a      	mov	r2, r3
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	7c5b      	ldrb	r3, [r3, #17]
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	4053      	eors	r3, r2
 80063ec:	015b      	lsls	r3, r3, #5
 80063ee:	b25a      	sxtb	r2, r3
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	7c9b      	ldrb	r3, [r3, #18]
 80063f4:	b25b      	sxtb	r3, r3
 80063f6:	4053      	eors	r3, r2
 80063f8:	b25b      	sxtb	r3, r3
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	7cdb      	ldrb	r3, [r3, #19]
 8006404:	733b      	strb	r3, [r7, #12]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	7d1b      	ldrb	r3, [r3, #20]
 800640a:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 800640c:	2300      	movs	r3, #0
 800640e:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8006410:	2300      	movs	r3, #0
 8006412:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8006414:	7bfa      	ldrb	r2, [r7, #15]
 8006416:	79fb      	ldrb	r3, [r7, #7]
 8006418:	4053      	eors	r3, r2
 800641a:	b2db      	uxtb	r3, r3
 800641c:	00db      	lsls	r3, r3, #3
 800641e:	b25a      	sxtb	r2, r3
 8006420:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006424:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006428:	b25b      	sxtb	r3, r3
 800642a:	4053      	eors	r3, r2
 800642c:	b25b      	sxtb	r3, r3
 800642e:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8006430:	7bba      	ldrb	r2, [r7, #14]
 8006432:	79bb      	ldrb	r3, [r7, #6]
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	4053      	eors	r3, r2
 800643a:	015b      	lsls	r3, r3, #5
 800643c:	b25a      	sxtb	r2, r3
 800643e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006442:	4053      	eors	r3, r2
 8006444:	b25b      	sxtb	r3, r3
 8006446:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	723b      	strb	r3, [r7, #8]
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8006450:	f7fa fdfe 	bl	8001050 <DC_ON>
	CS_OFF();
 8006454:	f7fa fdf1 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	7b5b      	ldrb	r3, [r3, #13]
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	f000 bcff 	b.w	8006e60 <LCD_print2H+0xae4>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	7b1b      	ldrb	r3, [r3, #12]
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	f000 bcef 	b.w	8006e4a <LCD_print2H+0xace>
		{
			if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+44) && wiersz<=(ADRES->Y0_SET+50))))
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	7b1b      	ldrb	r3, [r3, #12]
 8006470:	3302      	adds	r3, #2
 8006472:	461a      	mov	r2, r3
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	4293      	cmp	r3, r2
 8006478:	d31e      	bcc.n	80064b8 <LCD_print2H+0x13c>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	7b1b      	ldrb	r3, [r3, #12]
 800647e:	331e      	adds	r3, #30
 8006480:	461a      	mov	r2, r3
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	4293      	cmp	r3, r2
 8006486:	d817      	bhi.n	80064b8 <LCD_print2H+0x13c>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	7b5b      	ldrb	r3, [r3, #13]
 800648c:	332c      	adds	r3, #44	@ 0x2c
 800648e:	461a      	mov	r2, r3
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	4293      	cmp	r3, r2
 8006494:	d310      	bcc.n	80064b8 <LCD_print2H+0x13c>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	7b5b      	ldrb	r3, [r3, #13]
 800649a:	3332      	adds	r3, #50	@ 0x32
 800649c:	461a      	mov	r2, r3
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d809      	bhi.n	80064b8 <LCD_print2H+0x13c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80064a4:	f107 010c 	add.w	r1, r7, #12
 80064a8:	f04f 33ff 	mov.w	r3, #4294967295
 80064ac:	2202      	movs	r2, #2
 80064ae:	489c      	ldr	r0, [pc, #624]	@ (8006720 <LCD_print2H+0x3a4>)
 80064b0:	f012 f925 	bl	80186fe <HAL_SPI_Transmit>
 80064b4:	f000 bcc6 	b.w	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+11)) && ((wiersz>=(ADRES->Y0_SET+40) && wiersz<=(ADRES->Y0_SET+43))))
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	7b1b      	ldrb	r3, [r3, #12]
 80064bc:	3302      	adds	r3, #2
 80064be:	461a      	mov	r2, r3
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d31e      	bcc.n	8006504 <LCD_print2H+0x188>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	7b1b      	ldrb	r3, [r3, #12]
 80064ca:	330b      	adds	r3, #11
 80064cc:	461a      	mov	r2, r3
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d817      	bhi.n	8006504 <LCD_print2H+0x188>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	7b5b      	ldrb	r3, [r3, #13]
 80064d8:	3328      	adds	r3, #40	@ 0x28
 80064da:	461a      	mov	r2, r3
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	4293      	cmp	r3, r2
 80064e0:	d310      	bcc.n	8006504 <LCD_print2H+0x188>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	7b5b      	ldrb	r3, [r3, #13]
 80064e6:	332b      	adds	r3, #43	@ 0x2b
 80064e8:	461a      	mov	r2, r3
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d809      	bhi.n	8006504 <LCD_print2H+0x188>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80064f0:	f107 010c 	add.w	r1, r7, #12
 80064f4:	f04f 33ff 	mov.w	r3, #4294967295
 80064f8:	2202      	movs	r2, #2
 80064fa:	4889      	ldr	r0, [pc, #548]	@ (8006720 <LCD_print2H+0x3a4>)
 80064fc:	f012 f8ff 	bl	80186fe <HAL_SPI_Transmit>
 8006500:	f000 bca0 	b.w	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna>=(ADRES->X0_SET+25) && kolumna<=(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+11) && wiersz<=(ADRES->Y0_SET+18))))
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	7b1b      	ldrb	r3, [r3, #12]
 8006508:	3319      	adds	r3, #25
 800650a:	461a      	mov	r2, r3
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	4293      	cmp	r3, r2
 8006510:	d31e      	bcc.n	8006550 <LCD_print2H+0x1d4>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	7b1b      	ldrb	r3, [r3, #12]
 8006516:	331e      	adds	r3, #30
 8006518:	461a      	mov	r2, r3
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	4293      	cmp	r3, r2
 800651e:	d817      	bhi.n	8006550 <LCD_print2H+0x1d4>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	7b5b      	ldrb	r3, [r3, #13]
 8006524:	330b      	adds	r3, #11
 8006526:	461a      	mov	r2, r3
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	4293      	cmp	r3, r2
 800652c:	d310      	bcc.n	8006550 <LCD_print2H+0x1d4>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	7b5b      	ldrb	r3, [r3, #13]
 8006532:	3312      	adds	r3, #18
 8006534:	461a      	mov	r2, r3
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	4293      	cmp	r3, r2
 800653a:	d809      	bhi.n	8006550 <LCD_print2H+0x1d4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800653c:	f107 010c 	add.w	r1, r7, #12
 8006540:	f04f 33ff 	mov.w	r3, #4294967295
 8006544:	2202      	movs	r2, #2
 8006546:	4876      	ldr	r0, [pc, #472]	@ (8006720 <LCD_print2H+0x3a4>)
 8006548:	f012 f8d9 	bl	80186fe <HAL_SPI_Transmit>
 800654c:	f000 bc7a 	b.w	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna>=(ADRES->X0_SET+14) && kolumna<=(ADRES->X0_SET+20)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+5))))
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	7b1b      	ldrb	r3, [r3, #12]
 8006554:	330e      	adds	r3, #14
 8006556:	461a      	mov	r2, r3
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	4293      	cmp	r3, r2
 800655c:	d31d      	bcc.n	800659a <LCD_print2H+0x21e>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	7b1b      	ldrb	r3, [r3, #12]
 8006562:	3314      	adds	r3, #20
 8006564:	461a      	mov	r2, r3
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	4293      	cmp	r3, r2
 800656a:	d816      	bhi.n	800659a <LCD_print2H+0x21e>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	7b5b      	ldrb	r3, [r3, #13]
 8006570:	461a      	mov	r2, r3
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	4293      	cmp	r3, r2
 8006576:	d310      	bcc.n	800659a <LCD_print2H+0x21e>
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	7b5b      	ldrb	r3, [r3, #13]
 800657c:	3305      	adds	r3, #5
 800657e:	461a      	mov	r2, r3
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	4293      	cmp	r3, r2
 8006584:	d809      	bhi.n	800659a <LCD_print2H+0x21e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006586:	f107 010c 	add.w	r1, r7, #12
 800658a:	f04f 33ff 	mov.w	r3, #4294967295
 800658e:	2202      	movs	r2, #2
 8006590:	4863      	ldr	r0, [pc, #396]	@ (8006720 <LCD_print2H+0x3a4>)
 8006592:	f012 f8b4 	bl	80186fe <HAL_SPI_Transmit>
 8006596:	f000 bc55 	b.w	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+13) && wiersz<=(ADRES->Y0_SET+15))))
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	7b1b      	ldrb	r3, [r3, #12]
 800659e:	3302      	adds	r3, #2
 80065a0:	461a      	mov	r2, r3
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d31e      	bcc.n	80065e6 <LCD_print2H+0x26a>
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	7b1b      	ldrb	r3, [r3, #12]
 80065ac:	3306      	adds	r3, #6
 80065ae:	461a      	mov	r2, r3
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d817      	bhi.n	80065e6 <LCD_print2H+0x26a>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	7b5b      	ldrb	r3, [r3, #13]
 80065ba:	330d      	adds	r3, #13
 80065bc:	461a      	mov	r2, r3
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d310      	bcc.n	80065e6 <LCD_print2H+0x26a>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	7b5b      	ldrb	r3, [r3, #13]
 80065c8:	330f      	adds	r3, #15
 80065ca:	461a      	mov	r2, r3
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d809      	bhi.n	80065e6 <LCD_print2H+0x26a>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80065d2:	f107 010c 	add.w	r1, r7, #12
 80065d6:	f04f 33ff 	mov.w	r3, #4294967295
 80065da:	2202      	movs	r2, #2
 80065dc:	4850      	ldr	r0, [pc, #320]	@ (8006720 <LCD_print2H+0x3a4>)
 80065de:	f012 f88e 	bl	80186fe <HAL_SPI_Transmit>
 80065e2:	f000 bc2f 	b.w	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+10) && wiersz<=(ADRES->Y0_SET+12))))
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	7b1b      	ldrb	r3, [r3, #12]
 80065ea:	3303      	adds	r3, #3
 80065ec:	461a      	mov	r2, r3
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d117      	bne.n	8006624 <LCD_print2H+0x2a8>
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	7b5b      	ldrb	r3, [r3, #13]
 80065f8:	330a      	adds	r3, #10
 80065fa:	461a      	mov	r2, r3
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	4293      	cmp	r3, r2
 8006600:	d310      	bcc.n	8006624 <LCD_print2H+0x2a8>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	7b5b      	ldrb	r3, [r3, #13]
 8006606:	330c      	adds	r3, #12
 8006608:	461a      	mov	r2, r3
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	4293      	cmp	r3, r2
 800660e:	d809      	bhi.n	8006624 <LCD_print2H+0x2a8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006610:	f107 010c 	add.w	r1, r7, #12
 8006614:	f04f 33ff 	mov.w	r3, #4294967295
 8006618:	2202      	movs	r2, #2
 800661a:	4841      	ldr	r0, [pc, #260]	@ (8006720 <LCD_print2H+0x3a4>)
 800661c:	f012 f86f 	bl	80186fe <HAL_SPI_Transmit>
 8006620:	f000 bc10 	b.w	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+4)) && ((wiersz>=(ADRES->Y0_SET+9) && wiersz<=(ADRES->Y0_SET+12)) || wiersz==(ADRES->Y0_SET+39)))
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	7b1b      	ldrb	r3, [r3, #12]
 8006628:	3304      	adds	r3, #4
 800662a:	461a      	mov	r2, r3
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	4293      	cmp	r3, r2
 8006630:	d11d      	bne.n	800666e <LCD_print2H+0x2f2>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	7b5b      	ldrb	r3, [r3, #13]
 8006636:	3309      	adds	r3, #9
 8006638:	461a      	mov	r2, r3
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	4293      	cmp	r3, r2
 800663e:	d306      	bcc.n	800664e <LCD_print2H+0x2d2>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	7b5b      	ldrb	r3, [r3, #13]
 8006644:	330c      	adds	r3, #12
 8006646:	461a      	mov	r2, r3
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	4293      	cmp	r3, r2
 800664c:	d906      	bls.n	800665c <LCD_print2H+0x2e0>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	7b5b      	ldrb	r3, [r3, #13]
 8006652:	3327      	adds	r3, #39	@ 0x27
 8006654:	461a      	mov	r2, r3
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	4293      	cmp	r3, r2
 800665a:	d108      	bne.n	800666e <LCD_print2H+0x2f2>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800665c:	f107 010c 	add.w	r1, r7, #12
 8006660:	f04f 33ff 	mov.w	r3, #4294967295
 8006664:	2202      	movs	r2, #2
 8006666:	482e      	ldr	r0, [pc, #184]	@ (8006720 <LCD_print2H+0x3a4>)
 8006668:	f012 f849 	bl	80186fe <HAL_SPI_Transmit>
 800666c:	e3ea      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+5)) && ((wiersz>=(ADRES->Y0_SET+8) && wiersz<=(ADRES->Y0_SET+12)) || (wiersz>=(ADRES->Y0_SET+38) && wiersz<=(ADRES->Y0_SET+39))))
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	7b1b      	ldrb	r3, [r3, #12]
 8006672:	3305      	adds	r3, #5
 8006674:	461a      	mov	r2, r3
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	4293      	cmp	r3, r2
 800667a:	d124      	bne.n	80066c6 <LCD_print2H+0x34a>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	7b5b      	ldrb	r3, [r3, #13]
 8006680:	3308      	adds	r3, #8
 8006682:	461a      	mov	r2, r3
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	4293      	cmp	r3, r2
 8006688:	d306      	bcc.n	8006698 <LCD_print2H+0x31c>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	7b5b      	ldrb	r3, [r3, #13]
 800668e:	330c      	adds	r3, #12
 8006690:	461a      	mov	r2, r3
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	4293      	cmp	r3, r2
 8006696:	d90d      	bls.n	80066b4 <LCD_print2H+0x338>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	7b5b      	ldrb	r3, [r3, #13]
 800669c:	3326      	adds	r3, #38	@ 0x26
 800669e:	461a      	mov	r2, r3
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d30f      	bcc.n	80066c6 <LCD_print2H+0x34a>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	7b5b      	ldrb	r3, [r3, #13]
 80066aa:	3327      	adds	r3, #39	@ 0x27
 80066ac:	461a      	mov	r2, r3
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d808      	bhi.n	80066c6 <LCD_print2H+0x34a>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80066b4:	f107 010c 	add.w	r1, r7, #12
 80066b8:	f04f 33ff 	mov.w	r3, #4294967295
 80066bc:	2202      	movs	r2, #2
 80066be:	4818      	ldr	r0, [pc, #96]	@ (8006720 <LCD_print2H+0x3a4>)
 80066c0:	f012 f81d 	bl	80186fe <HAL_SPI_Transmit>
 80066c4:	e3be      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+7) && wiersz<=(ADRES->Y0_SET+12)) || (wiersz>=(ADRES->Y0_SET+37) && wiersz<=(ADRES->Y0_SET+39))))
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	7b1b      	ldrb	r3, [r3, #12]
 80066ca:	3306      	adds	r3, #6
 80066cc:	461a      	mov	r2, r3
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d127      	bne.n	8006724 <LCD_print2H+0x3a8>
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	7b5b      	ldrb	r3, [r3, #13]
 80066d8:	3307      	adds	r3, #7
 80066da:	461a      	mov	r2, r3
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4293      	cmp	r3, r2
 80066e0:	d306      	bcc.n	80066f0 <LCD_print2H+0x374>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	7b5b      	ldrb	r3, [r3, #13]
 80066e6:	330c      	adds	r3, #12
 80066e8:	461a      	mov	r2, r3
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d90d      	bls.n	800670c <LCD_print2H+0x390>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	7b5b      	ldrb	r3, [r3, #13]
 80066f4:	3325      	adds	r3, #37	@ 0x25
 80066f6:	461a      	mov	r2, r3
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d312      	bcc.n	8006724 <LCD_print2H+0x3a8>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	7b5b      	ldrb	r3, [r3, #13]
 8006702:	3327      	adds	r3, #39	@ 0x27
 8006704:	461a      	mov	r2, r3
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	4293      	cmp	r3, r2
 800670a:	d80b      	bhi.n	8006724 <LCD_print2H+0x3a8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800670c:	f107 010c 	add.w	r1, r7, #12
 8006710:	f04f 33ff 	mov.w	r3, #4294967295
 8006714:	2202      	movs	r2, #2
 8006716:	4802      	ldr	r0, [pc, #8]	@ (8006720 <LCD_print2H+0x3a4>)
 8006718:	f011 fff1 	bl	80186fe <HAL_SPI_Transmit>
 800671c:	e392      	b.n	8006e44 <LCD_print2H+0xac8>
 800671e:	bf00      	nop
 8006720:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+7)) && ((wiersz>=(ADRES->Y0_SET+6) && wiersz<=(ADRES->Y0_SET+12)) || (wiersz>=(ADRES->Y0_SET+36) && wiersz<=(ADRES->Y0_SET+39))))
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	7b1b      	ldrb	r3, [r3, #12]
 8006728:	3307      	adds	r3, #7
 800672a:	461a      	mov	r2, r3
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	4293      	cmp	r3, r2
 8006730:	d124      	bne.n	800677c <LCD_print2H+0x400>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	7b5b      	ldrb	r3, [r3, #13]
 8006736:	3306      	adds	r3, #6
 8006738:	461a      	mov	r2, r3
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	4293      	cmp	r3, r2
 800673e:	d306      	bcc.n	800674e <LCD_print2H+0x3d2>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	7b5b      	ldrb	r3, [r3, #13]
 8006744:	330c      	adds	r3, #12
 8006746:	461a      	mov	r2, r3
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	4293      	cmp	r3, r2
 800674c:	d90d      	bls.n	800676a <LCD_print2H+0x3ee>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	7b5b      	ldrb	r3, [r3, #13]
 8006752:	3324      	adds	r3, #36	@ 0x24
 8006754:	461a      	mov	r2, r3
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4293      	cmp	r3, r2
 800675a:	d30f      	bcc.n	800677c <LCD_print2H+0x400>
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	7b5b      	ldrb	r3, [r3, #13]
 8006760:	3327      	adds	r3, #39	@ 0x27
 8006762:	461a      	mov	r2, r3
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4293      	cmp	r3, r2
 8006768:	d808      	bhi.n	800677c <LCD_print2H+0x400>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800676a:	f107 010c 	add.w	r1, r7, #12
 800676e:	f04f 33ff 	mov.w	r3, #4294967295
 8006772:	2202      	movs	r2, #2
 8006774:	489a      	ldr	r0, [pc, #616]	@ (80069e0 <LCD_print2H+0x664>)
 8006776:	f011 ffc2 	bl	80186fe <HAL_SPI_Transmit>
 800677a:	e363      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+8)) && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+11)) || (wiersz>=(ADRES->Y0_SET+35) && wiersz<=(ADRES->Y0_SET+39))))
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	7b1b      	ldrb	r3, [r3, #12]
 8006780:	3308      	adds	r3, #8
 8006782:	461a      	mov	r2, r3
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	4293      	cmp	r3, r2
 8006788:	d124      	bne.n	80067d4 <LCD_print2H+0x458>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	7b5b      	ldrb	r3, [r3, #13]
 800678e:	3305      	adds	r3, #5
 8006790:	461a      	mov	r2, r3
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	4293      	cmp	r3, r2
 8006796:	d306      	bcc.n	80067a6 <LCD_print2H+0x42a>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	7b5b      	ldrb	r3, [r3, #13]
 800679c:	330b      	adds	r3, #11
 800679e:	461a      	mov	r2, r3
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d90d      	bls.n	80067c2 <LCD_print2H+0x446>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	7b5b      	ldrb	r3, [r3, #13]
 80067aa:	3323      	adds	r3, #35	@ 0x23
 80067ac:	461a      	mov	r2, r3
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d30f      	bcc.n	80067d4 <LCD_print2H+0x458>
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	7b5b      	ldrb	r3, [r3, #13]
 80067b8:	3327      	adds	r3, #39	@ 0x27
 80067ba:	461a      	mov	r2, r3
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	4293      	cmp	r3, r2
 80067c0:	d808      	bhi.n	80067d4 <LCD_print2H+0x458>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80067c2:	f107 010c 	add.w	r1, r7, #12
 80067c6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ca:	2202      	movs	r2, #2
 80067cc:	4884      	ldr	r0, [pc, #528]	@ (80069e0 <LCD_print2H+0x664>)
 80067ce:	f011 ff96 	bl	80186fe <HAL_SPI_Transmit>
 80067d2:	e337      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+9)) && ((wiersz>=(ADRES->Y0_SET+4) && wiersz<=(ADRES->Y0_SET+10)) || (wiersz>=(ADRES->Y0_SET+34) && wiersz<=(ADRES->Y0_SET+39))))
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	7b1b      	ldrb	r3, [r3, #12]
 80067d8:	3309      	adds	r3, #9
 80067da:	461a      	mov	r2, r3
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	4293      	cmp	r3, r2
 80067e0:	d124      	bne.n	800682c <LCD_print2H+0x4b0>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	7b5b      	ldrb	r3, [r3, #13]
 80067e6:	3304      	adds	r3, #4
 80067e8:	461a      	mov	r2, r3
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d306      	bcc.n	80067fe <LCD_print2H+0x482>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	7b5b      	ldrb	r3, [r3, #13]
 80067f4:	330a      	adds	r3, #10
 80067f6:	461a      	mov	r2, r3
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d90d      	bls.n	800681a <LCD_print2H+0x49e>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	7b5b      	ldrb	r3, [r3, #13]
 8006802:	3322      	adds	r3, #34	@ 0x22
 8006804:	461a      	mov	r2, r3
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	4293      	cmp	r3, r2
 800680a:	d30f      	bcc.n	800682c <LCD_print2H+0x4b0>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	7b5b      	ldrb	r3, [r3, #13]
 8006810:	3327      	adds	r3, #39	@ 0x27
 8006812:	461a      	mov	r2, r3
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	4293      	cmp	r3, r2
 8006818:	d808      	bhi.n	800682c <LCD_print2H+0x4b0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800681a:	f107 010c 	add.w	r1, r7, #12
 800681e:	f04f 33ff 	mov.w	r3, #4294967295
 8006822:	2202      	movs	r2, #2
 8006824:	486e      	ldr	r0, [pc, #440]	@ (80069e0 <LCD_print2H+0x664>)
 8006826:	f011 ff6a 	bl	80186fe <HAL_SPI_Transmit>
 800682a:	e30b      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+10)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+9)) || (wiersz>=(ADRES->Y0_SET+33) && wiersz<=(ADRES->Y0_SET+39))))
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	7b1b      	ldrb	r3, [r3, #12]
 8006830:	330a      	adds	r3, #10
 8006832:	461a      	mov	r2, r3
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	4293      	cmp	r3, r2
 8006838:	d124      	bne.n	8006884 <LCD_print2H+0x508>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	7b5b      	ldrb	r3, [r3, #13]
 800683e:	3303      	adds	r3, #3
 8006840:	461a      	mov	r2, r3
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	4293      	cmp	r3, r2
 8006846:	d306      	bcc.n	8006856 <LCD_print2H+0x4da>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	7b5b      	ldrb	r3, [r3, #13]
 800684c:	3309      	adds	r3, #9
 800684e:	461a      	mov	r2, r3
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	4293      	cmp	r3, r2
 8006854:	d90d      	bls.n	8006872 <LCD_print2H+0x4f6>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	7b5b      	ldrb	r3, [r3, #13]
 800685a:	3321      	adds	r3, #33	@ 0x21
 800685c:	461a      	mov	r2, r3
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	4293      	cmp	r3, r2
 8006862:	d30f      	bcc.n	8006884 <LCD_print2H+0x508>
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	7b5b      	ldrb	r3, [r3, #13]
 8006868:	3327      	adds	r3, #39	@ 0x27
 800686a:	461a      	mov	r2, r3
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	4293      	cmp	r3, r2
 8006870:	d808      	bhi.n	8006884 <LCD_print2H+0x508>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006872:	f107 010c 	add.w	r1, r7, #12
 8006876:	f04f 33ff 	mov.w	r3, #4294967295
 800687a:	2202      	movs	r2, #2
 800687c:	4858      	ldr	r0, [pc, #352]	@ (80069e0 <LCD_print2H+0x664>)
 800687e:	f011 ff3e 	bl	80186fe <HAL_SPI_Transmit>
 8006882:	e2df      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+11)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+8)) || (wiersz>=(ADRES->Y0_SET+32) && wiersz<=(ADRES->Y0_SET+39))))
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	7b1b      	ldrb	r3, [r3, #12]
 8006888:	330b      	adds	r3, #11
 800688a:	461a      	mov	r2, r3
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	4293      	cmp	r3, r2
 8006890:	d124      	bne.n	80068dc <LCD_print2H+0x560>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	7b5b      	ldrb	r3, [r3, #13]
 8006896:	3302      	adds	r3, #2
 8006898:	461a      	mov	r2, r3
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	4293      	cmp	r3, r2
 800689e:	d306      	bcc.n	80068ae <LCD_print2H+0x532>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	7b5b      	ldrb	r3, [r3, #13]
 80068a4:	3308      	adds	r3, #8
 80068a6:	461a      	mov	r2, r3
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d90d      	bls.n	80068ca <LCD_print2H+0x54e>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	7b5b      	ldrb	r3, [r3, #13]
 80068b2:	3320      	adds	r3, #32
 80068b4:	461a      	mov	r2, r3
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d30f      	bcc.n	80068dc <LCD_print2H+0x560>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	7b5b      	ldrb	r3, [r3, #13]
 80068c0:	3327      	adds	r3, #39	@ 0x27
 80068c2:	461a      	mov	r2, r3
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d808      	bhi.n	80068dc <LCD_print2H+0x560>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80068ca:	f107 010c 	add.w	r1, r7, #12
 80068ce:	f04f 33ff 	mov.w	r3, #4294967295
 80068d2:	2202      	movs	r2, #2
 80068d4:	4842      	ldr	r0, [pc, #264]	@ (80069e0 <LCD_print2H+0x664>)
 80068d6:	f011 ff12 	bl	80186fe <HAL_SPI_Transmit>
 80068da:	e2b3      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+12)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+7)) || (wiersz>=(ADRES->Y0_SET+31) && wiersz<=(ADRES->Y0_SET+39))))
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	7b1b      	ldrb	r3, [r3, #12]
 80068e0:	330c      	adds	r3, #12
 80068e2:	461a      	mov	r2, r3
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d124      	bne.n	8006934 <LCD_print2H+0x5b8>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	7b5b      	ldrb	r3, [r3, #13]
 80068ee:	3301      	adds	r3, #1
 80068f0:	461a      	mov	r2, r3
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d306      	bcc.n	8006906 <LCD_print2H+0x58a>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	7b5b      	ldrb	r3, [r3, #13]
 80068fc:	3307      	adds	r3, #7
 80068fe:	461a      	mov	r2, r3
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	4293      	cmp	r3, r2
 8006904:	d90d      	bls.n	8006922 <LCD_print2H+0x5a6>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	7b5b      	ldrb	r3, [r3, #13]
 800690a:	331f      	adds	r3, #31
 800690c:	461a      	mov	r2, r3
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	4293      	cmp	r3, r2
 8006912:	d30f      	bcc.n	8006934 <LCD_print2H+0x5b8>
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	7b5b      	ldrb	r3, [r3, #13]
 8006918:	3327      	adds	r3, #39	@ 0x27
 800691a:	461a      	mov	r2, r3
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	4293      	cmp	r3, r2
 8006920:	d808      	bhi.n	8006934 <LCD_print2H+0x5b8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006922:	f107 010c 	add.w	r1, r7, #12
 8006926:	f04f 33ff 	mov.w	r3, #4294967295
 800692a:	2202      	movs	r2, #2
 800692c:	482c      	ldr	r0, [pc, #176]	@ (80069e0 <LCD_print2H+0x664>)
 800692e:	f011 fee6 	bl	80186fe <HAL_SPI_Transmit>
 8006932:	e287      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+13)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+6)) || (wiersz>=(ADRES->Y0_SET+30) && wiersz<=(ADRES->Y0_SET+38))))
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	7b1b      	ldrb	r3, [r3, #12]
 8006938:	330d      	adds	r3, #13
 800693a:	461a      	mov	r2, r3
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	4293      	cmp	r3, r2
 8006940:	d123      	bne.n	800698a <LCD_print2H+0x60e>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	7b5b      	ldrb	r3, [r3, #13]
 8006946:	461a      	mov	r2, r3
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	4293      	cmp	r3, r2
 800694c:	d306      	bcc.n	800695c <LCD_print2H+0x5e0>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	7b5b      	ldrb	r3, [r3, #13]
 8006952:	3306      	adds	r3, #6
 8006954:	461a      	mov	r2, r3
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	4293      	cmp	r3, r2
 800695a:	d90d      	bls.n	8006978 <LCD_print2H+0x5fc>
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	7b5b      	ldrb	r3, [r3, #13]
 8006960:	331e      	adds	r3, #30
 8006962:	461a      	mov	r2, r3
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	4293      	cmp	r3, r2
 8006968:	d30f      	bcc.n	800698a <LCD_print2H+0x60e>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	7b5b      	ldrb	r3, [r3, #13]
 800696e:	3326      	adds	r3, #38	@ 0x26
 8006970:	461a      	mov	r2, r3
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	4293      	cmp	r3, r2
 8006976:	d808      	bhi.n	800698a <LCD_print2H+0x60e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006978:	f107 010c 	add.w	r1, r7, #12
 800697c:	f04f 33ff 	mov.w	r3, #4294967295
 8006980:	2202      	movs	r2, #2
 8006982:	4817      	ldr	r0, [pc, #92]	@ (80069e0 <LCD_print2H+0x664>)
 8006984:	f011 febb 	bl	80186fe <HAL_SPI_Transmit>
 8006988:	e25c      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+21)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+6)) || (wiersz>=(ADRES->Y0_SET+22) && wiersz<=(ADRES->Y0_SET+30))))
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	7b1b      	ldrb	r3, [r3, #12]
 800698e:	3315      	adds	r3, #21
 8006990:	461a      	mov	r2, r3
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	4293      	cmp	r3, r2
 8006996:	d125      	bne.n	80069e4 <LCD_print2H+0x668>
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	7b5b      	ldrb	r3, [r3, #13]
 800699c:	461a      	mov	r2, r3
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d306      	bcc.n	80069b2 <LCD_print2H+0x636>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	7b5b      	ldrb	r3, [r3, #13]
 80069a8:	3306      	adds	r3, #6
 80069aa:	461a      	mov	r2, r3
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d90d      	bls.n	80069ce <LCD_print2H+0x652>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	7b5b      	ldrb	r3, [r3, #13]
 80069b6:	3316      	adds	r3, #22
 80069b8:	461a      	mov	r2, r3
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	4293      	cmp	r3, r2
 80069be:	d311      	bcc.n	80069e4 <LCD_print2H+0x668>
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	7b5b      	ldrb	r3, [r3, #13]
 80069c4:	331e      	adds	r3, #30
 80069c6:	461a      	mov	r2, r3
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d80a      	bhi.n	80069e4 <LCD_print2H+0x668>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80069ce:	f107 010c 	add.w	r1, r7, #12
 80069d2:	f04f 33ff 	mov.w	r3, #4294967295
 80069d6:	2202      	movs	r2, #2
 80069d8:	4801      	ldr	r0, [pc, #4]	@ (80069e0 <LCD_print2H+0x664>)
 80069da:	f011 fe90 	bl	80186fe <HAL_SPI_Transmit>
 80069de:	e231      	b.n	8006e44 <LCD_print2H+0xac8>
 80069e0:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+22)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+7)) || (wiersz>=(ADRES->Y0_SET+21) && wiersz<=(ADRES->Y0_SET+29))))
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	7b1b      	ldrb	r3, [r3, #12]
 80069e8:	3316      	adds	r3, #22
 80069ea:	461a      	mov	r2, r3
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d123      	bne.n	8006a3a <LCD_print2H+0x6be>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	7b5b      	ldrb	r3, [r3, #13]
 80069f6:	461a      	mov	r2, r3
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d306      	bcc.n	8006a0c <LCD_print2H+0x690>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	7b5b      	ldrb	r3, [r3, #13]
 8006a02:	3307      	adds	r3, #7
 8006a04:	461a      	mov	r2, r3
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d90d      	bls.n	8006a28 <LCD_print2H+0x6ac>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	7b5b      	ldrb	r3, [r3, #13]
 8006a10:	3315      	adds	r3, #21
 8006a12:	461a      	mov	r2, r3
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d30f      	bcc.n	8006a3a <LCD_print2H+0x6be>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	7b5b      	ldrb	r3, [r3, #13]
 8006a1e:	331d      	adds	r3, #29
 8006a20:	461a      	mov	r2, r3
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d808      	bhi.n	8006a3a <LCD_print2H+0x6be>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006a28:	f107 010c 	add.w	r1, r7, #12
 8006a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a30:	2202      	movs	r2, #2
 8006a32:	4896      	ldr	r0, [pc, #600]	@ (8006c8c <LCD_print2H+0x910>)
 8006a34:	f011 fe63 	bl	80186fe <HAL_SPI_Transmit>
 8006a38:	e204      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+8)) || (wiersz>=(ADRES->Y0_SET+20) && wiersz<=(ADRES->Y0_SET+28))))
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	7b1b      	ldrb	r3, [r3, #12]
 8006a3e:	3317      	adds	r3, #23
 8006a40:	461a      	mov	r2, r3
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d124      	bne.n	8006a92 <LCD_print2H+0x716>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	7b5b      	ldrb	r3, [r3, #13]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	461a      	mov	r2, r3
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d306      	bcc.n	8006a64 <LCD_print2H+0x6e8>
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	7b5b      	ldrb	r3, [r3, #13]
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d90d      	bls.n	8006a80 <LCD_print2H+0x704>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	7b5b      	ldrb	r3, [r3, #13]
 8006a68:	3314      	adds	r3, #20
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d30f      	bcc.n	8006a92 <LCD_print2H+0x716>
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	7b5b      	ldrb	r3, [r3, #13]
 8006a76:	331c      	adds	r3, #28
 8006a78:	461a      	mov	r2, r3
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d808      	bhi.n	8006a92 <LCD_print2H+0x716>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006a80:	f107 010c 	add.w	r1, r7, #12
 8006a84:	f04f 33ff 	mov.w	r3, #4294967295
 8006a88:	2202      	movs	r2, #2
 8006a8a:	4880      	ldr	r0, [pc, #512]	@ (8006c8c <LCD_print2H+0x910>)
 8006a8c:	f011 fe37 	bl	80186fe <HAL_SPI_Transmit>
 8006a90:	e1d8      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+24)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+9)) || (wiersz>=(ADRES->Y0_SET+19) && wiersz<=(ADRES->Y0_SET+27))))
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	7b1b      	ldrb	r3, [r3, #12]
 8006a96:	3318      	adds	r3, #24
 8006a98:	461a      	mov	r2, r3
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d124      	bne.n	8006aea <LCD_print2H+0x76e>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	7b5b      	ldrb	r3, [r3, #13]
 8006aa4:	3302      	adds	r3, #2
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d306      	bcc.n	8006abc <LCD_print2H+0x740>
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	7b5b      	ldrb	r3, [r3, #13]
 8006ab2:	3309      	adds	r3, #9
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d90d      	bls.n	8006ad8 <LCD_print2H+0x75c>
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	7b5b      	ldrb	r3, [r3, #13]
 8006ac0:	3313      	adds	r3, #19
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d30f      	bcc.n	8006aea <LCD_print2H+0x76e>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	7b5b      	ldrb	r3, [r3, #13]
 8006ace:	331b      	adds	r3, #27
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d808      	bhi.n	8006aea <LCD_print2H+0x76e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006ad8:	f107 010c 	add.w	r1, r7, #12
 8006adc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	486a      	ldr	r0, [pc, #424]	@ (8006c8c <LCD_print2H+0x910>)
 8006ae4:	f011 fe0b 	bl	80186fe <HAL_SPI_Transmit>
 8006ae8:	e1ac      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+25)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+10)) || (wiersz>=(ADRES->Y0_SET+18) && wiersz<=(ADRES->Y0_SET+26))))
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	7b1b      	ldrb	r3, [r3, #12]
 8006aee:	3319      	adds	r3, #25
 8006af0:	461a      	mov	r2, r3
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d124      	bne.n	8006b42 <LCD_print2H+0x7c6>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	7b5b      	ldrb	r3, [r3, #13]
 8006afc:	3303      	adds	r3, #3
 8006afe:	461a      	mov	r2, r3
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d306      	bcc.n	8006b14 <LCD_print2H+0x798>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	7b5b      	ldrb	r3, [r3, #13]
 8006b0a:	330a      	adds	r3, #10
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d90d      	bls.n	8006b30 <LCD_print2H+0x7b4>
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	7b5b      	ldrb	r3, [r3, #13]
 8006b18:	3312      	adds	r3, #18
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d30f      	bcc.n	8006b42 <LCD_print2H+0x7c6>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	7b5b      	ldrb	r3, [r3, #13]
 8006b26:	331a      	adds	r3, #26
 8006b28:	461a      	mov	r2, r3
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d808      	bhi.n	8006b42 <LCD_print2H+0x7c6>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006b30:	f107 010c 	add.w	r1, r7, #12
 8006b34:	f04f 33ff 	mov.w	r3, #4294967295
 8006b38:	2202      	movs	r2, #2
 8006b3a:	4854      	ldr	r0, [pc, #336]	@ (8006c8c <LCD_print2H+0x910>)
 8006b3c:	f011 fddf 	bl	80186fe <HAL_SPI_Transmit>
 8006b40:	e180      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+26)) && ((wiersz>=(ADRES->Y0_SET+4) && wiersz<=(ADRES->Y0_SET+11)) || (wiersz>=(ADRES->Y0_SET+17) && wiersz<=(ADRES->Y0_SET+25))))
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	7b1b      	ldrb	r3, [r3, #12]
 8006b46:	331a      	adds	r3, #26
 8006b48:	461a      	mov	r2, r3
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d124      	bne.n	8006b9a <LCD_print2H+0x81e>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	7b5b      	ldrb	r3, [r3, #13]
 8006b54:	3304      	adds	r3, #4
 8006b56:	461a      	mov	r2, r3
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d306      	bcc.n	8006b6c <LCD_print2H+0x7f0>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	7b5b      	ldrb	r3, [r3, #13]
 8006b62:	330b      	adds	r3, #11
 8006b64:	461a      	mov	r2, r3
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d90d      	bls.n	8006b88 <LCD_print2H+0x80c>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	7b5b      	ldrb	r3, [r3, #13]
 8006b70:	3311      	adds	r3, #17
 8006b72:	461a      	mov	r2, r3
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d30f      	bcc.n	8006b9a <LCD_print2H+0x81e>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	7b5b      	ldrb	r3, [r3, #13]
 8006b7e:	3319      	adds	r3, #25
 8006b80:	461a      	mov	r2, r3
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d808      	bhi.n	8006b9a <LCD_print2H+0x81e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006b88:	f107 010c 	add.w	r1, r7, #12
 8006b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b90:	2202      	movs	r2, #2
 8006b92:	483e      	ldr	r0, [pc, #248]	@ (8006c8c <LCD_print2H+0x910>)
 8006b94:	f011 fdb3 	bl	80186fe <HAL_SPI_Transmit>
 8006b98:	e154      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+27)) && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+24))))
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	7b1b      	ldrb	r3, [r3, #12]
 8006b9e:	331b      	adds	r3, #27
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d116      	bne.n	8006bd6 <LCD_print2H+0x85a>
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	7b5b      	ldrb	r3, [r3, #13]
 8006bac:	3305      	adds	r3, #5
 8006bae:	461a      	mov	r2, r3
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d30f      	bcc.n	8006bd6 <LCD_print2H+0x85a>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	7b5b      	ldrb	r3, [r3, #13]
 8006bba:	3318      	adds	r3, #24
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d808      	bhi.n	8006bd6 <LCD_print2H+0x85a>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006bc4:	f107 010c 	add.w	r1, r7, #12
 8006bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bcc:	2202      	movs	r2, #2
 8006bce:	482f      	ldr	r0, [pc, #188]	@ (8006c8c <LCD_print2H+0x910>)
 8006bd0:	f011 fd95 	bl	80186fe <HAL_SPI_Transmit>
 8006bd4:	e136      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+6) && wiersz<=(ADRES->Y0_SET+23))))
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	7b1b      	ldrb	r3, [r3, #12]
 8006bda:	331c      	adds	r3, #28
 8006bdc:	461a      	mov	r2, r3
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d116      	bne.n	8006c12 <LCD_print2H+0x896>
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	7b5b      	ldrb	r3, [r3, #13]
 8006be8:	3306      	adds	r3, #6
 8006bea:	461a      	mov	r2, r3
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d30f      	bcc.n	8006c12 <LCD_print2H+0x896>
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	7b5b      	ldrb	r3, [r3, #13]
 8006bf6:	3317      	adds	r3, #23
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d808      	bhi.n	8006c12 <LCD_print2H+0x896>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006c00:	f107 010c 	add.w	r1, r7, #12
 8006c04:	f04f 33ff 	mov.w	r3, #4294967295
 8006c08:	2202      	movs	r2, #2
 8006c0a:	4820      	ldr	r0, [pc, #128]	@ (8006c8c <LCD_print2H+0x910>)
 8006c0c:	f011 fd77 	bl	80186fe <HAL_SPI_Transmit>
 8006c10:	e118      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+6) && wiersz<=(ADRES->Y0_SET+22))))
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	7b1b      	ldrb	r3, [r3, #12]
 8006c16:	331d      	adds	r3, #29
 8006c18:	461a      	mov	r2, r3
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d116      	bne.n	8006c4e <LCD_print2H+0x8d2>
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	7b5b      	ldrb	r3, [r3, #13]
 8006c24:	3306      	adds	r3, #6
 8006c26:	461a      	mov	r2, r3
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d30f      	bcc.n	8006c4e <LCD_print2H+0x8d2>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	7b5b      	ldrb	r3, [r3, #13]
 8006c32:	3316      	adds	r3, #22
 8006c34:	461a      	mov	r2, r3
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d808      	bhi.n	8006c4e <LCD_print2H+0x8d2>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006c3c:	f107 010c 	add.w	r1, r7, #12
 8006c40:	f04f 33ff 	mov.w	r3, #4294967295
 8006c44:	2202      	movs	r2, #2
 8006c46:	4811      	ldr	r0, [pc, #68]	@ (8006c8c <LCD_print2H+0x910>)
 8006c48:	f011 fd59 	bl	80186fe <HAL_SPI_Transmit>
 8006c4c:	e0fa      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+7) && wiersz<=(ADRES->Y0_SET+21))))
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	7b1b      	ldrb	r3, [r3, #12]
 8006c52:	331e      	adds	r3, #30
 8006c54:	461a      	mov	r2, r3
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d119      	bne.n	8006c90 <LCD_print2H+0x914>
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	7b5b      	ldrb	r3, [r3, #13]
 8006c60:	3307      	adds	r3, #7
 8006c62:	461a      	mov	r2, r3
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d312      	bcc.n	8006c90 <LCD_print2H+0x914>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	7b5b      	ldrb	r3, [r3, #13]
 8006c6e:	3315      	adds	r3, #21
 8006c70:	461a      	mov	r2, r3
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d80b      	bhi.n	8006c90 <LCD_print2H+0x914>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006c78:	f107 010c 	add.w	r1, r7, #12
 8006c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c80:	2202      	movs	r2, #2
 8006c82:	4802      	ldr	r0, [pc, #8]	@ (8006c8c <LCD_print2H+0x910>)
 8006c84:	f011 fd3b 	bl	80186fe <HAL_SPI_Transmit>
 8006c88:	e0dc      	b.n	8006e44 <LCD_print2H+0xac8>
 8006c8a:	bf00      	nop
 8006c8c:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+14)) && ((wiersz>=(ADRES->Y0_SET+29) && wiersz<=(ADRES->Y0_SET+37))))
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	7b1b      	ldrb	r3, [r3, #12]
 8006c94:	330e      	adds	r3, #14
 8006c96:	461a      	mov	r2, r3
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d116      	bne.n	8006ccc <LCD_print2H+0x950>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	7b5b      	ldrb	r3, [r3, #13]
 8006ca2:	331d      	adds	r3, #29
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d30f      	bcc.n	8006ccc <LCD_print2H+0x950>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	7b5b      	ldrb	r3, [r3, #13]
 8006cb0:	3325      	adds	r3, #37	@ 0x25
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d808      	bhi.n	8006ccc <LCD_print2H+0x950>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006cba:	f107 010c 	add.w	r1, r7, #12
 8006cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	486d      	ldr	r0, [pc, #436]	@ (8006e7c <LCD_print2H+0xb00>)
 8006cc6:	f011 fd1a 	bl	80186fe <HAL_SPI_Transmit>
 8006cca:	e0bb      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+15)) && ((wiersz>=(ADRES->Y0_SET+28) && wiersz<=(ADRES->Y0_SET+36))))
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	7b1b      	ldrb	r3, [r3, #12]
 8006cd0:	330f      	adds	r3, #15
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d116      	bne.n	8006d08 <LCD_print2H+0x98c>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	7b5b      	ldrb	r3, [r3, #13]
 8006cde:	331c      	adds	r3, #28
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d30f      	bcc.n	8006d08 <LCD_print2H+0x98c>
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	7b5b      	ldrb	r3, [r3, #13]
 8006cec:	3324      	adds	r3, #36	@ 0x24
 8006cee:	461a      	mov	r2, r3
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d808      	bhi.n	8006d08 <LCD_print2H+0x98c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006cf6:	f107 010c 	add.w	r1, r7, #12
 8006cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfe:	2202      	movs	r2, #2
 8006d00:	485e      	ldr	r0, [pc, #376]	@ (8006e7c <LCD_print2H+0xb00>)
 8006d02:	f011 fcfc 	bl	80186fe <HAL_SPI_Transmit>
 8006d06:	e09d      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+16)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+35))))
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	7b1b      	ldrb	r3, [r3, #12]
 8006d0c:	3310      	adds	r3, #16
 8006d0e:	461a      	mov	r2, r3
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d116      	bne.n	8006d44 <LCD_print2H+0x9c8>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	7b5b      	ldrb	r3, [r3, #13]
 8006d1a:	331b      	adds	r3, #27
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d30f      	bcc.n	8006d44 <LCD_print2H+0x9c8>
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	7b5b      	ldrb	r3, [r3, #13]
 8006d28:	3323      	adds	r3, #35	@ 0x23
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d808      	bhi.n	8006d44 <LCD_print2H+0x9c8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006d32:	f107 010c 	add.w	r1, r7, #12
 8006d36:	f04f 33ff 	mov.w	r3, #4294967295
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	484f      	ldr	r0, [pc, #316]	@ (8006e7c <LCD_print2H+0xb00>)
 8006d3e:	f011 fcde 	bl	80186fe <HAL_SPI_Transmit>
 8006d42:	e07f      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+17)) && ((wiersz>=(ADRES->Y0_SET+26) && wiersz<=(ADRES->Y0_SET+34))))
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	7b1b      	ldrb	r3, [r3, #12]
 8006d48:	3311      	adds	r3, #17
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d116      	bne.n	8006d80 <LCD_print2H+0xa04>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	7b5b      	ldrb	r3, [r3, #13]
 8006d56:	331a      	adds	r3, #26
 8006d58:	461a      	mov	r2, r3
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d30f      	bcc.n	8006d80 <LCD_print2H+0xa04>
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	7b5b      	ldrb	r3, [r3, #13]
 8006d64:	3322      	adds	r3, #34	@ 0x22
 8006d66:	461a      	mov	r2, r3
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d808      	bhi.n	8006d80 <LCD_print2H+0xa04>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006d6e:	f107 010c 	add.w	r1, r7, #12
 8006d72:	f04f 33ff 	mov.w	r3, #4294967295
 8006d76:	2202      	movs	r2, #2
 8006d78:	4840      	ldr	r0, [pc, #256]	@ (8006e7c <LCD_print2H+0xb00>)
 8006d7a:	f011 fcc0 	bl	80186fe <HAL_SPI_Transmit>
 8006d7e:	e061      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+18)) && ((wiersz>=(ADRES->Y0_SET+25) && wiersz<=(ADRES->Y0_SET+33))))
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	7b1b      	ldrb	r3, [r3, #12]
 8006d84:	3312      	adds	r3, #18
 8006d86:	461a      	mov	r2, r3
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d116      	bne.n	8006dbc <LCD_print2H+0xa40>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	7b5b      	ldrb	r3, [r3, #13]
 8006d92:	3319      	adds	r3, #25
 8006d94:	461a      	mov	r2, r3
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d30f      	bcc.n	8006dbc <LCD_print2H+0xa40>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	7b5b      	ldrb	r3, [r3, #13]
 8006da0:	3321      	adds	r3, #33	@ 0x21
 8006da2:	461a      	mov	r2, r3
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d808      	bhi.n	8006dbc <LCD_print2H+0xa40>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006daa:	f107 010c 	add.w	r1, r7, #12
 8006dae:	f04f 33ff 	mov.w	r3, #4294967295
 8006db2:	2202      	movs	r2, #2
 8006db4:	4831      	ldr	r0, [pc, #196]	@ (8006e7c <LCD_print2H+0xb00>)
 8006db6:	f011 fca2 	bl	80186fe <HAL_SPI_Transmit>
 8006dba:	e043      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+19)) && ((wiersz>=(ADRES->Y0_SET+24) && wiersz<=(ADRES->Y0_SET+32))))
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	7b1b      	ldrb	r3, [r3, #12]
 8006dc0:	3313      	adds	r3, #19
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d116      	bne.n	8006df8 <LCD_print2H+0xa7c>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	7b5b      	ldrb	r3, [r3, #13]
 8006dce:	3318      	adds	r3, #24
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d30f      	bcc.n	8006df8 <LCD_print2H+0xa7c>
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	7b5b      	ldrb	r3, [r3, #13]
 8006ddc:	3320      	adds	r3, #32
 8006dde:	461a      	mov	r2, r3
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d808      	bhi.n	8006df8 <LCD_print2H+0xa7c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006de6:	f107 010c 	add.w	r1, r7, #12
 8006dea:	f04f 33ff 	mov.w	r3, #4294967295
 8006dee:	2202      	movs	r2, #2
 8006df0:	4822      	ldr	r0, [pc, #136]	@ (8006e7c <LCD_print2H+0xb00>)
 8006df2:	f011 fc84 	bl	80186fe <HAL_SPI_Transmit>
 8006df6:	e025      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else if((kolumna==(ADRES->X0_SET+20)) && ((wiersz>=(ADRES->Y0_SET+23) && wiersz<=(ADRES->Y0_SET+31))))
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	7b1b      	ldrb	r3, [r3, #12]
 8006dfc:	3314      	adds	r3, #20
 8006dfe:	461a      	mov	r2, r3
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d116      	bne.n	8006e34 <LCD_print2H+0xab8>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	7b5b      	ldrb	r3, [r3, #13]
 8006e0a:	3317      	adds	r3, #23
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d30f      	bcc.n	8006e34 <LCD_print2H+0xab8>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	7b5b      	ldrb	r3, [r3, #13]
 8006e18:	331f      	adds	r3, #31
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d808      	bhi.n	8006e34 <LCD_print2H+0xab8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006e22:	f107 010c 	add.w	r1, r7, #12
 8006e26:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	4813      	ldr	r0, [pc, #76]	@ (8006e7c <LCD_print2H+0xb00>)
 8006e2e:	f011 fc66 	bl	80186fe <HAL_SPI_Transmit>
 8006e32:	e007      	b.n	8006e44 <LCD_print2H+0xac8>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8006e34:	f107 0108 	add.w	r1, r7, #8
 8006e38:	f04f 33ff 	mov.w	r3, #4294967295
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	480f      	ldr	r0, [pc, #60]	@ (8006e7c <LCD_print2H+0xb00>)
 8006e40:	f011 fc5d 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	3301      	adds	r3, #1
 8006e48:	617b      	str	r3, [r7, #20]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	7b9b      	ldrb	r3, [r3, #14]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	461a      	mov	r2, r3
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	4293      	cmp	r3, r2
 8006e56:	f4ff ab09 	bcc.w	800646c <LCD_print2H+0xf0>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	613b      	str	r3, [r7, #16]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	7bdb      	ldrb	r3, [r3, #15]
 8006e64:	461a      	mov	r2, r3
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	f4ff aafa 	bcc.w	8006462 <LCD_print2H+0xe6>
			}
		}
	}
	CS_ON();
 8006e6e:	f7fa f8d9 	bl	8001024 <CS_ON>
}
 8006e72:	bf00      	nop
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	200004a4 	.word	0x200004a4

08006e80 <LCD_print3H>:

void LCD_print3H(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	603b      	str	r3, [r7, #0]
 8006e88:	4603      	mov	r3, r0
 8006e8a:	71fb      	strb	r3, [r7, #7]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	71bb      	strb	r3, [r7, #6]
 8006e90:	4613      	mov	r3, r2
 8006e92:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	617b      	str	r3, [r7, #20]
 8006e98:	2300      	movs	r3, #0
 8006e9a:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	223f      	movs	r2, #63	@ 0x3f
 8006ea6:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	221f      	movs	r2, #31
 8006eac:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	7cda      	ldrb	r2, [r3, #19]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	7c1b      	ldrb	r3, [r3, #16]
 8006ec2:	4053      	eors	r3, r2
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	b25a      	sxtb	r2, r3
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	7c5b      	ldrb	r3, [r3, #17]
 8006ece:	b25b      	sxtb	r3, r3
 8006ed0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ed4:	b25b      	sxtb	r3, r3
 8006ed6:	4053      	eors	r3, r2
 8006ed8:	b25b      	sxtb	r3, r3
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	7d1b      	ldrb	r3, [r3, #20]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	7c5b      	ldrb	r3, [r3, #17]
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	4053      	eors	r3, r2
 8006ef0:	015b      	lsls	r3, r3, #5
 8006ef2:	b25a      	sxtb	r2, r3
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	7c9b      	ldrb	r3, [r3, #18]
 8006ef8:	b25b      	sxtb	r3, r3
 8006efa:	4053      	eors	r3, r2
 8006efc:	b25b      	sxtb	r3, r3
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	7cdb      	ldrb	r3, [r3, #19]
 8006f08:	733b      	strb	r3, [r7, #12]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	7d1b      	ldrb	r3, [r3, #20]
 8006f0e:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8006f10:	2300      	movs	r3, #0
 8006f12:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8006f14:	2300      	movs	r3, #0
 8006f16:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8006f18:	7bfa      	ldrb	r2, [r7, #15]
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	4053      	eors	r3, r2
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	00db      	lsls	r3, r3, #3
 8006f22:	b25a      	sxtb	r2, r3
 8006f24:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006f28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f2c:	b25b      	sxtb	r3, r3
 8006f2e:	4053      	eors	r3, r2
 8006f30:	b25b      	sxtb	r3, r3
 8006f32:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8006f34:	7bba      	ldrb	r2, [r7, #14]
 8006f36:	79bb      	ldrb	r3, [r7, #6]
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	4053      	eors	r3, r2
 8006f3e:	015b      	lsls	r3, r3, #5
 8006f40:	b25a      	sxtb	r2, r3
 8006f42:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8006f46:	4053      	eors	r3, r2
 8006f48:	b25b      	sxtb	r3, r3
 8006f4a:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
 8006f4e:	723b      	strb	r3, [r7, #8]
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8006f54:	f7fa f87c 	bl	8001050 <DC_ON>
	CS_OFF();
 8006f58:	f7fa f86f 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	7b5b      	ldrb	r3, [r3, #13]
 8006f60:	613b      	str	r3, [r7, #16]
 8006f62:	f000 bc25 	b.w	80077b0 <LCD_print3H+0x930>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	7b1b      	ldrb	r3, [r3, #12]
 8006f6a:	617b      	str	r3, [r7, #20]
 8006f6c:	f000 bc15 	b.w	800779a <LCD_print3H+0x91a>
		{
			if((kolumna>=(ADRES->X0_SET+10) && kolumna<=(ADRES->X0_SET+20)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+5))))
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	7b1b      	ldrb	r3, [r3, #12]
 8006f74:	330a      	adds	r3, #10
 8006f76:	461a      	mov	r2, r3
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d31c      	bcc.n	8006fb8 <LCD_print3H+0x138>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	7b1b      	ldrb	r3, [r3, #12]
 8006f82:	3314      	adds	r3, #20
 8006f84:	461a      	mov	r2, r3
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d815      	bhi.n	8006fb8 <LCD_print3H+0x138>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	7b5b      	ldrb	r3, [r3, #13]
 8006f90:	461a      	mov	r2, r3
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d30f      	bcc.n	8006fb8 <LCD_print3H+0x138>
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	7b5b      	ldrb	r3, [r3, #13]
 8006f9c:	3305      	adds	r3, #5
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d808      	bhi.n	8006fb8 <LCD_print3H+0x138>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006fa6:	f107 010c 	add.w	r1, r7, #12
 8006faa:	f04f 33ff 	mov.w	r3, #4294967295
 8006fae:	2202      	movs	r2, #2
 8006fb0:	488d      	ldr	r0, [pc, #564]	@ (80071e8 <LCD_print3H+0x368>)
 8006fb2:	f011 fba4 	bl	80186fe <HAL_SPI_Transmit>
 8006fb6:	e3ed      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna>=(ADRES->X0_SET+25) && kolumna<=(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+10) && wiersz<=(ADRES->Y0_SET+20))))
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	7b1b      	ldrb	r3, [r3, #12]
 8006fbc:	3319      	adds	r3, #25
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d31d      	bcc.n	8007002 <LCD_print3H+0x182>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	7b1b      	ldrb	r3, [r3, #12]
 8006fca:	331e      	adds	r3, #30
 8006fcc:	461a      	mov	r2, r3
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d816      	bhi.n	8007002 <LCD_print3H+0x182>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	7b5b      	ldrb	r3, [r3, #13]
 8006fd8:	330a      	adds	r3, #10
 8006fda:	461a      	mov	r2, r3
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d30f      	bcc.n	8007002 <LCD_print3H+0x182>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	7b5b      	ldrb	r3, [r3, #13]
 8006fe6:	3314      	adds	r3, #20
 8006fe8:	461a      	mov	r2, r3
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d808      	bhi.n	8007002 <LCD_print3H+0x182>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8006ff0:	f107 010c 	add.w	r1, r7, #12
 8006ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	487b      	ldr	r0, [pc, #492]	@ (80071e8 <LCD_print3H+0x368>)
 8006ffc:	f011 fb7f 	bl	80186fe <HAL_SPI_Transmit>
 8007000:	e3c8      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna>=(ADRES->X0_SET+14) && kolumna<=(ADRES->X0_SET+22)) && ((wiersz>=(ADRES->Y0_SET+23) && wiersz<=(ADRES->Y0_SET+27))))
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	7b1b      	ldrb	r3, [r3, #12]
 8007006:	330e      	adds	r3, #14
 8007008:	461a      	mov	r2, r3
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	4293      	cmp	r3, r2
 800700e:	d31d      	bcc.n	800704c <LCD_print3H+0x1cc>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	7b1b      	ldrb	r3, [r3, #12]
 8007014:	3316      	adds	r3, #22
 8007016:	461a      	mov	r2, r3
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	4293      	cmp	r3, r2
 800701c:	d816      	bhi.n	800704c <LCD_print3H+0x1cc>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	7b5b      	ldrb	r3, [r3, #13]
 8007022:	3317      	adds	r3, #23
 8007024:	461a      	mov	r2, r3
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	4293      	cmp	r3, r2
 800702a:	d30f      	bcc.n	800704c <LCD_print3H+0x1cc>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	7b5b      	ldrb	r3, [r3, #13]
 8007030:	331b      	adds	r3, #27
 8007032:	461a      	mov	r2, r3
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	4293      	cmp	r3, r2
 8007038:	d808      	bhi.n	800704c <LCD_print3H+0x1cc>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800703a:	f107 010c 	add.w	r1, r7, #12
 800703e:	f04f 33ff 	mov.w	r3, #4294967295
 8007042:	2202      	movs	r2, #2
 8007044:	4868      	ldr	r0, [pc, #416]	@ (80071e8 <LCD_print3H+0x368>)
 8007046:	f011 fb5a 	bl	80186fe <HAL_SPI_Transmit>
 800704a:	e3a3      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna>=(ADRES->X0_SET+25) && kolumna<=(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+31) && wiersz<=(ADRES->Y0_SET+40))))
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	7b1b      	ldrb	r3, [r3, #12]
 8007050:	3319      	adds	r3, #25
 8007052:	461a      	mov	r2, r3
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	4293      	cmp	r3, r2
 8007058:	d31d      	bcc.n	8007096 <LCD_print3H+0x216>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	7b1b      	ldrb	r3, [r3, #12]
 800705e:	331e      	adds	r3, #30
 8007060:	461a      	mov	r2, r3
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	4293      	cmp	r3, r2
 8007066:	d816      	bhi.n	8007096 <LCD_print3H+0x216>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	7b5b      	ldrb	r3, [r3, #13]
 800706c:	331f      	adds	r3, #31
 800706e:	461a      	mov	r2, r3
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	4293      	cmp	r3, r2
 8007074:	d30f      	bcc.n	8007096 <LCD_print3H+0x216>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	7b5b      	ldrb	r3, [r3, #13]
 800707a:	3328      	adds	r3, #40	@ 0x28
 800707c:	461a      	mov	r2, r3
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	4293      	cmp	r3, r2
 8007082:	d808      	bhi.n	8007096 <LCD_print3H+0x216>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007084:	f107 010c 	add.w	r1, r7, #12
 8007088:	f04f 33ff 	mov.w	r3, #4294967295
 800708c:	2202      	movs	r2, #2
 800708e:	4856      	ldr	r0, [pc, #344]	@ (80071e8 <LCD_print3H+0x368>)
 8007090:	f011 fb35 	bl	80186fe <HAL_SPI_Transmit>
 8007094:	e37e      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+19)) && ((wiersz>=(ADRES->Y0_SET+46) && wiersz<=(ADRES->Y0_SET+50))))
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	7b1b      	ldrb	r3, [r3, #12]
 800709a:	3309      	adds	r3, #9
 800709c:	461a      	mov	r2, r3
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d31d      	bcc.n	80070e0 <LCD_print3H+0x260>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	7b1b      	ldrb	r3, [r3, #12]
 80070a8:	3313      	adds	r3, #19
 80070aa:	461a      	mov	r2, r3
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d816      	bhi.n	80070e0 <LCD_print3H+0x260>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	7b5b      	ldrb	r3, [r3, #13]
 80070b6:	332e      	adds	r3, #46	@ 0x2e
 80070b8:	461a      	mov	r2, r3
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	4293      	cmp	r3, r2
 80070be:	d30f      	bcc.n	80070e0 <LCD_print3H+0x260>
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	7b5b      	ldrb	r3, [r3, #13]
 80070c4:	3332      	adds	r3, #50	@ 0x32
 80070c6:	461a      	mov	r2, r3
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d808      	bhi.n	80070e0 <LCD_print3H+0x260>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80070ce:	f107 010c 	add.w	r1, r7, #12
 80070d2:	f04f 33ff 	mov.w	r3, #4294967295
 80070d6:	2202      	movs	r2, #2
 80070d8:	4843      	ldr	r0, [pc, #268]	@ (80071e8 <LCD_print3H+0x368>)
 80070da:	f011 fb10 	bl	80186fe <HAL_SPI_Transmit>
 80070de:	e359      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna==(ADRES->X0_SET+2)) && ((wiersz>=(ADRES->Y0_SET+6) && wiersz<=(ADRES->Y0_SET+13) || (wiersz>=(ADRES->Y0_SET+39) && wiersz<=(ADRES->Y0_SET+48)))))
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	7b1b      	ldrb	r3, [r3, #12]
 80070e4:	3302      	adds	r3, #2
 80070e6:	461a      	mov	r2, r3
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d124      	bne.n	8007138 <LCD_print3H+0x2b8>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	7b5b      	ldrb	r3, [r3, #13]
 80070f2:	3306      	adds	r3, #6
 80070f4:	461a      	mov	r2, r3
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d306      	bcc.n	800710a <LCD_print3H+0x28a>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	7b5b      	ldrb	r3, [r3, #13]
 8007100:	330d      	adds	r3, #13
 8007102:	461a      	mov	r2, r3
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	4293      	cmp	r3, r2
 8007108:	d90d      	bls.n	8007126 <LCD_print3H+0x2a6>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	7b5b      	ldrb	r3, [r3, #13]
 800710e:	3327      	adds	r3, #39	@ 0x27
 8007110:	461a      	mov	r2, r3
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	4293      	cmp	r3, r2
 8007116:	d30f      	bcc.n	8007138 <LCD_print3H+0x2b8>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	7b5b      	ldrb	r3, [r3, #13]
 800711c:	3330      	adds	r3, #48	@ 0x30
 800711e:	461a      	mov	r2, r3
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	4293      	cmp	r3, r2
 8007124:	d808      	bhi.n	8007138 <LCD_print3H+0x2b8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007126:	f107 010c 	add.w	r1, r7, #12
 800712a:	f04f 33ff 	mov.w	r3, #4294967295
 800712e:	2202      	movs	r2, #2
 8007130:	482d      	ldr	r0, [pc, #180]	@ (80071e8 <LCD_print3H+0x368>)
 8007132:	f011 fae4 	bl	80186fe <HAL_SPI_Transmit>
 8007136:	e32d      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+12) || (wiersz>=(ADRES->Y0_SET+40) && wiersz<=(ADRES->Y0_SET+49)))))
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	7b1b      	ldrb	r3, [r3, #12]
 800713c:	3303      	adds	r3, #3
 800713e:	461a      	mov	r2, r3
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	4293      	cmp	r3, r2
 8007144:	d124      	bne.n	8007190 <LCD_print3H+0x310>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	7b5b      	ldrb	r3, [r3, #13]
 800714a:	3305      	adds	r3, #5
 800714c:	461a      	mov	r2, r3
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	4293      	cmp	r3, r2
 8007152:	d306      	bcc.n	8007162 <LCD_print3H+0x2e2>
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	7b5b      	ldrb	r3, [r3, #13]
 8007158:	330c      	adds	r3, #12
 800715a:	461a      	mov	r2, r3
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	4293      	cmp	r3, r2
 8007160:	d90d      	bls.n	800717e <LCD_print3H+0x2fe>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	7b5b      	ldrb	r3, [r3, #13]
 8007166:	3328      	adds	r3, #40	@ 0x28
 8007168:	461a      	mov	r2, r3
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	4293      	cmp	r3, r2
 800716e:	d30f      	bcc.n	8007190 <LCD_print3H+0x310>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	7b5b      	ldrb	r3, [r3, #13]
 8007174:	3331      	adds	r3, #49	@ 0x31
 8007176:	461a      	mov	r2, r3
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	4293      	cmp	r3, r2
 800717c:	d808      	bhi.n	8007190 <LCD_print3H+0x310>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800717e:	f107 010c 	add.w	r1, r7, #12
 8007182:	f04f 33ff 	mov.w	r3, #4294967295
 8007186:	2202      	movs	r2, #2
 8007188:	4817      	ldr	r0, [pc, #92]	@ (80071e8 <LCD_print3H+0x368>)
 800718a:	f011 fab8 	bl	80186fe <HAL_SPI_Transmit>
 800718e:	e301      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna==(ADRES->X0_SET+4)) && ((wiersz>=(ADRES->Y0_SET+4) && wiersz<=(ADRES->Y0_SET+11) || (wiersz>=(ADRES->Y0_SET+41) && wiersz<=(ADRES->Y0_SET+50)))))
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	7b1b      	ldrb	r3, [r3, #12]
 8007194:	3304      	adds	r3, #4
 8007196:	461a      	mov	r2, r3
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	4293      	cmp	r3, r2
 800719c:	d126      	bne.n	80071ec <LCD_print3H+0x36c>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	7b5b      	ldrb	r3, [r3, #13]
 80071a2:	3304      	adds	r3, #4
 80071a4:	461a      	mov	r2, r3
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d306      	bcc.n	80071ba <LCD_print3H+0x33a>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	7b5b      	ldrb	r3, [r3, #13]
 80071b0:	330b      	adds	r3, #11
 80071b2:	461a      	mov	r2, r3
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d90d      	bls.n	80071d6 <LCD_print3H+0x356>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	7b5b      	ldrb	r3, [r3, #13]
 80071be:	3329      	adds	r3, #41	@ 0x29
 80071c0:	461a      	mov	r2, r3
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d311      	bcc.n	80071ec <LCD_print3H+0x36c>
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	7b5b      	ldrb	r3, [r3, #13]
 80071cc:	3332      	adds	r3, #50	@ 0x32
 80071ce:	461a      	mov	r2, r3
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d80a      	bhi.n	80071ec <LCD_print3H+0x36c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80071d6:	f107 010c 	add.w	r1, r7, #12
 80071da:	f04f 33ff 	mov.w	r3, #4294967295
 80071de:	2202      	movs	r2, #2
 80071e0:	4801      	ldr	r0, [pc, #4]	@ (80071e8 <LCD_print3H+0x368>)
 80071e2:	f011 fa8c 	bl	80186fe <HAL_SPI_Transmit>
 80071e6:	e2d5      	b.n	8007794 <LCD_print3H+0x914>
 80071e8:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+5)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+10) || (wiersz>=(ADRES->Y0_SET+42) && wiersz<=(ADRES->Y0_SET+50)))))
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	7b1b      	ldrb	r3, [r3, #12]
 80071f0:	3305      	adds	r3, #5
 80071f2:	461a      	mov	r2, r3
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d124      	bne.n	8007244 <LCD_print3H+0x3c4>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	7b5b      	ldrb	r3, [r3, #13]
 80071fe:	3303      	adds	r3, #3
 8007200:	461a      	mov	r2, r3
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	4293      	cmp	r3, r2
 8007206:	d306      	bcc.n	8007216 <LCD_print3H+0x396>
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	7b5b      	ldrb	r3, [r3, #13]
 800720c:	330a      	adds	r3, #10
 800720e:	461a      	mov	r2, r3
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	4293      	cmp	r3, r2
 8007214:	d90d      	bls.n	8007232 <LCD_print3H+0x3b2>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	7b5b      	ldrb	r3, [r3, #13]
 800721a:	332a      	adds	r3, #42	@ 0x2a
 800721c:	461a      	mov	r2, r3
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	4293      	cmp	r3, r2
 8007222:	d30f      	bcc.n	8007244 <LCD_print3H+0x3c4>
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	7b5b      	ldrb	r3, [r3, #13]
 8007228:	3332      	adds	r3, #50	@ 0x32
 800722a:	461a      	mov	r2, r3
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	4293      	cmp	r3, r2
 8007230:	d808      	bhi.n	8007244 <LCD_print3H+0x3c4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007232:	f107 010c 	add.w	r1, r7, #12
 8007236:	f04f 33ff 	mov.w	r3, #4294967295
 800723a:	2202      	movs	r2, #2
 800723c:	488a      	ldr	r0, [pc, #552]	@ (8007468 <LCD_print3H+0x5e8>)
 800723e:	f011 fa5e 	bl	80186fe <HAL_SPI_Transmit>
 8007242:	e2a7      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna==(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+9) || (wiersz>=(ADRES->Y0_SET+43) && wiersz<=(ADRES->Y0_SET+50)))))
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	7b1b      	ldrb	r3, [r3, #12]
 8007248:	3306      	adds	r3, #6
 800724a:	461a      	mov	r2, r3
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	4293      	cmp	r3, r2
 8007250:	d124      	bne.n	800729c <LCD_print3H+0x41c>
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	7b5b      	ldrb	r3, [r3, #13]
 8007256:	3302      	adds	r3, #2
 8007258:	461a      	mov	r2, r3
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	4293      	cmp	r3, r2
 800725e:	d306      	bcc.n	800726e <LCD_print3H+0x3ee>
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	7b5b      	ldrb	r3, [r3, #13]
 8007264:	3309      	adds	r3, #9
 8007266:	461a      	mov	r2, r3
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	4293      	cmp	r3, r2
 800726c:	d90d      	bls.n	800728a <LCD_print3H+0x40a>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	7b5b      	ldrb	r3, [r3, #13]
 8007272:	332b      	adds	r3, #43	@ 0x2b
 8007274:	461a      	mov	r2, r3
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	4293      	cmp	r3, r2
 800727a:	d30f      	bcc.n	800729c <LCD_print3H+0x41c>
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	7b5b      	ldrb	r3, [r3, #13]
 8007280:	3332      	adds	r3, #50	@ 0x32
 8007282:	461a      	mov	r2, r3
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	4293      	cmp	r3, r2
 8007288:	d808      	bhi.n	800729c <LCD_print3H+0x41c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800728a:	f107 010c 	add.w	r1, r7, #12
 800728e:	f04f 33ff 	mov.w	r3, #4294967295
 8007292:	2202      	movs	r2, #2
 8007294:	4874      	ldr	r0, [pc, #464]	@ (8007468 <LCD_print3H+0x5e8>)
 8007296:	f011 fa32 	bl	80186fe <HAL_SPI_Transmit>
 800729a:	e27b      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna==(ADRES->X0_SET+7)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+8) || (wiersz>=(ADRES->Y0_SET+44) && wiersz<=(ADRES->Y0_SET+50)))))
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	7b1b      	ldrb	r3, [r3, #12]
 80072a0:	3307      	adds	r3, #7
 80072a2:	461a      	mov	r2, r3
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d124      	bne.n	80072f4 <LCD_print3H+0x474>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	7b5b      	ldrb	r3, [r3, #13]
 80072ae:	3301      	adds	r3, #1
 80072b0:	461a      	mov	r2, r3
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d306      	bcc.n	80072c6 <LCD_print3H+0x446>
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	7b5b      	ldrb	r3, [r3, #13]
 80072bc:	3308      	adds	r3, #8
 80072be:	461a      	mov	r2, r3
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d90d      	bls.n	80072e2 <LCD_print3H+0x462>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	7b5b      	ldrb	r3, [r3, #13]
 80072ca:	332c      	adds	r3, #44	@ 0x2c
 80072cc:	461a      	mov	r2, r3
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d30f      	bcc.n	80072f4 <LCD_print3H+0x474>
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	7b5b      	ldrb	r3, [r3, #13]
 80072d8:	3332      	adds	r3, #50	@ 0x32
 80072da:	461a      	mov	r2, r3
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	4293      	cmp	r3, r2
 80072e0:	d808      	bhi.n	80072f4 <LCD_print3H+0x474>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80072e2:	f107 010c 	add.w	r1, r7, #12
 80072e6:	f04f 33ff 	mov.w	r3, #4294967295
 80072ea:	2202      	movs	r2, #2
 80072ec:	485e      	ldr	r0, [pc, #376]	@ (8007468 <LCD_print3H+0x5e8>)
 80072ee:	f011 fa06 	bl	80186fe <HAL_SPI_Transmit>
 80072f2:	e24f      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna==(ADRES->X0_SET+8)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+7) || (wiersz>=(ADRES->Y0_SET+45) && wiersz<=(ADRES->Y0_SET+50)))))
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	7b1b      	ldrb	r3, [r3, #12]
 80072f8:	3308      	adds	r3, #8
 80072fa:	461a      	mov	r2, r3
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	4293      	cmp	r3, r2
 8007300:	d123      	bne.n	800734a <LCD_print3H+0x4ca>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	7b5b      	ldrb	r3, [r3, #13]
 8007306:	461a      	mov	r2, r3
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	4293      	cmp	r3, r2
 800730c:	d306      	bcc.n	800731c <LCD_print3H+0x49c>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	7b5b      	ldrb	r3, [r3, #13]
 8007312:	3307      	adds	r3, #7
 8007314:	461a      	mov	r2, r3
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	4293      	cmp	r3, r2
 800731a:	d90d      	bls.n	8007338 <LCD_print3H+0x4b8>
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	7b5b      	ldrb	r3, [r3, #13]
 8007320:	332d      	adds	r3, #45	@ 0x2d
 8007322:	461a      	mov	r2, r3
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	4293      	cmp	r3, r2
 8007328:	d30f      	bcc.n	800734a <LCD_print3H+0x4ca>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	7b5b      	ldrb	r3, [r3, #13]
 800732e:	3332      	adds	r3, #50	@ 0x32
 8007330:	461a      	mov	r2, r3
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	4293      	cmp	r3, r2
 8007336:	d808      	bhi.n	800734a <LCD_print3H+0x4ca>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007338:	f107 010c 	add.w	r1, r7, #12
 800733c:	f04f 33ff 	mov.w	r3, #4294967295
 8007340:	2202      	movs	r2, #2
 8007342:	4849      	ldr	r0, [pc, #292]	@ (8007468 <LCD_print3H+0x5e8>)
 8007344:	f011 f9db 	bl	80186fe <HAL_SPI_Transmit>
 8007348:	e224      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna==(ADRES->X0_SET+9)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+6) || (wiersz>=(ADRES->Y0_SET+46) && wiersz<=(ADRES->Y0_SET+50)))))
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	7b1b      	ldrb	r3, [r3, #12]
 800734e:	3309      	adds	r3, #9
 8007350:	461a      	mov	r2, r3
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	4293      	cmp	r3, r2
 8007356:	d123      	bne.n	80073a0 <LCD_print3H+0x520>
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	7b5b      	ldrb	r3, [r3, #13]
 800735c:	461a      	mov	r2, r3
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	4293      	cmp	r3, r2
 8007362:	d306      	bcc.n	8007372 <LCD_print3H+0x4f2>
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	7b5b      	ldrb	r3, [r3, #13]
 8007368:	3306      	adds	r3, #6
 800736a:	461a      	mov	r2, r3
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	4293      	cmp	r3, r2
 8007370:	d90d      	bls.n	800738e <LCD_print3H+0x50e>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	7b5b      	ldrb	r3, [r3, #13]
 8007376:	332e      	adds	r3, #46	@ 0x2e
 8007378:	461a      	mov	r2, r3
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	4293      	cmp	r3, r2
 800737e:	d30f      	bcc.n	80073a0 <LCD_print3H+0x520>
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	7b5b      	ldrb	r3, [r3, #13]
 8007384:	3332      	adds	r3, #50	@ 0x32
 8007386:	461a      	mov	r2, r3
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	4293      	cmp	r3, r2
 800738c:	d808      	bhi.n	80073a0 <LCD_print3H+0x520>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800738e:	f107 010c 	add.w	r1, r7, #12
 8007392:	f04f 33ff 	mov.w	r3, #4294967295
 8007396:	2202      	movs	r2, #2
 8007398:	4833      	ldr	r0, [pc, #204]	@ (8007468 <LCD_print3H+0x5e8>)
 800739a:	f011 f9b0 	bl	80186fe <HAL_SPI_Transmit>
 800739e:	e1f9      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna==(ADRES->X0_SET+22)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+7) || (wiersz>=(ADRES->Y0_SET+43) && wiersz<=(ADRES->Y0_SET+50)))))
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	7b1b      	ldrb	r3, [r3, #12]
 80073a4:	3316      	adds	r3, #22
 80073a6:	461a      	mov	r2, r3
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d123      	bne.n	80073f6 <LCD_print3H+0x576>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	7b5b      	ldrb	r3, [r3, #13]
 80073b2:	461a      	mov	r2, r3
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d306      	bcc.n	80073c8 <LCD_print3H+0x548>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	7b5b      	ldrb	r3, [r3, #13]
 80073be:	3307      	adds	r3, #7
 80073c0:	461a      	mov	r2, r3
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d90d      	bls.n	80073e4 <LCD_print3H+0x564>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	7b5b      	ldrb	r3, [r3, #13]
 80073cc:	332b      	adds	r3, #43	@ 0x2b
 80073ce:	461a      	mov	r2, r3
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d30f      	bcc.n	80073f6 <LCD_print3H+0x576>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	7b5b      	ldrb	r3, [r3, #13]
 80073da:	3332      	adds	r3, #50	@ 0x32
 80073dc:	461a      	mov	r2, r3
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d808      	bhi.n	80073f6 <LCD_print3H+0x576>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80073e4:	f107 010c 	add.w	r1, r7, #12
 80073e8:	f04f 33ff 	mov.w	r3, #4294967295
 80073ec:	2202      	movs	r2, #2
 80073ee:	481e      	ldr	r0, [pc, #120]	@ (8007468 <LCD_print3H+0x5e8>)
 80073f0:	f011 f985 	bl	80186fe <HAL_SPI_Transmit>
 80073f4:	e1ce      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna==(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+8) || (wiersz>=(ADRES->Y0_SET+22) && wiersz<=(ADRES->Y0_SET+28)) || (wiersz>=(ADRES->Y0_SET+42) && wiersz<=(ADRES->Y0_SET+50)))))
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	7b1b      	ldrb	r3, [r3, #12]
 80073fa:	3317      	adds	r3, #23
 80073fc:	461a      	mov	r2, r3
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	4293      	cmp	r3, r2
 8007402:	d133      	bne.n	800746c <LCD_print3H+0x5ec>
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	7b5b      	ldrb	r3, [r3, #13]
 8007408:	461a      	mov	r2, r3
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	4293      	cmp	r3, r2
 800740e:	d306      	bcc.n	800741e <LCD_print3H+0x59e>
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	7b5b      	ldrb	r3, [r3, #13]
 8007414:	3308      	adds	r3, #8
 8007416:	461a      	mov	r2, r3
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	4293      	cmp	r3, r2
 800741c:	d91b      	bls.n	8007456 <LCD_print3H+0x5d6>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	7b5b      	ldrb	r3, [r3, #13]
 8007422:	3316      	adds	r3, #22
 8007424:	461a      	mov	r2, r3
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	4293      	cmp	r3, r2
 800742a:	d306      	bcc.n	800743a <LCD_print3H+0x5ba>
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	7b5b      	ldrb	r3, [r3, #13]
 8007430:	331c      	adds	r3, #28
 8007432:	461a      	mov	r2, r3
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	4293      	cmp	r3, r2
 8007438:	d90d      	bls.n	8007456 <LCD_print3H+0x5d6>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	7b5b      	ldrb	r3, [r3, #13]
 800743e:	332a      	adds	r3, #42	@ 0x2a
 8007440:	461a      	mov	r2, r3
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	4293      	cmp	r3, r2
 8007446:	d311      	bcc.n	800746c <LCD_print3H+0x5ec>
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	7b5b      	ldrb	r3, [r3, #13]
 800744c:	3332      	adds	r3, #50	@ 0x32
 800744e:	461a      	mov	r2, r3
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	4293      	cmp	r3, r2
 8007454:	d80a      	bhi.n	800746c <LCD_print3H+0x5ec>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007456:	f107 010c 	add.w	r1, r7, #12
 800745a:	f04f 33ff 	mov.w	r3, #4294967295
 800745e:	2202      	movs	r2, #2
 8007460:	4801      	ldr	r0, [pc, #4]	@ (8007468 <LCD_print3H+0x5e8>)
 8007462:	f011 f94c 	bl	80186fe <HAL_SPI_Transmit>
 8007466:	e195      	b.n	8007794 <LCD_print3H+0x914>
 8007468:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+20)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+5) || (wiersz>=(ADRES->Y0_SET+45) && wiersz<=(ADRES->Y0_SET+50)))))
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	7b1b      	ldrb	r3, [r3, #12]
 8007470:	3314      	adds	r3, #20
 8007472:	461a      	mov	r2, r3
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	4293      	cmp	r3, r2
 8007478:	d123      	bne.n	80074c2 <LCD_print3H+0x642>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	7b5b      	ldrb	r3, [r3, #13]
 800747e:	461a      	mov	r2, r3
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	4293      	cmp	r3, r2
 8007484:	d306      	bcc.n	8007494 <LCD_print3H+0x614>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	7b5b      	ldrb	r3, [r3, #13]
 800748a:	3305      	adds	r3, #5
 800748c:	461a      	mov	r2, r3
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	4293      	cmp	r3, r2
 8007492:	d90d      	bls.n	80074b0 <LCD_print3H+0x630>
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	7b5b      	ldrb	r3, [r3, #13]
 8007498:	332d      	adds	r3, #45	@ 0x2d
 800749a:	461a      	mov	r2, r3
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	4293      	cmp	r3, r2
 80074a0:	d30f      	bcc.n	80074c2 <LCD_print3H+0x642>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	7b5b      	ldrb	r3, [r3, #13]
 80074a6:	3332      	adds	r3, #50	@ 0x32
 80074a8:	461a      	mov	r2, r3
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d808      	bhi.n	80074c2 <LCD_print3H+0x642>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80074b0:	f107 010c 	add.w	r1, r7, #12
 80074b4:	f04f 33ff 	mov.w	r3, #4294967295
 80074b8:	2202      	movs	r2, #2
 80074ba:	489b      	ldr	r0, [pc, #620]	@ (8007728 <LCD_print3H+0x8a8>)
 80074bc:	f011 f91f 	bl	80186fe <HAL_SPI_Transmit>
 80074c0:	e168      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna==(ADRES->X0_SET+21)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+6) || (wiersz>=(ADRES->Y0_SET+44) && wiersz<=(ADRES->Y0_SET+50)))))
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	7b1b      	ldrb	r3, [r3, #12]
 80074c6:	3315      	adds	r3, #21
 80074c8:	461a      	mov	r2, r3
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d123      	bne.n	8007518 <LCD_print3H+0x698>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	7b5b      	ldrb	r3, [r3, #13]
 80074d4:	461a      	mov	r2, r3
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	4293      	cmp	r3, r2
 80074da:	d306      	bcc.n	80074ea <LCD_print3H+0x66a>
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	7b5b      	ldrb	r3, [r3, #13]
 80074e0:	3306      	adds	r3, #6
 80074e2:	461a      	mov	r2, r3
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d90d      	bls.n	8007506 <LCD_print3H+0x686>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	7b5b      	ldrb	r3, [r3, #13]
 80074ee:	332c      	adds	r3, #44	@ 0x2c
 80074f0:	461a      	mov	r2, r3
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d30f      	bcc.n	8007518 <LCD_print3H+0x698>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	7b5b      	ldrb	r3, [r3, #13]
 80074fc:	3332      	adds	r3, #50	@ 0x32
 80074fe:	461a      	mov	r2, r3
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	4293      	cmp	r3, r2
 8007504:	d808      	bhi.n	8007518 <LCD_print3H+0x698>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007506:	f107 010c 	add.w	r1, r7, #12
 800750a:	f04f 33ff 	mov.w	r3, #4294967295
 800750e:	2202      	movs	r2, #2
 8007510:	4885      	ldr	r0, [pc, #532]	@ (8007728 <LCD_print3H+0x8a8>)
 8007512:	f011 f8f4 	bl	80186fe <HAL_SPI_Transmit>
 8007516:	e13d      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna==(ADRES->X0_SET+24)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+9) || (wiersz>=(ADRES->Y0_SET+21) && wiersz<=(ADRES->Y0_SET+29)) || (wiersz>=(ADRES->Y0_SET+41) && wiersz<=(ADRES->Y0_SET+50)))))
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	7b1b      	ldrb	r3, [r3, #12]
 800751c:	3318      	adds	r3, #24
 800751e:	461a      	mov	r2, r3
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	4293      	cmp	r3, r2
 8007524:	d132      	bne.n	800758c <LCD_print3H+0x70c>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	7b5b      	ldrb	r3, [r3, #13]
 800752a:	3301      	adds	r3, #1
 800752c:	461a      	mov	r2, r3
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	4293      	cmp	r3, r2
 8007532:	d306      	bcc.n	8007542 <LCD_print3H+0x6c2>
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	7b5b      	ldrb	r3, [r3, #13]
 8007538:	3309      	adds	r3, #9
 800753a:	461a      	mov	r2, r3
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	4293      	cmp	r3, r2
 8007540:	d91b      	bls.n	800757a <LCD_print3H+0x6fa>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	7b5b      	ldrb	r3, [r3, #13]
 8007546:	3315      	adds	r3, #21
 8007548:	461a      	mov	r2, r3
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	4293      	cmp	r3, r2
 800754e:	d306      	bcc.n	800755e <LCD_print3H+0x6de>
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	7b5b      	ldrb	r3, [r3, #13]
 8007554:	331d      	adds	r3, #29
 8007556:	461a      	mov	r2, r3
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	4293      	cmp	r3, r2
 800755c:	d90d      	bls.n	800757a <LCD_print3H+0x6fa>
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	7b5b      	ldrb	r3, [r3, #13]
 8007562:	3329      	adds	r3, #41	@ 0x29
 8007564:	461a      	mov	r2, r3
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	4293      	cmp	r3, r2
 800756a:	d30f      	bcc.n	800758c <LCD_print3H+0x70c>
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	7b5b      	ldrb	r3, [r3, #13]
 8007570:	3332      	adds	r3, #50	@ 0x32
 8007572:	461a      	mov	r2, r3
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	4293      	cmp	r3, r2
 8007578:	d808      	bhi.n	800758c <LCD_print3H+0x70c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800757a:	f107 010c 	add.w	r1, r7, #12
 800757e:	f04f 33ff 	mov.w	r3, #4294967295
 8007582:	2202      	movs	r2, #2
 8007584:	4868      	ldr	r0, [pc, #416]	@ (8007728 <LCD_print3H+0x8a8>)
 8007586:	f011 f8ba 	bl	80186fe <HAL_SPI_Transmit>
 800758a:	e103      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna==(ADRES->X0_SET+25)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+50))))
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	7b1b      	ldrb	r3, [r3, #12]
 8007590:	3319      	adds	r3, #25
 8007592:	461a      	mov	r2, r3
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	4293      	cmp	r3, r2
 8007598:	d116      	bne.n	80075c8 <LCD_print3H+0x748>
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	7b5b      	ldrb	r3, [r3, #13]
 800759e:	3302      	adds	r3, #2
 80075a0:	461a      	mov	r2, r3
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d30f      	bcc.n	80075c8 <LCD_print3H+0x748>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	7b5b      	ldrb	r3, [r3, #13]
 80075ac:	3332      	adds	r3, #50	@ 0x32
 80075ae:	461a      	mov	r2, r3
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d808      	bhi.n	80075c8 <LCD_print3H+0x748>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80075b6:	f107 010c 	add.w	r1, r7, #12
 80075ba:	f04f 33ff 	mov.w	r3, #4294967295
 80075be:	2202      	movs	r2, #2
 80075c0:	4859      	ldr	r0, [pc, #356]	@ (8007728 <LCD_print3H+0x8a8>)
 80075c2:	f011 f89c 	bl	80186fe <HAL_SPI_Transmit>
 80075c6:	e0e5      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna==(ADRES->X0_SET+26)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+24) || (wiersz>=(ADRES->Y0_SET+26) && wiersz<=(ADRES->Y0_SET+49)))))
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	7b1b      	ldrb	r3, [r3, #12]
 80075cc:	331a      	adds	r3, #26
 80075ce:	461a      	mov	r2, r3
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d124      	bne.n	8007620 <LCD_print3H+0x7a0>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	7b5b      	ldrb	r3, [r3, #13]
 80075da:	3303      	adds	r3, #3
 80075dc:	461a      	mov	r2, r3
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d306      	bcc.n	80075f2 <LCD_print3H+0x772>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	7b5b      	ldrb	r3, [r3, #13]
 80075e8:	3318      	adds	r3, #24
 80075ea:	461a      	mov	r2, r3
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d90d      	bls.n	800760e <LCD_print3H+0x78e>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	7b5b      	ldrb	r3, [r3, #13]
 80075f6:	331a      	adds	r3, #26
 80075f8:	461a      	mov	r2, r3
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d30f      	bcc.n	8007620 <LCD_print3H+0x7a0>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	7b5b      	ldrb	r3, [r3, #13]
 8007604:	3331      	adds	r3, #49	@ 0x31
 8007606:	461a      	mov	r2, r3
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	4293      	cmp	r3, r2
 800760c:	d808      	bhi.n	8007620 <LCD_print3H+0x7a0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800760e:	f107 010c 	add.w	r1, r7, #12
 8007612:	f04f 33ff 	mov.w	r3, #4294967295
 8007616:	2202      	movs	r2, #2
 8007618:	4843      	ldr	r0, [pc, #268]	@ (8007728 <LCD_print3H+0x8a8>)
 800761a:	f011 f870 	bl	80186fe <HAL_SPI_Transmit>
 800761e:	e0b9      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna==(ADRES->X0_SET+27)) && ((wiersz>=(ADRES->Y0_SET+4) && wiersz<=(ADRES->Y0_SET+23) || (wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+48)))))
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	7b1b      	ldrb	r3, [r3, #12]
 8007624:	331b      	adds	r3, #27
 8007626:	461a      	mov	r2, r3
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	4293      	cmp	r3, r2
 800762c:	d124      	bne.n	8007678 <LCD_print3H+0x7f8>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	7b5b      	ldrb	r3, [r3, #13]
 8007632:	3304      	adds	r3, #4
 8007634:	461a      	mov	r2, r3
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	4293      	cmp	r3, r2
 800763a:	d306      	bcc.n	800764a <LCD_print3H+0x7ca>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	7b5b      	ldrb	r3, [r3, #13]
 8007640:	3317      	adds	r3, #23
 8007642:	461a      	mov	r2, r3
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	4293      	cmp	r3, r2
 8007648:	d90d      	bls.n	8007666 <LCD_print3H+0x7e6>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	7b5b      	ldrb	r3, [r3, #13]
 800764e:	331b      	adds	r3, #27
 8007650:	461a      	mov	r2, r3
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	4293      	cmp	r3, r2
 8007656:	d30f      	bcc.n	8007678 <LCD_print3H+0x7f8>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	7b5b      	ldrb	r3, [r3, #13]
 800765c:	3330      	adds	r3, #48	@ 0x30
 800765e:	461a      	mov	r2, r3
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	4293      	cmp	r3, r2
 8007664:	d808      	bhi.n	8007678 <LCD_print3H+0x7f8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007666:	f107 010c 	add.w	r1, r7, #12
 800766a:	f04f 33ff 	mov.w	r3, #4294967295
 800766e:	2202      	movs	r2, #2
 8007670:	482d      	ldr	r0, [pc, #180]	@ (8007728 <LCD_print3H+0x8a8>)
 8007672:	f011 f844 	bl	80186fe <HAL_SPI_Transmit>
 8007676:	e08d      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna==(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+22) || (wiersz>=(ADRES->Y0_SET+28) && wiersz<=(ADRES->Y0_SET+48)))))
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	7b1b      	ldrb	r3, [r3, #12]
 800767c:	331c      	adds	r3, #28
 800767e:	461a      	mov	r2, r3
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	4293      	cmp	r3, r2
 8007684:	d124      	bne.n	80076d0 <LCD_print3H+0x850>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	7b5b      	ldrb	r3, [r3, #13]
 800768a:	3305      	adds	r3, #5
 800768c:	461a      	mov	r2, r3
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	4293      	cmp	r3, r2
 8007692:	d306      	bcc.n	80076a2 <LCD_print3H+0x822>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	7b5b      	ldrb	r3, [r3, #13]
 8007698:	3316      	adds	r3, #22
 800769a:	461a      	mov	r2, r3
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	4293      	cmp	r3, r2
 80076a0:	d90d      	bls.n	80076be <LCD_print3H+0x83e>
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	7b5b      	ldrb	r3, [r3, #13]
 80076a6:	331c      	adds	r3, #28
 80076a8:	461a      	mov	r2, r3
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d30f      	bcc.n	80076d0 <LCD_print3H+0x850>
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	7b5b      	ldrb	r3, [r3, #13]
 80076b4:	3330      	adds	r3, #48	@ 0x30
 80076b6:	461a      	mov	r2, r3
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d808      	bhi.n	80076d0 <LCD_print3H+0x850>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80076be:	f107 010c 	add.w	r1, r7, #12
 80076c2:	f04f 33ff 	mov.w	r3, #4294967295
 80076c6:	2202      	movs	r2, #2
 80076c8:	4817      	ldr	r0, [pc, #92]	@ (8007728 <LCD_print3H+0x8a8>)
 80076ca:	f011 f818 	bl	80186fe <HAL_SPI_Transmit>
 80076ce:	e061      	b.n	8007794 <LCD_print3H+0x914>
			}
			else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+6) && wiersz<=(ADRES->Y0_SET+23) || (wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47)))))
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	7b1b      	ldrb	r3, [r3, #12]
 80076d4:	331d      	adds	r3, #29
 80076d6:	461a      	mov	r2, r3
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	4293      	cmp	r3, r2
 80076dc:	d126      	bne.n	800772c <LCD_print3H+0x8ac>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	7b5b      	ldrb	r3, [r3, #13]
 80076e2:	3306      	adds	r3, #6
 80076e4:	461a      	mov	r2, r3
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d306      	bcc.n	80076fa <LCD_print3H+0x87a>
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	7b5b      	ldrb	r3, [r3, #13]
 80076f0:	3317      	adds	r3, #23
 80076f2:	461a      	mov	r2, r3
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d90d      	bls.n	8007716 <LCD_print3H+0x896>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	7b5b      	ldrb	r3, [r3, #13]
 80076fe:	331b      	adds	r3, #27
 8007700:	461a      	mov	r2, r3
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	4293      	cmp	r3, r2
 8007706:	d311      	bcc.n	800772c <LCD_print3H+0x8ac>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	7b5b      	ldrb	r3, [r3, #13]
 800770c:	332f      	adds	r3, #47	@ 0x2f
 800770e:	461a      	mov	r2, r3
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	4293      	cmp	r3, r2
 8007714:	d80a      	bhi.n	800772c <LCD_print3H+0x8ac>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007716:	f107 010c 	add.w	r1, r7, #12
 800771a:	f04f 33ff 	mov.w	r3, #4294967295
 800771e:	2202      	movs	r2, #2
 8007720:	4801      	ldr	r0, [pc, #4]	@ (8007728 <LCD_print3H+0x8a8>)
 8007722:	f010 ffec 	bl	80186fe <HAL_SPI_Transmit>
 8007726:	e035      	b.n	8007794 <LCD_print3H+0x914>
 8007728:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+7) && wiersz<=(ADRES->Y0_SET+20) || (wiersz>=(ADRES->Y0_SET+30) && wiersz<=(ADRES->Y0_SET+46)))))
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	7b1b      	ldrb	r3, [r3, #12]
 8007730:	331e      	adds	r3, #30
 8007732:	461a      	mov	r2, r3
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	4293      	cmp	r3, r2
 8007738:	d124      	bne.n	8007784 <LCD_print3H+0x904>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	7b5b      	ldrb	r3, [r3, #13]
 800773e:	3307      	adds	r3, #7
 8007740:	461a      	mov	r2, r3
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	4293      	cmp	r3, r2
 8007746:	d306      	bcc.n	8007756 <LCD_print3H+0x8d6>
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	7b5b      	ldrb	r3, [r3, #13]
 800774c:	3314      	adds	r3, #20
 800774e:	461a      	mov	r2, r3
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	4293      	cmp	r3, r2
 8007754:	d90d      	bls.n	8007772 <LCD_print3H+0x8f2>
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	7b5b      	ldrb	r3, [r3, #13]
 800775a:	331e      	adds	r3, #30
 800775c:	461a      	mov	r2, r3
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	4293      	cmp	r3, r2
 8007762:	d30f      	bcc.n	8007784 <LCD_print3H+0x904>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	7b5b      	ldrb	r3, [r3, #13]
 8007768:	332e      	adds	r3, #46	@ 0x2e
 800776a:	461a      	mov	r2, r3
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	4293      	cmp	r3, r2
 8007770:	d808      	bhi.n	8007784 <LCD_print3H+0x904>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007772:	f107 010c 	add.w	r1, r7, #12
 8007776:	f04f 33ff 	mov.w	r3, #4294967295
 800777a:	2202      	movs	r2, #2
 800777c:	4813      	ldr	r0, [pc, #76]	@ (80077cc <LCD_print3H+0x94c>)
 800777e:	f010 ffbe 	bl	80186fe <HAL_SPI_Transmit>
 8007782:	e007      	b.n	8007794 <LCD_print3H+0x914>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8007784:	f107 0108 	add.w	r1, r7, #8
 8007788:	f04f 33ff 	mov.w	r3, #4294967295
 800778c:	2202      	movs	r2, #2
 800778e:	480f      	ldr	r0, [pc, #60]	@ (80077cc <LCD_print3H+0x94c>)
 8007790:	f010 ffb5 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	3301      	adds	r3, #1
 8007798:	617b      	str	r3, [r7, #20]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	7b9b      	ldrb	r3, [r3, #14]
 800779e:	3301      	adds	r3, #1
 80077a0:	461a      	mov	r2, r3
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	4293      	cmp	r3, r2
 80077a6:	f4ff abe3 	bcc.w	8006f70 <LCD_print3H+0xf0>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	3301      	adds	r3, #1
 80077ae:	613b      	str	r3, [r7, #16]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	7bdb      	ldrb	r3, [r3, #15]
 80077b4:	461a      	mov	r2, r3
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	4293      	cmp	r3, r2
 80077ba:	f4ff abd4 	bcc.w	8006f66 <LCD_print3H+0xe6>
			}
		}
	}
	CS_ON();
 80077be:	f7f9 fc31 	bl	8001024 <CS_ON>
}
 80077c2:	bf00      	nop
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	200004a4 	.word	0x200004a4

080077d0 <LCD_print4H>:

void LCD_print4H(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	4603      	mov	r3, r0
 80077da:	71fb      	strb	r3, [r7, #7]
 80077dc:	460b      	mov	r3, r1
 80077de:	71bb      	strb	r3, [r7, #6]
 80077e0:	4613      	mov	r3, r2
 80077e2:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	2300      	movs	r3, #0
 80077ea:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2200      	movs	r2, #0
 80077f0:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	223f      	movs	r2, #63	@ 0x3f
 80077f6:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	221f      	movs	r2, #31
 80077fc:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2200      	movs	r2, #0
 8007802:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2200      	movs	r2, #0
 8007808:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	7cda      	ldrb	r2, [r3, #19]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	7c1b      	ldrb	r3, [r3, #16]
 8007812:	4053      	eors	r3, r2
 8007814:	b2db      	uxtb	r3, r3
 8007816:	00db      	lsls	r3, r3, #3
 8007818:	b25a      	sxtb	r2, r3
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	7c5b      	ldrb	r3, [r3, #17]
 800781e:	b25b      	sxtb	r3, r3
 8007820:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007824:	b25b      	sxtb	r3, r3
 8007826:	4053      	eors	r3, r2
 8007828:	b25b      	sxtb	r3, r3
 800782a:	b2da      	uxtb	r2, r3
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	7d1b      	ldrb	r3, [r3, #20]
 8007834:	461a      	mov	r2, r3
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	7c5b      	ldrb	r3, [r3, #17]
 800783a:	f003 0307 	and.w	r3, r3, #7
 800783e:	4053      	eors	r3, r2
 8007840:	015b      	lsls	r3, r3, #5
 8007842:	b25a      	sxtb	r2, r3
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	7c9b      	ldrb	r3, [r3, #18]
 8007848:	b25b      	sxtb	r3, r3
 800784a:	4053      	eors	r3, r2
 800784c:	b25b      	sxtb	r3, r3
 800784e:	b2da      	uxtb	r2, r3
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	7cdb      	ldrb	r3, [r3, #19]
 8007858:	733b      	strb	r3, [r7, #12]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	7d1b      	ldrb	r3, [r3, #20]
 800785e:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8007860:	2300      	movs	r3, #0
 8007862:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8007864:	2300      	movs	r3, #0
 8007866:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8007868:	7bfa      	ldrb	r2, [r7, #15]
 800786a:	79fb      	ldrb	r3, [r7, #7]
 800786c:	4053      	eors	r3, r2
 800786e:	b2db      	uxtb	r3, r3
 8007870:	00db      	lsls	r3, r3, #3
 8007872:	b25a      	sxtb	r2, r3
 8007874:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007878:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800787c:	b25b      	sxtb	r3, r3
 800787e:	4053      	eors	r3, r2
 8007880:	b25b      	sxtb	r3, r3
 8007882:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8007884:	7bba      	ldrb	r2, [r7, #14]
 8007886:	79bb      	ldrb	r3, [r7, #6]
 8007888:	f003 0307 	and.w	r3, r3, #7
 800788c:	4053      	eors	r3, r2
 800788e:	015b      	lsls	r3, r3, #5
 8007890:	b25a      	sxtb	r2, r3
 8007892:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8007896:	4053      	eors	r3, r2
 8007898:	b25b      	sxtb	r3, r3
 800789a:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	723b      	strb	r3, [r7, #8]
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	727b      	strb	r3, [r7, #9]
	DC_ON();
 80078a4:	f7f9 fbd4 	bl	8001050 <DC_ON>
	CS_OFF();
 80078a8:	f7f9 fbc7 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	7b5b      	ldrb	r3, [r3, #13]
 80078b0:	613b      	str	r3, [r7, #16]
 80078b2:	e36f      	b.n	8007f94 <LCD_print4H+0x7c4>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	7b1b      	ldrb	r3, [r3, #12]
 80078b8:	617b      	str	r3, [r7, #20]
 80078ba:	e360      	b.n	8007f7e <LCD_print4H+0x7ae>
		{
			if((kolumna>=(ADRES->X0_SET+27) && kolumna<=(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+50))))
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	7b1b      	ldrb	r3, [r3, #12]
 80078c0:	331b      	adds	r3, #27
 80078c2:	461a      	mov	r2, r3
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d31c      	bcc.n	8007904 <LCD_print4H+0x134>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	7b1b      	ldrb	r3, [r3, #12]
 80078ce:	331e      	adds	r3, #30
 80078d0:	461a      	mov	r2, r3
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d815      	bhi.n	8007904 <LCD_print4H+0x134>
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	7b5b      	ldrb	r3, [r3, #13]
 80078dc:	461a      	mov	r2, r3
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d30f      	bcc.n	8007904 <LCD_print4H+0x134>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	7b5b      	ldrb	r3, [r3, #13]
 80078e8:	3332      	adds	r3, #50	@ 0x32
 80078ea:	461a      	mov	r2, r3
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d808      	bhi.n	8007904 <LCD_print4H+0x134>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80078f2:	f107 010c 	add.w	r1, r7, #12
 80078f6:	f04f 33ff 	mov.w	r3, #4294967295
 80078fa:	2202      	movs	r2, #2
 80078fc:	489a      	ldr	r0, [pc, #616]	@ (8007b68 <LCD_print4H+0x398>)
 80078fe:	f010 fefe 	bl	80186fe <HAL_SPI_Transmit>
 8007902:	e339      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna>=(ADRES->X0_SET+0) && kolumna<=(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+24) && wiersz<=(ADRES->Y0_SET+27))))
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	7b1b      	ldrb	r3, [r3, #12]
 8007908:	461a      	mov	r2, r3
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	4293      	cmp	r3, r2
 800790e:	d31d      	bcc.n	800794c <LCD_print4H+0x17c>
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	7b1b      	ldrb	r3, [r3, #12]
 8007914:	331e      	adds	r3, #30
 8007916:	461a      	mov	r2, r3
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	4293      	cmp	r3, r2
 800791c:	d816      	bhi.n	800794c <LCD_print4H+0x17c>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	7b5b      	ldrb	r3, [r3, #13]
 8007922:	3318      	adds	r3, #24
 8007924:	461a      	mov	r2, r3
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	4293      	cmp	r3, r2
 800792a:	d30f      	bcc.n	800794c <LCD_print4H+0x17c>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	7b5b      	ldrb	r3, [r3, #13]
 8007930:	331b      	adds	r3, #27
 8007932:	461a      	mov	r2, r3
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	4293      	cmp	r3, r2
 8007938:	d808      	bhi.n	800794c <LCD_print4H+0x17c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800793a:	f107 010c 	add.w	r1, r7, #12
 800793e:	f04f 33ff 	mov.w	r3, #4294967295
 8007942:	2202      	movs	r2, #2
 8007944:	4888      	ldr	r0, [pc, #544]	@ (8007b68 <LCD_print4H+0x398>)
 8007946:	f010 feda 	bl	80186fe <HAL_SPI_Transmit>
 800794a:	e315      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna>=(ADRES->X0_SET+21) && kolumna<=(ADRES->X0_SET+26)) && ((wiersz>=(ADRES->Y0_SET+48) && wiersz<=(ADRES->Y0_SET+50))))
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	7b1b      	ldrb	r3, [r3, #12]
 8007950:	3315      	adds	r3, #21
 8007952:	461a      	mov	r2, r3
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	4293      	cmp	r3, r2
 8007958:	d31d      	bcc.n	8007996 <LCD_print4H+0x1c6>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	7b1b      	ldrb	r3, [r3, #12]
 800795e:	331a      	adds	r3, #26
 8007960:	461a      	mov	r2, r3
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	4293      	cmp	r3, r2
 8007966:	d816      	bhi.n	8007996 <LCD_print4H+0x1c6>
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	7b5b      	ldrb	r3, [r3, #13]
 800796c:	3330      	adds	r3, #48	@ 0x30
 800796e:	461a      	mov	r2, r3
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	4293      	cmp	r3, r2
 8007974:	d30f      	bcc.n	8007996 <LCD_print4H+0x1c6>
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	7b5b      	ldrb	r3, [r3, #13]
 800797a:	3332      	adds	r3, #50	@ 0x32
 800797c:	461a      	mov	r2, r3
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	4293      	cmp	r3, r2
 8007982:	d808      	bhi.n	8007996 <LCD_print4H+0x1c6>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007984:	f107 010c 	add.w	r1, r7, #12
 8007988:	f04f 33ff 	mov.w	r3, #4294967295
 800798c:	2202      	movs	r2, #2
 800798e:	4876      	ldr	r0, [pc, #472]	@ (8007b68 <LCD_print4H+0x398>)
 8007990:	f010 feb5 	bl	80186fe <HAL_SPI_Transmit>
 8007994:	e2f0      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+2)) && ((wiersz==(ADRES->Y0_SET+23))))
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	7b1b      	ldrb	r3, [r3, #12]
 800799a:	3302      	adds	r3, #2
 800799c:	461a      	mov	r2, r3
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d10f      	bne.n	80079c4 <LCD_print4H+0x1f4>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	7b5b      	ldrb	r3, [r3, #13]
 80079a8:	3317      	adds	r3, #23
 80079aa:	461a      	mov	r2, r3
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d108      	bne.n	80079c4 <LCD_print4H+0x1f4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80079b2:	f107 010c 	add.w	r1, r7, #12
 80079b6:	f04f 33ff 	mov.w	r3, #4294967295
 80079ba:	2202      	movs	r2, #2
 80079bc:	486a      	ldr	r0, [pc, #424]	@ (8007b68 <LCD_print4H+0x398>)
 80079be:	f010 fe9e 	bl	80186fe <HAL_SPI_Transmit>
 80079c2:	e2d9      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+22) && wiersz<=(ADRES->Y0_SET+23))))
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	7b1b      	ldrb	r3, [r3, #12]
 80079c8:	3303      	adds	r3, #3
 80079ca:	461a      	mov	r2, r3
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d116      	bne.n	8007a00 <LCD_print4H+0x230>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	7b5b      	ldrb	r3, [r3, #13]
 80079d6:	3316      	adds	r3, #22
 80079d8:	461a      	mov	r2, r3
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	4293      	cmp	r3, r2
 80079de:	d30f      	bcc.n	8007a00 <LCD_print4H+0x230>
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	7b5b      	ldrb	r3, [r3, #13]
 80079e4:	3317      	adds	r3, #23
 80079e6:	461a      	mov	r2, r3
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d808      	bhi.n	8007a00 <LCD_print4H+0x230>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80079ee:	f107 010c 	add.w	r1, r7, #12
 80079f2:	f04f 33ff 	mov.w	r3, #4294967295
 80079f6:	2202      	movs	r2, #2
 80079f8:	485b      	ldr	r0, [pc, #364]	@ (8007b68 <LCD_print4H+0x398>)
 80079fa:	f010 fe80 	bl	80186fe <HAL_SPI_Transmit>
 80079fe:	e2bb      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+4)) && ((wiersz>=(ADRES->Y0_SET+21) && wiersz<=(ADRES->Y0_SET+23))))
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	7b1b      	ldrb	r3, [r3, #12]
 8007a04:	3304      	adds	r3, #4
 8007a06:	461a      	mov	r2, r3
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d116      	bne.n	8007a3c <LCD_print4H+0x26c>
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	7b5b      	ldrb	r3, [r3, #13]
 8007a12:	3315      	adds	r3, #21
 8007a14:	461a      	mov	r2, r3
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d30f      	bcc.n	8007a3c <LCD_print4H+0x26c>
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	7b5b      	ldrb	r3, [r3, #13]
 8007a20:	3317      	adds	r3, #23
 8007a22:	461a      	mov	r2, r3
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d808      	bhi.n	8007a3c <LCD_print4H+0x26c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007a2a:	f107 010c 	add.w	r1, r7, #12
 8007a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a32:	2202      	movs	r2, #2
 8007a34:	484c      	ldr	r0, [pc, #304]	@ (8007b68 <LCD_print4H+0x398>)
 8007a36:	f010 fe62 	bl	80186fe <HAL_SPI_Transmit>
 8007a3a:	e29d      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+5)) && ((wiersz>=(ADRES->Y0_SET+20) && wiersz<=(ADRES->Y0_SET+23))))
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	7b1b      	ldrb	r3, [r3, #12]
 8007a40:	3305      	adds	r3, #5
 8007a42:	461a      	mov	r2, r3
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d116      	bne.n	8007a78 <LCD_print4H+0x2a8>
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	7b5b      	ldrb	r3, [r3, #13]
 8007a4e:	3314      	adds	r3, #20
 8007a50:	461a      	mov	r2, r3
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d30f      	bcc.n	8007a78 <LCD_print4H+0x2a8>
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	7b5b      	ldrb	r3, [r3, #13]
 8007a5c:	3317      	adds	r3, #23
 8007a5e:	461a      	mov	r2, r3
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d808      	bhi.n	8007a78 <LCD_print4H+0x2a8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007a66:	f107 010c 	add.w	r1, r7, #12
 8007a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6e:	2202      	movs	r2, #2
 8007a70:	483d      	ldr	r0, [pc, #244]	@ (8007b68 <LCD_print4H+0x398>)
 8007a72:	f010 fe44 	bl	80186fe <HAL_SPI_Transmit>
 8007a76:	e27f      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+19) && wiersz<=(ADRES->Y0_SET+23))))
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	7b1b      	ldrb	r3, [r3, #12]
 8007a7c:	3306      	adds	r3, #6
 8007a7e:	461a      	mov	r2, r3
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d116      	bne.n	8007ab4 <LCD_print4H+0x2e4>
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	7b5b      	ldrb	r3, [r3, #13]
 8007a8a:	3313      	adds	r3, #19
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d30f      	bcc.n	8007ab4 <LCD_print4H+0x2e4>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	7b5b      	ldrb	r3, [r3, #13]
 8007a98:	3317      	adds	r3, #23
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d808      	bhi.n	8007ab4 <LCD_print4H+0x2e4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007aa2:	f107 010c 	add.w	r1, r7, #12
 8007aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aaa:	2202      	movs	r2, #2
 8007aac:	482e      	ldr	r0, [pc, #184]	@ (8007b68 <LCD_print4H+0x398>)
 8007aae:	f010 fe26 	bl	80186fe <HAL_SPI_Transmit>
 8007ab2:	e261      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+7)) && ((wiersz>=(ADRES->Y0_SET+18) && wiersz<=(ADRES->Y0_SET+22))))
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	7b1b      	ldrb	r3, [r3, #12]
 8007ab8:	3307      	adds	r3, #7
 8007aba:	461a      	mov	r2, r3
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d116      	bne.n	8007af0 <LCD_print4H+0x320>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	7b5b      	ldrb	r3, [r3, #13]
 8007ac6:	3312      	adds	r3, #18
 8007ac8:	461a      	mov	r2, r3
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d30f      	bcc.n	8007af0 <LCD_print4H+0x320>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	7b5b      	ldrb	r3, [r3, #13]
 8007ad4:	3316      	adds	r3, #22
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d808      	bhi.n	8007af0 <LCD_print4H+0x320>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007ade:	f107 010c 	add.w	r1, r7, #12
 8007ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	481f      	ldr	r0, [pc, #124]	@ (8007b68 <LCD_print4H+0x398>)
 8007aea:	f010 fe08 	bl	80186fe <HAL_SPI_Transmit>
 8007aee:	e243      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+8)) && ((wiersz>=(ADRES->Y0_SET+17) && wiersz<=(ADRES->Y0_SET+21))))
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	7b1b      	ldrb	r3, [r3, #12]
 8007af4:	3308      	adds	r3, #8
 8007af6:	461a      	mov	r2, r3
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d116      	bne.n	8007b2c <LCD_print4H+0x35c>
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	7b5b      	ldrb	r3, [r3, #13]
 8007b02:	3311      	adds	r3, #17
 8007b04:	461a      	mov	r2, r3
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d30f      	bcc.n	8007b2c <LCD_print4H+0x35c>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	7b5b      	ldrb	r3, [r3, #13]
 8007b10:	3315      	adds	r3, #21
 8007b12:	461a      	mov	r2, r3
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d808      	bhi.n	8007b2c <LCD_print4H+0x35c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007b1a:	f107 010c 	add.w	r1, r7, #12
 8007b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b22:	2202      	movs	r2, #2
 8007b24:	4810      	ldr	r0, [pc, #64]	@ (8007b68 <LCD_print4H+0x398>)
 8007b26:	f010 fdea 	bl	80186fe <HAL_SPI_Transmit>
 8007b2a:	e225      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+9)) && ((wiersz>=(ADRES->Y0_SET+16) && wiersz<=(ADRES->Y0_SET+20))))
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	7b1b      	ldrb	r3, [r3, #12]
 8007b30:	3309      	adds	r3, #9
 8007b32:	461a      	mov	r2, r3
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d118      	bne.n	8007b6c <LCD_print4H+0x39c>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	7b5b      	ldrb	r3, [r3, #13]
 8007b3e:	3310      	adds	r3, #16
 8007b40:	461a      	mov	r2, r3
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d311      	bcc.n	8007b6c <LCD_print4H+0x39c>
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	7b5b      	ldrb	r3, [r3, #13]
 8007b4c:	3314      	adds	r3, #20
 8007b4e:	461a      	mov	r2, r3
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d80a      	bhi.n	8007b6c <LCD_print4H+0x39c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007b56:	f107 010c 	add.w	r1, r7, #12
 8007b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b5e:	2202      	movs	r2, #2
 8007b60:	4801      	ldr	r0, [pc, #4]	@ (8007b68 <LCD_print4H+0x398>)
 8007b62:	f010 fdcc 	bl	80186fe <HAL_SPI_Transmit>
 8007b66:	e207      	b.n	8007f78 <LCD_print4H+0x7a8>
 8007b68:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+10)) && ((wiersz>=(ADRES->Y0_SET+15) && wiersz<=(ADRES->Y0_SET+19))))
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	7b1b      	ldrb	r3, [r3, #12]
 8007b70:	330a      	adds	r3, #10
 8007b72:	461a      	mov	r2, r3
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d116      	bne.n	8007ba8 <LCD_print4H+0x3d8>
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	7b5b      	ldrb	r3, [r3, #13]
 8007b7e:	330f      	adds	r3, #15
 8007b80:	461a      	mov	r2, r3
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d30f      	bcc.n	8007ba8 <LCD_print4H+0x3d8>
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	7b5b      	ldrb	r3, [r3, #13]
 8007b8c:	3313      	adds	r3, #19
 8007b8e:	461a      	mov	r2, r3
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d808      	bhi.n	8007ba8 <LCD_print4H+0x3d8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007b96:	f107 010c 	add.w	r1, r7, #12
 8007b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	4897      	ldr	r0, [pc, #604]	@ (8007e00 <LCD_print4H+0x630>)
 8007ba2:	f010 fdac 	bl	80186fe <HAL_SPI_Transmit>
 8007ba6:	e1e7      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+11)) && ((wiersz>=(ADRES->Y0_SET+14) && wiersz<=(ADRES->Y0_SET+18))))
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	7b1b      	ldrb	r3, [r3, #12]
 8007bac:	330b      	adds	r3, #11
 8007bae:	461a      	mov	r2, r3
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d116      	bne.n	8007be4 <LCD_print4H+0x414>
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	7b5b      	ldrb	r3, [r3, #13]
 8007bba:	330e      	adds	r3, #14
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d30f      	bcc.n	8007be4 <LCD_print4H+0x414>
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	7b5b      	ldrb	r3, [r3, #13]
 8007bc8:	3312      	adds	r3, #18
 8007bca:	461a      	mov	r2, r3
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d808      	bhi.n	8007be4 <LCD_print4H+0x414>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007bd2:	f107 010c 	add.w	r1, r7, #12
 8007bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bda:	2202      	movs	r2, #2
 8007bdc:	4888      	ldr	r0, [pc, #544]	@ (8007e00 <LCD_print4H+0x630>)
 8007bde:	f010 fd8e 	bl	80186fe <HAL_SPI_Transmit>
 8007be2:	e1c9      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+12)) && ((wiersz>=(ADRES->Y0_SET+13) && wiersz<=(ADRES->Y0_SET+17))))
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	7b1b      	ldrb	r3, [r3, #12]
 8007be8:	330c      	adds	r3, #12
 8007bea:	461a      	mov	r2, r3
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d116      	bne.n	8007c20 <LCD_print4H+0x450>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	7b5b      	ldrb	r3, [r3, #13]
 8007bf6:	330d      	adds	r3, #13
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d30f      	bcc.n	8007c20 <LCD_print4H+0x450>
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	7b5b      	ldrb	r3, [r3, #13]
 8007c04:	3311      	adds	r3, #17
 8007c06:	461a      	mov	r2, r3
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d808      	bhi.n	8007c20 <LCD_print4H+0x450>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007c0e:	f107 010c 	add.w	r1, r7, #12
 8007c12:	f04f 33ff 	mov.w	r3, #4294967295
 8007c16:	2202      	movs	r2, #2
 8007c18:	4879      	ldr	r0, [pc, #484]	@ (8007e00 <LCD_print4H+0x630>)
 8007c1a:	f010 fd70 	bl	80186fe <HAL_SPI_Transmit>
 8007c1e:	e1ab      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+13)) && ((wiersz>=(ADRES->Y0_SET+12) && wiersz<=(ADRES->Y0_SET+16))))
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	7b1b      	ldrb	r3, [r3, #12]
 8007c24:	330d      	adds	r3, #13
 8007c26:	461a      	mov	r2, r3
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d116      	bne.n	8007c5c <LCD_print4H+0x48c>
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	7b5b      	ldrb	r3, [r3, #13]
 8007c32:	330c      	adds	r3, #12
 8007c34:	461a      	mov	r2, r3
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d30f      	bcc.n	8007c5c <LCD_print4H+0x48c>
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	7b5b      	ldrb	r3, [r3, #13]
 8007c40:	3310      	adds	r3, #16
 8007c42:	461a      	mov	r2, r3
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d808      	bhi.n	8007c5c <LCD_print4H+0x48c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007c4a:	f107 010c 	add.w	r1, r7, #12
 8007c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c52:	2202      	movs	r2, #2
 8007c54:	486a      	ldr	r0, [pc, #424]	@ (8007e00 <LCD_print4H+0x630>)
 8007c56:	f010 fd52 	bl	80186fe <HAL_SPI_Transmit>
 8007c5a:	e18d      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+14)) && ((wiersz>=(ADRES->Y0_SET+11) && wiersz<=(ADRES->Y0_SET+15))))
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	7b1b      	ldrb	r3, [r3, #12]
 8007c60:	330e      	adds	r3, #14
 8007c62:	461a      	mov	r2, r3
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d116      	bne.n	8007c98 <LCD_print4H+0x4c8>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	7b5b      	ldrb	r3, [r3, #13]
 8007c6e:	330b      	adds	r3, #11
 8007c70:	461a      	mov	r2, r3
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d30f      	bcc.n	8007c98 <LCD_print4H+0x4c8>
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	7b5b      	ldrb	r3, [r3, #13]
 8007c7c:	330f      	adds	r3, #15
 8007c7e:	461a      	mov	r2, r3
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d808      	bhi.n	8007c98 <LCD_print4H+0x4c8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007c86:	f107 010c 	add.w	r1, r7, #12
 8007c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8e:	2202      	movs	r2, #2
 8007c90:	485b      	ldr	r0, [pc, #364]	@ (8007e00 <LCD_print4H+0x630>)
 8007c92:	f010 fd34 	bl	80186fe <HAL_SPI_Transmit>
 8007c96:	e16f      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+15)) && ((wiersz>=(ADRES->Y0_SET+10) && wiersz<=(ADRES->Y0_SET+14))))
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	7b1b      	ldrb	r3, [r3, #12]
 8007c9c:	330f      	adds	r3, #15
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d116      	bne.n	8007cd4 <LCD_print4H+0x504>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	7b5b      	ldrb	r3, [r3, #13]
 8007caa:	330a      	adds	r3, #10
 8007cac:	461a      	mov	r2, r3
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d30f      	bcc.n	8007cd4 <LCD_print4H+0x504>
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	7b5b      	ldrb	r3, [r3, #13]
 8007cb8:	330e      	adds	r3, #14
 8007cba:	461a      	mov	r2, r3
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d808      	bhi.n	8007cd4 <LCD_print4H+0x504>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007cc2:	f107 010c 	add.w	r1, r7, #12
 8007cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cca:	2202      	movs	r2, #2
 8007ccc:	484c      	ldr	r0, [pc, #304]	@ (8007e00 <LCD_print4H+0x630>)
 8007cce:	f010 fd16 	bl	80186fe <HAL_SPI_Transmit>
 8007cd2:	e151      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+16)) && ((wiersz>=(ADRES->Y0_SET+9) && wiersz<=(ADRES->Y0_SET+13))))
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	7b1b      	ldrb	r3, [r3, #12]
 8007cd8:	3310      	adds	r3, #16
 8007cda:	461a      	mov	r2, r3
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d116      	bne.n	8007d10 <LCD_print4H+0x540>
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	7b5b      	ldrb	r3, [r3, #13]
 8007ce6:	3309      	adds	r3, #9
 8007ce8:	461a      	mov	r2, r3
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d30f      	bcc.n	8007d10 <LCD_print4H+0x540>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	7b5b      	ldrb	r3, [r3, #13]
 8007cf4:	330d      	adds	r3, #13
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d808      	bhi.n	8007d10 <LCD_print4H+0x540>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007cfe:	f107 010c 	add.w	r1, r7, #12
 8007d02:	f04f 33ff 	mov.w	r3, #4294967295
 8007d06:	2202      	movs	r2, #2
 8007d08:	483d      	ldr	r0, [pc, #244]	@ (8007e00 <LCD_print4H+0x630>)
 8007d0a:	f010 fcf8 	bl	80186fe <HAL_SPI_Transmit>
 8007d0e:	e133      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+17)) && ((wiersz>=(ADRES->Y0_SET+8) && wiersz<=(ADRES->Y0_SET+12))))
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	7b1b      	ldrb	r3, [r3, #12]
 8007d14:	3311      	adds	r3, #17
 8007d16:	461a      	mov	r2, r3
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d116      	bne.n	8007d4c <LCD_print4H+0x57c>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	7b5b      	ldrb	r3, [r3, #13]
 8007d22:	3308      	adds	r3, #8
 8007d24:	461a      	mov	r2, r3
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d30f      	bcc.n	8007d4c <LCD_print4H+0x57c>
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	7b5b      	ldrb	r3, [r3, #13]
 8007d30:	330c      	adds	r3, #12
 8007d32:	461a      	mov	r2, r3
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d808      	bhi.n	8007d4c <LCD_print4H+0x57c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007d3a:	f107 010c 	add.w	r1, r7, #12
 8007d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d42:	2202      	movs	r2, #2
 8007d44:	482e      	ldr	r0, [pc, #184]	@ (8007e00 <LCD_print4H+0x630>)
 8007d46:	f010 fcda 	bl	80186fe <HAL_SPI_Transmit>
 8007d4a:	e115      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+18)) && ((wiersz>=(ADRES->Y0_SET+7) && wiersz<=(ADRES->Y0_SET+11))))
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	7b1b      	ldrb	r3, [r3, #12]
 8007d50:	3312      	adds	r3, #18
 8007d52:	461a      	mov	r2, r3
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d116      	bne.n	8007d88 <LCD_print4H+0x5b8>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	7b5b      	ldrb	r3, [r3, #13]
 8007d5e:	3307      	adds	r3, #7
 8007d60:	461a      	mov	r2, r3
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d30f      	bcc.n	8007d88 <LCD_print4H+0x5b8>
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	7b5b      	ldrb	r3, [r3, #13]
 8007d6c:	330b      	adds	r3, #11
 8007d6e:	461a      	mov	r2, r3
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d808      	bhi.n	8007d88 <LCD_print4H+0x5b8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007d76:	f107 010c 	add.w	r1, r7, #12
 8007d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d7e:	2202      	movs	r2, #2
 8007d80:	481f      	ldr	r0, [pc, #124]	@ (8007e00 <LCD_print4H+0x630>)
 8007d82:	f010 fcbc 	bl	80186fe <HAL_SPI_Transmit>
 8007d86:	e0f7      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+19)) && ((wiersz>=(ADRES->Y0_SET+6) && wiersz<=(ADRES->Y0_SET+10))))
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	7b1b      	ldrb	r3, [r3, #12]
 8007d8c:	3313      	adds	r3, #19
 8007d8e:	461a      	mov	r2, r3
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d116      	bne.n	8007dc4 <LCD_print4H+0x5f4>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	7b5b      	ldrb	r3, [r3, #13]
 8007d9a:	3306      	adds	r3, #6
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d30f      	bcc.n	8007dc4 <LCD_print4H+0x5f4>
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	7b5b      	ldrb	r3, [r3, #13]
 8007da8:	330a      	adds	r3, #10
 8007daa:	461a      	mov	r2, r3
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d808      	bhi.n	8007dc4 <LCD_print4H+0x5f4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007db2:	f107 010c 	add.w	r1, r7, #12
 8007db6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dba:	2202      	movs	r2, #2
 8007dbc:	4810      	ldr	r0, [pc, #64]	@ (8007e00 <LCD_print4H+0x630>)
 8007dbe:	f010 fc9e 	bl	80186fe <HAL_SPI_Transmit>
 8007dc2:	e0d9      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+20)) && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+9))))
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	7b1b      	ldrb	r3, [r3, #12]
 8007dc8:	3314      	adds	r3, #20
 8007dca:	461a      	mov	r2, r3
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d118      	bne.n	8007e04 <LCD_print4H+0x634>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	7b5b      	ldrb	r3, [r3, #13]
 8007dd6:	3305      	adds	r3, #5
 8007dd8:	461a      	mov	r2, r3
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d311      	bcc.n	8007e04 <LCD_print4H+0x634>
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	7b5b      	ldrb	r3, [r3, #13]
 8007de4:	3309      	adds	r3, #9
 8007de6:	461a      	mov	r2, r3
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d80a      	bhi.n	8007e04 <LCD_print4H+0x634>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007dee:	f107 010c 	add.w	r1, r7, #12
 8007df2:	f04f 33ff 	mov.w	r3, #4294967295
 8007df6:	2202      	movs	r2, #2
 8007df8:	4801      	ldr	r0, [pc, #4]	@ (8007e00 <LCD_print4H+0x630>)
 8007dfa:	f010 fc80 	bl	80186fe <HAL_SPI_Transmit>
 8007dfe:	e0bb      	b.n	8007f78 <LCD_print4H+0x7a8>
 8007e00:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+21)) && ((wiersz>=(ADRES->Y0_SET+4) && wiersz<=(ADRES->Y0_SET+8))))
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	7b1b      	ldrb	r3, [r3, #12]
 8007e08:	3315      	adds	r3, #21
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d116      	bne.n	8007e40 <LCD_print4H+0x670>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	7b5b      	ldrb	r3, [r3, #13]
 8007e16:	3304      	adds	r3, #4
 8007e18:	461a      	mov	r2, r3
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d30f      	bcc.n	8007e40 <LCD_print4H+0x670>
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	7b5b      	ldrb	r3, [r3, #13]
 8007e24:	3308      	adds	r3, #8
 8007e26:	461a      	mov	r2, r3
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d808      	bhi.n	8007e40 <LCD_print4H+0x670>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007e2e:	f107 010c 	add.w	r1, r7, #12
 8007e32:	f04f 33ff 	mov.w	r3, #4294967295
 8007e36:	2202      	movs	r2, #2
 8007e38:	485d      	ldr	r0, [pc, #372]	@ (8007fb0 <LCD_print4H+0x7e0>)
 8007e3a:	f010 fc60 	bl	80186fe <HAL_SPI_Transmit>
 8007e3e:	e09b      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+22)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+7))))
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	7b1b      	ldrb	r3, [r3, #12]
 8007e44:	3316      	adds	r3, #22
 8007e46:	461a      	mov	r2, r3
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d116      	bne.n	8007e7c <LCD_print4H+0x6ac>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	7b5b      	ldrb	r3, [r3, #13]
 8007e52:	3303      	adds	r3, #3
 8007e54:	461a      	mov	r2, r3
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d30f      	bcc.n	8007e7c <LCD_print4H+0x6ac>
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	7b5b      	ldrb	r3, [r3, #13]
 8007e60:	3307      	adds	r3, #7
 8007e62:	461a      	mov	r2, r3
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d808      	bhi.n	8007e7c <LCD_print4H+0x6ac>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007e6a:	f107 010c 	add.w	r1, r7, #12
 8007e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e72:	2202      	movs	r2, #2
 8007e74:	484e      	ldr	r0, [pc, #312]	@ (8007fb0 <LCD_print4H+0x7e0>)
 8007e76:	f010 fc42 	bl	80186fe <HAL_SPI_Transmit>
 8007e7a:	e07d      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+6))))
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	7b1b      	ldrb	r3, [r3, #12]
 8007e80:	3317      	adds	r3, #23
 8007e82:	461a      	mov	r2, r3
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d116      	bne.n	8007eb8 <LCD_print4H+0x6e8>
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	7b5b      	ldrb	r3, [r3, #13]
 8007e8e:	3302      	adds	r3, #2
 8007e90:	461a      	mov	r2, r3
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d30f      	bcc.n	8007eb8 <LCD_print4H+0x6e8>
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	7b5b      	ldrb	r3, [r3, #13]
 8007e9c:	3306      	adds	r3, #6
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d808      	bhi.n	8007eb8 <LCD_print4H+0x6e8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007ea6:	f107 010c 	add.w	r1, r7, #12
 8007eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8007eae:	2202      	movs	r2, #2
 8007eb0:	483f      	ldr	r0, [pc, #252]	@ (8007fb0 <LCD_print4H+0x7e0>)
 8007eb2:	f010 fc24 	bl	80186fe <HAL_SPI_Transmit>
 8007eb6:	e05f      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+24)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+5))))
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	7b1b      	ldrb	r3, [r3, #12]
 8007ebc:	3318      	adds	r3, #24
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d116      	bne.n	8007ef4 <LCD_print4H+0x724>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	7b5b      	ldrb	r3, [r3, #13]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	461a      	mov	r2, r3
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d30f      	bcc.n	8007ef4 <LCD_print4H+0x724>
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	7b5b      	ldrb	r3, [r3, #13]
 8007ed8:	3305      	adds	r3, #5
 8007eda:	461a      	mov	r2, r3
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d808      	bhi.n	8007ef4 <LCD_print4H+0x724>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007ee2:	f107 010c 	add.w	r1, r7, #12
 8007ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eea:	2202      	movs	r2, #2
 8007eec:	4830      	ldr	r0, [pc, #192]	@ (8007fb0 <LCD_print4H+0x7e0>)
 8007eee:	f010 fc06 	bl	80186fe <HAL_SPI_Transmit>
 8007ef2:	e041      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+25)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+4))))
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	7b1b      	ldrb	r3, [r3, #12]
 8007ef8:	3319      	adds	r3, #25
 8007efa:	461a      	mov	r2, r3
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d115      	bne.n	8007f2e <LCD_print4H+0x75e>
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	7b5b      	ldrb	r3, [r3, #13]
 8007f06:	461a      	mov	r2, r3
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d30f      	bcc.n	8007f2e <LCD_print4H+0x75e>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	7b5b      	ldrb	r3, [r3, #13]
 8007f12:	3304      	adds	r3, #4
 8007f14:	461a      	mov	r2, r3
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d808      	bhi.n	8007f2e <LCD_print4H+0x75e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007f1c:	f107 010c 	add.w	r1, r7, #12
 8007f20:	f04f 33ff 	mov.w	r3, #4294967295
 8007f24:	2202      	movs	r2, #2
 8007f26:	4822      	ldr	r0, [pc, #136]	@ (8007fb0 <LCD_print4H+0x7e0>)
 8007f28:	f010 fbe9 	bl	80186fe <HAL_SPI_Transmit>
 8007f2c:	e024      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else if((kolumna==(ADRES->X0_SET+26)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+3))))
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	7b1b      	ldrb	r3, [r3, #12]
 8007f32:	331a      	adds	r3, #26
 8007f34:	461a      	mov	r2, r3
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d115      	bne.n	8007f68 <LCD_print4H+0x798>
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	7b5b      	ldrb	r3, [r3, #13]
 8007f40:	461a      	mov	r2, r3
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d30f      	bcc.n	8007f68 <LCD_print4H+0x798>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	7b5b      	ldrb	r3, [r3, #13]
 8007f4c:	3303      	adds	r3, #3
 8007f4e:	461a      	mov	r2, r3
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d808      	bhi.n	8007f68 <LCD_print4H+0x798>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8007f56:	f107 010c 	add.w	r1, r7, #12
 8007f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5e:	2202      	movs	r2, #2
 8007f60:	4813      	ldr	r0, [pc, #76]	@ (8007fb0 <LCD_print4H+0x7e0>)
 8007f62:	f010 fbcc 	bl	80186fe <HAL_SPI_Transmit>
 8007f66:	e007      	b.n	8007f78 <LCD_print4H+0x7a8>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8007f68:	f107 0108 	add.w	r1, r7, #8
 8007f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f70:	2202      	movs	r2, #2
 8007f72:	480f      	ldr	r0, [pc, #60]	@ (8007fb0 <LCD_print4H+0x7e0>)
 8007f74:	f010 fbc3 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	617b      	str	r3, [r7, #20]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	7b9b      	ldrb	r3, [r3, #14]
 8007f82:	3301      	adds	r3, #1
 8007f84:	461a      	mov	r2, r3
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	f4ff ac97 	bcc.w	80078bc <LCD_print4H+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	3301      	adds	r3, #1
 8007f92:	613b      	str	r3, [r7, #16]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	7bdb      	ldrb	r3, [r3, #15]
 8007f98:	461a      	mov	r2, r3
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	f4ff ac89 	bcc.w	80078b4 <LCD_print4H+0xe4>
			}
		}
	}
	CS_ON();
 8007fa2:	f7f9 f83f 	bl	8001024 <CS_ON>
}
 8007fa6:	bf00      	nop
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	200004a4 	.word	0x200004a4

08007fb4 <LCD_print5H>:

void LCD_print5H(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	71fb      	strb	r3, [r7, #7]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	71bb      	strb	r3, [r7, #6]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	617b      	str	r3, [r7, #20]
 8007fcc:	2300      	movs	r3, #0
 8007fce:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	223f      	movs	r2, #63	@ 0x3f
 8007fda:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	221f      	movs	r2, #31
 8007fe0:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2200      	movs	r2, #0
 8007fec:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	7cda      	ldrb	r2, [r3, #19]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	7c1b      	ldrb	r3, [r3, #16]
 8007ff6:	4053      	eors	r3, r2
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	b25a      	sxtb	r2, r3
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	7c5b      	ldrb	r3, [r3, #17]
 8008002:	b25b      	sxtb	r3, r3
 8008004:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008008:	b25b      	sxtb	r3, r3
 800800a:	4053      	eors	r3, r2
 800800c:	b25b      	sxtb	r3, r3
 800800e:	b2da      	uxtb	r2, r3
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	7d1b      	ldrb	r3, [r3, #20]
 8008018:	461a      	mov	r2, r3
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	7c5b      	ldrb	r3, [r3, #17]
 800801e:	f003 0307 	and.w	r3, r3, #7
 8008022:	4053      	eors	r3, r2
 8008024:	015b      	lsls	r3, r3, #5
 8008026:	b25a      	sxtb	r2, r3
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	7c9b      	ldrb	r3, [r3, #18]
 800802c:	b25b      	sxtb	r3, r3
 800802e:	4053      	eors	r3, r2
 8008030:	b25b      	sxtb	r3, r3
 8008032:	b2da      	uxtb	r2, r3
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	7cdb      	ldrb	r3, [r3, #19]
 800803c:	733b      	strb	r3, [r7, #12]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	7d1b      	ldrb	r3, [r3, #20]
 8008042:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 8008044:	2300      	movs	r3, #0
 8008046:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8008048:	2300      	movs	r3, #0
 800804a:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 800804c:	7bfa      	ldrb	r2, [r7, #15]
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	4053      	eors	r3, r2
 8008052:	b2db      	uxtb	r3, r3
 8008054:	00db      	lsls	r3, r3, #3
 8008056:	b25a      	sxtb	r2, r3
 8008058:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800805c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008060:	b25b      	sxtb	r3, r3
 8008062:	4053      	eors	r3, r2
 8008064:	b25b      	sxtb	r3, r3
 8008066:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8008068:	7bba      	ldrb	r2, [r7, #14]
 800806a:	79bb      	ldrb	r3, [r7, #6]
 800806c:	f003 0307 	and.w	r3, r3, #7
 8008070:	4053      	eors	r3, r2
 8008072:	015b      	lsls	r3, r3, #5
 8008074:	b25a      	sxtb	r2, r3
 8008076:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800807a:	4053      	eors	r3, r2
 800807c:	b25b      	sxtb	r3, r3
 800807e:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8008080:	7bfb      	ldrb	r3, [r7, #15]
 8008082:	723b      	strb	r3, [r7, #8]
 8008084:	7bbb      	ldrb	r3, [r7, #14]
 8008086:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8008088:	f7f8 ffe2 	bl	8001050 <DC_ON>
	CS_OFF();
 800808c:	f7f8 ffd5 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	7b5b      	ldrb	r3, [r3, #13]
 8008094:	613b      	str	r3, [r7, #16]
 8008096:	e2ab      	b.n	80085f0 <LCD_print5H+0x63c>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	7b1b      	ldrb	r3, [r3, #12]
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	e29c      	b.n	80085da <LCD_print5H+0x626>
		{
			if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+3))))
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	7b1b      	ldrb	r3, [r3, #12]
 80080a4:	3302      	adds	r3, #2
 80080a6:	461a      	mov	r2, r3
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d31c      	bcc.n	80080e8 <LCD_print5H+0x134>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	7b1b      	ldrb	r3, [r3, #12]
 80080b2:	331e      	adds	r3, #30
 80080b4:	461a      	mov	r2, r3
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d815      	bhi.n	80080e8 <LCD_print5H+0x134>
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	7b5b      	ldrb	r3, [r3, #13]
 80080c0:	461a      	mov	r2, r3
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d30f      	bcc.n	80080e8 <LCD_print5H+0x134>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	7b5b      	ldrb	r3, [r3, #13]
 80080cc:	3303      	adds	r3, #3
 80080ce:	461a      	mov	r2, r3
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d808      	bhi.n	80080e8 <LCD_print5H+0x134>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80080d6:	f107 010c 	add.w	r1, r7, #12
 80080da:	f04f 33ff 	mov.w	r3, #4294967295
 80080de:	2202      	movs	r2, #2
 80080e0:	489c      	ldr	r0, [pc, #624]	@ (8008354 <LCD_print5H+0x3a0>)
 80080e2:	f010 fb0c 	bl	80186fe <HAL_SPI_Transmit>
 80080e6:	e275      	b.n	80085d4 <LCD_print5H+0x620>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+5)) && ((wiersz>=(ADRES->Y0_SET+4) && wiersz<=(ADRES->Y0_SET+21))))
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	7b1b      	ldrb	r3, [r3, #12]
 80080ec:	3302      	adds	r3, #2
 80080ee:	461a      	mov	r2, r3
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d31d      	bcc.n	8008132 <LCD_print5H+0x17e>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	7b1b      	ldrb	r3, [r3, #12]
 80080fa:	3305      	adds	r3, #5
 80080fc:	461a      	mov	r2, r3
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	4293      	cmp	r3, r2
 8008102:	d816      	bhi.n	8008132 <LCD_print5H+0x17e>
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	7b5b      	ldrb	r3, [r3, #13]
 8008108:	3304      	adds	r3, #4
 800810a:	461a      	mov	r2, r3
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	4293      	cmp	r3, r2
 8008110:	d30f      	bcc.n	8008132 <LCD_print5H+0x17e>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	7b5b      	ldrb	r3, [r3, #13]
 8008116:	3315      	adds	r3, #21
 8008118:	461a      	mov	r2, r3
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	4293      	cmp	r3, r2
 800811e:	d808      	bhi.n	8008132 <LCD_print5H+0x17e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008120:	f107 010c 	add.w	r1, r7, #12
 8008124:	f04f 33ff 	mov.w	r3, #4294967295
 8008128:	2202      	movs	r2, #2
 800812a:	488a      	ldr	r0, [pc, #552]	@ (8008354 <LCD_print5H+0x3a0>)
 800812c:	f010 fae7 	bl	80186fe <HAL_SPI_Transmit>
 8008130:	e250      	b.n	80085d4 <LCD_print5H+0x620>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+18)) && ((wiersz>=(ADRES->Y0_SET+22) && wiersz<=(ADRES->Y0_SET+25))))
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	7b1b      	ldrb	r3, [r3, #12]
 8008136:	3302      	adds	r3, #2
 8008138:	461a      	mov	r2, r3
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	4293      	cmp	r3, r2
 800813e:	d31d      	bcc.n	800817c <LCD_print5H+0x1c8>
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	7b1b      	ldrb	r3, [r3, #12]
 8008144:	3312      	adds	r3, #18
 8008146:	461a      	mov	r2, r3
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	4293      	cmp	r3, r2
 800814c:	d816      	bhi.n	800817c <LCD_print5H+0x1c8>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	7b5b      	ldrb	r3, [r3, #13]
 8008152:	3316      	adds	r3, #22
 8008154:	461a      	mov	r2, r3
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	4293      	cmp	r3, r2
 800815a:	d30f      	bcc.n	800817c <LCD_print5H+0x1c8>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	7b5b      	ldrb	r3, [r3, #13]
 8008160:	3319      	adds	r3, #25
 8008162:	461a      	mov	r2, r3
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	4293      	cmp	r3, r2
 8008168:	d808      	bhi.n	800817c <LCD_print5H+0x1c8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800816a:	f107 010c 	add.w	r1, r7, #12
 800816e:	f04f 33ff 	mov.w	r3, #4294967295
 8008172:	2202      	movs	r2, #2
 8008174:	4877      	ldr	r0, [pc, #476]	@ (8008354 <LCD_print5H+0x3a0>)
 8008176:	f010 fac2 	bl	80186fe <HAL_SPI_Transmit>
 800817a:	e22b      	b.n	80085d4 <LCD_print5H+0x620>
			}
			else if((kolumna>=(ADRES->X0_SET+27) && kolumna<=(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+34) && wiersz<=(ADRES->Y0_SET+39))))
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	7b1b      	ldrb	r3, [r3, #12]
 8008180:	331b      	adds	r3, #27
 8008182:	461a      	mov	r2, r3
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	4293      	cmp	r3, r2
 8008188:	d31d      	bcc.n	80081c6 <LCD_print5H+0x212>
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	7b1b      	ldrb	r3, [r3, #12]
 800818e:	331e      	adds	r3, #30
 8008190:	461a      	mov	r2, r3
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	4293      	cmp	r3, r2
 8008196:	d816      	bhi.n	80081c6 <LCD_print5H+0x212>
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	7b5b      	ldrb	r3, [r3, #13]
 800819c:	3322      	adds	r3, #34	@ 0x22
 800819e:	461a      	mov	r2, r3
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d30f      	bcc.n	80081c6 <LCD_print5H+0x212>
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	7b5b      	ldrb	r3, [r3, #13]
 80081aa:	3327      	adds	r3, #39	@ 0x27
 80081ac:	461a      	mov	r2, r3
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d808      	bhi.n	80081c6 <LCD_print5H+0x212>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80081b4:	f107 010c 	add.w	r1, r7, #12
 80081b8:	f04f 33ff 	mov.w	r3, #4294967295
 80081bc:	2202      	movs	r2, #2
 80081be:	4865      	ldr	r0, [pc, #404]	@ (8008354 <LCD_print5H+0x3a0>)
 80081c0:	f010 fa9d 	bl	80186fe <HAL_SPI_Transmit>
 80081c4:	e206      	b.n	80085d4 <LCD_print5H+0x620>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+19)) && ((wiersz>=(ADRES->Y0_SET+47) && wiersz<=(ADRES->Y0_SET+50))))
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	7b1b      	ldrb	r3, [r3, #12]
 80081ca:	3302      	adds	r3, #2
 80081cc:	461a      	mov	r2, r3
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d31d      	bcc.n	8008210 <LCD_print5H+0x25c>
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	7b1b      	ldrb	r3, [r3, #12]
 80081d8:	3313      	adds	r3, #19
 80081da:	461a      	mov	r2, r3
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	4293      	cmp	r3, r2
 80081e0:	d816      	bhi.n	8008210 <LCD_print5H+0x25c>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	7b5b      	ldrb	r3, [r3, #13]
 80081e6:	332f      	adds	r3, #47	@ 0x2f
 80081e8:	461a      	mov	r2, r3
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d30f      	bcc.n	8008210 <LCD_print5H+0x25c>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	7b5b      	ldrb	r3, [r3, #13]
 80081f4:	3332      	adds	r3, #50	@ 0x32
 80081f6:	461a      	mov	r2, r3
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d808      	bhi.n	8008210 <LCD_print5H+0x25c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80081fe:	f107 010c 	add.w	r1, r7, #12
 8008202:	f04f 33ff 	mov.w	r3, #4294967295
 8008206:	2202      	movs	r2, #2
 8008208:	4852      	ldr	r0, [pc, #328]	@ (8008354 <LCD_print5H+0x3a0>)
 800820a:	f010 fa78 	bl	80186fe <HAL_SPI_Transmit>
 800820e:	e1e1      	b.n	80085d4 <LCD_print5H+0x620>
			}
			else if((kolumna==(ADRES->X0_SET+19)) && ((wiersz>=(ADRES->Y0_SET+22) && wiersz<=(ADRES->Y0_SET+26))))
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	7b1b      	ldrb	r3, [r3, #12]
 8008214:	3313      	adds	r3, #19
 8008216:	461a      	mov	r2, r3
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	4293      	cmp	r3, r2
 800821c:	d116      	bne.n	800824c <LCD_print5H+0x298>
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	7b5b      	ldrb	r3, [r3, #13]
 8008222:	3316      	adds	r3, #22
 8008224:	461a      	mov	r2, r3
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	4293      	cmp	r3, r2
 800822a:	d30f      	bcc.n	800824c <LCD_print5H+0x298>
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	7b5b      	ldrb	r3, [r3, #13]
 8008230:	331a      	adds	r3, #26
 8008232:	461a      	mov	r2, r3
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	4293      	cmp	r3, r2
 8008238:	d808      	bhi.n	800824c <LCD_print5H+0x298>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800823a:	f107 010c 	add.w	r1, r7, #12
 800823e:	f04f 33ff 	mov.w	r3, #4294967295
 8008242:	2202      	movs	r2, #2
 8008244:	4843      	ldr	r0, [pc, #268]	@ (8008354 <LCD_print5H+0x3a0>)
 8008246:	f010 fa5a 	bl	80186fe <HAL_SPI_Transmit>
 800824a:	e1c3      	b.n	80085d4 <LCD_print5H+0x620>
			}
			else if((kolumna==(ADRES->X0_SET+21)) && ((wiersz>=(ADRES->Y0_SET+24) && wiersz<=(ADRES->Y0_SET+28)) || (wiersz>=(ADRES->Y0_SET+46) && wiersz<=(ADRES->Y0_SET+49))))
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	7b1b      	ldrb	r3, [r3, #12]
 8008250:	3315      	adds	r3, #21
 8008252:	461a      	mov	r2, r3
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	4293      	cmp	r3, r2
 8008258:	d124      	bne.n	80082a4 <LCD_print5H+0x2f0>
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	7b5b      	ldrb	r3, [r3, #13]
 800825e:	3318      	adds	r3, #24
 8008260:	461a      	mov	r2, r3
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	4293      	cmp	r3, r2
 8008266:	d306      	bcc.n	8008276 <LCD_print5H+0x2c2>
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	7b5b      	ldrb	r3, [r3, #13]
 800826c:	331c      	adds	r3, #28
 800826e:	461a      	mov	r2, r3
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	4293      	cmp	r3, r2
 8008274:	d90d      	bls.n	8008292 <LCD_print5H+0x2de>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	7b5b      	ldrb	r3, [r3, #13]
 800827a:	332e      	adds	r3, #46	@ 0x2e
 800827c:	461a      	mov	r2, r3
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	4293      	cmp	r3, r2
 8008282:	d30f      	bcc.n	80082a4 <LCD_print5H+0x2f0>
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	7b5b      	ldrb	r3, [r3, #13]
 8008288:	3331      	adds	r3, #49	@ 0x31
 800828a:	461a      	mov	r2, r3
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	4293      	cmp	r3, r2
 8008290:	d808      	bhi.n	80082a4 <LCD_print5H+0x2f0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008292:	f107 010c 	add.w	r1, r7, #12
 8008296:	f04f 33ff 	mov.w	r3, #4294967295
 800829a:	2202      	movs	r2, #2
 800829c:	482d      	ldr	r0, [pc, #180]	@ (8008354 <LCD_print5H+0x3a0>)
 800829e:	f010 fa2e 	bl	80186fe <HAL_SPI_Transmit>
 80082a2:	e197      	b.n	80085d4 <LCD_print5H+0x620>
			}
			else if((kolumna==(ADRES->X0_SET+22)) && ((wiersz>=(ADRES->Y0_SET+25) && wiersz<=(ADRES->Y0_SET+29)) || (wiersz>=(ADRES->Y0_SET+45) && wiersz<=(ADRES->Y0_SET+48))))
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	7b1b      	ldrb	r3, [r3, #12]
 80082a8:	3316      	adds	r3, #22
 80082aa:	461a      	mov	r2, r3
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d124      	bne.n	80082fc <LCD_print5H+0x348>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	7b5b      	ldrb	r3, [r3, #13]
 80082b6:	3319      	adds	r3, #25
 80082b8:	461a      	mov	r2, r3
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	4293      	cmp	r3, r2
 80082be:	d306      	bcc.n	80082ce <LCD_print5H+0x31a>
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	7b5b      	ldrb	r3, [r3, #13]
 80082c4:	331d      	adds	r3, #29
 80082c6:	461a      	mov	r2, r3
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d90d      	bls.n	80082ea <LCD_print5H+0x336>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	7b5b      	ldrb	r3, [r3, #13]
 80082d2:	332d      	adds	r3, #45	@ 0x2d
 80082d4:	461a      	mov	r2, r3
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	4293      	cmp	r3, r2
 80082da:	d30f      	bcc.n	80082fc <LCD_print5H+0x348>
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	7b5b      	ldrb	r3, [r3, #13]
 80082e0:	3330      	adds	r3, #48	@ 0x30
 80082e2:	461a      	mov	r2, r3
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d808      	bhi.n	80082fc <LCD_print5H+0x348>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80082ea:	f107 010c 	add.w	r1, r7, #12
 80082ee:	f04f 33ff 	mov.w	r3, #4294967295
 80082f2:	2202      	movs	r2, #2
 80082f4:	4817      	ldr	r0, [pc, #92]	@ (8008354 <LCD_print5H+0x3a0>)
 80082f6:	f010 fa02 	bl	80186fe <HAL_SPI_Transmit>
 80082fa:	e16b      	b.n	80085d4 <LCD_print5H+0x620>
			}
			else if((kolumna==(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+26) && wiersz<=(ADRES->Y0_SET+30)) || (wiersz>=(ADRES->Y0_SET+44) && wiersz<=(ADRES->Y0_SET+47))))
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	7b1b      	ldrb	r3, [r3, #12]
 8008300:	3317      	adds	r3, #23
 8008302:	461a      	mov	r2, r3
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	4293      	cmp	r3, r2
 8008308:	d126      	bne.n	8008358 <LCD_print5H+0x3a4>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	7b5b      	ldrb	r3, [r3, #13]
 800830e:	331a      	adds	r3, #26
 8008310:	461a      	mov	r2, r3
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	4293      	cmp	r3, r2
 8008316:	d306      	bcc.n	8008326 <LCD_print5H+0x372>
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	7b5b      	ldrb	r3, [r3, #13]
 800831c:	331e      	adds	r3, #30
 800831e:	461a      	mov	r2, r3
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	4293      	cmp	r3, r2
 8008324:	d90d      	bls.n	8008342 <LCD_print5H+0x38e>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	7b5b      	ldrb	r3, [r3, #13]
 800832a:	332c      	adds	r3, #44	@ 0x2c
 800832c:	461a      	mov	r2, r3
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	4293      	cmp	r3, r2
 8008332:	d311      	bcc.n	8008358 <LCD_print5H+0x3a4>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	7b5b      	ldrb	r3, [r3, #13]
 8008338:	332f      	adds	r3, #47	@ 0x2f
 800833a:	461a      	mov	r2, r3
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	4293      	cmp	r3, r2
 8008340:	d80a      	bhi.n	8008358 <LCD_print5H+0x3a4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008342:	f107 010c 	add.w	r1, r7, #12
 8008346:	f04f 33ff 	mov.w	r3, #4294967295
 800834a:	2202      	movs	r2, #2
 800834c:	4801      	ldr	r0, [pc, #4]	@ (8008354 <LCD_print5H+0x3a0>)
 800834e:	f010 f9d6 	bl	80186fe <HAL_SPI_Transmit>
 8008352:	e13f      	b.n	80085d4 <LCD_print5H+0x620>
 8008354:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+24)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+31)) || (wiersz>=(ADRES->Y0_SET+43) && wiersz<=(ADRES->Y0_SET+46))))
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	7b1b      	ldrb	r3, [r3, #12]
 800835c:	3318      	adds	r3, #24
 800835e:	461a      	mov	r2, r3
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	4293      	cmp	r3, r2
 8008364:	d124      	bne.n	80083b0 <LCD_print5H+0x3fc>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	7b5b      	ldrb	r3, [r3, #13]
 800836a:	331b      	adds	r3, #27
 800836c:	461a      	mov	r2, r3
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	4293      	cmp	r3, r2
 8008372:	d306      	bcc.n	8008382 <LCD_print5H+0x3ce>
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	7b5b      	ldrb	r3, [r3, #13]
 8008378:	331f      	adds	r3, #31
 800837a:	461a      	mov	r2, r3
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	4293      	cmp	r3, r2
 8008380:	d90d      	bls.n	800839e <LCD_print5H+0x3ea>
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	7b5b      	ldrb	r3, [r3, #13]
 8008386:	332b      	adds	r3, #43	@ 0x2b
 8008388:	461a      	mov	r2, r3
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	4293      	cmp	r3, r2
 800838e:	d30f      	bcc.n	80083b0 <LCD_print5H+0x3fc>
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	7b5b      	ldrb	r3, [r3, #13]
 8008394:	332e      	adds	r3, #46	@ 0x2e
 8008396:	461a      	mov	r2, r3
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	4293      	cmp	r3, r2
 800839c:	d808      	bhi.n	80083b0 <LCD_print5H+0x3fc>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800839e:	f107 010c 	add.w	r1, r7, #12
 80083a2:	f04f 33ff 	mov.w	r3, #4294967295
 80083a6:	2202      	movs	r2, #2
 80083a8:	4898      	ldr	r0, [pc, #608]	@ (800860c <LCD_print5H+0x658>)
 80083aa:	f010 f9a8 	bl	80186fe <HAL_SPI_Transmit>
 80083ae:	e111      	b.n	80085d4 <LCD_print5H+0x620>
			}
			else if((kolumna==(ADRES->X0_SET+25)) && ((wiersz>=(ADRES->Y0_SET+28) && wiersz<=(ADRES->Y0_SET+32)) || (wiersz>=(ADRES->Y0_SET+42) && wiersz<=(ADRES->Y0_SET+45))))
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	7b1b      	ldrb	r3, [r3, #12]
 80083b4:	3319      	adds	r3, #25
 80083b6:	461a      	mov	r2, r3
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d124      	bne.n	8008408 <LCD_print5H+0x454>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	7b5b      	ldrb	r3, [r3, #13]
 80083c2:	331c      	adds	r3, #28
 80083c4:	461a      	mov	r2, r3
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d306      	bcc.n	80083da <LCD_print5H+0x426>
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	7b5b      	ldrb	r3, [r3, #13]
 80083d0:	3320      	adds	r3, #32
 80083d2:	461a      	mov	r2, r3
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d90d      	bls.n	80083f6 <LCD_print5H+0x442>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	7b5b      	ldrb	r3, [r3, #13]
 80083de:	332a      	adds	r3, #42	@ 0x2a
 80083e0:	461a      	mov	r2, r3
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d30f      	bcc.n	8008408 <LCD_print5H+0x454>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	7b5b      	ldrb	r3, [r3, #13]
 80083ec:	332d      	adds	r3, #45	@ 0x2d
 80083ee:	461a      	mov	r2, r3
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d808      	bhi.n	8008408 <LCD_print5H+0x454>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80083f6:	f107 010c 	add.w	r1, r7, #12
 80083fa:	f04f 33ff 	mov.w	r3, #4294967295
 80083fe:	2202      	movs	r2, #2
 8008400:	4882      	ldr	r0, [pc, #520]	@ (800860c <LCD_print5H+0x658>)
 8008402:	f010 f97c 	bl	80186fe <HAL_SPI_Transmit>
 8008406:	e0e5      	b.n	80085d4 <LCD_print5H+0x620>
			}
			else if((kolumna==(ADRES->X0_SET+26)) && ((wiersz>=(ADRES->Y0_SET+29) && wiersz<=(ADRES->Y0_SET+33)) || (wiersz>=(ADRES->Y0_SET+41) && wiersz<=(ADRES->Y0_SET+44))))
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	7b1b      	ldrb	r3, [r3, #12]
 800840c:	331a      	adds	r3, #26
 800840e:	461a      	mov	r2, r3
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	4293      	cmp	r3, r2
 8008414:	d124      	bne.n	8008460 <LCD_print5H+0x4ac>
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	7b5b      	ldrb	r3, [r3, #13]
 800841a:	331d      	adds	r3, #29
 800841c:	461a      	mov	r2, r3
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	4293      	cmp	r3, r2
 8008422:	d306      	bcc.n	8008432 <LCD_print5H+0x47e>
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	7b5b      	ldrb	r3, [r3, #13]
 8008428:	3321      	adds	r3, #33	@ 0x21
 800842a:	461a      	mov	r2, r3
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	4293      	cmp	r3, r2
 8008430:	d90d      	bls.n	800844e <LCD_print5H+0x49a>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	7b5b      	ldrb	r3, [r3, #13]
 8008436:	3329      	adds	r3, #41	@ 0x29
 8008438:	461a      	mov	r2, r3
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	4293      	cmp	r3, r2
 800843e:	d30f      	bcc.n	8008460 <LCD_print5H+0x4ac>
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	7b5b      	ldrb	r3, [r3, #13]
 8008444:	332c      	adds	r3, #44	@ 0x2c
 8008446:	461a      	mov	r2, r3
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	4293      	cmp	r3, r2
 800844c:	d808      	bhi.n	8008460 <LCD_print5H+0x4ac>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800844e:	f107 010c 	add.w	r1, r7, #12
 8008452:	f04f 33ff 	mov.w	r3, #4294967295
 8008456:	2202      	movs	r2, #2
 8008458:	486c      	ldr	r0, [pc, #432]	@ (800860c <LCD_print5H+0x658>)
 800845a:	f010 f950 	bl	80186fe <HAL_SPI_Transmit>
 800845e:	e0b9      	b.n	80085d4 <LCD_print5H+0x620>
			}
			else if((kolumna==(ADRES->X0_SET+27)) && ((wiersz>=(ADRES->Y0_SET+30) && wiersz<=(ADRES->Y0_SET+34)) || (wiersz>=(ADRES->Y0_SET+40) && wiersz<=(ADRES->Y0_SET+42))))
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	7b1b      	ldrb	r3, [r3, #12]
 8008464:	331b      	adds	r3, #27
 8008466:	461a      	mov	r2, r3
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	4293      	cmp	r3, r2
 800846c:	d124      	bne.n	80084b8 <LCD_print5H+0x504>
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	7b5b      	ldrb	r3, [r3, #13]
 8008472:	331e      	adds	r3, #30
 8008474:	461a      	mov	r2, r3
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	4293      	cmp	r3, r2
 800847a:	d306      	bcc.n	800848a <LCD_print5H+0x4d6>
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	7b5b      	ldrb	r3, [r3, #13]
 8008480:	3322      	adds	r3, #34	@ 0x22
 8008482:	461a      	mov	r2, r3
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	4293      	cmp	r3, r2
 8008488:	d90d      	bls.n	80084a6 <LCD_print5H+0x4f2>
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	7b5b      	ldrb	r3, [r3, #13]
 800848e:	3328      	adds	r3, #40	@ 0x28
 8008490:	461a      	mov	r2, r3
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	4293      	cmp	r3, r2
 8008496:	d30f      	bcc.n	80084b8 <LCD_print5H+0x504>
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	7b5b      	ldrb	r3, [r3, #13]
 800849c:	332a      	adds	r3, #42	@ 0x2a
 800849e:	461a      	mov	r2, r3
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d808      	bhi.n	80084b8 <LCD_print5H+0x504>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80084a6:	f107 010c 	add.w	r1, r7, #12
 80084aa:	f04f 33ff 	mov.w	r3, #4294967295
 80084ae:	2202      	movs	r2, #2
 80084b0:	4856      	ldr	r0, [pc, #344]	@ (800860c <LCD_print5H+0x658>)
 80084b2:	f010 f924 	bl	80186fe <HAL_SPI_Transmit>
 80084b6:	e08d      	b.n	80085d4 <LCD_print5H+0x620>
			}
			else if((kolumna==(ADRES->X0_SET+20)) && ((wiersz>=(ADRES->Y0_SET+23) && wiersz<=(ADRES->Y0_SET+27)) || (wiersz>=(ADRES->Y0_SET+46) && wiersz<=(ADRES->Y0_SET+49))))
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	7b1b      	ldrb	r3, [r3, #12]
 80084bc:	3314      	adds	r3, #20
 80084be:	461a      	mov	r2, r3
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d124      	bne.n	8008510 <LCD_print5H+0x55c>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	7b5b      	ldrb	r3, [r3, #13]
 80084ca:	3317      	adds	r3, #23
 80084cc:	461a      	mov	r2, r3
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d306      	bcc.n	80084e2 <LCD_print5H+0x52e>
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	7b5b      	ldrb	r3, [r3, #13]
 80084d8:	331b      	adds	r3, #27
 80084da:	461a      	mov	r2, r3
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	4293      	cmp	r3, r2
 80084e0:	d90d      	bls.n	80084fe <LCD_print5H+0x54a>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	7b5b      	ldrb	r3, [r3, #13]
 80084e6:	332e      	adds	r3, #46	@ 0x2e
 80084e8:	461a      	mov	r2, r3
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d30f      	bcc.n	8008510 <LCD_print5H+0x55c>
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	7b5b      	ldrb	r3, [r3, #13]
 80084f4:	3331      	adds	r3, #49	@ 0x31
 80084f6:	461a      	mov	r2, r3
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d808      	bhi.n	8008510 <LCD_print5H+0x55c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80084fe:	f107 010c 	add.w	r1, r7, #12
 8008502:	f04f 33ff 	mov.w	r3, #4294967295
 8008506:	2202      	movs	r2, #2
 8008508:	4840      	ldr	r0, [pc, #256]	@ (800860c <LCD_print5H+0x658>)
 800850a:	f010 f8f8 	bl	80186fe <HAL_SPI_Transmit>
 800850e:	e061      	b.n	80085d4 <LCD_print5H+0x620>
			}
			else if((kolumna==(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+32) && wiersz<=(ADRES->Y0_SET+41))))
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	7b1b      	ldrb	r3, [r3, #12]
 8008514:	331c      	adds	r3, #28
 8008516:	461a      	mov	r2, r3
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	4293      	cmp	r3, r2
 800851c:	d116      	bne.n	800854c <LCD_print5H+0x598>
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	7b5b      	ldrb	r3, [r3, #13]
 8008522:	3320      	adds	r3, #32
 8008524:	461a      	mov	r2, r3
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	4293      	cmp	r3, r2
 800852a:	d30f      	bcc.n	800854c <LCD_print5H+0x598>
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	7b5b      	ldrb	r3, [r3, #13]
 8008530:	3329      	adds	r3, #41	@ 0x29
 8008532:	461a      	mov	r2, r3
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	4293      	cmp	r3, r2
 8008538:	d808      	bhi.n	800854c <LCD_print5H+0x598>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800853a:	f107 010c 	add.w	r1, r7, #12
 800853e:	f04f 33ff 	mov.w	r3, #4294967295
 8008542:	2202      	movs	r2, #2
 8008544:	4831      	ldr	r0, [pc, #196]	@ (800860c <LCD_print5H+0x658>)
 8008546:	f010 f8da 	bl	80186fe <HAL_SPI_Transmit>
 800854a:	e043      	b.n	80085d4 <LCD_print5H+0x620>
			}
			else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+33) && wiersz<=(ADRES->Y0_SET+40))))
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	7b1b      	ldrb	r3, [r3, #12]
 8008550:	331d      	adds	r3, #29
 8008552:	461a      	mov	r2, r3
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	4293      	cmp	r3, r2
 8008558:	d116      	bne.n	8008588 <LCD_print5H+0x5d4>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	7b5b      	ldrb	r3, [r3, #13]
 800855e:	3321      	adds	r3, #33	@ 0x21
 8008560:	461a      	mov	r2, r3
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	4293      	cmp	r3, r2
 8008566:	d30f      	bcc.n	8008588 <LCD_print5H+0x5d4>
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	7b5b      	ldrb	r3, [r3, #13]
 800856c:	3328      	adds	r3, #40	@ 0x28
 800856e:	461a      	mov	r2, r3
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	4293      	cmp	r3, r2
 8008574:	d808      	bhi.n	8008588 <LCD_print5H+0x5d4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008576:	f107 010c 	add.w	r1, r7, #12
 800857a:	f04f 33ff 	mov.w	r3, #4294967295
 800857e:	2202      	movs	r2, #2
 8008580:	4822      	ldr	r0, [pc, #136]	@ (800860c <LCD_print5H+0x658>)
 8008582:	f010 f8bc 	bl	80186fe <HAL_SPI_Transmit>
 8008586:	e025      	b.n	80085d4 <LCD_print5H+0x620>
			}
			else if((kolumna==(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+34) && wiersz<=(ADRES->Y0_SET+39))))
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	7b1b      	ldrb	r3, [r3, #12]
 800858c:	331e      	adds	r3, #30
 800858e:	461a      	mov	r2, r3
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	4293      	cmp	r3, r2
 8008594:	d116      	bne.n	80085c4 <LCD_print5H+0x610>
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	7b5b      	ldrb	r3, [r3, #13]
 800859a:	3322      	adds	r3, #34	@ 0x22
 800859c:	461a      	mov	r2, r3
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d30f      	bcc.n	80085c4 <LCD_print5H+0x610>
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	7b5b      	ldrb	r3, [r3, #13]
 80085a8:	3327      	adds	r3, #39	@ 0x27
 80085aa:	461a      	mov	r2, r3
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d808      	bhi.n	80085c4 <LCD_print5H+0x610>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80085b2:	f107 010c 	add.w	r1, r7, #12
 80085b6:	f04f 33ff 	mov.w	r3, #4294967295
 80085ba:	2202      	movs	r2, #2
 80085bc:	4813      	ldr	r0, [pc, #76]	@ (800860c <LCD_print5H+0x658>)
 80085be:	f010 f89e 	bl	80186fe <HAL_SPI_Transmit>
 80085c2:	e007      	b.n	80085d4 <LCD_print5H+0x620>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 80085c4:	f107 0108 	add.w	r1, r7, #8
 80085c8:	f04f 33ff 	mov.w	r3, #4294967295
 80085cc:	2202      	movs	r2, #2
 80085ce:	480f      	ldr	r0, [pc, #60]	@ (800860c <LCD_print5H+0x658>)
 80085d0:	f010 f895 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	3301      	adds	r3, #1
 80085d8:	617b      	str	r3, [r7, #20]
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	7b9b      	ldrb	r3, [r3, #14]
 80085de:	3301      	adds	r3, #1
 80085e0:	461a      	mov	r2, r3
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	4293      	cmp	r3, r2
 80085e6:	f4ff ad5b 	bcc.w	80080a0 <LCD_print5H+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	3301      	adds	r3, #1
 80085ee:	613b      	str	r3, [r7, #16]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	7bdb      	ldrb	r3, [r3, #15]
 80085f4:	461a      	mov	r2, r3
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	4293      	cmp	r3, r2
 80085fa:	f4ff ad4d 	bcc.w	8008098 <LCD_print5H+0xe4>
			}
		}
	}
	CS_ON();
 80085fe:	f7f8 fd11 	bl	8001024 <CS_ON>
}
 8008602:	bf00      	nop
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	200004a4 	.word	0x200004a4

08008610 <LCD_print6H>:

void LCD_print6H(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	603b      	str	r3, [r7, #0]
 8008618:	4603      	mov	r3, r0
 800861a:	71fb      	strb	r3, [r7, #7]
 800861c:	460b      	mov	r3, r1
 800861e:	71bb      	strb	r3, [r7, #6]
 8008620:	4613      	mov	r3, r2
 8008622:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8008624:	2300      	movs	r3, #0
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	2300      	movs	r3, #0
 800862a:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	2200      	movs	r2, #0
 8008630:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	223f      	movs	r2, #63	@ 0x3f
 8008636:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	221f      	movs	r2, #31
 800863c:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2200      	movs	r2, #0
 8008642:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	2200      	movs	r2, #0
 8008648:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	7cda      	ldrb	r2, [r3, #19]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	7c1b      	ldrb	r3, [r3, #16]
 8008652:	4053      	eors	r3, r2
 8008654:	b2db      	uxtb	r3, r3
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	b25a      	sxtb	r2, r3
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	7c5b      	ldrb	r3, [r3, #17]
 800865e:	b25b      	sxtb	r3, r3
 8008660:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008664:	b25b      	sxtb	r3, r3
 8008666:	4053      	eors	r3, r2
 8008668:	b25b      	sxtb	r3, r3
 800866a:	b2da      	uxtb	r2, r3
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	7d1b      	ldrb	r3, [r3, #20]
 8008674:	461a      	mov	r2, r3
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	7c5b      	ldrb	r3, [r3, #17]
 800867a:	f003 0307 	and.w	r3, r3, #7
 800867e:	4053      	eors	r3, r2
 8008680:	015b      	lsls	r3, r3, #5
 8008682:	b25a      	sxtb	r2, r3
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	7c9b      	ldrb	r3, [r3, #18]
 8008688:	b25b      	sxtb	r3, r3
 800868a:	4053      	eors	r3, r2
 800868c:	b25b      	sxtb	r3, r3
 800868e:	b2da      	uxtb	r2, r3
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	7cdb      	ldrb	r3, [r3, #19]
 8008698:	733b      	strb	r3, [r7, #12]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	7d1b      	ldrb	r3, [r3, #20]
 800869e:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 80086a0:	2300      	movs	r3, #0
 80086a2:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 80086a4:	2300      	movs	r3, #0
 80086a6:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 80086a8:	7bfa      	ldrb	r2, [r7, #15]
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	4053      	eors	r3, r2
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	00db      	lsls	r3, r3, #3
 80086b2:	b25a      	sxtb	r2, r3
 80086b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80086b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086bc:	b25b      	sxtb	r3, r3
 80086be:	4053      	eors	r3, r2
 80086c0:	b25b      	sxtb	r3, r3
 80086c2:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 80086c4:	7bba      	ldrb	r2, [r7, #14]
 80086c6:	79bb      	ldrb	r3, [r7, #6]
 80086c8:	f003 0307 	and.w	r3, r3, #7
 80086cc:	4053      	eors	r3, r2
 80086ce:	015b      	lsls	r3, r3, #5
 80086d0:	b25a      	sxtb	r2, r3
 80086d2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80086d6:	4053      	eors	r3, r2
 80086d8:	b25b      	sxtb	r3, r3
 80086da:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	723b      	strb	r3, [r7, #8]
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
 80086e2:	727b      	strb	r3, [r7, #9]
	DC_ON();
 80086e4:	f7f8 fcb4 	bl	8001050 <DC_ON>
	CS_OFF();
 80086e8:	f7f8 fca7 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	7b5b      	ldrb	r3, [r3, #13]
 80086f0:	613b      	str	r3, [r7, #16]
 80086f2:	f000 bc8b 	b.w	800900c <LCD_print6H+0x9fc>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	7b1b      	ldrb	r3, [r3, #12]
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	f000 bc7b 	b.w	8008ff6 <LCD_print6H+0x9e6>
		{
			if((kolumna>=(ADRES->X0_SET+16) && kolumna<=(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+3))))
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	7b1b      	ldrb	r3, [r3, #12]
 8008704:	3310      	adds	r3, #16
 8008706:	461a      	mov	r2, r3
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	4293      	cmp	r3, r2
 800870c:	d31d      	bcc.n	800874a <LCD_print6H+0x13a>
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	7b1b      	ldrb	r3, [r3, #12]
 8008712:	331e      	adds	r3, #30
 8008714:	461a      	mov	r2, r3
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	4293      	cmp	r3, r2
 800871a:	d816      	bhi.n	800874a <LCD_print6H+0x13a>
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	7b5b      	ldrb	r3, [r3, #13]
 8008720:	461a      	mov	r2, r3
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	4293      	cmp	r3, r2
 8008726:	d310      	bcc.n	800874a <LCD_print6H+0x13a>
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	7b5b      	ldrb	r3, [r3, #13]
 800872c:	3303      	adds	r3, #3
 800872e:	461a      	mov	r2, r3
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	4293      	cmp	r3, r2
 8008734:	d809      	bhi.n	800874a <LCD_print6H+0x13a>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008736:	f107 010c 	add.w	r1, r7, #12
 800873a:	f04f 33ff 	mov.w	r3, #4294967295
 800873e:	2202      	movs	r2, #2
 8008740:	4898      	ldr	r0, [pc, #608]	@ (80089a4 <LCD_print6H+0x394>)
 8008742:	f00f ffdc 	bl	80186fe <HAL_SPI_Transmit>
 8008746:	f000 bc53 	b.w	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+14) && wiersz<=(ADRES->Y0_SET+44))))
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	7b1b      	ldrb	r3, [r3, #12]
 800874e:	3302      	adds	r3, #2
 8008750:	461a      	mov	r2, r3
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	4293      	cmp	r3, r2
 8008756:	d31e      	bcc.n	8008796 <LCD_print6H+0x186>
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	7b1b      	ldrb	r3, [r3, #12]
 800875c:	3306      	adds	r3, #6
 800875e:	461a      	mov	r2, r3
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	4293      	cmp	r3, r2
 8008764:	d817      	bhi.n	8008796 <LCD_print6H+0x186>
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	7b5b      	ldrb	r3, [r3, #13]
 800876a:	330e      	adds	r3, #14
 800876c:	461a      	mov	r2, r3
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	4293      	cmp	r3, r2
 8008772:	d310      	bcc.n	8008796 <LCD_print6H+0x186>
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	7b5b      	ldrb	r3, [r3, #13]
 8008778:	332c      	adds	r3, #44	@ 0x2c
 800877a:	461a      	mov	r2, r3
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	4293      	cmp	r3, r2
 8008780:	d809      	bhi.n	8008796 <LCD_print6H+0x186>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008782:	f107 010c 	add.w	r1, r7, #12
 8008786:	f04f 33ff 	mov.w	r3, #4294967295
 800878a:	2202      	movs	r2, #2
 800878c:	4885      	ldr	r0, [pc, #532]	@ (80089a4 <LCD_print6H+0x394>)
 800878e:	f00f ffb6 	bl	80186fe <HAL_SPI_Transmit>
 8008792:	f000 bc2d 	b.w	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna>=(ADRES->X0_SET+14) && kolumna<=(ADRES->X0_SET+22)) && ((wiersz>=(ADRES->Y0_SET+23) && wiersz<=(ADRES->Y0_SET+26))))
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	7b1b      	ldrb	r3, [r3, #12]
 800879a:	330e      	adds	r3, #14
 800879c:	461a      	mov	r2, r3
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d31e      	bcc.n	80087e2 <LCD_print6H+0x1d2>
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	7b1b      	ldrb	r3, [r3, #12]
 80087a8:	3316      	adds	r3, #22
 80087aa:	461a      	mov	r2, r3
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d817      	bhi.n	80087e2 <LCD_print6H+0x1d2>
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	7b5b      	ldrb	r3, [r3, #13]
 80087b6:	3317      	adds	r3, #23
 80087b8:	461a      	mov	r2, r3
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	4293      	cmp	r3, r2
 80087be:	d310      	bcc.n	80087e2 <LCD_print6H+0x1d2>
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	7b5b      	ldrb	r3, [r3, #13]
 80087c4:	331a      	adds	r3, #26
 80087c6:	461a      	mov	r2, r3
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d809      	bhi.n	80087e2 <LCD_print6H+0x1d2>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80087ce:	f107 010c 	add.w	r1, r7, #12
 80087d2:	f04f 33ff 	mov.w	r3, #4294967295
 80087d6:	2202      	movs	r2, #2
 80087d8:	4872      	ldr	r0, [pc, #456]	@ (80089a4 <LCD_print6H+0x394>)
 80087da:	f00f ff90 	bl	80186fe <HAL_SPI_Transmit>
 80087de:	f000 bc07 	b.w	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna>=(ADRES->X0_SET+27) && kolumna<=(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+31) && wiersz<=(ADRES->Y0_SET+43))))
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	7b1b      	ldrb	r3, [r3, #12]
 80087e6:	331b      	adds	r3, #27
 80087e8:	461a      	mov	r2, r3
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d31d      	bcc.n	800882c <LCD_print6H+0x21c>
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	7b1b      	ldrb	r3, [r3, #12]
 80087f4:	331e      	adds	r3, #30
 80087f6:	461a      	mov	r2, r3
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d816      	bhi.n	800882c <LCD_print6H+0x21c>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	7b5b      	ldrb	r3, [r3, #13]
 8008802:	331f      	adds	r3, #31
 8008804:	461a      	mov	r2, r3
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	4293      	cmp	r3, r2
 800880a:	d30f      	bcc.n	800882c <LCD_print6H+0x21c>
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	7b5b      	ldrb	r3, [r3, #13]
 8008810:	332b      	adds	r3, #43	@ 0x2b
 8008812:	461a      	mov	r2, r3
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	4293      	cmp	r3, r2
 8008818:	d808      	bhi.n	800882c <LCD_print6H+0x21c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800881a:	f107 010c 	add.w	r1, r7, #12
 800881e:	f04f 33ff 	mov.w	r3, #4294967295
 8008822:	2202      	movs	r2, #2
 8008824:	485f      	ldr	r0, [pc, #380]	@ (80089a4 <LCD_print6H+0x394>)
 8008826:	f00f ff6a 	bl	80186fe <HAL_SPI_Transmit>
 800882a:	e3e1      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna>=(ADRES->X0_SET+10) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+47) && wiersz<=(ADRES->Y0_SET+50))))
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	7b1b      	ldrb	r3, [r3, #12]
 8008830:	330a      	adds	r3, #10
 8008832:	461a      	mov	r2, r3
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	4293      	cmp	r3, r2
 8008838:	d31d      	bcc.n	8008876 <LCD_print6H+0x266>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	7b1b      	ldrb	r3, [r3, #12]
 800883e:	3317      	adds	r3, #23
 8008840:	461a      	mov	r2, r3
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	4293      	cmp	r3, r2
 8008846:	d816      	bhi.n	8008876 <LCD_print6H+0x266>
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	7b5b      	ldrb	r3, [r3, #13]
 800884c:	332f      	adds	r3, #47	@ 0x2f
 800884e:	461a      	mov	r2, r3
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	4293      	cmp	r3, r2
 8008854:	d30f      	bcc.n	8008876 <LCD_print6H+0x266>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	7b5b      	ldrb	r3, [r3, #13]
 800885a:	3332      	adds	r3, #50	@ 0x32
 800885c:	461a      	mov	r2, r3
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	4293      	cmp	r3, r2
 8008862:	d808      	bhi.n	8008876 <LCD_print6H+0x266>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008864:	f107 010c 	add.w	r1, r7, #12
 8008868:	f04f 33ff 	mov.w	r3, #4294967295
 800886c:	2202      	movs	r2, #2
 800886e:	484d      	ldr	r0, [pc, #308]	@ (80089a4 <LCD_print6H+0x394>)
 8008870:	f00f ff45 	bl	80186fe <HAL_SPI_Transmit>
 8008874:	e3bc      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+19)) && ((wiersz>=(ADRES->Y0_SET+22) && wiersz<=(ADRES->Y0_SET+26))))
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	7b1b      	ldrb	r3, [r3, #12]
 800887a:	3313      	adds	r3, #19
 800887c:	461a      	mov	r2, r3
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	4293      	cmp	r3, r2
 8008882:	d116      	bne.n	80088b2 <LCD_print6H+0x2a2>
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	7b5b      	ldrb	r3, [r3, #13]
 8008888:	3316      	adds	r3, #22
 800888a:	461a      	mov	r2, r3
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	4293      	cmp	r3, r2
 8008890:	d30f      	bcc.n	80088b2 <LCD_print6H+0x2a2>
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	7b5b      	ldrb	r3, [r3, #13]
 8008896:	331a      	adds	r3, #26
 8008898:	461a      	mov	r2, r3
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	4293      	cmp	r3, r2
 800889e:	d808      	bhi.n	80088b2 <LCD_print6H+0x2a2>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80088a0:	f107 010c 	add.w	r1, r7, #12
 80088a4:	f04f 33ff 	mov.w	r3, #4294967295
 80088a8:	2202      	movs	r2, #2
 80088aa:	483e      	ldr	r0, [pc, #248]	@ (80089a4 <LCD_print6H+0x394>)
 80088ac:	f00f ff27 	bl	80186fe <HAL_SPI_Transmit>
 80088b0:	e39e      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+13) && wiersz<=(ADRES->Y0_SET+45))))
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	7b1b      	ldrb	r3, [r3, #12]
 80088b6:	3303      	adds	r3, #3
 80088b8:	461a      	mov	r2, r3
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	4293      	cmp	r3, r2
 80088be:	d116      	bne.n	80088ee <LCD_print6H+0x2de>
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	7b5b      	ldrb	r3, [r3, #13]
 80088c4:	330d      	adds	r3, #13
 80088c6:	461a      	mov	r2, r3
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d30f      	bcc.n	80088ee <LCD_print6H+0x2de>
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	7b5b      	ldrb	r3, [r3, #13]
 80088d2:	332d      	adds	r3, #45	@ 0x2d
 80088d4:	461a      	mov	r2, r3
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	4293      	cmp	r3, r2
 80088da:	d808      	bhi.n	80088ee <LCD_print6H+0x2de>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80088dc:	f107 010c 	add.w	r1, r7, #12
 80088e0:	f04f 33ff 	mov.w	r3, #4294967295
 80088e4:	2202      	movs	r2, #2
 80088e6:	482f      	ldr	r0, [pc, #188]	@ (80089a4 <LCD_print6H+0x394>)
 80088e8:	f00f ff09 	bl	80186fe <HAL_SPI_Transmit>
 80088ec:	e380      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+4)) && ((wiersz>=(ADRES->Y0_SET+12) && wiersz<=(ADRES->Y0_SET+46))))
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	7b1b      	ldrb	r3, [r3, #12]
 80088f2:	3304      	adds	r3, #4
 80088f4:	461a      	mov	r2, r3
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d116      	bne.n	800892a <LCD_print6H+0x31a>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	7b5b      	ldrb	r3, [r3, #13]
 8008900:	330c      	adds	r3, #12
 8008902:	461a      	mov	r2, r3
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	4293      	cmp	r3, r2
 8008908:	d30f      	bcc.n	800892a <LCD_print6H+0x31a>
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	7b5b      	ldrb	r3, [r3, #13]
 800890e:	332e      	adds	r3, #46	@ 0x2e
 8008910:	461a      	mov	r2, r3
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	4293      	cmp	r3, r2
 8008916:	d808      	bhi.n	800892a <LCD_print6H+0x31a>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008918:	f107 010c 	add.w	r1, r7, #12
 800891c:	f04f 33ff 	mov.w	r3, #4294967295
 8008920:	2202      	movs	r2, #2
 8008922:	4820      	ldr	r0, [pc, #128]	@ (80089a4 <LCD_print6H+0x394>)
 8008924:	f00f feeb 	bl	80186fe <HAL_SPI_Transmit>
 8008928:	e362      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+5)) && ((wiersz>=(ADRES->Y0_SET+11) && wiersz<=(ADRES->Y0_SET+47))))
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	7b1b      	ldrb	r3, [r3, #12]
 800892e:	3305      	adds	r3, #5
 8008930:	461a      	mov	r2, r3
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	4293      	cmp	r3, r2
 8008936:	d116      	bne.n	8008966 <LCD_print6H+0x356>
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	7b5b      	ldrb	r3, [r3, #13]
 800893c:	330b      	adds	r3, #11
 800893e:	461a      	mov	r2, r3
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	4293      	cmp	r3, r2
 8008944:	d30f      	bcc.n	8008966 <LCD_print6H+0x356>
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	7b5b      	ldrb	r3, [r3, #13]
 800894a:	332f      	adds	r3, #47	@ 0x2f
 800894c:	461a      	mov	r2, r3
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	4293      	cmp	r3, r2
 8008952:	d808      	bhi.n	8008966 <LCD_print6H+0x356>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008954:	f107 010c 	add.w	r1, r7, #12
 8008958:	f04f 33ff 	mov.w	r3, #4294967295
 800895c:	2202      	movs	r2, #2
 800895e:	4811      	ldr	r0, [pc, #68]	@ (80089a4 <LCD_print6H+0x394>)
 8008960:	f00f fecd 	bl	80186fe <HAL_SPI_Transmit>
 8008964:	e344      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+10) && wiersz<=(ADRES->Y0_SET+48))))
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	7b1b      	ldrb	r3, [r3, #12]
 800896a:	3306      	adds	r3, #6
 800896c:	461a      	mov	r2, r3
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	4293      	cmp	r3, r2
 8008972:	d119      	bne.n	80089a8 <LCD_print6H+0x398>
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	7b5b      	ldrb	r3, [r3, #13]
 8008978:	330a      	adds	r3, #10
 800897a:	461a      	mov	r2, r3
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	4293      	cmp	r3, r2
 8008980:	d312      	bcc.n	80089a8 <LCD_print6H+0x398>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	7b5b      	ldrb	r3, [r3, #13]
 8008986:	3330      	adds	r3, #48	@ 0x30
 8008988:	461a      	mov	r2, r3
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	4293      	cmp	r3, r2
 800898e:	d80b      	bhi.n	80089a8 <LCD_print6H+0x398>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008990:	f107 010c 	add.w	r1, r7, #12
 8008994:	f04f 33ff 	mov.w	r3, #4294967295
 8008998:	2202      	movs	r2, #2
 800899a:	4802      	ldr	r0, [pc, #8]	@ (80089a4 <LCD_print6H+0x394>)
 800899c:	f00f feaf 	bl	80186fe <HAL_SPI_Transmit>
 80089a0:	e326      	b.n	8008ff0 <LCD_print6H+0x9e0>
 80089a2:	bf00      	nop
 80089a4:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+7)) && ((wiersz>=(ADRES->Y0_SET+9) && wiersz<=(ADRES->Y0_SET+13)) || (wiersz>=(ADRES->Y0_SET+30) && wiersz<=(ADRES->Y0_SET+49))))
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	7b1b      	ldrb	r3, [r3, #12]
 80089ac:	3307      	adds	r3, #7
 80089ae:	461a      	mov	r2, r3
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d124      	bne.n	8008a00 <LCD_print6H+0x3f0>
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	7b5b      	ldrb	r3, [r3, #13]
 80089ba:	3309      	adds	r3, #9
 80089bc:	461a      	mov	r2, r3
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d306      	bcc.n	80089d2 <LCD_print6H+0x3c2>
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	7b5b      	ldrb	r3, [r3, #13]
 80089c8:	330d      	adds	r3, #13
 80089ca:	461a      	mov	r2, r3
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d90d      	bls.n	80089ee <LCD_print6H+0x3de>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	7b5b      	ldrb	r3, [r3, #13]
 80089d6:	331e      	adds	r3, #30
 80089d8:	461a      	mov	r2, r3
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	4293      	cmp	r3, r2
 80089de:	d30f      	bcc.n	8008a00 <LCD_print6H+0x3f0>
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	7b5b      	ldrb	r3, [r3, #13]
 80089e4:	3331      	adds	r3, #49	@ 0x31
 80089e6:	461a      	mov	r2, r3
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d808      	bhi.n	8008a00 <LCD_print6H+0x3f0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80089ee:	f107 010c 	add.w	r1, r7, #12
 80089f2:	f04f 33ff 	mov.w	r3, #4294967295
 80089f6:	2202      	movs	r2, #2
 80089f8:	4893      	ldr	r0, [pc, #588]	@ (8008c48 <LCD_print6H+0x638>)
 80089fa:	f00f fe80 	bl	80186fe <HAL_SPI_Transmit>
 80089fe:	e2f7      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+8)) && ((wiersz>=(ADRES->Y0_SET+8) && wiersz<=(ADRES->Y0_SET+12)) || (wiersz>=(ADRES->Y0_SET+29) && wiersz<=(ADRES->Y0_SET+32))|| (wiersz>=(ADRES->Y0_SET+46) && wiersz<=(ADRES->Y0_SET+49))))
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	7b1b      	ldrb	r3, [r3, #12]
 8008a04:	3308      	adds	r3, #8
 8008a06:	461a      	mov	r2, r3
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d132      	bne.n	8008a74 <LCD_print6H+0x464>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	7b5b      	ldrb	r3, [r3, #13]
 8008a12:	3308      	adds	r3, #8
 8008a14:	461a      	mov	r2, r3
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d306      	bcc.n	8008a2a <LCD_print6H+0x41a>
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	7b5b      	ldrb	r3, [r3, #13]
 8008a20:	330c      	adds	r3, #12
 8008a22:	461a      	mov	r2, r3
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d91b      	bls.n	8008a62 <LCD_print6H+0x452>
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	7b5b      	ldrb	r3, [r3, #13]
 8008a2e:	331d      	adds	r3, #29
 8008a30:	461a      	mov	r2, r3
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d306      	bcc.n	8008a46 <LCD_print6H+0x436>
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	7b5b      	ldrb	r3, [r3, #13]
 8008a3c:	3320      	adds	r3, #32
 8008a3e:	461a      	mov	r2, r3
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d90d      	bls.n	8008a62 <LCD_print6H+0x452>
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	7b5b      	ldrb	r3, [r3, #13]
 8008a4a:	332e      	adds	r3, #46	@ 0x2e
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d30f      	bcc.n	8008a74 <LCD_print6H+0x464>
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	7b5b      	ldrb	r3, [r3, #13]
 8008a58:	3331      	adds	r3, #49	@ 0x31
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d808      	bhi.n	8008a74 <LCD_print6H+0x464>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008a62:	f107 010c 	add.w	r1, r7, #12
 8008a66:	f04f 33ff 	mov.w	r3, #4294967295
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	4876      	ldr	r0, [pc, #472]	@ (8008c48 <LCD_print6H+0x638>)
 8008a6e:	f00f fe46 	bl	80186fe <HAL_SPI_Transmit>
 8008a72:	e2bd      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+9)) && ((wiersz>=(ADRES->Y0_SET+7) && wiersz<=(ADRES->Y0_SET+11)) || (wiersz>=(ADRES->Y0_SET+28) && wiersz<=(ADRES->Y0_SET+31))|| (wiersz>=(ADRES->Y0_SET+47) && wiersz<=(ADRES->Y0_SET+50))))
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	7b1b      	ldrb	r3, [r3, #12]
 8008a78:	3309      	adds	r3, #9
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d132      	bne.n	8008ae8 <LCD_print6H+0x4d8>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	7b5b      	ldrb	r3, [r3, #13]
 8008a86:	3307      	adds	r3, #7
 8008a88:	461a      	mov	r2, r3
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d306      	bcc.n	8008a9e <LCD_print6H+0x48e>
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	7b5b      	ldrb	r3, [r3, #13]
 8008a94:	330b      	adds	r3, #11
 8008a96:	461a      	mov	r2, r3
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d91b      	bls.n	8008ad6 <LCD_print6H+0x4c6>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	7b5b      	ldrb	r3, [r3, #13]
 8008aa2:	331c      	adds	r3, #28
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d306      	bcc.n	8008aba <LCD_print6H+0x4aa>
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	7b5b      	ldrb	r3, [r3, #13]
 8008ab0:	331f      	adds	r3, #31
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d90d      	bls.n	8008ad6 <LCD_print6H+0x4c6>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	7b5b      	ldrb	r3, [r3, #13]
 8008abe:	332f      	adds	r3, #47	@ 0x2f
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d30f      	bcc.n	8008ae8 <LCD_print6H+0x4d8>
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	7b5b      	ldrb	r3, [r3, #13]
 8008acc:	3332      	adds	r3, #50	@ 0x32
 8008ace:	461a      	mov	r2, r3
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d808      	bhi.n	8008ae8 <LCD_print6H+0x4d8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008ad6:	f107 010c 	add.w	r1, r7, #12
 8008ada:	f04f 33ff 	mov.w	r3, #4294967295
 8008ade:	2202      	movs	r2, #2
 8008ae0:	4859      	ldr	r0, [pc, #356]	@ (8008c48 <LCD_print6H+0x638>)
 8008ae2:	f00f fe0c 	bl	80186fe <HAL_SPI_Transmit>
 8008ae6:	e283      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+10)) && ((wiersz>=(ADRES->Y0_SET+6) && wiersz<=(ADRES->Y0_SET+10)) || (wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+30))))
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	7b1b      	ldrb	r3, [r3, #12]
 8008aec:	330a      	adds	r3, #10
 8008aee:	461a      	mov	r2, r3
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d124      	bne.n	8008b40 <LCD_print6H+0x530>
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	7b5b      	ldrb	r3, [r3, #13]
 8008afa:	3306      	adds	r3, #6
 8008afc:	461a      	mov	r2, r3
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d306      	bcc.n	8008b12 <LCD_print6H+0x502>
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	7b5b      	ldrb	r3, [r3, #13]
 8008b08:	330a      	adds	r3, #10
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d90d      	bls.n	8008b2e <LCD_print6H+0x51e>
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	7b5b      	ldrb	r3, [r3, #13]
 8008b16:	331b      	adds	r3, #27
 8008b18:	461a      	mov	r2, r3
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d30f      	bcc.n	8008b40 <LCD_print6H+0x530>
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	7b5b      	ldrb	r3, [r3, #13]
 8008b24:	331e      	adds	r3, #30
 8008b26:	461a      	mov	r2, r3
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d808      	bhi.n	8008b40 <LCD_print6H+0x530>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008b2e:	f107 010c 	add.w	r1, r7, #12
 8008b32:	f04f 33ff 	mov.w	r3, #4294967295
 8008b36:	2202      	movs	r2, #2
 8008b38:	4843      	ldr	r0, [pc, #268]	@ (8008c48 <LCD_print6H+0x638>)
 8008b3a:	f00f fde0 	bl	80186fe <HAL_SPI_Transmit>
 8008b3e:	e257      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+11)) && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+9)) || (wiersz>=(ADRES->Y0_SET+26) && wiersz<=(ADRES->Y0_SET+29))))
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	7b1b      	ldrb	r3, [r3, #12]
 8008b44:	330b      	adds	r3, #11
 8008b46:	461a      	mov	r2, r3
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d124      	bne.n	8008b98 <LCD_print6H+0x588>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	7b5b      	ldrb	r3, [r3, #13]
 8008b52:	3305      	adds	r3, #5
 8008b54:	461a      	mov	r2, r3
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d306      	bcc.n	8008b6a <LCD_print6H+0x55a>
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	7b5b      	ldrb	r3, [r3, #13]
 8008b60:	3309      	adds	r3, #9
 8008b62:	461a      	mov	r2, r3
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d90d      	bls.n	8008b86 <LCD_print6H+0x576>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	7b5b      	ldrb	r3, [r3, #13]
 8008b6e:	331a      	adds	r3, #26
 8008b70:	461a      	mov	r2, r3
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d30f      	bcc.n	8008b98 <LCD_print6H+0x588>
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	7b5b      	ldrb	r3, [r3, #13]
 8008b7c:	331d      	adds	r3, #29
 8008b7e:	461a      	mov	r2, r3
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d808      	bhi.n	8008b98 <LCD_print6H+0x588>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008b86:	f107 010c 	add.w	r1, r7, #12
 8008b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b8e:	2202      	movs	r2, #2
 8008b90:	482d      	ldr	r0, [pc, #180]	@ (8008c48 <LCD_print6H+0x638>)
 8008b92:	f00f fdb4 	bl	80186fe <HAL_SPI_Transmit>
 8008b96:	e22b      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+12)) && ((wiersz>=(ADRES->Y0_SET+4) && wiersz<=(ADRES->Y0_SET+8)) || (wiersz>=(ADRES->Y0_SET+25) && wiersz<=(ADRES->Y0_SET+28))))
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	7b1b      	ldrb	r3, [r3, #12]
 8008b9c:	330c      	adds	r3, #12
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d124      	bne.n	8008bf0 <LCD_print6H+0x5e0>
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	7b5b      	ldrb	r3, [r3, #13]
 8008baa:	3304      	adds	r3, #4
 8008bac:	461a      	mov	r2, r3
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d306      	bcc.n	8008bc2 <LCD_print6H+0x5b2>
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	7b5b      	ldrb	r3, [r3, #13]
 8008bb8:	3308      	adds	r3, #8
 8008bba:	461a      	mov	r2, r3
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d90d      	bls.n	8008bde <LCD_print6H+0x5ce>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	7b5b      	ldrb	r3, [r3, #13]
 8008bc6:	3319      	adds	r3, #25
 8008bc8:	461a      	mov	r2, r3
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d30f      	bcc.n	8008bf0 <LCD_print6H+0x5e0>
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	7b5b      	ldrb	r3, [r3, #13]
 8008bd4:	331c      	adds	r3, #28
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d808      	bhi.n	8008bf0 <LCD_print6H+0x5e0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008bde:	f107 010c 	add.w	r1, r7, #12
 8008be2:	f04f 33ff 	mov.w	r3, #4294967295
 8008be6:	2202      	movs	r2, #2
 8008be8:	4817      	ldr	r0, [pc, #92]	@ (8008c48 <LCD_print6H+0x638>)
 8008bea:	f00f fd88 	bl	80186fe <HAL_SPI_Transmit>
 8008bee:	e1ff      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+13)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+7)) || (wiersz>=(ADRES->Y0_SET+24) && wiersz<=(ADRES->Y0_SET+27))))
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	7b1b      	ldrb	r3, [r3, #12]
 8008bf4:	330d      	adds	r3, #13
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d126      	bne.n	8008c4c <LCD_print6H+0x63c>
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	7b5b      	ldrb	r3, [r3, #13]
 8008c02:	3303      	adds	r3, #3
 8008c04:	461a      	mov	r2, r3
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d306      	bcc.n	8008c1a <LCD_print6H+0x60a>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	7b5b      	ldrb	r3, [r3, #13]
 8008c10:	3307      	adds	r3, #7
 8008c12:	461a      	mov	r2, r3
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d90d      	bls.n	8008c36 <LCD_print6H+0x626>
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	7b5b      	ldrb	r3, [r3, #13]
 8008c1e:	3318      	adds	r3, #24
 8008c20:	461a      	mov	r2, r3
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d311      	bcc.n	8008c4c <LCD_print6H+0x63c>
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	7b5b      	ldrb	r3, [r3, #13]
 8008c2c:	331b      	adds	r3, #27
 8008c2e:	461a      	mov	r2, r3
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d80a      	bhi.n	8008c4c <LCD_print6H+0x63c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008c36:	f107 010c 	add.w	r1, r7, #12
 8008c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3e:	2202      	movs	r2, #2
 8008c40:	4801      	ldr	r0, [pc, #4]	@ (8008c48 <LCD_print6H+0x638>)
 8008c42:	f00f fd5c 	bl	80186fe <HAL_SPI_Transmit>
 8008c46:	e1d3      	b.n	8008ff0 <LCD_print6H+0x9e0>
 8008c48:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+14)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+6)) || (wiersz>=(ADRES->Y0_SET+23) && wiersz<=(ADRES->Y0_SET+26))))
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	7b1b      	ldrb	r3, [r3, #12]
 8008c50:	330e      	adds	r3, #14
 8008c52:	461a      	mov	r2, r3
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d124      	bne.n	8008ca4 <LCD_print6H+0x694>
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	7b5b      	ldrb	r3, [r3, #13]
 8008c5e:	3302      	adds	r3, #2
 8008c60:	461a      	mov	r2, r3
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d306      	bcc.n	8008c76 <LCD_print6H+0x666>
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	7b5b      	ldrb	r3, [r3, #13]
 8008c6c:	3306      	adds	r3, #6
 8008c6e:	461a      	mov	r2, r3
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d90d      	bls.n	8008c92 <LCD_print6H+0x682>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	7b5b      	ldrb	r3, [r3, #13]
 8008c7a:	3317      	adds	r3, #23
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d30f      	bcc.n	8008ca4 <LCD_print6H+0x694>
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	7b5b      	ldrb	r3, [r3, #13]
 8008c88:	331a      	adds	r3, #26
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d808      	bhi.n	8008ca4 <LCD_print6H+0x694>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008c92:	f107 010c 	add.w	r1, r7, #12
 8008c96:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	488d      	ldr	r0, [pc, #564]	@ (8008ed4 <LCD_print6H+0x8c4>)
 8008c9e:	f00f fd2e 	bl	80186fe <HAL_SPI_Transmit>
 8008ca2:	e1a5      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+15)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+5)) || (wiersz>=(ADRES->Y0_SET+22) && wiersz<=(ADRES->Y0_SET+25))))
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	7b1b      	ldrb	r3, [r3, #12]
 8008ca8:	330f      	adds	r3, #15
 8008caa:	461a      	mov	r2, r3
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d124      	bne.n	8008cfc <LCD_print6H+0x6ec>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	7b5b      	ldrb	r3, [r3, #13]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	461a      	mov	r2, r3
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d306      	bcc.n	8008cce <LCD_print6H+0x6be>
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	7b5b      	ldrb	r3, [r3, #13]
 8008cc4:	3305      	adds	r3, #5
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d90d      	bls.n	8008cea <LCD_print6H+0x6da>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	7b5b      	ldrb	r3, [r3, #13]
 8008cd2:	3316      	adds	r3, #22
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d30f      	bcc.n	8008cfc <LCD_print6H+0x6ec>
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	7b5b      	ldrb	r3, [r3, #13]
 8008ce0:	3319      	adds	r3, #25
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d808      	bhi.n	8008cfc <LCD_print6H+0x6ec>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008cea:	f107 010c 	add.w	r1, r7, #12
 8008cee:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	4877      	ldr	r0, [pc, #476]	@ (8008ed4 <LCD_print6H+0x8c4>)
 8008cf6:	f00f fd02 	bl	80186fe <HAL_SPI_Transmit>
 8008cfa:	e179      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+16)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+4))))
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	7b1b      	ldrb	r3, [r3, #12]
 8008d00:	3310      	adds	r3, #16
 8008d02:	461a      	mov	r2, r3
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d115      	bne.n	8008d36 <LCD_print6H+0x726>
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	7b5b      	ldrb	r3, [r3, #13]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d30f      	bcc.n	8008d36 <LCD_print6H+0x726>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	7b5b      	ldrb	r3, [r3, #13]
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d808      	bhi.n	8008d36 <LCD_print6H+0x726>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008d24:	f107 010c 	add.w	r1, r7, #12
 8008d28:	f04f 33ff 	mov.w	r3, #4294967295
 8008d2c:	2202      	movs	r2, #2
 8008d2e:	4869      	ldr	r0, [pc, #420]	@ (8008ed4 <LCD_print6H+0x8c4>)
 8008d30:	f00f fce5 	bl	80186fe <HAL_SPI_Transmit>
 8008d34:	e15c      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+23) && wiersz<=(ADRES->Y0_SET+27))))
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	7b1b      	ldrb	r3, [r3, #12]
 8008d3a:	3317      	adds	r3, #23
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d116      	bne.n	8008d72 <LCD_print6H+0x762>
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	7b5b      	ldrb	r3, [r3, #13]
 8008d48:	3317      	adds	r3, #23
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d30f      	bcc.n	8008d72 <LCD_print6H+0x762>
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	7b5b      	ldrb	r3, [r3, #13]
 8008d56:	331b      	adds	r3, #27
 8008d58:	461a      	mov	r2, r3
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d808      	bhi.n	8008d72 <LCD_print6H+0x762>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008d60:	f107 010c 	add.w	r1, r7, #12
 8008d64:	f04f 33ff 	mov.w	r3, #4294967295
 8008d68:	2202      	movs	r2, #2
 8008d6a:	485a      	ldr	r0, [pc, #360]	@ (8008ed4 <LCD_print6H+0x8c4>)
 8008d6c:	f00f fcc7 	bl	80186fe <HAL_SPI_Transmit>
 8008d70:	e13e      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+24)) && ((wiersz>=(ADRES->Y0_SET+24) && wiersz<=(ADRES->Y0_SET+28)) || (wiersz>=(ADRES->Y0_SET+46) && wiersz<=(ADRES->Y0_SET+50))))
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	7b1b      	ldrb	r3, [r3, #12]
 8008d76:	3318      	adds	r3, #24
 8008d78:	461a      	mov	r2, r3
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d124      	bne.n	8008dca <LCD_print6H+0x7ba>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	7b5b      	ldrb	r3, [r3, #13]
 8008d84:	3318      	adds	r3, #24
 8008d86:	461a      	mov	r2, r3
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d306      	bcc.n	8008d9c <LCD_print6H+0x78c>
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	7b5b      	ldrb	r3, [r3, #13]
 8008d92:	331c      	adds	r3, #28
 8008d94:	461a      	mov	r2, r3
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d90d      	bls.n	8008db8 <LCD_print6H+0x7a8>
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	7b5b      	ldrb	r3, [r3, #13]
 8008da0:	332e      	adds	r3, #46	@ 0x2e
 8008da2:	461a      	mov	r2, r3
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d30f      	bcc.n	8008dca <LCD_print6H+0x7ba>
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	7b5b      	ldrb	r3, [r3, #13]
 8008dae:	3332      	adds	r3, #50	@ 0x32
 8008db0:	461a      	mov	r2, r3
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d808      	bhi.n	8008dca <LCD_print6H+0x7ba>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008db8:	f107 010c 	add.w	r1, r7, #12
 8008dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	4844      	ldr	r0, [pc, #272]	@ (8008ed4 <LCD_print6H+0x8c4>)
 8008dc4:	f00f fc9b 	bl	80186fe <HAL_SPI_Transmit>
 8008dc8:	e112      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+25)) && ((wiersz>=(ADRES->Y0_SET+25) && wiersz<=(ADRES->Y0_SET+29)) || (wiersz>=(ADRES->Y0_SET+45) && wiersz<=(ADRES->Y0_SET+49))))
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	7b1b      	ldrb	r3, [r3, #12]
 8008dce:	3319      	adds	r3, #25
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d124      	bne.n	8008e22 <LCD_print6H+0x812>
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	7b5b      	ldrb	r3, [r3, #13]
 8008ddc:	3319      	adds	r3, #25
 8008dde:	461a      	mov	r2, r3
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d306      	bcc.n	8008df4 <LCD_print6H+0x7e4>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	7b5b      	ldrb	r3, [r3, #13]
 8008dea:	331d      	adds	r3, #29
 8008dec:	461a      	mov	r2, r3
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d90d      	bls.n	8008e10 <LCD_print6H+0x800>
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	7b5b      	ldrb	r3, [r3, #13]
 8008df8:	332d      	adds	r3, #45	@ 0x2d
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d30f      	bcc.n	8008e22 <LCD_print6H+0x812>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	7b5b      	ldrb	r3, [r3, #13]
 8008e06:	3331      	adds	r3, #49	@ 0x31
 8008e08:	461a      	mov	r2, r3
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d808      	bhi.n	8008e22 <LCD_print6H+0x812>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008e10:	f107 010c 	add.w	r1, r7, #12
 8008e14:	f04f 33ff 	mov.w	r3, #4294967295
 8008e18:	2202      	movs	r2, #2
 8008e1a:	482e      	ldr	r0, [pc, #184]	@ (8008ed4 <LCD_print6H+0x8c4>)
 8008e1c:	f00f fc6f 	bl	80186fe <HAL_SPI_Transmit>
 8008e20:	e0e6      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+26)) && ((wiersz>=(ADRES->Y0_SET+26) && wiersz<=(ADRES->Y0_SET+30)) || (wiersz>=(ADRES->Y0_SET+44) && wiersz<=(ADRES->Y0_SET+48))))
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	7b1b      	ldrb	r3, [r3, #12]
 8008e26:	331a      	adds	r3, #26
 8008e28:	461a      	mov	r2, r3
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d124      	bne.n	8008e7a <LCD_print6H+0x86a>
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	7b5b      	ldrb	r3, [r3, #13]
 8008e34:	331a      	adds	r3, #26
 8008e36:	461a      	mov	r2, r3
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d306      	bcc.n	8008e4c <LCD_print6H+0x83c>
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	7b5b      	ldrb	r3, [r3, #13]
 8008e42:	331e      	adds	r3, #30
 8008e44:	461a      	mov	r2, r3
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d90d      	bls.n	8008e68 <LCD_print6H+0x858>
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	7b5b      	ldrb	r3, [r3, #13]
 8008e50:	332c      	adds	r3, #44	@ 0x2c
 8008e52:	461a      	mov	r2, r3
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d30f      	bcc.n	8008e7a <LCD_print6H+0x86a>
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	7b5b      	ldrb	r3, [r3, #13]
 8008e5e:	3330      	adds	r3, #48	@ 0x30
 8008e60:	461a      	mov	r2, r3
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d808      	bhi.n	8008e7a <LCD_print6H+0x86a>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008e68:	f107 010c 	add.w	r1, r7, #12
 8008e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e70:	2202      	movs	r2, #2
 8008e72:	4818      	ldr	r0, [pc, #96]	@ (8008ed4 <LCD_print6H+0x8c4>)
 8008e74:	f00f fc43 	bl	80186fe <HAL_SPI_Transmit>
 8008e78:	e0ba      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+27)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+31)) || (wiersz>=(ADRES->Y0_SET+43) && wiersz<=(ADRES->Y0_SET+47))))
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	7b1b      	ldrb	r3, [r3, #12]
 8008e7e:	331b      	adds	r3, #27
 8008e80:	461a      	mov	r2, r3
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d127      	bne.n	8008ed8 <LCD_print6H+0x8c8>
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	7b5b      	ldrb	r3, [r3, #13]
 8008e8c:	331b      	adds	r3, #27
 8008e8e:	461a      	mov	r2, r3
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d306      	bcc.n	8008ea4 <LCD_print6H+0x894>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	7b5b      	ldrb	r3, [r3, #13]
 8008e9a:	331f      	adds	r3, #31
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d90d      	bls.n	8008ec0 <LCD_print6H+0x8b0>
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	7b5b      	ldrb	r3, [r3, #13]
 8008ea8:	332b      	adds	r3, #43	@ 0x2b
 8008eaa:	461a      	mov	r2, r3
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d312      	bcc.n	8008ed8 <LCD_print6H+0x8c8>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	7b5b      	ldrb	r3, [r3, #13]
 8008eb6:	332f      	adds	r3, #47	@ 0x2f
 8008eb8:	461a      	mov	r2, r3
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d80b      	bhi.n	8008ed8 <LCD_print6H+0x8c8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008ec0:	f107 010c 	add.w	r1, r7, #12
 8008ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ec8:	2202      	movs	r2, #2
 8008eca:	4802      	ldr	r0, [pc, #8]	@ (8008ed4 <LCD_print6H+0x8c4>)
 8008ecc:	f00f fc17 	bl	80186fe <HAL_SPI_Transmit>
 8008ed0:	e08e      	b.n	8008ff0 <LCD_print6H+0x9e0>
 8008ed2:	bf00      	nop
 8008ed4:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+28) && wiersz<=(ADRES->Y0_SET+32)) || (wiersz>=(ADRES->Y0_SET+42) && wiersz<=(ADRES->Y0_SET+46))))
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	7b1b      	ldrb	r3, [r3, #12]
 8008edc:	331c      	adds	r3, #28
 8008ede:	461a      	mov	r2, r3
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d124      	bne.n	8008f30 <LCD_print6H+0x920>
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	7b5b      	ldrb	r3, [r3, #13]
 8008eea:	331c      	adds	r3, #28
 8008eec:	461a      	mov	r2, r3
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d306      	bcc.n	8008f02 <LCD_print6H+0x8f2>
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	7b5b      	ldrb	r3, [r3, #13]
 8008ef8:	3320      	adds	r3, #32
 8008efa:	461a      	mov	r2, r3
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d90d      	bls.n	8008f1e <LCD_print6H+0x90e>
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	7b5b      	ldrb	r3, [r3, #13]
 8008f06:	332a      	adds	r3, #42	@ 0x2a
 8008f08:	461a      	mov	r2, r3
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d30f      	bcc.n	8008f30 <LCD_print6H+0x920>
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	7b5b      	ldrb	r3, [r3, #13]
 8008f14:	332e      	adds	r3, #46	@ 0x2e
 8008f16:	461a      	mov	r2, r3
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d808      	bhi.n	8008f30 <LCD_print6H+0x920>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008f1e:	f107 010c 	add.w	r1, r7, #12
 8008f22:	f04f 33ff 	mov.w	r3, #4294967295
 8008f26:	2202      	movs	r2, #2
 8008f28:	483f      	ldr	r0, [pc, #252]	@ (8009028 <LCD_print6H+0xa18>)
 8008f2a:	f00f fbe8 	bl	80186fe <HAL_SPI_Transmit>
 8008f2e:	e05f      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+29) && wiersz<=(ADRES->Y0_SET+33)) || (wiersz>=(ADRES->Y0_SET+41) && wiersz<=(ADRES->Y0_SET+45))))
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	7b1b      	ldrb	r3, [r3, #12]
 8008f34:	331d      	adds	r3, #29
 8008f36:	461a      	mov	r2, r3
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d124      	bne.n	8008f88 <LCD_print6H+0x978>
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	7b5b      	ldrb	r3, [r3, #13]
 8008f42:	331d      	adds	r3, #29
 8008f44:	461a      	mov	r2, r3
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d306      	bcc.n	8008f5a <LCD_print6H+0x94a>
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	7b5b      	ldrb	r3, [r3, #13]
 8008f50:	3321      	adds	r3, #33	@ 0x21
 8008f52:	461a      	mov	r2, r3
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d90d      	bls.n	8008f76 <LCD_print6H+0x966>
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	7b5b      	ldrb	r3, [r3, #13]
 8008f5e:	3329      	adds	r3, #41	@ 0x29
 8008f60:	461a      	mov	r2, r3
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d30f      	bcc.n	8008f88 <LCD_print6H+0x978>
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	7b5b      	ldrb	r3, [r3, #13]
 8008f6c:	332d      	adds	r3, #45	@ 0x2d
 8008f6e:	461a      	mov	r2, r3
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d808      	bhi.n	8008f88 <LCD_print6H+0x978>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008f76:	f107 010c 	add.w	r1, r7, #12
 8008f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f7e:	2202      	movs	r2, #2
 8008f80:	4829      	ldr	r0, [pc, #164]	@ (8009028 <LCD_print6H+0xa18>)
 8008f82:	f00f fbbc 	bl	80186fe <HAL_SPI_Transmit>
 8008f86:	e033      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else if((kolumna==(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+30) && wiersz<=(ADRES->Y0_SET+34)) || (wiersz>=(ADRES->Y0_SET+40) && wiersz<=(ADRES->Y0_SET+44))))
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	7b1b      	ldrb	r3, [r3, #12]
 8008f8c:	331e      	adds	r3, #30
 8008f8e:	461a      	mov	r2, r3
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d124      	bne.n	8008fe0 <LCD_print6H+0x9d0>
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	7b5b      	ldrb	r3, [r3, #13]
 8008f9a:	331e      	adds	r3, #30
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d306      	bcc.n	8008fb2 <LCD_print6H+0x9a2>
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	7b5b      	ldrb	r3, [r3, #13]
 8008fa8:	3322      	adds	r3, #34	@ 0x22
 8008faa:	461a      	mov	r2, r3
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d90d      	bls.n	8008fce <LCD_print6H+0x9be>
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	7b5b      	ldrb	r3, [r3, #13]
 8008fb6:	3328      	adds	r3, #40	@ 0x28
 8008fb8:	461a      	mov	r2, r3
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d30f      	bcc.n	8008fe0 <LCD_print6H+0x9d0>
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	7b5b      	ldrb	r3, [r3, #13]
 8008fc4:	332c      	adds	r3, #44	@ 0x2c
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d808      	bhi.n	8008fe0 <LCD_print6H+0x9d0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8008fce:	f107 010c 	add.w	r1, r7, #12
 8008fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	4813      	ldr	r0, [pc, #76]	@ (8009028 <LCD_print6H+0xa18>)
 8008fda:	f00f fb90 	bl	80186fe <HAL_SPI_Transmit>
 8008fde:	e007      	b.n	8008ff0 <LCD_print6H+0x9e0>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8008fe0:	f107 0108 	add.w	r1, r7, #8
 8008fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe8:	2202      	movs	r2, #2
 8008fea:	480f      	ldr	r0, [pc, #60]	@ (8009028 <LCD_print6H+0xa18>)
 8008fec:	f00f fb87 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	617b      	str	r3, [r7, #20]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	7b9b      	ldrb	r3, [r3, #14]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	4293      	cmp	r3, r2
 8009002:	f4ff ab7d 	bcc.w	8008700 <LCD_print6H+0xf0>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	3301      	adds	r3, #1
 800900a:	613b      	str	r3, [r7, #16]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	7bdb      	ldrb	r3, [r3, #15]
 8009010:	461a      	mov	r2, r3
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	4293      	cmp	r3, r2
 8009016:	f4ff ab6e 	bcc.w	80086f6 <LCD_print6H+0xe6>
			}
		}
	}
	CS_ON();
 800901a:	f7f8 f803 	bl	8001024 <CS_ON>
}
 800901e:	bf00      	nop
 8009020:	3718      	adds	r7, #24
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	200004a4 	.word	0x200004a4

0800902c <LCD_print7H>:

void LCD_print7H(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	603b      	str	r3, [r7, #0]
 8009034:	4603      	mov	r3, r0
 8009036:	71fb      	strb	r3, [r7, #7]
 8009038:	460b      	mov	r3, r1
 800903a:	71bb      	strb	r3, [r7, #6]
 800903c:	4613      	mov	r3, r2
 800903e:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8009040:	2300      	movs	r3, #0
 8009042:	617b      	str	r3, [r7, #20]
 8009044:	2300      	movs	r3, #0
 8009046:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	2200      	movs	r2, #0
 800904c:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	223f      	movs	r2, #63	@ 0x3f
 8009052:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	221f      	movs	r2, #31
 8009058:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	2200      	movs	r2, #0
 800905e:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	2200      	movs	r2, #0
 8009064:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	7cda      	ldrb	r2, [r3, #19]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	7c1b      	ldrb	r3, [r3, #16]
 800906e:	4053      	eors	r3, r2
 8009070:	b2db      	uxtb	r3, r3
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	b25a      	sxtb	r2, r3
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	7c5b      	ldrb	r3, [r3, #17]
 800907a:	b25b      	sxtb	r3, r3
 800907c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009080:	b25b      	sxtb	r3, r3
 8009082:	4053      	eors	r3, r2
 8009084:	b25b      	sxtb	r3, r3
 8009086:	b2da      	uxtb	r2, r3
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	7d1b      	ldrb	r3, [r3, #20]
 8009090:	461a      	mov	r2, r3
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	7c5b      	ldrb	r3, [r3, #17]
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	4053      	eors	r3, r2
 800909c:	015b      	lsls	r3, r3, #5
 800909e:	b25a      	sxtb	r2, r3
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	7c9b      	ldrb	r3, [r3, #18]
 80090a4:	b25b      	sxtb	r3, r3
 80090a6:	4053      	eors	r3, r2
 80090a8:	b25b      	sxtb	r3, r3
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	7cdb      	ldrb	r3, [r3, #19]
 80090b4:	733b      	strb	r3, [r7, #12]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	7d1b      	ldrb	r3, [r3, #20]
 80090ba:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 80090bc:	2300      	movs	r3, #0
 80090be:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 80090c4:	7bfa      	ldrb	r2, [r7, #15]
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	4053      	eors	r3, r2
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	00db      	lsls	r3, r3, #3
 80090ce:	b25a      	sxtb	r2, r3
 80090d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80090d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090d8:	b25b      	sxtb	r3, r3
 80090da:	4053      	eors	r3, r2
 80090dc:	b25b      	sxtb	r3, r3
 80090de:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 80090e0:	7bba      	ldrb	r2, [r7, #14]
 80090e2:	79bb      	ldrb	r3, [r7, #6]
 80090e4:	f003 0307 	and.w	r3, r3, #7
 80090e8:	4053      	eors	r3, r2
 80090ea:	015b      	lsls	r3, r3, #5
 80090ec:	b25a      	sxtb	r2, r3
 80090ee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80090f2:	4053      	eors	r3, r2
 80090f4:	b25b      	sxtb	r3, r3
 80090f6:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
 80090fa:	723b      	strb	r3, [r7, #8]
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	727b      	strb	r3, [r7, #9]
	DC_ON();
 8009100:	f7f7 ffa6 	bl	8001050 <DC_ON>
	CS_OFF();
 8009104:	f7f7 ff99 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	7b5b      	ldrb	r3, [r3, #13]
 800910c:	613b      	str	r3, [r7, #16]
 800910e:	e3cd      	b.n	80098ac <LCD_print7H+0x880>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	7b1b      	ldrb	r3, [r3, #12]
 8009114:	617b      	str	r3, [r7, #20]
 8009116:	e3be      	b.n	8009896 <LCD_print7H+0x86a>
		{
			if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+4))))
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	7b1b      	ldrb	r3, [r3, #12]
 800911c:	3302      	adds	r3, #2
 800911e:	461a      	mov	r2, r3
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	4293      	cmp	r3, r2
 8009124:	d31c      	bcc.n	8009160 <LCD_print7H+0x134>
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	7b1b      	ldrb	r3, [r3, #12]
 800912a:	331e      	adds	r3, #30
 800912c:	461a      	mov	r2, r3
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	4293      	cmp	r3, r2
 8009132:	d815      	bhi.n	8009160 <LCD_print7H+0x134>
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	7b5b      	ldrb	r3, [r3, #13]
 8009138:	461a      	mov	r2, r3
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	4293      	cmp	r3, r2
 800913e:	d30f      	bcc.n	8009160 <LCD_print7H+0x134>
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	7b5b      	ldrb	r3, [r3, #13]
 8009144:	3304      	adds	r3, #4
 8009146:	461a      	mov	r2, r3
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	4293      	cmp	r3, r2
 800914c:	d808      	bhi.n	8009160 <LCD_print7H+0x134>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800914e:	f107 010c 	add.w	r1, r7, #12
 8009152:	f04f 33ff 	mov.w	r3, #4294967295
 8009156:	2202      	movs	r2, #2
 8009158:	489b      	ldr	r0, [pc, #620]	@ (80093c8 <LCD_print7H+0x39c>)
 800915a:	f00f fad0 	bl	80186fe <HAL_SPI_Transmit>
 800915e:	e397      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna>=(ADRES->X0_SET+27) && kolumna<=(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+22))))
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	7b1b      	ldrb	r3, [r3, #12]
 8009164:	331b      	adds	r3, #27
 8009166:	461a      	mov	r2, r3
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	4293      	cmp	r3, r2
 800916c:	d31d      	bcc.n	80091aa <LCD_print7H+0x17e>
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	7b1b      	ldrb	r3, [r3, #12]
 8009172:	331e      	adds	r3, #30
 8009174:	461a      	mov	r2, r3
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	4293      	cmp	r3, r2
 800917a:	d816      	bhi.n	80091aa <LCD_print7H+0x17e>
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	7b5b      	ldrb	r3, [r3, #13]
 8009180:	3305      	adds	r3, #5
 8009182:	461a      	mov	r2, r3
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	4293      	cmp	r3, r2
 8009188:	d30f      	bcc.n	80091aa <LCD_print7H+0x17e>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	7b5b      	ldrb	r3, [r3, #13]
 800918e:	3316      	adds	r3, #22
 8009190:	461a      	mov	r2, r3
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	4293      	cmp	r3, r2
 8009196:	d808      	bhi.n	80091aa <LCD_print7H+0x17e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009198:	f107 010c 	add.w	r1, r7, #12
 800919c:	f04f 33ff 	mov.w	r3, #4294967295
 80091a0:	2202      	movs	r2, #2
 80091a2:	4889      	ldr	r0, [pc, #548]	@ (80093c8 <LCD_print7H+0x39c>)
 80091a4:	f00f faab 	bl	80186fe <HAL_SPI_Transmit>
 80091a8:	e372      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+2)) && ((wiersz>=(ADRES->Y0_SET+47) && wiersz<=(ADRES->Y0_SET+50))))
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	7b1b      	ldrb	r3, [r3, #12]
 80091ae:	3302      	adds	r3, #2
 80091b0:	461a      	mov	r2, r3
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d116      	bne.n	80091e6 <LCD_print7H+0x1ba>
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	7b5b      	ldrb	r3, [r3, #13]
 80091bc:	332f      	adds	r3, #47	@ 0x2f
 80091be:	461a      	mov	r2, r3
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d30f      	bcc.n	80091e6 <LCD_print7H+0x1ba>
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	7b5b      	ldrb	r3, [r3, #13]
 80091ca:	3332      	adds	r3, #50	@ 0x32
 80091cc:	461a      	mov	r2, r3
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d808      	bhi.n	80091e6 <LCD_print7H+0x1ba>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80091d4:	f107 010c 	add.w	r1, r7, #12
 80091d8:	f04f 33ff 	mov.w	r3, #4294967295
 80091dc:	2202      	movs	r2, #2
 80091de:	487a      	ldr	r0, [pc, #488]	@ (80093c8 <LCD_print7H+0x39c>)
 80091e0:	f00f fa8d 	bl	80186fe <HAL_SPI_Transmit>
 80091e4:	e354      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+46) && wiersz<=(ADRES->Y0_SET+50))))
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	7b1b      	ldrb	r3, [r3, #12]
 80091ea:	3303      	adds	r3, #3
 80091ec:	461a      	mov	r2, r3
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d116      	bne.n	8009222 <LCD_print7H+0x1f6>
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	7b5b      	ldrb	r3, [r3, #13]
 80091f8:	332e      	adds	r3, #46	@ 0x2e
 80091fa:	461a      	mov	r2, r3
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	4293      	cmp	r3, r2
 8009200:	d30f      	bcc.n	8009222 <LCD_print7H+0x1f6>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	7b5b      	ldrb	r3, [r3, #13]
 8009206:	3332      	adds	r3, #50	@ 0x32
 8009208:	461a      	mov	r2, r3
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	4293      	cmp	r3, r2
 800920e:	d808      	bhi.n	8009222 <LCD_print7H+0x1f6>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009210:	f107 010c 	add.w	r1, r7, #12
 8009214:	f04f 33ff 	mov.w	r3, #4294967295
 8009218:	2202      	movs	r2, #2
 800921a:	486b      	ldr	r0, [pc, #428]	@ (80093c8 <LCD_print7H+0x39c>)
 800921c:	f00f fa6f 	bl	80186fe <HAL_SPI_Transmit>
 8009220:	e336      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+4)) && ((wiersz>=(ADRES->Y0_SET+45) && wiersz<=(ADRES->Y0_SET+50))))
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	7b1b      	ldrb	r3, [r3, #12]
 8009226:	3304      	adds	r3, #4
 8009228:	461a      	mov	r2, r3
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	4293      	cmp	r3, r2
 800922e:	d116      	bne.n	800925e <LCD_print7H+0x232>
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	7b5b      	ldrb	r3, [r3, #13]
 8009234:	332d      	adds	r3, #45	@ 0x2d
 8009236:	461a      	mov	r2, r3
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	4293      	cmp	r3, r2
 800923c:	d30f      	bcc.n	800925e <LCD_print7H+0x232>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	7b5b      	ldrb	r3, [r3, #13]
 8009242:	3332      	adds	r3, #50	@ 0x32
 8009244:	461a      	mov	r2, r3
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	4293      	cmp	r3, r2
 800924a:	d808      	bhi.n	800925e <LCD_print7H+0x232>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800924c:	f107 010c 	add.w	r1, r7, #12
 8009250:	f04f 33ff 	mov.w	r3, #4294967295
 8009254:	2202      	movs	r2, #2
 8009256:	485c      	ldr	r0, [pc, #368]	@ (80093c8 <LCD_print7H+0x39c>)
 8009258:	f00f fa51 	bl	80186fe <HAL_SPI_Transmit>
 800925c:	e318      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+5)) && ((wiersz>=(ADRES->Y0_SET+44) && wiersz<=(ADRES->Y0_SET+49))))
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	7b1b      	ldrb	r3, [r3, #12]
 8009262:	3305      	adds	r3, #5
 8009264:	461a      	mov	r2, r3
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	4293      	cmp	r3, r2
 800926a:	d116      	bne.n	800929a <LCD_print7H+0x26e>
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	7b5b      	ldrb	r3, [r3, #13]
 8009270:	332c      	adds	r3, #44	@ 0x2c
 8009272:	461a      	mov	r2, r3
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	4293      	cmp	r3, r2
 8009278:	d30f      	bcc.n	800929a <LCD_print7H+0x26e>
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	7b5b      	ldrb	r3, [r3, #13]
 800927e:	3331      	adds	r3, #49	@ 0x31
 8009280:	461a      	mov	r2, r3
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	4293      	cmp	r3, r2
 8009286:	d808      	bhi.n	800929a <LCD_print7H+0x26e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009288:	f107 010c 	add.w	r1, r7, #12
 800928c:	f04f 33ff 	mov.w	r3, #4294967295
 8009290:	2202      	movs	r2, #2
 8009292:	484d      	ldr	r0, [pc, #308]	@ (80093c8 <LCD_print7H+0x39c>)
 8009294:	f00f fa33 	bl	80186fe <HAL_SPI_Transmit>
 8009298:	e2fa      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+43) && wiersz<=(ADRES->Y0_SET+48))))
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	7b1b      	ldrb	r3, [r3, #12]
 800929e:	3306      	adds	r3, #6
 80092a0:	461a      	mov	r2, r3
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d116      	bne.n	80092d6 <LCD_print7H+0x2aa>
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	7b5b      	ldrb	r3, [r3, #13]
 80092ac:	332b      	adds	r3, #43	@ 0x2b
 80092ae:	461a      	mov	r2, r3
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d30f      	bcc.n	80092d6 <LCD_print7H+0x2aa>
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	7b5b      	ldrb	r3, [r3, #13]
 80092ba:	3330      	adds	r3, #48	@ 0x30
 80092bc:	461a      	mov	r2, r3
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d808      	bhi.n	80092d6 <LCD_print7H+0x2aa>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80092c4:	f107 010c 	add.w	r1, r7, #12
 80092c8:	f04f 33ff 	mov.w	r3, #4294967295
 80092cc:	2202      	movs	r2, #2
 80092ce:	483e      	ldr	r0, [pc, #248]	@ (80093c8 <LCD_print7H+0x39c>)
 80092d0:	f00f fa15 	bl	80186fe <HAL_SPI_Transmit>
 80092d4:	e2dc      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+7)) && ((wiersz>=(ADRES->Y0_SET+42) && wiersz<=(ADRES->Y0_SET+47))))
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	7b1b      	ldrb	r3, [r3, #12]
 80092da:	3307      	adds	r3, #7
 80092dc:	461a      	mov	r2, r3
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d116      	bne.n	8009312 <LCD_print7H+0x2e6>
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	7b5b      	ldrb	r3, [r3, #13]
 80092e8:	332a      	adds	r3, #42	@ 0x2a
 80092ea:	461a      	mov	r2, r3
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d30f      	bcc.n	8009312 <LCD_print7H+0x2e6>
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	7b5b      	ldrb	r3, [r3, #13]
 80092f6:	332f      	adds	r3, #47	@ 0x2f
 80092f8:	461a      	mov	r2, r3
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d808      	bhi.n	8009312 <LCD_print7H+0x2e6>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009300:	f107 010c 	add.w	r1, r7, #12
 8009304:	f04f 33ff 	mov.w	r3, #4294967295
 8009308:	2202      	movs	r2, #2
 800930a:	482f      	ldr	r0, [pc, #188]	@ (80093c8 <LCD_print7H+0x39c>)
 800930c:	f00f f9f7 	bl	80186fe <HAL_SPI_Transmit>
 8009310:	e2be      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+8)) && ((wiersz>=(ADRES->Y0_SET+41) && wiersz<=(ADRES->Y0_SET+46))))
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	7b1b      	ldrb	r3, [r3, #12]
 8009316:	3308      	adds	r3, #8
 8009318:	461a      	mov	r2, r3
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	4293      	cmp	r3, r2
 800931e:	d116      	bne.n	800934e <LCD_print7H+0x322>
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	7b5b      	ldrb	r3, [r3, #13]
 8009324:	3329      	adds	r3, #41	@ 0x29
 8009326:	461a      	mov	r2, r3
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	4293      	cmp	r3, r2
 800932c:	d30f      	bcc.n	800934e <LCD_print7H+0x322>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	7b5b      	ldrb	r3, [r3, #13]
 8009332:	332e      	adds	r3, #46	@ 0x2e
 8009334:	461a      	mov	r2, r3
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	4293      	cmp	r3, r2
 800933a:	d808      	bhi.n	800934e <LCD_print7H+0x322>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800933c:	f107 010c 	add.w	r1, r7, #12
 8009340:	f04f 33ff 	mov.w	r3, #4294967295
 8009344:	2202      	movs	r2, #2
 8009346:	4820      	ldr	r0, [pc, #128]	@ (80093c8 <LCD_print7H+0x39c>)
 8009348:	f00f f9d9 	bl	80186fe <HAL_SPI_Transmit>
 800934c:	e2a0      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+9)) && ((wiersz>=(ADRES->Y0_SET+40) && wiersz<=(ADRES->Y0_SET+45))))
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	7b1b      	ldrb	r3, [r3, #12]
 8009352:	3309      	adds	r3, #9
 8009354:	461a      	mov	r2, r3
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	4293      	cmp	r3, r2
 800935a:	d116      	bne.n	800938a <LCD_print7H+0x35e>
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	7b5b      	ldrb	r3, [r3, #13]
 8009360:	3328      	adds	r3, #40	@ 0x28
 8009362:	461a      	mov	r2, r3
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	4293      	cmp	r3, r2
 8009368:	d30f      	bcc.n	800938a <LCD_print7H+0x35e>
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	7b5b      	ldrb	r3, [r3, #13]
 800936e:	332d      	adds	r3, #45	@ 0x2d
 8009370:	461a      	mov	r2, r3
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	4293      	cmp	r3, r2
 8009376:	d808      	bhi.n	800938a <LCD_print7H+0x35e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009378:	f107 010c 	add.w	r1, r7, #12
 800937c:	f04f 33ff 	mov.w	r3, #4294967295
 8009380:	2202      	movs	r2, #2
 8009382:	4811      	ldr	r0, [pc, #68]	@ (80093c8 <LCD_print7H+0x39c>)
 8009384:	f00f f9bb 	bl	80186fe <HAL_SPI_Transmit>
 8009388:	e282      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+10)) && ((wiersz>=(ADRES->Y0_SET+39) && wiersz<=(ADRES->Y0_SET+44))))
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	7b1b      	ldrb	r3, [r3, #12]
 800938e:	330a      	adds	r3, #10
 8009390:	461a      	mov	r2, r3
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	4293      	cmp	r3, r2
 8009396:	d119      	bne.n	80093cc <LCD_print7H+0x3a0>
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	7b5b      	ldrb	r3, [r3, #13]
 800939c:	3327      	adds	r3, #39	@ 0x27
 800939e:	461a      	mov	r2, r3
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d312      	bcc.n	80093cc <LCD_print7H+0x3a0>
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	7b5b      	ldrb	r3, [r3, #13]
 80093aa:	332c      	adds	r3, #44	@ 0x2c
 80093ac:	461a      	mov	r2, r3
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d80b      	bhi.n	80093cc <LCD_print7H+0x3a0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80093b4:	f107 010c 	add.w	r1, r7, #12
 80093b8:	f04f 33ff 	mov.w	r3, #4294967295
 80093bc:	2202      	movs	r2, #2
 80093be:	4802      	ldr	r0, [pc, #8]	@ (80093c8 <LCD_print7H+0x39c>)
 80093c0:	f00f f99d 	bl	80186fe <HAL_SPI_Transmit>
 80093c4:	e264      	b.n	8009890 <LCD_print7H+0x864>
 80093c6:	bf00      	nop
 80093c8:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+11)) && ((wiersz>=(ADRES->Y0_SET+37) && wiersz<=(ADRES->Y0_SET+43))))
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	7b1b      	ldrb	r3, [r3, #12]
 80093d0:	330b      	adds	r3, #11
 80093d2:	461a      	mov	r2, r3
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d116      	bne.n	8009408 <LCD_print7H+0x3dc>
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	7b5b      	ldrb	r3, [r3, #13]
 80093de:	3325      	adds	r3, #37	@ 0x25
 80093e0:	461a      	mov	r2, r3
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d30f      	bcc.n	8009408 <LCD_print7H+0x3dc>
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	7b5b      	ldrb	r3, [r3, #13]
 80093ec:	332b      	adds	r3, #43	@ 0x2b
 80093ee:	461a      	mov	r2, r3
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d808      	bhi.n	8009408 <LCD_print7H+0x3dc>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80093f6:	f107 010c 	add.w	r1, r7, #12
 80093fa:	f04f 33ff 	mov.w	r3, #4294967295
 80093fe:	2202      	movs	r2, #2
 8009400:	4897      	ldr	r0, [pc, #604]	@ (8009660 <LCD_print7H+0x634>)
 8009402:	f00f f97c 	bl	80186fe <HAL_SPI_Transmit>
 8009406:	e243      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+12)) && ((wiersz>=(ADRES->Y0_SET+36) && wiersz<=(ADRES->Y0_SET+42))))
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	7b1b      	ldrb	r3, [r3, #12]
 800940c:	330c      	adds	r3, #12
 800940e:	461a      	mov	r2, r3
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	4293      	cmp	r3, r2
 8009414:	d116      	bne.n	8009444 <LCD_print7H+0x418>
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	7b5b      	ldrb	r3, [r3, #13]
 800941a:	3324      	adds	r3, #36	@ 0x24
 800941c:	461a      	mov	r2, r3
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	4293      	cmp	r3, r2
 8009422:	d30f      	bcc.n	8009444 <LCD_print7H+0x418>
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	7b5b      	ldrb	r3, [r3, #13]
 8009428:	332a      	adds	r3, #42	@ 0x2a
 800942a:	461a      	mov	r2, r3
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	4293      	cmp	r3, r2
 8009430:	d808      	bhi.n	8009444 <LCD_print7H+0x418>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009432:	f107 010c 	add.w	r1, r7, #12
 8009436:	f04f 33ff 	mov.w	r3, #4294967295
 800943a:	2202      	movs	r2, #2
 800943c:	4888      	ldr	r0, [pc, #544]	@ (8009660 <LCD_print7H+0x634>)
 800943e:	f00f f95e 	bl	80186fe <HAL_SPI_Transmit>
 8009442:	e225      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+13)) && ((wiersz>=(ADRES->Y0_SET+35) && wiersz<=(ADRES->Y0_SET+41))))
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	7b1b      	ldrb	r3, [r3, #12]
 8009448:	330d      	adds	r3, #13
 800944a:	461a      	mov	r2, r3
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	4293      	cmp	r3, r2
 8009450:	d116      	bne.n	8009480 <LCD_print7H+0x454>
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	7b5b      	ldrb	r3, [r3, #13]
 8009456:	3323      	adds	r3, #35	@ 0x23
 8009458:	461a      	mov	r2, r3
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	4293      	cmp	r3, r2
 800945e:	d30f      	bcc.n	8009480 <LCD_print7H+0x454>
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	7b5b      	ldrb	r3, [r3, #13]
 8009464:	3329      	adds	r3, #41	@ 0x29
 8009466:	461a      	mov	r2, r3
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	4293      	cmp	r3, r2
 800946c:	d808      	bhi.n	8009480 <LCD_print7H+0x454>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800946e:	f107 010c 	add.w	r1, r7, #12
 8009472:	f04f 33ff 	mov.w	r3, #4294967295
 8009476:	2202      	movs	r2, #2
 8009478:	4879      	ldr	r0, [pc, #484]	@ (8009660 <LCD_print7H+0x634>)
 800947a:	f00f f940 	bl	80186fe <HAL_SPI_Transmit>
 800947e:	e207      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+14)) && ((wiersz>=(ADRES->Y0_SET+34) && wiersz<=(ADRES->Y0_SET+40))))
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	7b1b      	ldrb	r3, [r3, #12]
 8009484:	330e      	adds	r3, #14
 8009486:	461a      	mov	r2, r3
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	4293      	cmp	r3, r2
 800948c:	d116      	bne.n	80094bc <LCD_print7H+0x490>
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	7b5b      	ldrb	r3, [r3, #13]
 8009492:	3322      	adds	r3, #34	@ 0x22
 8009494:	461a      	mov	r2, r3
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	4293      	cmp	r3, r2
 800949a:	d30f      	bcc.n	80094bc <LCD_print7H+0x490>
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	7b5b      	ldrb	r3, [r3, #13]
 80094a0:	3328      	adds	r3, #40	@ 0x28
 80094a2:	461a      	mov	r2, r3
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d808      	bhi.n	80094bc <LCD_print7H+0x490>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80094aa:	f107 010c 	add.w	r1, r7, #12
 80094ae:	f04f 33ff 	mov.w	r3, #4294967295
 80094b2:	2202      	movs	r2, #2
 80094b4:	486a      	ldr	r0, [pc, #424]	@ (8009660 <LCD_print7H+0x634>)
 80094b6:	f00f f922 	bl	80186fe <HAL_SPI_Transmit>
 80094ba:	e1e9      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+15)) && ((wiersz>=(ADRES->Y0_SET+33) && wiersz<=(ADRES->Y0_SET+39))))
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	7b1b      	ldrb	r3, [r3, #12]
 80094c0:	330f      	adds	r3, #15
 80094c2:	461a      	mov	r2, r3
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d116      	bne.n	80094f8 <LCD_print7H+0x4cc>
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	7b5b      	ldrb	r3, [r3, #13]
 80094ce:	3321      	adds	r3, #33	@ 0x21
 80094d0:	461a      	mov	r2, r3
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d30f      	bcc.n	80094f8 <LCD_print7H+0x4cc>
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	7b5b      	ldrb	r3, [r3, #13]
 80094dc:	3327      	adds	r3, #39	@ 0x27
 80094de:	461a      	mov	r2, r3
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d808      	bhi.n	80094f8 <LCD_print7H+0x4cc>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80094e6:	f107 010c 	add.w	r1, r7, #12
 80094ea:	f04f 33ff 	mov.w	r3, #4294967295
 80094ee:	2202      	movs	r2, #2
 80094f0:	485b      	ldr	r0, [pc, #364]	@ (8009660 <LCD_print7H+0x634>)
 80094f2:	f00f f904 	bl	80186fe <HAL_SPI_Transmit>
 80094f6:	e1cb      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+16)) && ((wiersz>=(ADRES->Y0_SET+32) && wiersz<=(ADRES->Y0_SET+38))))
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	7b1b      	ldrb	r3, [r3, #12]
 80094fc:	3310      	adds	r3, #16
 80094fe:	461a      	mov	r2, r3
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	4293      	cmp	r3, r2
 8009504:	d116      	bne.n	8009534 <LCD_print7H+0x508>
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	7b5b      	ldrb	r3, [r3, #13]
 800950a:	3320      	adds	r3, #32
 800950c:	461a      	mov	r2, r3
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	4293      	cmp	r3, r2
 8009512:	d30f      	bcc.n	8009534 <LCD_print7H+0x508>
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	7b5b      	ldrb	r3, [r3, #13]
 8009518:	3326      	adds	r3, #38	@ 0x26
 800951a:	461a      	mov	r2, r3
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	4293      	cmp	r3, r2
 8009520:	d808      	bhi.n	8009534 <LCD_print7H+0x508>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009522:	f107 010c 	add.w	r1, r7, #12
 8009526:	f04f 33ff 	mov.w	r3, #4294967295
 800952a:	2202      	movs	r2, #2
 800952c:	484c      	ldr	r0, [pc, #304]	@ (8009660 <LCD_print7H+0x634>)
 800952e:	f00f f8e6 	bl	80186fe <HAL_SPI_Transmit>
 8009532:	e1ad      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+17)) && ((wiersz>=(ADRES->Y0_SET+31) && wiersz<=(ADRES->Y0_SET+37))))
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	7b1b      	ldrb	r3, [r3, #12]
 8009538:	3311      	adds	r3, #17
 800953a:	461a      	mov	r2, r3
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	4293      	cmp	r3, r2
 8009540:	d116      	bne.n	8009570 <LCD_print7H+0x544>
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	7b5b      	ldrb	r3, [r3, #13]
 8009546:	331f      	adds	r3, #31
 8009548:	461a      	mov	r2, r3
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	4293      	cmp	r3, r2
 800954e:	d30f      	bcc.n	8009570 <LCD_print7H+0x544>
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	7b5b      	ldrb	r3, [r3, #13]
 8009554:	3325      	adds	r3, #37	@ 0x25
 8009556:	461a      	mov	r2, r3
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	4293      	cmp	r3, r2
 800955c:	d808      	bhi.n	8009570 <LCD_print7H+0x544>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800955e:	f107 010c 	add.w	r1, r7, #12
 8009562:	f04f 33ff 	mov.w	r3, #4294967295
 8009566:	2202      	movs	r2, #2
 8009568:	483d      	ldr	r0, [pc, #244]	@ (8009660 <LCD_print7H+0x634>)
 800956a:	f00f f8c8 	bl	80186fe <HAL_SPI_Transmit>
 800956e:	e18f      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+18)) && ((wiersz>=(ADRES->Y0_SET+30) && wiersz<=(ADRES->Y0_SET+36))))
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	7b1b      	ldrb	r3, [r3, #12]
 8009574:	3312      	adds	r3, #18
 8009576:	461a      	mov	r2, r3
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	4293      	cmp	r3, r2
 800957c:	d116      	bne.n	80095ac <LCD_print7H+0x580>
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	7b5b      	ldrb	r3, [r3, #13]
 8009582:	331e      	adds	r3, #30
 8009584:	461a      	mov	r2, r3
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	4293      	cmp	r3, r2
 800958a:	d30f      	bcc.n	80095ac <LCD_print7H+0x580>
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	7b5b      	ldrb	r3, [r3, #13]
 8009590:	3324      	adds	r3, #36	@ 0x24
 8009592:	461a      	mov	r2, r3
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	4293      	cmp	r3, r2
 8009598:	d808      	bhi.n	80095ac <LCD_print7H+0x580>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800959a:	f107 010c 	add.w	r1, r7, #12
 800959e:	f04f 33ff 	mov.w	r3, #4294967295
 80095a2:	2202      	movs	r2, #2
 80095a4:	482e      	ldr	r0, [pc, #184]	@ (8009660 <LCD_print7H+0x634>)
 80095a6:	f00f f8aa 	bl	80186fe <HAL_SPI_Transmit>
 80095aa:	e171      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+19)) && ((wiersz>=(ADRES->Y0_SET+29) && wiersz<=(ADRES->Y0_SET+35))))
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	7b1b      	ldrb	r3, [r3, #12]
 80095b0:	3313      	adds	r3, #19
 80095b2:	461a      	mov	r2, r3
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d116      	bne.n	80095e8 <LCD_print7H+0x5bc>
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	7b5b      	ldrb	r3, [r3, #13]
 80095be:	331d      	adds	r3, #29
 80095c0:	461a      	mov	r2, r3
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d30f      	bcc.n	80095e8 <LCD_print7H+0x5bc>
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	7b5b      	ldrb	r3, [r3, #13]
 80095cc:	3323      	adds	r3, #35	@ 0x23
 80095ce:	461a      	mov	r2, r3
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d808      	bhi.n	80095e8 <LCD_print7H+0x5bc>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80095d6:	f107 010c 	add.w	r1, r7, #12
 80095da:	f04f 33ff 	mov.w	r3, #4294967295
 80095de:	2202      	movs	r2, #2
 80095e0:	481f      	ldr	r0, [pc, #124]	@ (8009660 <LCD_print7H+0x634>)
 80095e2:	f00f f88c 	bl	80186fe <HAL_SPI_Transmit>
 80095e6:	e153      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+20)) && ((wiersz>=(ADRES->Y0_SET+28) && wiersz<=(ADRES->Y0_SET+34))))
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	7b1b      	ldrb	r3, [r3, #12]
 80095ec:	3314      	adds	r3, #20
 80095ee:	461a      	mov	r2, r3
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d116      	bne.n	8009624 <LCD_print7H+0x5f8>
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	7b5b      	ldrb	r3, [r3, #13]
 80095fa:	331c      	adds	r3, #28
 80095fc:	461a      	mov	r2, r3
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	4293      	cmp	r3, r2
 8009602:	d30f      	bcc.n	8009624 <LCD_print7H+0x5f8>
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	7b5b      	ldrb	r3, [r3, #13]
 8009608:	3322      	adds	r3, #34	@ 0x22
 800960a:	461a      	mov	r2, r3
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	4293      	cmp	r3, r2
 8009610:	d808      	bhi.n	8009624 <LCD_print7H+0x5f8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009612:	f107 010c 	add.w	r1, r7, #12
 8009616:	f04f 33ff 	mov.w	r3, #4294967295
 800961a:	2202      	movs	r2, #2
 800961c:	4810      	ldr	r0, [pc, #64]	@ (8009660 <LCD_print7H+0x634>)
 800961e:	f00f f86e 	bl	80186fe <HAL_SPI_Transmit>
 8009622:	e135      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+21)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+33))))
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	7b1b      	ldrb	r3, [r3, #12]
 8009628:	3315      	adds	r3, #21
 800962a:	461a      	mov	r2, r3
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	4293      	cmp	r3, r2
 8009630:	d118      	bne.n	8009664 <LCD_print7H+0x638>
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	7b5b      	ldrb	r3, [r3, #13]
 8009636:	331b      	adds	r3, #27
 8009638:	461a      	mov	r2, r3
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	4293      	cmp	r3, r2
 800963e:	d311      	bcc.n	8009664 <LCD_print7H+0x638>
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	7b5b      	ldrb	r3, [r3, #13]
 8009644:	3321      	adds	r3, #33	@ 0x21
 8009646:	461a      	mov	r2, r3
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	4293      	cmp	r3, r2
 800964c:	d80a      	bhi.n	8009664 <LCD_print7H+0x638>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800964e:	f107 010c 	add.w	r1, r7, #12
 8009652:	f04f 33ff 	mov.w	r3, #4294967295
 8009656:	2202      	movs	r2, #2
 8009658:	4801      	ldr	r0, [pc, #4]	@ (8009660 <LCD_print7H+0x634>)
 800965a:	f00f f850 	bl	80186fe <HAL_SPI_Transmit>
 800965e:	e117      	b.n	8009890 <LCD_print7H+0x864>
 8009660:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+22)) && ((wiersz>=(ADRES->Y0_SET+26) && wiersz<=(ADRES->Y0_SET+32))))
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	7b1b      	ldrb	r3, [r3, #12]
 8009668:	3316      	adds	r3, #22
 800966a:	461a      	mov	r2, r3
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	4293      	cmp	r3, r2
 8009670:	d116      	bne.n	80096a0 <LCD_print7H+0x674>
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	7b5b      	ldrb	r3, [r3, #13]
 8009676:	331a      	adds	r3, #26
 8009678:	461a      	mov	r2, r3
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	4293      	cmp	r3, r2
 800967e:	d30f      	bcc.n	80096a0 <LCD_print7H+0x674>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	7b5b      	ldrb	r3, [r3, #13]
 8009684:	3320      	adds	r3, #32
 8009686:	461a      	mov	r2, r3
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	4293      	cmp	r3, r2
 800968c:	d808      	bhi.n	80096a0 <LCD_print7H+0x674>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800968e:	f107 010c 	add.w	r1, r7, #12
 8009692:	f04f 33ff 	mov.w	r3, #4294967295
 8009696:	2202      	movs	r2, #2
 8009698:	488b      	ldr	r0, [pc, #556]	@ (80098c8 <LCD_print7H+0x89c>)
 800969a:	f00f f830 	bl	80186fe <HAL_SPI_Transmit>
 800969e:	e0f7      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+25) && wiersz<=(ADRES->Y0_SET+31))))
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	7b1b      	ldrb	r3, [r3, #12]
 80096a4:	3317      	adds	r3, #23
 80096a6:	461a      	mov	r2, r3
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d116      	bne.n	80096dc <LCD_print7H+0x6b0>
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	7b5b      	ldrb	r3, [r3, #13]
 80096b2:	3319      	adds	r3, #25
 80096b4:	461a      	mov	r2, r3
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d30f      	bcc.n	80096dc <LCD_print7H+0x6b0>
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	7b5b      	ldrb	r3, [r3, #13]
 80096c0:	331f      	adds	r3, #31
 80096c2:	461a      	mov	r2, r3
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d808      	bhi.n	80096dc <LCD_print7H+0x6b0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80096ca:	f107 010c 	add.w	r1, r7, #12
 80096ce:	f04f 33ff 	mov.w	r3, #4294967295
 80096d2:	2202      	movs	r2, #2
 80096d4:	487c      	ldr	r0, [pc, #496]	@ (80098c8 <LCD_print7H+0x89c>)
 80096d6:	f00f f812 	bl	80186fe <HAL_SPI_Transmit>
 80096da:	e0d9      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+24)) && ((wiersz>=(ADRES->Y0_SET+24) && wiersz<=(ADRES->Y0_SET+30))))
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	7b1b      	ldrb	r3, [r3, #12]
 80096e0:	3318      	adds	r3, #24
 80096e2:	461a      	mov	r2, r3
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d116      	bne.n	8009718 <LCD_print7H+0x6ec>
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	7b5b      	ldrb	r3, [r3, #13]
 80096ee:	3318      	adds	r3, #24
 80096f0:	461a      	mov	r2, r3
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d30f      	bcc.n	8009718 <LCD_print7H+0x6ec>
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	7b5b      	ldrb	r3, [r3, #13]
 80096fc:	331e      	adds	r3, #30
 80096fe:	461a      	mov	r2, r3
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	4293      	cmp	r3, r2
 8009704:	d808      	bhi.n	8009718 <LCD_print7H+0x6ec>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009706:	f107 010c 	add.w	r1, r7, #12
 800970a:	f04f 33ff 	mov.w	r3, #4294967295
 800970e:	2202      	movs	r2, #2
 8009710:	486d      	ldr	r0, [pc, #436]	@ (80098c8 <LCD_print7H+0x89c>)
 8009712:	f00e fff4 	bl	80186fe <HAL_SPI_Transmit>
 8009716:	e0bb      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+25)) && ((wiersz>=(ADRES->Y0_SET+23) && wiersz<=(ADRES->Y0_SET+29))))
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	7b1b      	ldrb	r3, [r3, #12]
 800971c:	3319      	adds	r3, #25
 800971e:	461a      	mov	r2, r3
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	4293      	cmp	r3, r2
 8009724:	d116      	bne.n	8009754 <LCD_print7H+0x728>
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	7b5b      	ldrb	r3, [r3, #13]
 800972a:	3317      	adds	r3, #23
 800972c:	461a      	mov	r2, r3
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	4293      	cmp	r3, r2
 8009732:	d30f      	bcc.n	8009754 <LCD_print7H+0x728>
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	7b5b      	ldrb	r3, [r3, #13]
 8009738:	331d      	adds	r3, #29
 800973a:	461a      	mov	r2, r3
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	4293      	cmp	r3, r2
 8009740:	d808      	bhi.n	8009754 <LCD_print7H+0x728>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009742:	f107 010c 	add.w	r1, r7, #12
 8009746:	f04f 33ff 	mov.w	r3, #4294967295
 800974a:	2202      	movs	r2, #2
 800974c:	485e      	ldr	r0, [pc, #376]	@ (80098c8 <LCD_print7H+0x89c>)
 800974e:	f00e ffd6 	bl	80186fe <HAL_SPI_Transmit>
 8009752:	e09d      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+26)) && ((wiersz>=(ADRES->Y0_SET+22) && wiersz<=(ADRES->Y0_SET+28))))
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	7b1b      	ldrb	r3, [r3, #12]
 8009758:	331a      	adds	r3, #26
 800975a:	461a      	mov	r2, r3
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	4293      	cmp	r3, r2
 8009760:	d116      	bne.n	8009790 <LCD_print7H+0x764>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	7b5b      	ldrb	r3, [r3, #13]
 8009766:	3316      	adds	r3, #22
 8009768:	461a      	mov	r2, r3
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	4293      	cmp	r3, r2
 800976e:	d30f      	bcc.n	8009790 <LCD_print7H+0x764>
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	7b5b      	ldrb	r3, [r3, #13]
 8009774:	331c      	adds	r3, #28
 8009776:	461a      	mov	r2, r3
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	4293      	cmp	r3, r2
 800977c:	d808      	bhi.n	8009790 <LCD_print7H+0x764>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800977e:	f107 010c 	add.w	r1, r7, #12
 8009782:	f04f 33ff 	mov.w	r3, #4294967295
 8009786:	2202      	movs	r2, #2
 8009788:	484f      	ldr	r0, [pc, #316]	@ (80098c8 <LCD_print7H+0x89c>)
 800978a:	f00e ffb8 	bl	80186fe <HAL_SPI_Transmit>
 800978e:	e07f      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+27)) && ((wiersz>=(ADRES->Y0_SET+21) && wiersz<=(ADRES->Y0_SET+27))))
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	7b1b      	ldrb	r3, [r3, #12]
 8009794:	331b      	adds	r3, #27
 8009796:	461a      	mov	r2, r3
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	4293      	cmp	r3, r2
 800979c:	d116      	bne.n	80097cc <LCD_print7H+0x7a0>
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	7b5b      	ldrb	r3, [r3, #13]
 80097a2:	3315      	adds	r3, #21
 80097a4:	461a      	mov	r2, r3
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d30f      	bcc.n	80097cc <LCD_print7H+0x7a0>
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	7b5b      	ldrb	r3, [r3, #13]
 80097b0:	331b      	adds	r3, #27
 80097b2:	461a      	mov	r2, r3
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d808      	bhi.n	80097cc <LCD_print7H+0x7a0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80097ba:	f107 010c 	add.w	r1, r7, #12
 80097be:	f04f 33ff 	mov.w	r3, #4294967295
 80097c2:	2202      	movs	r2, #2
 80097c4:	4840      	ldr	r0, [pc, #256]	@ (80098c8 <LCD_print7H+0x89c>)
 80097c6:	f00e ff9a 	bl	80186fe <HAL_SPI_Transmit>
 80097ca:	e061      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+20) && wiersz<=(ADRES->Y0_SET+26))))
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	7b1b      	ldrb	r3, [r3, #12]
 80097d0:	331c      	adds	r3, #28
 80097d2:	461a      	mov	r2, r3
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d116      	bne.n	8009808 <LCD_print7H+0x7dc>
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	7b5b      	ldrb	r3, [r3, #13]
 80097de:	3314      	adds	r3, #20
 80097e0:	461a      	mov	r2, r3
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d30f      	bcc.n	8009808 <LCD_print7H+0x7dc>
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	7b5b      	ldrb	r3, [r3, #13]
 80097ec:	331a      	adds	r3, #26
 80097ee:	461a      	mov	r2, r3
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d808      	bhi.n	8009808 <LCD_print7H+0x7dc>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80097f6:	f107 010c 	add.w	r1, r7, #12
 80097fa:	f04f 33ff 	mov.w	r3, #4294967295
 80097fe:	2202      	movs	r2, #2
 8009800:	4831      	ldr	r0, [pc, #196]	@ (80098c8 <LCD_print7H+0x89c>)
 8009802:	f00e ff7c 	bl	80186fe <HAL_SPI_Transmit>
 8009806:	e043      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+19) && wiersz<=(ADRES->Y0_SET+25))))
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	7b1b      	ldrb	r3, [r3, #12]
 800980c:	331d      	adds	r3, #29
 800980e:	461a      	mov	r2, r3
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	4293      	cmp	r3, r2
 8009814:	d116      	bne.n	8009844 <LCD_print7H+0x818>
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	7b5b      	ldrb	r3, [r3, #13]
 800981a:	3313      	adds	r3, #19
 800981c:	461a      	mov	r2, r3
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	4293      	cmp	r3, r2
 8009822:	d30f      	bcc.n	8009844 <LCD_print7H+0x818>
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	7b5b      	ldrb	r3, [r3, #13]
 8009828:	3319      	adds	r3, #25
 800982a:	461a      	mov	r2, r3
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	4293      	cmp	r3, r2
 8009830:	d808      	bhi.n	8009844 <LCD_print7H+0x818>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009832:	f107 010c 	add.w	r1, r7, #12
 8009836:	f04f 33ff 	mov.w	r3, #4294967295
 800983a:	2202      	movs	r2, #2
 800983c:	4822      	ldr	r0, [pc, #136]	@ (80098c8 <LCD_print7H+0x89c>)
 800983e:	f00e ff5e 	bl	80186fe <HAL_SPI_Transmit>
 8009842:	e025      	b.n	8009890 <LCD_print7H+0x864>
			}
			else if((kolumna==(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+18) && wiersz<=(ADRES->Y0_SET+24))))
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	7b1b      	ldrb	r3, [r3, #12]
 8009848:	331e      	adds	r3, #30
 800984a:	461a      	mov	r2, r3
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	4293      	cmp	r3, r2
 8009850:	d116      	bne.n	8009880 <LCD_print7H+0x854>
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	7b5b      	ldrb	r3, [r3, #13]
 8009856:	3312      	adds	r3, #18
 8009858:	461a      	mov	r2, r3
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	4293      	cmp	r3, r2
 800985e:	d30f      	bcc.n	8009880 <LCD_print7H+0x854>
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	7b5b      	ldrb	r3, [r3, #13]
 8009864:	3318      	adds	r3, #24
 8009866:	461a      	mov	r2, r3
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	4293      	cmp	r3, r2
 800986c:	d808      	bhi.n	8009880 <LCD_print7H+0x854>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800986e:	f107 010c 	add.w	r1, r7, #12
 8009872:	f04f 33ff 	mov.w	r3, #4294967295
 8009876:	2202      	movs	r2, #2
 8009878:	4813      	ldr	r0, [pc, #76]	@ (80098c8 <LCD_print7H+0x89c>)
 800987a:	f00e ff40 	bl	80186fe <HAL_SPI_Transmit>
 800987e:	e007      	b.n	8009890 <LCD_print7H+0x864>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8009880:	f107 0108 	add.w	r1, r7, #8
 8009884:	f04f 33ff 	mov.w	r3, #4294967295
 8009888:	2202      	movs	r2, #2
 800988a:	480f      	ldr	r0, [pc, #60]	@ (80098c8 <LCD_print7H+0x89c>)
 800988c:	f00e ff37 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	3301      	adds	r3, #1
 8009894:	617b      	str	r3, [r7, #20]
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	7b9b      	ldrb	r3, [r3, #14]
 800989a:	3301      	adds	r3, #1
 800989c:	461a      	mov	r2, r3
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	4293      	cmp	r3, r2
 80098a2:	f4ff ac39 	bcc.w	8009118 <LCD_print7H+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	3301      	adds	r3, #1
 80098aa:	613b      	str	r3, [r7, #16]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	7bdb      	ldrb	r3, [r3, #15]
 80098b0:	461a      	mov	r2, r3
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	4293      	cmp	r3, r2
 80098b6:	f4ff ac2b 	bcc.w	8009110 <LCD_print7H+0xe4>
			}
		}
	}
	CS_ON();
 80098ba:	f7f7 fbb3 	bl	8001024 <CS_ON>
}
 80098be:	bf00      	nop
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	200004a4 	.word	0x200004a4

080098cc <LCD_print0H>:

void LCD_print0H(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	603b      	str	r3, [r7, #0]
 80098d4:	4603      	mov	r3, r0
 80098d6:	71fb      	strb	r3, [r7, #7]
 80098d8:	460b      	mov	r3, r1
 80098da:	71bb      	strb	r3, [r7, #6]
 80098dc:	4613      	mov	r3, r2
 80098de:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	617b      	str	r3, [r7, #20]
 80098e4:	2300      	movs	r3, #0
 80098e6:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	2200      	movs	r2, #0
 80098ec:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	223f      	movs	r2, #63	@ 0x3f
 80098f2:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	221f      	movs	r2, #31
 80098f8:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2200      	movs	r2, #0
 80098fe:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	2200      	movs	r2, #0
 8009904:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	7cda      	ldrb	r2, [r3, #19]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	7c1b      	ldrb	r3, [r3, #16]
 800990e:	4053      	eors	r3, r2
 8009910:	b2db      	uxtb	r3, r3
 8009912:	00db      	lsls	r3, r3, #3
 8009914:	b25a      	sxtb	r2, r3
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	7c5b      	ldrb	r3, [r3, #17]
 800991a:	b25b      	sxtb	r3, r3
 800991c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009920:	b25b      	sxtb	r3, r3
 8009922:	4053      	eors	r3, r2
 8009924:	b25b      	sxtb	r3, r3
 8009926:	b2da      	uxtb	r2, r3
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	7d1b      	ldrb	r3, [r3, #20]
 8009930:	461a      	mov	r2, r3
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	7c5b      	ldrb	r3, [r3, #17]
 8009936:	f003 0307 	and.w	r3, r3, #7
 800993a:	4053      	eors	r3, r2
 800993c:	015b      	lsls	r3, r3, #5
 800993e:	b25a      	sxtb	r2, r3
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	7c9b      	ldrb	r3, [r3, #18]
 8009944:	b25b      	sxtb	r3, r3
 8009946:	4053      	eors	r3, r2
 8009948:	b25b      	sxtb	r3, r3
 800994a:	b2da      	uxtb	r2, r3
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	7cdb      	ldrb	r3, [r3, #19]
 8009954:	733b      	strb	r3, [r7, #12]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	7d1b      	ldrb	r3, [r3, #20]
 800995a:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 800995c:	2300      	movs	r3, #0
 800995e:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8009960:	2300      	movs	r3, #0
 8009962:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8009964:	7bfa      	ldrb	r2, [r7, #15]
 8009966:	79fb      	ldrb	r3, [r7, #7]
 8009968:	4053      	eors	r3, r2
 800996a:	b2db      	uxtb	r3, r3
 800996c:	00db      	lsls	r3, r3, #3
 800996e:	b25a      	sxtb	r2, r3
 8009970:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009974:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009978:	b25b      	sxtb	r3, r3
 800997a:	4053      	eors	r3, r2
 800997c:	b25b      	sxtb	r3, r3
 800997e:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8009980:	7bba      	ldrb	r2, [r7, #14]
 8009982:	79bb      	ldrb	r3, [r7, #6]
 8009984:	f003 0307 	and.w	r3, r3, #7
 8009988:	4053      	eors	r3, r2
 800998a:	015b      	lsls	r3, r3, #5
 800998c:	b25a      	sxtb	r2, r3
 800998e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8009992:	4053      	eors	r3, r2
 8009994:	b25b      	sxtb	r3, r3
 8009996:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8009998:	7bfb      	ldrb	r3, [r7, #15]
 800999a:	723b      	strb	r3, [r7, #8]
 800999c:	7bbb      	ldrb	r3, [r7, #14]
 800999e:	727b      	strb	r3, [r7, #9]
	DC_ON();
 80099a0:	f7f7 fb56 	bl	8001050 <DC_ON>
	CS_OFF();
 80099a4:	f7f7 fb49 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	7b5b      	ldrb	r3, [r3, #13]
 80099ac:	613b      	str	r3, [r7, #16]
 80099ae:	e3ad      	b.n	800a10c <LCD_print0H+0x840>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	7b1b      	ldrb	r3, [r3, #12]
 80099b4:	617b      	str	r3, [r7, #20]
 80099b6:	e39e      	b.n	800a0f6 <LCD_print0H+0x82a>
		{
			if((kolumna>=(ADRES->X0_SET+11) && kolumna<=(ADRES->X0_SET+21)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+4))))
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	7b1b      	ldrb	r3, [r3, #12]
 80099bc:	330b      	adds	r3, #11
 80099be:	461a      	mov	r2, r3
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d31c      	bcc.n	8009a00 <LCD_print0H+0x134>
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	7b1b      	ldrb	r3, [r3, #12]
 80099ca:	3315      	adds	r3, #21
 80099cc:	461a      	mov	r2, r3
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d815      	bhi.n	8009a00 <LCD_print0H+0x134>
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	7b5b      	ldrb	r3, [r3, #13]
 80099d8:	461a      	mov	r2, r3
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	4293      	cmp	r3, r2
 80099de:	d30f      	bcc.n	8009a00 <LCD_print0H+0x134>
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	7b5b      	ldrb	r3, [r3, #13]
 80099e4:	3304      	adds	r3, #4
 80099e6:	461a      	mov	r2, r3
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d808      	bhi.n	8009a00 <LCD_print0H+0x134>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80099ee:	f107 010c 	add.w	r1, r7, #12
 80099f2:	f04f 33ff 	mov.w	r3, #4294967295
 80099f6:	2202      	movs	r2, #2
 80099f8:	488a      	ldr	r0, [pc, #552]	@ (8009c24 <LCD_print0H+0x358>)
 80099fa:	f00e fe80 	bl	80186fe <HAL_SPI_Transmit>
 80099fe:	e377      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna>=(ADRES->X0_SET+11) && kolumna<=(ADRES->X0_SET+21)) && ((wiersz>=(ADRES->Y0_SET+46) && wiersz<=(ADRES->Y0_SET+50))))
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	7b1b      	ldrb	r3, [r3, #12]
 8009a04:	330b      	adds	r3, #11
 8009a06:	461a      	mov	r2, r3
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d31d      	bcc.n	8009a4a <LCD_print0H+0x17e>
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	7b1b      	ldrb	r3, [r3, #12]
 8009a12:	3315      	adds	r3, #21
 8009a14:	461a      	mov	r2, r3
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d816      	bhi.n	8009a4a <LCD_print0H+0x17e>
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	7b5b      	ldrb	r3, [r3, #13]
 8009a20:	332e      	adds	r3, #46	@ 0x2e
 8009a22:	461a      	mov	r2, r3
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d30f      	bcc.n	8009a4a <LCD_print0H+0x17e>
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	7b5b      	ldrb	r3, [r3, #13]
 8009a2e:	3332      	adds	r3, #50	@ 0x32
 8009a30:	461a      	mov	r2, r3
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d808      	bhi.n	8009a4a <LCD_print0H+0x17e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009a38:	f107 010c 	add.w	r1, r7, #12
 8009a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a40:	2202      	movs	r2, #2
 8009a42:	4878      	ldr	r0, [pc, #480]	@ (8009c24 <LCD_print0H+0x358>)
 8009a44:	f00e fe5b 	bl	80186fe <HAL_SPI_Transmit>
 8009a48:	e352      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+5)) && ((wiersz>=(ADRES->Y0_SET+10) && wiersz<=(ADRES->Y0_SET+40))))
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	7b1b      	ldrb	r3, [r3, #12]
 8009a4e:	3302      	adds	r3, #2
 8009a50:	461a      	mov	r2, r3
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d31d      	bcc.n	8009a94 <LCD_print0H+0x1c8>
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	7b1b      	ldrb	r3, [r3, #12]
 8009a5c:	3305      	adds	r3, #5
 8009a5e:	461a      	mov	r2, r3
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d816      	bhi.n	8009a94 <LCD_print0H+0x1c8>
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	7b5b      	ldrb	r3, [r3, #13]
 8009a6a:	330a      	adds	r3, #10
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d30f      	bcc.n	8009a94 <LCD_print0H+0x1c8>
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	7b5b      	ldrb	r3, [r3, #13]
 8009a78:	3328      	adds	r3, #40	@ 0x28
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d808      	bhi.n	8009a94 <LCD_print0H+0x1c8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009a82:	f107 010c 	add.w	r1, r7, #12
 8009a86:	f04f 33ff 	mov.w	r3, #4294967295
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	4865      	ldr	r0, [pc, #404]	@ (8009c24 <LCD_print0H+0x358>)
 8009a8e:	f00e fe36 	bl	80186fe <HAL_SPI_Transmit>
 8009a92:	e32d      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna>=(ADRES->X0_SET+27) && kolumna<=(ADRES->X0_SET+30)) && ((wiersz>=(ADRES->Y0_SET+10) && wiersz<=(ADRES->Y0_SET+40))))
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	7b1b      	ldrb	r3, [r3, #12]
 8009a98:	331b      	adds	r3, #27
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d31d      	bcc.n	8009ade <LCD_print0H+0x212>
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	7b1b      	ldrb	r3, [r3, #12]
 8009aa6:	331e      	adds	r3, #30
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d816      	bhi.n	8009ade <LCD_print0H+0x212>
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	7b5b      	ldrb	r3, [r3, #13]
 8009ab4:	330a      	adds	r3, #10
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d30f      	bcc.n	8009ade <LCD_print0H+0x212>
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	7b5b      	ldrb	r3, [r3, #13]
 8009ac2:	3328      	adds	r3, #40	@ 0x28
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d808      	bhi.n	8009ade <LCD_print0H+0x212>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009acc:	f107 010c 	add.w	r1, r7, #12
 8009ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ad4:	2202      	movs	r2, #2
 8009ad6:	4853      	ldr	r0, [pc, #332]	@ (8009c24 <LCD_print0H+0x358>)
 8009ad8:	f00e fe11 	bl	80186fe <HAL_SPI_Transmit>
 8009adc:	e308      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna==(ADRES->X0_SET+2)) && ((wiersz>=(ADRES->Y0_SET+9) && wiersz<=(ADRES->Y0_SET+41))))
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	7b1b      	ldrb	r3, [r3, #12]
 8009ae2:	3302      	adds	r3, #2
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d116      	bne.n	8009b1a <LCD_print0H+0x24e>
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	7b5b      	ldrb	r3, [r3, #13]
 8009af0:	3309      	adds	r3, #9
 8009af2:	461a      	mov	r2, r3
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d30f      	bcc.n	8009b1a <LCD_print0H+0x24e>
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	7b5b      	ldrb	r3, [r3, #13]
 8009afe:	3329      	adds	r3, #41	@ 0x29
 8009b00:	461a      	mov	r2, r3
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d808      	bhi.n	8009b1a <LCD_print0H+0x24e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009b08:	f107 010c 	add.w	r1, r7, #12
 8009b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b10:	2202      	movs	r2, #2
 8009b12:	4844      	ldr	r0, [pc, #272]	@ (8009c24 <LCD_print0H+0x358>)
 8009b14:	f00e fdf3 	bl	80186fe <HAL_SPI_Transmit>
 8009b18:	e2ea      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+8) && wiersz<=(ADRES->Y0_SET+9)) || (wiersz>=(ADRES->Y0_SET+41) && wiersz<=(ADRES->Y0_SET+42))))
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	7b1b      	ldrb	r3, [r3, #12]
 8009b1e:	3303      	adds	r3, #3
 8009b20:	461a      	mov	r2, r3
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d124      	bne.n	8009b72 <LCD_print0H+0x2a6>
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	7b5b      	ldrb	r3, [r3, #13]
 8009b2c:	3308      	adds	r3, #8
 8009b2e:	461a      	mov	r2, r3
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d306      	bcc.n	8009b44 <LCD_print0H+0x278>
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	7b5b      	ldrb	r3, [r3, #13]
 8009b3a:	3309      	adds	r3, #9
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d90d      	bls.n	8009b60 <LCD_print0H+0x294>
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	7b5b      	ldrb	r3, [r3, #13]
 8009b48:	3329      	adds	r3, #41	@ 0x29
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d30f      	bcc.n	8009b72 <LCD_print0H+0x2a6>
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	7b5b      	ldrb	r3, [r3, #13]
 8009b56:	332a      	adds	r3, #42	@ 0x2a
 8009b58:	461a      	mov	r2, r3
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d808      	bhi.n	8009b72 <LCD_print0H+0x2a6>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009b60:	f107 010c 	add.w	r1, r7, #12
 8009b64:	f04f 33ff 	mov.w	r3, #4294967295
 8009b68:	2202      	movs	r2, #2
 8009b6a:	482e      	ldr	r0, [pc, #184]	@ (8009c24 <LCD_print0H+0x358>)
 8009b6c:	f00e fdc7 	bl	80186fe <HAL_SPI_Transmit>
 8009b70:	e2be      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna==(ADRES->X0_SET+4)) && ((wiersz>=(ADRES->Y0_SET+7) && wiersz<=(ADRES->Y0_SET+9)) || (wiersz>=(ADRES->Y0_SET+41) && wiersz<=(ADRES->Y0_SET+43))))
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	7b1b      	ldrb	r3, [r3, #12]
 8009b76:	3304      	adds	r3, #4
 8009b78:	461a      	mov	r2, r3
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d124      	bne.n	8009bca <LCD_print0H+0x2fe>
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	7b5b      	ldrb	r3, [r3, #13]
 8009b84:	3307      	adds	r3, #7
 8009b86:	461a      	mov	r2, r3
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d306      	bcc.n	8009b9c <LCD_print0H+0x2d0>
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	7b5b      	ldrb	r3, [r3, #13]
 8009b92:	3309      	adds	r3, #9
 8009b94:	461a      	mov	r2, r3
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d90d      	bls.n	8009bb8 <LCD_print0H+0x2ec>
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	7b5b      	ldrb	r3, [r3, #13]
 8009ba0:	3329      	adds	r3, #41	@ 0x29
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d30f      	bcc.n	8009bca <LCD_print0H+0x2fe>
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	7b5b      	ldrb	r3, [r3, #13]
 8009bae:	332b      	adds	r3, #43	@ 0x2b
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d808      	bhi.n	8009bca <LCD_print0H+0x2fe>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009bb8:	f107 010c 	add.w	r1, r7, #12
 8009bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc0:	2202      	movs	r2, #2
 8009bc2:	4818      	ldr	r0, [pc, #96]	@ (8009c24 <LCD_print0H+0x358>)
 8009bc4:	f00e fd9b 	bl	80186fe <HAL_SPI_Transmit>
 8009bc8:	e292      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna==(ADRES->X0_SET+5)) && ((wiersz>=(ADRES->Y0_SET+6) && wiersz<=(ADRES->Y0_SET+9)) || (wiersz>=(ADRES->Y0_SET+41) && wiersz<=(ADRES->Y0_SET+44))))
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	7b1b      	ldrb	r3, [r3, #12]
 8009bce:	3305      	adds	r3, #5
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d127      	bne.n	8009c28 <LCD_print0H+0x35c>
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	7b5b      	ldrb	r3, [r3, #13]
 8009bdc:	3306      	adds	r3, #6
 8009bde:	461a      	mov	r2, r3
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d306      	bcc.n	8009bf4 <LCD_print0H+0x328>
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	7b5b      	ldrb	r3, [r3, #13]
 8009bea:	3309      	adds	r3, #9
 8009bec:	461a      	mov	r2, r3
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d90d      	bls.n	8009c10 <LCD_print0H+0x344>
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	7b5b      	ldrb	r3, [r3, #13]
 8009bf8:	3329      	adds	r3, #41	@ 0x29
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d312      	bcc.n	8009c28 <LCD_print0H+0x35c>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	7b5b      	ldrb	r3, [r3, #13]
 8009c06:	332c      	adds	r3, #44	@ 0x2c
 8009c08:	461a      	mov	r2, r3
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d80b      	bhi.n	8009c28 <LCD_print0H+0x35c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009c10:	f107 010c 	add.w	r1, r7, #12
 8009c14:	f04f 33ff 	mov.w	r3, #4294967295
 8009c18:	2202      	movs	r2, #2
 8009c1a:	4802      	ldr	r0, [pc, #8]	@ (8009c24 <LCD_print0H+0x358>)
 8009c1c:	f00e fd6f 	bl	80186fe <HAL_SPI_Transmit>
 8009c20:	e266      	b.n	800a0f0 <LCD_print0H+0x824>
 8009c22:	bf00      	nop
 8009c24:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+9)) || (wiersz>=(ADRES->Y0_SET+41) && wiersz<=(ADRES->Y0_SET+45))))
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	7b1b      	ldrb	r3, [r3, #12]
 8009c2c:	3306      	adds	r3, #6
 8009c2e:	461a      	mov	r2, r3
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d124      	bne.n	8009c80 <LCD_print0H+0x3b4>
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	7b5b      	ldrb	r3, [r3, #13]
 8009c3a:	3305      	adds	r3, #5
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d306      	bcc.n	8009c52 <LCD_print0H+0x386>
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	7b5b      	ldrb	r3, [r3, #13]
 8009c48:	3309      	adds	r3, #9
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d90d      	bls.n	8009c6e <LCD_print0H+0x3a2>
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	7b5b      	ldrb	r3, [r3, #13]
 8009c56:	3329      	adds	r3, #41	@ 0x29
 8009c58:	461a      	mov	r2, r3
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d30f      	bcc.n	8009c80 <LCD_print0H+0x3b4>
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	7b5b      	ldrb	r3, [r3, #13]
 8009c64:	332d      	adds	r3, #45	@ 0x2d
 8009c66:	461a      	mov	r2, r3
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d808      	bhi.n	8009c80 <LCD_print0H+0x3b4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009c6e:	f107 010c 	add.w	r1, r7, #12
 8009c72:	f04f 33ff 	mov.w	r3, #4294967295
 8009c76:	2202      	movs	r2, #2
 8009c78:	489b      	ldr	r0, [pc, #620]	@ (8009ee8 <LCD_print0H+0x61c>)
 8009c7a:	f00e fd40 	bl	80186fe <HAL_SPI_Transmit>
 8009c7e:	e237      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna==(ADRES->X0_SET+7)) && ((wiersz>=(ADRES->Y0_SET+4) && wiersz<=(ADRES->Y0_SET+8)) || (wiersz>=(ADRES->Y0_SET+42) && wiersz<=(ADRES->Y0_SET+46))))
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	7b1b      	ldrb	r3, [r3, #12]
 8009c84:	3307      	adds	r3, #7
 8009c86:	461a      	mov	r2, r3
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d124      	bne.n	8009cd8 <LCD_print0H+0x40c>
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	7b5b      	ldrb	r3, [r3, #13]
 8009c92:	3304      	adds	r3, #4
 8009c94:	461a      	mov	r2, r3
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d306      	bcc.n	8009caa <LCD_print0H+0x3de>
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	7b5b      	ldrb	r3, [r3, #13]
 8009ca0:	3308      	adds	r3, #8
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d90d      	bls.n	8009cc6 <LCD_print0H+0x3fa>
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	7b5b      	ldrb	r3, [r3, #13]
 8009cae:	332a      	adds	r3, #42	@ 0x2a
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d30f      	bcc.n	8009cd8 <LCD_print0H+0x40c>
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	7b5b      	ldrb	r3, [r3, #13]
 8009cbc:	332e      	adds	r3, #46	@ 0x2e
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d808      	bhi.n	8009cd8 <LCD_print0H+0x40c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009cc6:	f107 010c 	add.w	r1, r7, #12
 8009cca:	f04f 33ff 	mov.w	r3, #4294967295
 8009cce:	2202      	movs	r2, #2
 8009cd0:	4885      	ldr	r0, [pc, #532]	@ (8009ee8 <LCD_print0H+0x61c>)
 8009cd2:	f00e fd14 	bl	80186fe <HAL_SPI_Transmit>
 8009cd6:	e20b      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna==(ADRES->X0_SET+8)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+7)) || (wiersz>=(ADRES->Y0_SET+43) && wiersz<=(ADRES->Y0_SET+47))))
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	7b1b      	ldrb	r3, [r3, #12]
 8009cdc:	3308      	adds	r3, #8
 8009cde:	461a      	mov	r2, r3
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d124      	bne.n	8009d30 <LCD_print0H+0x464>
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	7b5b      	ldrb	r3, [r3, #13]
 8009cea:	3303      	adds	r3, #3
 8009cec:	461a      	mov	r2, r3
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d306      	bcc.n	8009d02 <LCD_print0H+0x436>
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	7b5b      	ldrb	r3, [r3, #13]
 8009cf8:	3307      	adds	r3, #7
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d90d      	bls.n	8009d1e <LCD_print0H+0x452>
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	7b5b      	ldrb	r3, [r3, #13]
 8009d06:	332b      	adds	r3, #43	@ 0x2b
 8009d08:	461a      	mov	r2, r3
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d30f      	bcc.n	8009d30 <LCD_print0H+0x464>
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	7b5b      	ldrb	r3, [r3, #13]
 8009d14:	332f      	adds	r3, #47	@ 0x2f
 8009d16:	461a      	mov	r2, r3
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d808      	bhi.n	8009d30 <LCD_print0H+0x464>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009d1e:	f107 010c 	add.w	r1, r7, #12
 8009d22:	f04f 33ff 	mov.w	r3, #4294967295
 8009d26:	2202      	movs	r2, #2
 8009d28:	486f      	ldr	r0, [pc, #444]	@ (8009ee8 <LCD_print0H+0x61c>)
 8009d2a:	f00e fce8 	bl	80186fe <HAL_SPI_Transmit>
 8009d2e:	e1df      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna==(ADRES->X0_SET+9)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+6)) || (wiersz>=(ADRES->Y0_SET+44) && wiersz<=(ADRES->Y0_SET+48))))
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	7b1b      	ldrb	r3, [r3, #12]
 8009d34:	3309      	adds	r3, #9
 8009d36:	461a      	mov	r2, r3
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d124      	bne.n	8009d88 <LCD_print0H+0x4bc>
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	7b5b      	ldrb	r3, [r3, #13]
 8009d42:	3302      	adds	r3, #2
 8009d44:	461a      	mov	r2, r3
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d306      	bcc.n	8009d5a <LCD_print0H+0x48e>
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	7b5b      	ldrb	r3, [r3, #13]
 8009d50:	3306      	adds	r3, #6
 8009d52:	461a      	mov	r2, r3
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d90d      	bls.n	8009d76 <LCD_print0H+0x4aa>
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	7b5b      	ldrb	r3, [r3, #13]
 8009d5e:	332c      	adds	r3, #44	@ 0x2c
 8009d60:	461a      	mov	r2, r3
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d30f      	bcc.n	8009d88 <LCD_print0H+0x4bc>
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	7b5b      	ldrb	r3, [r3, #13]
 8009d6c:	3330      	adds	r3, #48	@ 0x30
 8009d6e:	461a      	mov	r2, r3
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d808      	bhi.n	8009d88 <LCD_print0H+0x4bc>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009d76:	f107 010c 	add.w	r1, r7, #12
 8009d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d7e:	2202      	movs	r2, #2
 8009d80:	4859      	ldr	r0, [pc, #356]	@ (8009ee8 <LCD_print0H+0x61c>)
 8009d82:	f00e fcbc 	bl	80186fe <HAL_SPI_Transmit>
 8009d86:	e1b3      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna==(ADRES->X0_SET+10)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+5)) || (wiersz>=(ADRES->Y0_SET+45) && wiersz<=(ADRES->Y0_SET+49))))
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	7b1b      	ldrb	r3, [r3, #12]
 8009d8c:	330a      	adds	r3, #10
 8009d8e:	461a      	mov	r2, r3
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d124      	bne.n	8009de0 <LCD_print0H+0x514>
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	7b5b      	ldrb	r3, [r3, #13]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d306      	bcc.n	8009db2 <LCD_print0H+0x4e6>
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	7b5b      	ldrb	r3, [r3, #13]
 8009da8:	3305      	adds	r3, #5
 8009daa:	461a      	mov	r2, r3
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d90d      	bls.n	8009dce <LCD_print0H+0x502>
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	7b5b      	ldrb	r3, [r3, #13]
 8009db6:	332d      	adds	r3, #45	@ 0x2d
 8009db8:	461a      	mov	r2, r3
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d30f      	bcc.n	8009de0 <LCD_print0H+0x514>
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	7b5b      	ldrb	r3, [r3, #13]
 8009dc4:	3331      	adds	r3, #49	@ 0x31
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d808      	bhi.n	8009de0 <LCD_print0H+0x514>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009dce:	f107 010c 	add.w	r1, r7, #12
 8009dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	4843      	ldr	r0, [pc, #268]	@ (8009ee8 <LCD_print0H+0x61c>)
 8009dda:	f00e fc90 	bl	80186fe <HAL_SPI_Transmit>
 8009dde:	e187      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna==(ADRES->X0_SET+22)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+5)) || (wiersz>=(ADRES->Y0_SET+45) && wiersz<=(ADRES->Y0_SET+49))))
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	7b1b      	ldrb	r3, [r3, #12]
 8009de4:	3316      	adds	r3, #22
 8009de6:	461a      	mov	r2, r3
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d124      	bne.n	8009e38 <LCD_print0H+0x56c>
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	7b5b      	ldrb	r3, [r3, #13]
 8009df2:	3301      	adds	r3, #1
 8009df4:	461a      	mov	r2, r3
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d306      	bcc.n	8009e0a <LCD_print0H+0x53e>
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	7b5b      	ldrb	r3, [r3, #13]
 8009e00:	3305      	adds	r3, #5
 8009e02:	461a      	mov	r2, r3
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d90d      	bls.n	8009e26 <LCD_print0H+0x55a>
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	7b5b      	ldrb	r3, [r3, #13]
 8009e0e:	332d      	adds	r3, #45	@ 0x2d
 8009e10:	461a      	mov	r2, r3
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d30f      	bcc.n	8009e38 <LCD_print0H+0x56c>
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	7b5b      	ldrb	r3, [r3, #13]
 8009e1c:	3331      	adds	r3, #49	@ 0x31
 8009e1e:	461a      	mov	r2, r3
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d808      	bhi.n	8009e38 <LCD_print0H+0x56c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009e26:	f107 010c 	add.w	r1, r7, #12
 8009e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e2e:	2202      	movs	r2, #2
 8009e30:	482d      	ldr	r0, [pc, #180]	@ (8009ee8 <LCD_print0H+0x61c>)
 8009e32:	f00e fc64 	bl	80186fe <HAL_SPI_Transmit>
 8009e36:	e15b      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna==(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+6)) || (wiersz>=(ADRES->Y0_SET+44) && wiersz<=(ADRES->Y0_SET+48))))
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	7b1b      	ldrb	r3, [r3, #12]
 8009e3c:	3317      	adds	r3, #23
 8009e3e:	461a      	mov	r2, r3
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d124      	bne.n	8009e90 <LCD_print0H+0x5c4>
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	7b5b      	ldrb	r3, [r3, #13]
 8009e4a:	3302      	adds	r3, #2
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d306      	bcc.n	8009e62 <LCD_print0H+0x596>
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	7b5b      	ldrb	r3, [r3, #13]
 8009e58:	3306      	adds	r3, #6
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d90d      	bls.n	8009e7e <LCD_print0H+0x5b2>
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	7b5b      	ldrb	r3, [r3, #13]
 8009e66:	332c      	adds	r3, #44	@ 0x2c
 8009e68:	461a      	mov	r2, r3
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d30f      	bcc.n	8009e90 <LCD_print0H+0x5c4>
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	7b5b      	ldrb	r3, [r3, #13]
 8009e74:	3330      	adds	r3, #48	@ 0x30
 8009e76:	461a      	mov	r2, r3
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d808      	bhi.n	8009e90 <LCD_print0H+0x5c4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009e7e:	f107 010c 	add.w	r1, r7, #12
 8009e82:	f04f 33ff 	mov.w	r3, #4294967295
 8009e86:	2202      	movs	r2, #2
 8009e88:	4817      	ldr	r0, [pc, #92]	@ (8009ee8 <LCD_print0H+0x61c>)
 8009e8a:	f00e fc38 	bl	80186fe <HAL_SPI_Transmit>
 8009e8e:	e12f      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna==(ADRES->X0_SET+24)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+7)) || (wiersz>=(ADRES->Y0_SET+43) && wiersz<=(ADRES->Y0_SET+47))))
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	7b1b      	ldrb	r3, [r3, #12]
 8009e94:	3318      	adds	r3, #24
 8009e96:	461a      	mov	r2, r3
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d126      	bne.n	8009eec <LCD_print0H+0x620>
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	7b5b      	ldrb	r3, [r3, #13]
 8009ea2:	3303      	adds	r3, #3
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d306      	bcc.n	8009eba <LCD_print0H+0x5ee>
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	7b5b      	ldrb	r3, [r3, #13]
 8009eb0:	3307      	adds	r3, #7
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d90d      	bls.n	8009ed6 <LCD_print0H+0x60a>
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	7b5b      	ldrb	r3, [r3, #13]
 8009ebe:	332b      	adds	r3, #43	@ 0x2b
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d311      	bcc.n	8009eec <LCD_print0H+0x620>
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	7b5b      	ldrb	r3, [r3, #13]
 8009ecc:	332f      	adds	r3, #47	@ 0x2f
 8009ece:	461a      	mov	r2, r3
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d80a      	bhi.n	8009eec <LCD_print0H+0x620>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009ed6:	f107 010c 	add.w	r1, r7, #12
 8009eda:	f04f 33ff 	mov.w	r3, #4294967295
 8009ede:	2202      	movs	r2, #2
 8009ee0:	4801      	ldr	r0, [pc, #4]	@ (8009ee8 <LCD_print0H+0x61c>)
 8009ee2:	f00e fc0c 	bl	80186fe <HAL_SPI_Transmit>
 8009ee6:	e103      	b.n	800a0f0 <LCD_print0H+0x824>
 8009ee8:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+25)) && ((wiersz>=(ADRES->Y0_SET+4) && wiersz<=(ADRES->Y0_SET+8)) || (wiersz>=(ADRES->Y0_SET+42) && wiersz<=(ADRES->Y0_SET+46))))
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	7b1b      	ldrb	r3, [r3, #12]
 8009ef0:	3319      	adds	r3, #25
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d124      	bne.n	8009f44 <LCD_print0H+0x678>
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	7b5b      	ldrb	r3, [r3, #13]
 8009efe:	3304      	adds	r3, #4
 8009f00:	461a      	mov	r2, r3
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d306      	bcc.n	8009f16 <LCD_print0H+0x64a>
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	7b5b      	ldrb	r3, [r3, #13]
 8009f0c:	3308      	adds	r3, #8
 8009f0e:	461a      	mov	r2, r3
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d90d      	bls.n	8009f32 <LCD_print0H+0x666>
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	7b5b      	ldrb	r3, [r3, #13]
 8009f1a:	332a      	adds	r3, #42	@ 0x2a
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d30f      	bcc.n	8009f44 <LCD_print0H+0x678>
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	7b5b      	ldrb	r3, [r3, #13]
 8009f28:	332e      	adds	r3, #46	@ 0x2e
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d808      	bhi.n	8009f44 <LCD_print0H+0x678>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009f32:	f107 010c 	add.w	r1, r7, #12
 8009f36:	f04f 33ff 	mov.w	r3, #4294967295
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	487a      	ldr	r0, [pc, #488]	@ (800a128 <LCD_print0H+0x85c>)
 8009f3e:	f00e fbde 	bl	80186fe <HAL_SPI_Transmit>
 8009f42:	e0d5      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna==(ADRES->X0_SET+26)) && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+9)) || (wiersz>=(ADRES->Y0_SET+41) && wiersz<=(ADRES->Y0_SET+45))))
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	7b1b      	ldrb	r3, [r3, #12]
 8009f48:	331a      	adds	r3, #26
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d124      	bne.n	8009f9c <LCD_print0H+0x6d0>
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	7b5b      	ldrb	r3, [r3, #13]
 8009f56:	3305      	adds	r3, #5
 8009f58:	461a      	mov	r2, r3
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d306      	bcc.n	8009f6e <LCD_print0H+0x6a2>
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	7b5b      	ldrb	r3, [r3, #13]
 8009f64:	3309      	adds	r3, #9
 8009f66:	461a      	mov	r2, r3
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d90d      	bls.n	8009f8a <LCD_print0H+0x6be>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	7b5b      	ldrb	r3, [r3, #13]
 8009f72:	3329      	adds	r3, #41	@ 0x29
 8009f74:	461a      	mov	r2, r3
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d30f      	bcc.n	8009f9c <LCD_print0H+0x6d0>
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	7b5b      	ldrb	r3, [r3, #13]
 8009f80:	332d      	adds	r3, #45	@ 0x2d
 8009f82:	461a      	mov	r2, r3
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d808      	bhi.n	8009f9c <LCD_print0H+0x6d0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009f8a:	f107 010c 	add.w	r1, r7, #12
 8009f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f92:	2202      	movs	r2, #2
 8009f94:	4864      	ldr	r0, [pc, #400]	@ (800a128 <LCD_print0H+0x85c>)
 8009f96:	f00e fbb2 	bl	80186fe <HAL_SPI_Transmit>
 8009f9a:	e0a9      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna==(ADRES->X0_SET+27)) && ((wiersz>=(ADRES->Y0_SET+6) && wiersz<=(ADRES->Y0_SET+9)) || (wiersz>=(ADRES->Y0_SET+41) && wiersz<=(ADRES->Y0_SET+44))))
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	7b1b      	ldrb	r3, [r3, #12]
 8009fa0:	331b      	adds	r3, #27
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d124      	bne.n	8009ff4 <LCD_print0H+0x728>
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	7b5b      	ldrb	r3, [r3, #13]
 8009fae:	3306      	adds	r3, #6
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d306      	bcc.n	8009fc6 <LCD_print0H+0x6fa>
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	7b5b      	ldrb	r3, [r3, #13]
 8009fbc:	3309      	adds	r3, #9
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d90d      	bls.n	8009fe2 <LCD_print0H+0x716>
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	7b5b      	ldrb	r3, [r3, #13]
 8009fca:	3329      	adds	r3, #41	@ 0x29
 8009fcc:	461a      	mov	r2, r3
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d30f      	bcc.n	8009ff4 <LCD_print0H+0x728>
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	7b5b      	ldrb	r3, [r3, #13]
 8009fd8:	332c      	adds	r3, #44	@ 0x2c
 8009fda:	461a      	mov	r2, r3
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d808      	bhi.n	8009ff4 <LCD_print0H+0x728>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8009fe2:	f107 010c 	add.w	r1, r7, #12
 8009fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fea:	2202      	movs	r2, #2
 8009fec:	484e      	ldr	r0, [pc, #312]	@ (800a128 <LCD_print0H+0x85c>)
 8009fee:	f00e fb86 	bl	80186fe <HAL_SPI_Transmit>
 8009ff2:	e07d      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna==(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+7) && wiersz<=(ADRES->Y0_SET+9)) || (wiersz>=(ADRES->Y0_SET+41) && wiersz<=(ADRES->Y0_SET+43))))
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	7b1b      	ldrb	r3, [r3, #12]
 8009ff8:	331c      	adds	r3, #28
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d124      	bne.n	800a04c <LCD_print0H+0x780>
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	7b5b      	ldrb	r3, [r3, #13]
 800a006:	3307      	adds	r3, #7
 800a008:	461a      	mov	r2, r3
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d306      	bcc.n	800a01e <LCD_print0H+0x752>
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	7b5b      	ldrb	r3, [r3, #13]
 800a014:	3309      	adds	r3, #9
 800a016:	461a      	mov	r2, r3
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d90d      	bls.n	800a03a <LCD_print0H+0x76e>
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	7b5b      	ldrb	r3, [r3, #13]
 800a022:	3329      	adds	r3, #41	@ 0x29
 800a024:	461a      	mov	r2, r3
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	4293      	cmp	r3, r2
 800a02a:	d30f      	bcc.n	800a04c <LCD_print0H+0x780>
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	7b5b      	ldrb	r3, [r3, #13]
 800a030:	332b      	adds	r3, #43	@ 0x2b
 800a032:	461a      	mov	r2, r3
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	4293      	cmp	r3, r2
 800a038:	d808      	bhi.n	800a04c <LCD_print0H+0x780>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a03a:	f107 010c 	add.w	r1, r7, #12
 800a03e:	f04f 33ff 	mov.w	r3, #4294967295
 800a042:	2202      	movs	r2, #2
 800a044:	4838      	ldr	r0, [pc, #224]	@ (800a128 <LCD_print0H+0x85c>)
 800a046:	f00e fb5a 	bl	80186fe <HAL_SPI_Transmit>
 800a04a:	e051      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+8) && wiersz<=(ADRES->Y0_SET+9)) || (wiersz>=(ADRES->Y0_SET+41) && wiersz<=(ADRES->Y0_SET+42))))
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	7b1b      	ldrb	r3, [r3, #12]
 800a050:	331d      	adds	r3, #29
 800a052:	461a      	mov	r2, r3
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	4293      	cmp	r3, r2
 800a058:	d124      	bne.n	800a0a4 <LCD_print0H+0x7d8>
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	7b5b      	ldrb	r3, [r3, #13]
 800a05e:	3308      	adds	r3, #8
 800a060:	461a      	mov	r2, r3
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	4293      	cmp	r3, r2
 800a066:	d306      	bcc.n	800a076 <LCD_print0H+0x7aa>
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	7b5b      	ldrb	r3, [r3, #13]
 800a06c:	3309      	adds	r3, #9
 800a06e:	461a      	mov	r2, r3
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	4293      	cmp	r3, r2
 800a074:	d90d      	bls.n	800a092 <LCD_print0H+0x7c6>
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	7b5b      	ldrb	r3, [r3, #13]
 800a07a:	3329      	adds	r3, #41	@ 0x29
 800a07c:	461a      	mov	r2, r3
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	4293      	cmp	r3, r2
 800a082:	d30f      	bcc.n	800a0a4 <LCD_print0H+0x7d8>
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	7b5b      	ldrb	r3, [r3, #13]
 800a088:	332a      	adds	r3, #42	@ 0x2a
 800a08a:	461a      	mov	r2, r3
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	4293      	cmp	r3, r2
 800a090:	d808      	bhi.n	800a0a4 <LCD_print0H+0x7d8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a092:	f107 010c 	add.w	r1, r7, #12
 800a096:	f04f 33ff 	mov.w	r3, #4294967295
 800a09a:	2202      	movs	r2, #2
 800a09c:	4822      	ldr	r0, [pc, #136]	@ (800a128 <LCD_print0H+0x85c>)
 800a09e:	f00e fb2e 	bl	80186fe <HAL_SPI_Transmit>
 800a0a2:	e025      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else if((kolumna==(ADRES->X0_SET+30)) && ((wiersz==(ADRES->Y0_SET+9) || wiersz==(ADRES->Y0_SET+41))))
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	7b1b      	ldrb	r3, [r3, #12]
 800a0a8:	331e      	adds	r3, #30
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d116      	bne.n	800a0e0 <LCD_print0H+0x814>
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	7b5b      	ldrb	r3, [r3, #13]
 800a0b6:	3309      	adds	r3, #9
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d006      	beq.n	800a0ce <LCD_print0H+0x802>
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	7b5b      	ldrb	r3, [r3, #13]
 800a0c4:	3329      	adds	r3, #41	@ 0x29
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d108      	bne.n	800a0e0 <LCD_print0H+0x814>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a0ce:	f107 010c 	add.w	r1, r7, #12
 800a0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d6:	2202      	movs	r2, #2
 800a0d8:	4813      	ldr	r0, [pc, #76]	@ (800a128 <LCD_print0H+0x85c>)
 800a0da:	f00e fb10 	bl	80186fe <HAL_SPI_Transmit>
 800a0de:	e007      	b.n	800a0f0 <LCD_print0H+0x824>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800a0e0:	f107 0108 	add.w	r1, r7, #8
 800a0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e8:	2202      	movs	r2, #2
 800a0ea:	480f      	ldr	r0, [pc, #60]	@ (800a128 <LCD_print0H+0x85c>)
 800a0ec:	f00e fb07 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	617b      	str	r3, [r7, #20]
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	7b9b      	ldrb	r3, [r3, #14]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	4293      	cmp	r3, r2
 800a102:	f4ff ac59 	bcc.w	80099b8 <LCD_print0H+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	3301      	adds	r3, #1
 800a10a:	613b      	str	r3, [r7, #16]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	7bdb      	ldrb	r3, [r3, #15]
 800a110:	461a      	mov	r2, r3
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	4293      	cmp	r3, r2
 800a116:	f4ff ac4b 	bcc.w	80099b0 <LCD_print0H+0xe4>
			}
		}
	}
	CS_ON();
 800a11a:	f7f6 ff83 	bl	8001024 <CS_ON>
}
 800a11e:	bf00      	nop
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	200004a4 	.word	0x200004a4

0800a12c <LCD_print9H>:

void LCD_print9H(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b086      	sub	sp, #24
 800a130:	af00      	add	r7, sp, #0
 800a132:	603b      	str	r3, [r7, #0]
 800a134:	4603      	mov	r3, r0
 800a136:	71fb      	strb	r3, [r7, #7]
 800a138:	460b      	mov	r3, r1
 800a13a:	71bb      	strb	r3, [r7, #6]
 800a13c:	4613      	mov	r3, r2
 800a13e:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 800a140:	2300      	movs	r3, #0
 800a142:	617b      	str	r3, [r7, #20]
 800a144:	2300      	movs	r3, #0
 800a146:	613b      	str	r3, [r7, #16]
	ADRES->RM=0;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2200      	movs	r2, #0
 800a14c:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	223f      	movs	r2, #63	@ 0x3f
 800a152:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	221f      	movs	r2, #31
 800a158:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	2200      	movs	r2, #0
 800a15e:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	2200      	movs	r2, #0
 800a164:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	7cda      	ldrb	r2, [r3, #19]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	7c1b      	ldrb	r3, [r3, #16]
 800a16e:	4053      	eors	r3, r2
 800a170:	b2db      	uxtb	r3, r3
 800a172:	00db      	lsls	r3, r3, #3
 800a174:	b25a      	sxtb	r2, r3
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	7c5b      	ldrb	r3, [r3, #17]
 800a17a:	b25b      	sxtb	r3, r3
 800a17c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a180:	b25b      	sxtb	r3, r3
 800a182:	4053      	eors	r3, r2
 800a184:	b25b      	sxtb	r3, r3
 800a186:	b2da      	uxtb	r2, r3
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	7d1b      	ldrb	r3, [r3, #20]
 800a190:	461a      	mov	r2, r3
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	7c5b      	ldrb	r3, [r3, #17]
 800a196:	f003 0307 	and.w	r3, r3, #7
 800a19a:	4053      	eors	r3, r2
 800a19c:	015b      	lsls	r3, r3, #5
 800a19e:	b25a      	sxtb	r2, r3
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	7c9b      	ldrb	r3, [r3, #18]
 800a1a4:	b25b      	sxtb	r3, r3
 800a1a6:	4053      	eors	r3, r2
 800a1a8:	b25b      	sxtb	r3, r3
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	7cdb      	ldrb	r3, [r3, #19]
 800a1b4:	733b      	strb	r3, [r7, #12]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	7d1b      	ldrb	r3, [r3, #20]
 800a1ba:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 800a1c4:	7bfa      	ldrb	r2, [r7, #15]
 800a1c6:	79fb      	ldrb	r3, [r7, #7]
 800a1c8:	4053      	eors	r3, r2
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	00db      	lsls	r3, r3, #3
 800a1ce:	b25a      	sxtb	r2, r3
 800a1d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a1d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a1d8:	b25b      	sxtb	r3, r3
 800a1da:	4053      	eors	r3, r2
 800a1dc:	b25b      	sxtb	r3, r3
 800a1de:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 800a1e0:	7bba      	ldrb	r2, [r7, #14]
 800a1e2:	79bb      	ldrb	r3, [r7, #6]
 800a1e4:	f003 0307 	and.w	r3, r3, #7
 800a1e8:	4053      	eors	r3, r2
 800a1ea:	015b      	lsls	r3, r3, #5
 800a1ec:	b25a      	sxtb	r2, r3
 800a1ee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800a1f2:	4053      	eors	r3, r2
 800a1f4:	b25b      	sxtb	r3, r3
 800a1f6:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
 800a1fa:	723b      	strb	r3, [r7, #8]
 800a1fc:	7bbb      	ldrb	r3, [r7, #14]
 800a1fe:	727b      	strb	r3, [r7, #9]
	DC_ON();
 800a200:	f7f6 ff26 	bl	8001050 <DC_ON>
	CS_OFF();
 800a204:	f7f6 ff19 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	7b5b      	ldrb	r3, [r3, #13]
 800a20c:	613b      	str	r3, [r7, #16]
 800a20e:	e3b7      	b.n	800a980 <LCD_print9H+0x854>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	7b1b      	ldrb	r3, [r3, #12]
 800a214:	617b      	str	r3, [r7, #20]
 800a216:	e3a8      	b.n	800a96a <LCD_print9H+0x83e>
		{
			if((kolumna>=(ADRES->X0_SET+10) && kolumna<=(ADRES->X0_SET+21)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+4))))
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	7b1b      	ldrb	r3, [r3, #12]
 800a21c:	330a      	adds	r3, #10
 800a21e:	461a      	mov	r2, r3
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	4293      	cmp	r3, r2
 800a224:	d31c      	bcc.n	800a260 <LCD_print9H+0x134>
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	7b1b      	ldrb	r3, [r3, #12]
 800a22a:	3315      	adds	r3, #21
 800a22c:	461a      	mov	r2, r3
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	4293      	cmp	r3, r2
 800a232:	d815      	bhi.n	800a260 <LCD_print9H+0x134>
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	7b5b      	ldrb	r3, [r3, #13]
 800a238:	461a      	mov	r2, r3
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d30f      	bcc.n	800a260 <LCD_print9H+0x134>
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	7b5b      	ldrb	r3, [r3, #13]
 800a244:	3304      	adds	r3, #4
 800a246:	461a      	mov	r2, r3
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d808      	bhi.n	800a260 <LCD_print9H+0x134>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a24e:	f107 010c 	add.w	r1, r7, #12
 800a252:	f04f 33ff 	mov.w	r3, #4294967295
 800a256:	2202      	movs	r2, #2
 800a258:	488e      	ldr	r0, [pc, #568]	@ (800a494 <LCD_print9H+0x368>)
 800a25a:	f00e fa50 	bl	80186fe <HAL_SPI_Transmit>
 800a25e:	e381      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna>=(ADRES->X0_SET+10) && kolumna<=(ADRES->X0_SET+21)) && ((wiersz>=(ADRES->Y0_SET+21) && wiersz<=(ADRES->Y0_SET+24))))
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	7b1b      	ldrb	r3, [r3, #12]
 800a264:	330a      	adds	r3, #10
 800a266:	461a      	mov	r2, r3
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d31d      	bcc.n	800a2aa <LCD_print9H+0x17e>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	7b1b      	ldrb	r3, [r3, #12]
 800a272:	3315      	adds	r3, #21
 800a274:	461a      	mov	r2, r3
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	4293      	cmp	r3, r2
 800a27a:	d816      	bhi.n	800a2aa <LCD_print9H+0x17e>
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	7b5b      	ldrb	r3, [r3, #13]
 800a280:	3315      	adds	r3, #21
 800a282:	461a      	mov	r2, r3
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	4293      	cmp	r3, r2
 800a288:	d30f      	bcc.n	800a2aa <LCD_print9H+0x17e>
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	7b5b      	ldrb	r3, [r3, #13]
 800a28e:	3318      	adds	r3, #24
 800a290:	461a      	mov	r2, r3
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	4293      	cmp	r3, r2
 800a296:	d808      	bhi.n	800a2aa <LCD_print9H+0x17e>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a298:	f107 010c 	add.w	r1, r7, #12
 800a29c:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a0:	2202      	movs	r2, #2
 800a2a2:	487c      	ldr	r0, [pc, #496]	@ (800a494 <LCD_print9H+0x368>)
 800a2a4:	f00e fa2b 	bl	80186fe <HAL_SPI_Transmit>
 800a2a8:	e35c      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+47) && wiersz<=(ADRES->Y0_SET+50))))
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	7b1b      	ldrb	r3, [r3, #12]
 800a2ae:	3302      	adds	r3, #2
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d31d      	bcc.n	800a2f4 <LCD_print9H+0x1c8>
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	7b1b      	ldrb	r3, [r3, #12]
 800a2bc:	3317      	adds	r3, #23
 800a2be:	461a      	mov	r2, r3
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d816      	bhi.n	800a2f4 <LCD_print9H+0x1c8>
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	7b5b      	ldrb	r3, [r3, #13]
 800a2ca:	332f      	adds	r3, #47	@ 0x2f
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d30f      	bcc.n	800a2f4 <LCD_print9H+0x1c8>
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	7b5b      	ldrb	r3, [r3, #13]
 800a2d8:	3332      	adds	r3, #50	@ 0x32
 800a2da:	461a      	mov	r2, r3
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d808      	bhi.n	800a2f4 <LCD_print9H+0x1c8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a2e2:	f107 010c 	add.w	r1, r7, #12
 800a2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ea:	2202      	movs	r2, #2
 800a2ec:	4869      	ldr	r0, [pc, #420]	@ (800a494 <LCD_print9H+0x368>)
 800a2ee:	f00e fa06 	bl	80186fe <HAL_SPI_Transmit>
 800a2f2:	e337      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna>=(ADRES->X0_SET+25) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+8) && wiersz<=(ADRES->Y0_SET+45))))
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	7b1b      	ldrb	r3, [r3, #12]
 800a2f8:	3319      	adds	r3, #25
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d31d      	bcc.n	800a33e <LCD_print9H+0x212>
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	7b1b      	ldrb	r3, [r3, #12]
 800a306:	331d      	adds	r3, #29
 800a308:	461a      	mov	r2, r3
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d816      	bhi.n	800a33e <LCD_print9H+0x212>
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	7b5b      	ldrb	r3, [r3, #13]
 800a314:	3308      	adds	r3, #8
 800a316:	461a      	mov	r2, r3
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d30f      	bcc.n	800a33e <LCD_print9H+0x212>
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	7b5b      	ldrb	r3, [r3, #13]
 800a322:	332d      	adds	r3, #45	@ 0x2d
 800a324:	461a      	mov	r2, r3
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	4293      	cmp	r3, r2
 800a32a:	d808      	bhi.n	800a33e <LCD_print9H+0x212>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a32c:	f107 010c 	add.w	r1, r7, #12
 800a330:	f04f 33ff 	mov.w	r3, #4294967295
 800a334:	2202      	movs	r2, #2
 800a336:	4857      	ldr	r0, [pc, #348]	@ (800a494 <LCD_print9H+0x368>)
 800a338:	f00e f9e1 	bl	80186fe <HAL_SPI_Transmit>
 800a33c:	e312      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+5)) && ((wiersz>=(ADRES->Y0_SET+8) && wiersz<=(ADRES->Y0_SET+17))))
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	7b1b      	ldrb	r3, [r3, #12]
 800a342:	3302      	adds	r3, #2
 800a344:	461a      	mov	r2, r3
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	4293      	cmp	r3, r2
 800a34a:	d31d      	bcc.n	800a388 <LCD_print9H+0x25c>
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	7b1b      	ldrb	r3, [r3, #12]
 800a350:	3305      	adds	r3, #5
 800a352:	461a      	mov	r2, r3
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	4293      	cmp	r3, r2
 800a358:	d816      	bhi.n	800a388 <LCD_print9H+0x25c>
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	7b5b      	ldrb	r3, [r3, #13]
 800a35e:	3308      	adds	r3, #8
 800a360:	461a      	mov	r2, r3
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	4293      	cmp	r3, r2
 800a366:	d30f      	bcc.n	800a388 <LCD_print9H+0x25c>
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	7b5b      	ldrb	r3, [r3, #13]
 800a36c:	3311      	adds	r3, #17
 800a36e:	461a      	mov	r2, r3
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	4293      	cmp	r3, r2
 800a374:	d808      	bhi.n	800a388 <LCD_print9H+0x25c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a376:	f107 010c 	add.w	r1, r7, #12
 800a37a:	f04f 33ff 	mov.w	r3, #4294967295
 800a37e:	2202      	movs	r2, #2
 800a380:	4844      	ldr	r0, [pc, #272]	@ (800a494 <LCD_print9H+0x368>)
 800a382:	f00e f9bc 	bl	80186fe <HAL_SPI_Transmit>
 800a386:	e2ed      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+7) && wiersz<=(ADRES->Y0_SET+18))))
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	7b1b      	ldrb	r3, [r3, #12]
 800a38c:	3303      	adds	r3, #3
 800a38e:	461a      	mov	r2, r3
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	4293      	cmp	r3, r2
 800a394:	d116      	bne.n	800a3c4 <LCD_print9H+0x298>
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	7b5b      	ldrb	r3, [r3, #13]
 800a39a:	3307      	adds	r3, #7
 800a39c:	461a      	mov	r2, r3
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d30f      	bcc.n	800a3c4 <LCD_print9H+0x298>
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	7b5b      	ldrb	r3, [r3, #13]
 800a3a8:	3312      	adds	r3, #18
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d808      	bhi.n	800a3c4 <LCD_print9H+0x298>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a3b2:	f107 010c 	add.w	r1, r7, #12
 800a3b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ba:	2202      	movs	r2, #2
 800a3bc:	4835      	ldr	r0, [pc, #212]	@ (800a494 <LCD_print9H+0x368>)
 800a3be:	f00e f99e 	bl	80186fe <HAL_SPI_Transmit>
 800a3c2:	e2cf      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna==(ADRES->X0_SET+4)) && ((wiersz>=(ADRES->Y0_SET+6) && wiersz<=(ADRES->Y0_SET+19))))
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	7b1b      	ldrb	r3, [r3, #12]
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d116      	bne.n	800a400 <LCD_print9H+0x2d4>
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	7b5b      	ldrb	r3, [r3, #13]
 800a3d6:	3306      	adds	r3, #6
 800a3d8:	461a      	mov	r2, r3
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d30f      	bcc.n	800a400 <LCD_print9H+0x2d4>
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	7b5b      	ldrb	r3, [r3, #13]
 800a3e4:	3313      	adds	r3, #19
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d808      	bhi.n	800a400 <LCD_print9H+0x2d4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a3ee:	f107 010c 	add.w	r1, r7, #12
 800a3f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	4826      	ldr	r0, [pc, #152]	@ (800a494 <LCD_print9H+0x368>)
 800a3fa:	f00e f980 	bl	80186fe <HAL_SPI_Transmit>
 800a3fe:	e2b1      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna==(ADRES->X0_SET+5)) && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+20))))
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	7b1b      	ldrb	r3, [r3, #12]
 800a404:	3305      	adds	r3, #5
 800a406:	461a      	mov	r2, r3
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d116      	bne.n	800a43c <LCD_print9H+0x310>
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	7b5b      	ldrb	r3, [r3, #13]
 800a412:	3305      	adds	r3, #5
 800a414:	461a      	mov	r2, r3
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	4293      	cmp	r3, r2
 800a41a:	d30f      	bcc.n	800a43c <LCD_print9H+0x310>
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	7b5b      	ldrb	r3, [r3, #13]
 800a420:	3314      	adds	r3, #20
 800a422:	461a      	mov	r2, r3
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	4293      	cmp	r3, r2
 800a428:	d808      	bhi.n	800a43c <LCD_print9H+0x310>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a42a:	f107 010c 	add.w	r1, r7, #12
 800a42e:	f04f 33ff 	mov.w	r3, #4294967295
 800a432:	2202      	movs	r2, #2
 800a434:	4817      	ldr	r0, [pc, #92]	@ (800a494 <LCD_print9H+0x368>)
 800a436:	f00e f962 	bl	80186fe <HAL_SPI_Transmit>
 800a43a:	e293      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna==(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+4) && wiersz<=(ADRES->Y0_SET+7)) || (wiersz>=(ADRES->Y0_SET+18) && wiersz<=(ADRES->Y0_SET+21))))
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	7b1b      	ldrb	r3, [r3, #12]
 800a440:	3306      	adds	r3, #6
 800a442:	461a      	mov	r2, r3
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	4293      	cmp	r3, r2
 800a448:	d126      	bne.n	800a498 <LCD_print9H+0x36c>
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	7b5b      	ldrb	r3, [r3, #13]
 800a44e:	3304      	adds	r3, #4
 800a450:	461a      	mov	r2, r3
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	4293      	cmp	r3, r2
 800a456:	d306      	bcc.n	800a466 <LCD_print9H+0x33a>
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	7b5b      	ldrb	r3, [r3, #13]
 800a45c:	3307      	adds	r3, #7
 800a45e:	461a      	mov	r2, r3
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	4293      	cmp	r3, r2
 800a464:	d90d      	bls.n	800a482 <LCD_print9H+0x356>
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	7b5b      	ldrb	r3, [r3, #13]
 800a46a:	3312      	adds	r3, #18
 800a46c:	461a      	mov	r2, r3
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	4293      	cmp	r3, r2
 800a472:	d311      	bcc.n	800a498 <LCD_print9H+0x36c>
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	7b5b      	ldrb	r3, [r3, #13]
 800a478:	3315      	adds	r3, #21
 800a47a:	461a      	mov	r2, r3
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	4293      	cmp	r3, r2
 800a480:	d80a      	bhi.n	800a498 <LCD_print9H+0x36c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a482:	f107 010c 	add.w	r1, r7, #12
 800a486:	f04f 33ff 	mov.w	r3, #4294967295
 800a48a:	2202      	movs	r2, #2
 800a48c:	4801      	ldr	r0, [pc, #4]	@ (800a494 <LCD_print9H+0x368>)
 800a48e:	f00e f936 	bl	80186fe <HAL_SPI_Transmit>
 800a492:	e267      	b.n	800a964 <LCD_print9H+0x838>
 800a494:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+7)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+6)) || (wiersz>=(ADRES->Y0_SET+19) && wiersz<=(ADRES->Y0_SET+22))))
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	7b1b      	ldrb	r3, [r3, #12]
 800a49c:	3307      	adds	r3, #7
 800a49e:	461a      	mov	r2, r3
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d124      	bne.n	800a4f0 <LCD_print9H+0x3c4>
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	7b5b      	ldrb	r3, [r3, #13]
 800a4aa:	3303      	adds	r3, #3
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d306      	bcc.n	800a4c2 <LCD_print9H+0x396>
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	7b5b      	ldrb	r3, [r3, #13]
 800a4b8:	3306      	adds	r3, #6
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d90d      	bls.n	800a4de <LCD_print9H+0x3b2>
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	7b5b      	ldrb	r3, [r3, #13]
 800a4c6:	3313      	adds	r3, #19
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d30f      	bcc.n	800a4f0 <LCD_print9H+0x3c4>
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	7b5b      	ldrb	r3, [r3, #13]
 800a4d4:	3316      	adds	r3, #22
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d808      	bhi.n	800a4f0 <LCD_print9H+0x3c4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a4de:	f107 010c 	add.w	r1, r7, #12
 800a4e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e6:	2202      	movs	r2, #2
 800a4e8:	4894      	ldr	r0, [pc, #592]	@ (800a73c <LCD_print9H+0x610>)
 800a4ea:	f00e f908 	bl	80186fe <HAL_SPI_Transmit>
 800a4ee:	e239      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna==(ADRES->X0_SET+8)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+5)) || (wiersz>=(ADRES->Y0_SET+20) && wiersz<=(ADRES->Y0_SET+23))))
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	7b1b      	ldrb	r3, [r3, #12]
 800a4f4:	3308      	adds	r3, #8
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d124      	bne.n	800a548 <LCD_print9H+0x41c>
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	7b5b      	ldrb	r3, [r3, #13]
 800a502:	3302      	adds	r3, #2
 800a504:	461a      	mov	r2, r3
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	4293      	cmp	r3, r2
 800a50a:	d306      	bcc.n	800a51a <LCD_print9H+0x3ee>
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	7b5b      	ldrb	r3, [r3, #13]
 800a510:	3305      	adds	r3, #5
 800a512:	461a      	mov	r2, r3
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	4293      	cmp	r3, r2
 800a518:	d90d      	bls.n	800a536 <LCD_print9H+0x40a>
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	7b5b      	ldrb	r3, [r3, #13]
 800a51e:	3314      	adds	r3, #20
 800a520:	461a      	mov	r2, r3
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	4293      	cmp	r3, r2
 800a526:	d30f      	bcc.n	800a548 <LCD_print9H+0x41c>
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	7b5b      	ldrb	r3, [r3, #13]
 800a52c:	3317      	adds	r3, #23
 800a52e:	461a      	mov	r2, r3
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	4293      	cmp	r3, r2
 800a534:	d808      	bhi.n	800a548 <LCD_print9H+0x41c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a536:	f107 010c 	add.w	r1, r7, #12
 800a53a:	f04f 33ff 	mov.w	r3, #4294967295
 800a53e:	2202      	movs	r2, #2
 800a540:	487e      	ldr	r0, [pc, #504]	@ (800a73c <LCD_print9H+0x610>)
 800a542:	f00e f8dc 	bl	80186fe <HAL_SPI_Transmit>
 800a546:	e20d      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna==(ADRES->X0_SET+9)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+4)) || (wiersz>=(ADRES->Y0_SET+21) && wiersz<=(ADRES->Y0_SET+24))))
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	7b1b      	ldrb	r3, [r3, #12]
 800a54c:	3309      	adds	r3, #9
 800a54e:	461a      	mov	r2, r3
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	4293      	cmp	r3, r2
 800a554:	d124      	bne.n	800a5a0 <LCD_print9H+0x474>
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	7b5b      	ldrb	r3, [r3, #13]
 800a55a:	3301      	adds	r3, #1
 800a55c:	461a      	mov	r2, r3
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	4293      	cmp	r3, r2
 800a562:	d306      	bcc.n	800a572 <LCD_print9H+0x446>
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	7b5b      	ldrb	r3, [r3, #13]
 800a568:	3304      	adds	r3, #4
 800a56a:	461a      	mov	r2, r3
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	4293      	cmp	r3, r2
 800a570:	d90d      	bls.n	800a58e <LCD_print9H+0x462>
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	7b5b      	ldrb	r3, [r3, #13]
 800a576:	3315      	adds	r3, #21
 800a578:	461a      	mov	r2, r3
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d30f      	bcc.n	800a5a0 <LCD_print9H+0x474>
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	7b5b      	ldrb	r3, [r3, #13]
 800a584:	3318      	adds	r3, #24
 800a586:	461a      	mov	r2, r3
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d808      	bhi.n	800a5a0 <LCD_print9H+0x474>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a58e:	f107 010c 	add.w	r1, r7, #12
 800a592:	f04f 33ff 	mov.w	r3, #4294967295
 800a596:	2202      	movs	r2, #2
 800a598:	4868      	ldr	r0, [pc, #416]	@ (800a73c <LCD_print9H+0x610>)
 800a59a:	f00e f8b0 	bl	80186fe <HAL_SPI_Transmit>
 800a59e:	e1e1      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna==(ADRES->X0_SET+22)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+4)) || (wiersz>=(ADRES->Y0_SET+20) && wiersz<=(ADRES->Y0_SET+24))))
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	7b1b      	ldrb	r3, [r3, #12]
 800a5a4:	3316      	adds	r3, #22
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d124      	bne.n	800a5f8 <LCD_print9H+0x4cc>
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	7b5b      	ldrb	r3, [r3, #13]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d306      	bcc.n	800a5ca <LCD_print9H+0x49e>
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	7b5b      	ldrb	r3, [r3, #13]
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d90d      	bls.n	800a5e6 <LCD_print9H+0x4ba>
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	7b5b      	ldrb	r3, [r3, #13]
 800a5ce:	3314      	adds	r3, #20
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d30f      	bcc.n	800a5f8 <LCD_print9H+0x4cc>
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	7b5b      	ldrb	r3, [r3, #13]
 800a5dc:	3318      	adds	r3, #24
 800a5de:	461a      	mov	r2, r3
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d808      	bhi.n	800a5f8 <LCD_print9H+0x4cc>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a5e6:	f107 010c 	add.w	r1, r7, #12
 800a5ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ee:	2202      	movs	r2, #2
 800a5f0:	4852      	ldr	r0, [pc, #328]	@ (800a73c <LCD_print9H+0x610>)
 800a5f2:	f00e f884 	bl	80186fe <HAL_SPI_Transmit>
 800a5f6:	e1b5      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna==(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+5)) || (wiersz>=(ADRES->Y0_SET+19) && wiersz<=(ADRES->Y0_SET+23))))
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	7b1b      	ldrb	r3, [r3, #12]
 800a5fc:	3317      	adds	r3, #23
 800a5fe:	461a      	mov	r2, r3
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	4293      	cmp	r3, r2
 800a604:	d124      	bne.n	800a650 <LCD_print9H+0x524>
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	7b5b      	ldrb	r3, [r3, #13]
 800a60a:	3302      	adds	r3, #2
 800a60c:	461a      	mov	r2, r3
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	4293      	cmp	r3, r2
 800a612:	d306      	bcc.n	800a622 <LCD_print9H+0x4f6>
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	7b5b      	ldrb	r3, [r3, #13]
 800a618:	3305      	adds	r3, #5
 800a61a:	461a      	mov	r2, r3
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	4293      	cmp	r3, r2
 800a620:	d90d      	bls.n	800a63e <LCD_print9H+0x512>
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	7b5b      	ldrb	r3, [r3, #13]
 800a626:	3313      	adds	r3, #19
 800a628:	461a      	mov	r2, r3
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d30f      	bcc.n	800a650 <LCD_print9H+0x524>
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	7b5b      	ldrb	r3, [r3, #13]
 800a634:	3317      	adds	r3, #23
 800a636:	461a      	mov	r2, r3
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d808      	bhi.n	800a650 <LCD_print9H+0x524>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a63e:	f107 010c 	add.w	r1, r7, #12
 800a642:	f04f 33ff 	mov.w	r3, #4294967295
 800a646:	2202      	movs	r2, #2
 800a648:	483c      	ldr	r0, [pc, #240]	@ (800a73c <LCD_print9H+0x610>)
 800a64a:	f00e f858 	bl	80186fe <HAL_SPI_Transmit>
 800a64e:	e189      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna==(ADRES->X0_SET+24)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+6)) || (wiersz>=(ADRES->Y0_SET+18) && wiersz<=(ADRES->Y0_SET+22))))
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	7b1b      	ldrb	r3, [r3, #12]
 800a654:	3318      	adds	r3, #24
 800a656:	461a      	mov	r2, r3
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d124      	bne.n	800a6a8 <LCD_print9H+0x57c>
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	7b5b      	ldrb	r3, [r3, #13]
 800a662:	3303      	adds	r3, #3
 800a664:	461a      	mov	r2, r3
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	4293      	cmp	r3, r2
 800a66a:	d306      	bcc.n	800a67a <LCD_print9H+0x54e>
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	7b5b      	ldrb	r3, [r3, #13]
 800a670:	3306      	adds	r3, #6
 800a672:	461a      	mov	r2, r3
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	4293      	cmp	r3, r2
 800a678:	d90d      	bls.n	800a696 <LCD_print9H+0x56a>
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	7b5b      	ldrb	r3, [r3, #13]
 800a67e:	3312      	adds	r3, #18
 800a680:	461a      	mov	r2, r3
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	4293      	cmp	r3, r2
 800a686:	d30f      	bcc.n	800a6a8 <LCD_print9H+0x57c>
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	7b5b      	ldrb	r3, [r3, #13]
 800a68c:	3316      	adds	r3, #22
 800a68e:	461a      	mov	r2, r3
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	4293      	cmp	r3, r2
 800a694:	d808      	bhi.n	800a6a8 <LCD_print9H+0x57c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a696:	f107 010c 	add.w	r1, r7, #12
 800a69a:	f04f 33ff 	mov.w	r3, #4294967295
 800a69e:	2202      	movs	r2, #2
 800a6a0:	4826      	ldr	r0, [pc, #152]	@ (800a73c <LCD_print9H+0x610>)
 800a6a2:	f00e f82c 	bl	80186fe <HAL_SPI_Transmit>
 800a6a6:	e15d      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna==(ADRES->X0_SET+24)) && ((wiersz>=(ADRES->Y0_SET+46) && wiersz<=(ADRES->Y0_SET+50))))
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	7b1b      	ldrb	r3, [r3, #12]
 800a6ac:	3318      	adds	r3, #24
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d116      	bne.n	800a6e4 <LCD_print9H+0x5b8>
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	7b5b      	ldrb	r3, [r3, #13]
 800a6ba:	332e      	adds	r3, #46	@ 0x2e
 800a6bc:	461a      	mov	r2, r3
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d30f      	bcc.n	800a6e4 <LCD_print9H+0x5b8>
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	7b5b      	ldrb	r3, [r3, #13]
 800a6c8:	3332      	adds	r3, #50	@ 0x32
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d808      	bhi.n	800a6e4 <LCD_print9H+0x5b8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a6d2:	f107 010c 	add.w	r1, r7, #12
 800a6d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6da:	2202      	movs	r2, #2
 800a6dc:	4817      	ldr	r0, [pc, #92]	@ (800a73c <LCD_print9H+0x610>)
 800a6de:	f00e f80e 	bl	80186fe <HAL_SPI_Transmit>
 800a6e2:	e13f      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna==(ADRES->X0_SET+25)) && ((wiersz>=(ADRES->Y0_SET+4) && wiersz<=(ADRES->Y0_SET+7)) || (wiersz>=(ADRES->Y0_SET+17) && wiersz<=(ADRES->Y0_SET+21))))
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	7b1b      	ldrb	r3, [r3, #12]
 800a6e8:	3319      	adds	r3, #25
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d126      	bne.n	800a740 <LCD_print9H+0x614>
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	7b5b      	ldrb	r3, [r3, #13]
 800a6f6:	3304      	adds	r3, #4
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d306      	bcc.n	800a70e <LCD_print9H+0x5e2>
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	7b5b      	ldrb	r3, [r3, #13]
 800a704:	3307      	adds	r3, #7
 800a706:	461a      	mov	r2, r3
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d90d      	bls.n	800a72a <LCD_print9H+0x5fe>
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	7b5b      	ldrb	r3, [r3, #13]
 800a712:	3311      	adds	r3, #17
 800a714:	461a      	mov	r2, r3
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	4293      	cmp	r3, r2
 800a71a:	d311      	bcc.n	800a740 <LCD_print9H+0x614>
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	7b5b      	ldrb	r3, [r3, #13]
 800a720:	3315      	adds	r3, #21
 800a722:	461a      	mov	r2, r3
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	4293      	cmp	r3, r2
 800a728:	d80a      	bhi.n	800a740 <LCD_print9H+0x614>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a72a:	f107 010c 	add.w	r1, r7, #12
 800a72e:	f04f 33ff 	mov.w	r3, #4294967295
 800a732:	2202      	movs	r2, #2
 800a734:	4801      	ldr	r0, [pc, #4]	@ (800a73c <LCD_print9H+0x610>)
 800a736:	f00d ffe2 	bl	80186fe <HAL_SPI_Transmit>
 800a73a:	e113      	b.n	800a964 <LCD_print9H+0x838>
 800a73c:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+25)) && ((wiersz>=(ADRES->Y0_SET+45) && wiersz<=(ADRES->Y0_SET+49))))
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	7b1b      	ldrb	r3, [r3, #12]
 800a744:	3319      	adds	r3, #25
 800a746:	461a      	mov	r2, r3
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d116      	bne.n	800a77c <LCD_print9H+0x650>
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	7b5b      	ldrb	r3, [r3, #13]
 800a752:	332d      	adds	r3, #45	@ 0x2d
 800a754:	461a      	mov	r2, r3
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	4293      	cmp	r3, r2
 800a75a:	d30f      	bcc.n	800a77c <LCD_print9H+0x650>
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	7b5b      	ldrb	r3, [r3, #13]
 800a760:	3331      	adds	r3, #49	@ 0x31
 800a762:	461a      	mov	r2, r3
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	4293      	cmp	r3, r2
 800a768:	d808      	bhi.n	800a77c <LCD_print9H+0x650>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a76a:	f107 010c 	add.w	r1, r7, #12
 800a76e:	f04f 33ff 	mov.w	r3, #4294967295
 800a772:	2202      	movs	r2, #2
 800a774:	4889      	ldr	r0, [pc, #548]	@ (800a99c <LCD_print9H+0x870>)
 800a776:	f00d ffc2 	bl	80186fe <HAL_SPI_Transmit>
 800a77a:	e0f3      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna==(ADRES->X0_SET+26)) && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+7)) || (wiersz>=(ADRES->Y0_SET+17) && wiersz<=(ADRES->Y0_SET+20))))
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	7b1b      	ldrb	r3, [r3, #12]
 800a780:	331a      	adds	r3, #26
 800a782:	461a      	mov	r2, r3
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	4293      	cmp	r3, r2
 800a788:	d124      	bne.n	800a7d4 <LCD_print9H+0x6a8>
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	7b5b      	ldrb	r3, [r3, #13]
 800a78e:	3305      	adds	r3, #5
 800a790:	461a      	mov	r2, r3
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	4293      	cmp	r3, r2
 800a796:	d306      	bcc.n	800a7a6 <LCD_print9H+0x67a>
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	7b5b      	ldrb	r3, [r3, #13]
 800a79c:	3307      	adds	r3, #7
 800a79e:	461a      	mov	r2, r3
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d90d      	bls.n	800a7c2 <LCD_print9H+0x696>
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	7b5b      	ldrb	r3, [r3, #13]
 800a7aa:	3311      	adds	r3, #17
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d30f      	bcc.n	800a7d4 <LCD_print9H+0x6a8>
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	7b5b      	ldrb	r3, [r3, #13]
 800a7b8:	3314      	adds	r3, #20
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d808      	bhi.n	800a7d4 <LCD_print9H+0x6a8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a7c2:	f107 010c 	add.w	r1, r7, #12
 800a7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ca:	2202      	movs	r2, #2
 800a7cc:	4873      	ldr	r0, [pc, #460]	@ (800a99c <LCD_print9H+0x870>)
 800a7ce:	f00d ff96 	bl	80186fe <HAL_SPI_Transmit>
 800a7d2:	e0c7      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna==(ADRES->X0_SET+26)) && ((wiersz>=(ADRES->Y0_SET+44) && wiersz<=(ADRES->Y0_SET+48))))
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	7b1b      	ldrb	r3, [r3, #12]
 800a7d8:	331a      	adds	r3, #26
 800a7da:	461a      	mov	r2, r3
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d116      	bne.n	800a810 <LCD_print9H+0x6e4>
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	7b5b      	ldrb	r3, [r3, #13]
 800a7e6:	332c      	adds	r3, #44	@ 0x2c
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d30f      	bcc.n	800a810 <LCD_print9H+0x6e4>
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	7b5b      	ldrb	r3, [r3, #13]
 800a7f4:	3330      	adds	r3, #48	@ 0x30
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d808      	bhi.n	800a810 <LCD_print9H+0x6e4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a7fe:	f107 010c 	add.w	r1, r7, #12
 800a802:	f04f 33ff 	mov.w	r3, #4294967295
 800a806:	2202      	movs	r2, #2
 800a808:	4864      	ldr	r0, [pc, #400]	@ (800a99c <LCD_print9H+0x870>)
 800a80a:	f00d ff78 	bl	80186fe <HAL_SPI_Transmit>
 800a80e:	e0a9      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna==(ADRES->X0_SET+27)) && ((wiersz>=(ADRES->Y0_SET+6) && wiersz<=(ADRES->Y0_SET+19)) || (wiersz>=(ADRES->Y0_SET+29) && wiersz<=(ADRES->Y0_SET+45))))
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	7b1b      	ldrb	r3, [r3, #12]
 800a814:	331b      	adds	r3, #27
 800a816:	461a      	mov	r2, r3
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d124      	bne.n	800a868 <LCD_print9H+0x73c>
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	7b5b      	ldrb	r3, [r3, #13]
 800a822:	3306      	adds	r3, #6
 800a824:	461a      	mov	r2, r3
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	4293      	cmp	r3, r2
 800a82a:	d306      	bcc.n	800a83a <LCD_print9H+0x70e>
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	7b5b      	ldrb	r3, [r3, #13]
 800a830:	3313      	adds	r3, #19
 800a832:	461a      	mov	r2, r3
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	4293      	cmp	r3, r2
 800a838:	d90d      	bls.n	800a856 <LCD_print9H+0x72a>
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	7b5b      	ldrb	r3, [r3, #13]
 800a83e:	331d      	adds	r3, #29
 800a840:	461a      	mov	r2, r3
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	4293      	cmp	r3, r2
 800a846:	d30f      	bcc.n	800a868 <LCD_print9H+0x73c>
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	7b5b      	ldrb	r3, [r3, #13]
 800a84c:	332d      	adds	r3, #45	@ 0x2d
 800a84e:	461a      	mov	r2, r3
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	4293      	cmp	r3, r2
 800a854:	d808      	bhi.n	800a868 <LCD_print9H+0x73c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a856:	f107 010c 	add.w	r1, r7, #12
 800a85a:	f04f 33ff 	mov.w	r3, #4294967295
 800a85e:	2202      	movs	r2, #2
 800a860:	484e      	ldr	r0, [pc, #312]	@ (800a99c <LCD_print9H+0x870>)
 800a862:	f00d ff4c 	bl	80186fe <HAL_SPI_Transmit>
 800a866:	e07d      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna==(ADRES->X0_SET+27)) && ((wiersz>=(ADRES->Y0_SET+43) && wiersz<=(ADRES->Y0_SET+47))))
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	7b1b      	ldrb	r3, [r3, #12]
 800a86c:	331b      	adds	r3, #27
 800a86e:	461a      	mov	r2, r3
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	4293      	cmp	r3, r2
 800a874:	d116      	bne.n	800a8a4 <LCD_print9H+0x778>
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	7b5b      	ldrb	r3, [r3, #13]
 800a87a:	332b      	adds	r3, #43	@ 0x2b
 800a87c:	461a      	mov	r2, r3
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	4293      	cmp	r3, r2
 800a882:	d30f      	bcc.n	800a8a4 <LCD_print9H+0x778>
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	7b5b      	ldrb	r3, [r3, #13]
 800a888:	332f      	adds	r3, #47	@ 0x2f
 800a88a:	461a      	mov	r2, r3
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	4293      	cmp	r3, r2
 800a890:	d808      	bhi.n	800a8a4 <LCD_print9H+0x778>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a892:	f107 010c 	add.w	r1, r7, #12
 800a896:	f04f 33ff 	mov.w	r3, #4294967295
 800a89a:	2202      	movs	r2, #2
 800a89c:	483f      	ldr	r0, [pc, #252]	@ (800a99c <LCD_print9H+0x870>)
 800a89e:	f00d ff2e 	bl	80186fe <HAL_SPI_Transmit>
 800a8a2:	e05f      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna==(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+7) && wiersz<=(ADRES->Y0_SET+18)) || (wiersz>=(ADRES->Y0_SET+30) && wiersz<=(ADRES->Y0_SET+44))))
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	7b1b      	ldrb	r3, [r3, #12]
 800a8a8:	331c      	adds	r3, #28
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d124      	bne.n	800a8fc <LCD_print9H+0x7d0>
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	7b5b      	ldrb	r3, [r3, #13]
 800a8b6:	3307      	adds	r3, #7
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d306      	bcc.n	800a8ce <LCD_print9H+0x7a2>
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	7b5b      	ldrb	r3, [r3, #13]
 800a8c4:	3312      	adds	r3, #18
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d90d      	bls.n	800a8ea <LCD_print9H+0x7be>
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	7b5b      	ldrb	r3, [r3, #13]
 800a8d2:	331e      	adds	r3, #30
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d30f      	bcc.n	800a8fc <LCD_print9H+0x7d0>
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	7b5b      	ldrb	r3, [r3, #13]
 800a8e0:	332c      	adds	r3, #44	@ 0x2c
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d808      	bhi.n	800a8fc <LCD_print9H+0x7d0>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a8ea:	f107 010c 	add.w	r1, r7, #12
 800a8ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	4829      	ldr	r0, [pc, #164]	@ (800a99c <LCD_print9H+0x870>)
 800a8f6:	f00d ff02 	bl	80186fe <HAL_SPI_Transmit>
 800a8fa:	e033      	b.n	800a964 <LCD_print9H+0x838>
			}
			else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+8) && wiersz<=(ADRES->Y0_SET+17)) || (wiersz>=(ADRES->Y0_SET+31) && wiersz<=(ADRES->Y0_SET+43))))
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	7b1b      	ldrb	r3, [r3, #12]
 800a900:	331d      	adds	r3, #29
 800a902:	461a      	mov	r2, r3
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	4293      	cmp	r3, r2
 800a908:	d124      	bne.n	800a954 <LCD_print9H+0x828>
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	7b5b      	ldrb	r3, [r3, #13]
 800a90e:	3308      	adds	r3, #8
 800a910:	461a      	mov	r2, r3
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	4293      	cmp	r3, r2
 800a916:	d306      	bcc.n	800a926 <LCD_print9H+0x7fa>
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	7b5b      	ldrb	r3, [r3, #13]
 800a91c:	3311      	adds	r3, #17
 800a91e:	461a      	mov	r2, r3
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	4293      	cmp	r3, r2
 800a924:	d90d      	bls.n	800a942 <LCD_print9H+0x816>
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	7b5b      	ldrb	r3, [r3, #13]
 800a92a:	331f      	adds	r3, #31
 800a92c:	461a      	mov	r2, r3
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	4293      	cmp	r3, r2
 800a932:	d30f      	bcc.n	800a954 <LCD_print9H+0x828>
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	7b5b      	ldrb	r3, [r3, #13]
 800a938:	332b      	adds	r3, #43	@ 0x2b
 800a93a:	461a      	mov	r2, r3
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	4293      	cmp	r3, r2
 800a940:	d808      	bhi.n	800a954 <LCD_print9H+0x828>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800a942:	f107 010c 	add.w	r1, r7, #12
 800a946:	f04f 33ff 	mov.w	r3, #4294967295
 800a94a:	2202      	movs	r2, #2
 800a94c:	4813      	ldr	r0, [pc, #76]	@ (800a99c <LCD_print9H+0x870>)
 800a94e:	f00d fed6 	bl	80186fe <HAL_SPI_Transmit>
 800a952:	e007      	b.n	800a964 <LCD_print9H+0x838>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800a954:	f107 0108 	add.w	r1, r7, #8
 800a958:	f04f 33ff 	mov.w	r3, #4294967295
 800a95c:	2202      	movs	r2, #2
 800a95e:	480f      	ldr	r0, [pc, #60]	@ (800a99c <LCD_print9H+0x870>)
 800a960:	f00d fecd 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	3301      	adds	r3, #1
 800a968:	617b      	str	r3, [r7, #20]
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	7b9b      	ldrb	r3, [r3, #14]
 800a96e:	3301      	adds	r3, #1
 800a970:	461a      	mov	r2, r3
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	4293      	cmp	r3, r2
 800a976:	f4ff ac4f 	bcc.w	800a218 <LCD_print9H+0xec>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	3301      	adds	r3, #1
 800a97e:	613b      	str	r3, [r7, #16]
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	7bdb      	ldrb	r3, [r3, #15]
 800a984:	461a      	mov	r2, r3
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	4293      	cmp	r3, r2
 800a98a:	f4ff ac41 	bcc.w	800a210 <LCD_print9H+0xe4>
			}
		}
	}
	CS_ON();
 800a98e:	f7f6 fb49 	bl	8001024 <CS_ON>
}
 800a992:	bf00      	nop
 800a994:	3718      	adds	r7, #24
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	200004a4 	.word	0x200004a4

0800a9a0 <LCD_print_segment>:

void LCD_print_segment(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES,unsigned int num)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b088      	sub	sp, #32
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	603b      	str	r3, [r7, #0]
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	71fb      	strb	r3, [r7, #7]
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	71bb      	strb	r3, [r7, #6]
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	61fb      	str	r3, [r7, #28]
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	61bb      	str	r3, [r7, #24]
	ADRES->RM=0;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	223f      	movs	r2, #63	@ 0x3f
 800a9c6:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	221f      	movs	r2, #31
 800a9cc:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	7cda      	ldrb	r2, [r3, #19]
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	7c1b      	ldrb	r3, [r3, #16]
 800a9e2:	4053      	eors	r3, r2
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	00db      	lsls	r3, r3, #3
 800a9e8:	b25a      	sxtb	r2, r3
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	7c5b      	ldrb	r3, [r3, #17]
 800a9ee:	b25b      	sxtb	r3, r3
 800a9f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a9f4:	b25b      	sxtb	r3, r3
 800a9f6:	4053      	eors	r3, r2
 800a9f8:	b25b      	sxtb	r3, r3
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	7d1b      	ldrb	r3, [r3, #20]
 800aa04:	461a      	mov	r2, r3
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	7c5b      	ldrb	r3, [r3, #17]
 800aa0a:	f003 0307 	and.w	r3, r3, #7
 800aa0e:	4053      	eors	r3, r2
 800aa10:	015b      	lsls	r3, r3, #5
 800aa12:	b25a      	sxtb	r2, r3
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	7c9b      	ldrb	r3, [r3, #18]
 800aa18:	b25b      	sxtb	r3, r3
 800aa1a:	4053      	eors	r3, r2
 800aa1c:	b25b      	sxtb	r3, r3
 800aa1e:	b2da      	uxtb	r2, r3
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	7cdb      	ldrb	r3, [r3, #19]
 800aa28:	753b      	strb	r3, [r7, #20]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	7d1b      	ldrb	r3, [r3, #20]
 800aa2e:	757b      	strb	r3, [r7, #21]
	ADRES->RM=12;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	220c      	movs	r2, #12
 800aa34:	741a      	strb	r2, [r3, #16]
	ADRES->GM=18;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2212      	movs	r2, #18
 800aa3a:	745a      	strb	r2, [r3, #17]
	ADRES->BM=0;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	2200      	movs	r2, #0
 800aa46:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	7cda      	ldrb	r2, [r3, #19]
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	7c1b      	ldrb	r3, [r3, #16]
 800aa56:	4053      	eors	r3, r2
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	00db      	lsls	r3, r3, #3
 800aa5c:	b25a      	sxtb	r2, r3
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	7c5b      	ldrb	r3, [r3, #17]
 800aa62:	b25b      	sxtb	r3, r3
 800aa64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa68:	b25b      	sxtb	r3, r3
 800aa6a:	4053      	eors	r3, r2
 800aa6c:	b25b      	sxtb	r3, r3
 800aa6e:	b2da      	uxtb	r2, r3
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	7d1b      	ldrb	r3, [r3, #20]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	7c5b      	ldrb	r3, [r3, #17]
 800aa7e:	f003 0307 	and.w	r3, r3, #7
 800aa82:	4053      	eors	r3, r2
 800aa84:	015b      	lsls	r3, r3, #5
 800aa86:	b25a      	sxtb	r2, r3
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	7c9b      	ldrb	r3, [r3, #18]
 800aa8c:	b25b      	sxtb	r3, r3
 800aa8e:	4053      	eors	r3, r2
 800aa90:	b25b      	sxtb	r3, r3
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	751a      	strb	r2, [r3, #20]
	uint8_t Mword2[]={ADRES->Mbyte,ADRES->Mbyte2};
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	7cdb      	ldrb	r3, [r3, #19]
 800aa9c:	743b      	strb	r3, [r7, #16]
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	7d1b      	ldrb	r3, [r3, #20]
 800aaa2:	747b      	strb	r3, [r7, #17]
	uint8_t fbyte=0x00;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	75fb      	strb	r3, [r7, #23]
	uint8_t sbyte=0x00;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	75bb      	strb	r3, [r7, #22]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 800aaac:	7dfa      	ldrb	r2, [r7, #23]
 800aaae:	79fb      	ldrb	r3, [r7, #7]
 800aab0:	4053      	eors	r3, r2
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	00db      	lsls	r3, r3, #3
 800aab6:	b25a      	sxtb	r2, r3
 800aab8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800aabc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aac0:	b25b      	sxtb	r3, r3
 800aac2:	4053      	eors	r3, r2
 800aac4:	b25b      	sxtb	r3, r3
 800aac6:	75fb      	strb	r3, [r7, #23]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 800aac8:	7dba      	ldrb	r2, [r7, #22]
 800aaca:	79bb      	ldrb	r3, [r7, #6]
 800aacc:	f003 0307 	and.w	r3, r3, #7
 800aad0:	4053      	eors	r3, r2
 800aad2:	015b      	lsls	r3, r3, #5
 800aad4:	b25a      	sxtb	r2, r3
 800aad6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800aada:	4053      	eors	r3, r2
 800aadc:	b25b      	sxtb	r3, r3
 800aade:	75bb      	strb	r3, [r7, #22]
	uint8_t word[]={fbyte,sbyte};
 800aae0:	7dfb      	ldrb	r3, [r7, #23]
 800aae2:	733b      	strb	r3, [r7, #12]
 800aae4:	7dbb      	ldrb	r3, [r7, #22]
 800aae6:	737b      	strb	r3, [r7, #13]
	DC_ON();
 800aae8:	f7f6 fab2 	bl	8001050 <DC_ON>
	CS_OFF();
 800aaec:	f7f6 faa5 	bl	800103a <CS_OFF>
	switch(num)
 800aaf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf2:	2b09      	cmp	r3, #9
 800aaf4:	f201 83c2 	bhi.w	800c27c <LCD_print_segment+0x18dc>
 800aaf8:	a201      	add	r2, pc, #4	@ (adr r2, 800ab00 <LCD_print_segment+0x160>)
 800aafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aafe:	bf00      	nop
 800ab00:	0800ab29 	.word	0x0800ab29
 800ab04:	0800ad7b 	.word	0x0800ad7b
 800ab08:	0800afd3 	.word	0x0800afd3
 800ab0c:	0800b229 	.word	0x0800b229
 800ab10:	0800b47f 	.word	0x0800b47f
 800ab14:	0800b6d5 	.word	0x0800b6d5
 800ab18:	0800b92b 	.word	0x0800b92b
 800ab1c:	0800bb7f 	.word	0x0800bb7f
 800ab20:	0800bdd5 	.word	0x0800bdd5
 800ab24:	0800c029 	.word	0x0800c029
	{
		case 0:
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	7b5b      	ldrb	r3, [r3, #13]
 800ab2c:	61bb      	str	r3, [r7, #24]
 800ab2e:	e11b      	b.n	800ad68 <LCD_print_segment+0x3c8>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	7b1b      	ldrb	r3, [r3, #12]
 800ab34:	61fb      	str	r3, [r7, #28]
 800ab36:	e10c      	b.n	800ad52 <LCD_print_segment+0x3b2>
			{
				if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+2))))
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	7b1b      	ldrb	r3, [r3, #12]
 800ab3c:	3309      	adds	r3, #9
 800ab3e:	461a      	mov	r2, r3
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d31c      	bcc.n	800ab80 <LCD_print_segment+0x1e0>
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	7b1b      	ldrb	r3, [r3, #12]
 800ab4a:	3317      	adds	r3, #23
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d815      	bhi.n	800ab80 <LCD_print_segment+0x1e0>
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	7b5b      	ldrb	r3, [r3, #13]
 800ab58:	461a      	mov	r2, r3
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d30f      	bcc.n	800ab80 <LCD_print_segment+0x1e0>
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	7b5b      	ldrb	r3, [r3, #13]
 800ab64:	3302      	adds	r3, #2
 800ab66:	461a      	mov	r2, r3
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d808      	bhi.n	800ab80 <LCD_print_segment+0x1e0>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800ab6e:	f107 0110 	add.w	r1, r7, #16
 800ab72:	f04f 33ff 	mov.w	r3, #4294967295
 800ab76:	2202      	movs	r2, #2
 800ab78:	4896      	ldr	r0, [pc, #600]	@ (800add4 <LCD_print_segment+0x434>)
 800ab7a:	f00d fdc0 	bl	80186fe <HAL_SPI_Transmit>
 800ab7e:	e0e5      	b.n	800ad4c <LCD_print_segment+0x3ac>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	7b1b      	ldrb	r3, [r3, #12]
 800ab84:	331a      	adds	r3, #26
 800ab86:	461a      	mov	r2, r3
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d31d      	bcc.n	800abca <LCD_print_segment+0x22a>
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	7b1b      	ldrb	r3, [r3, #12]
 800ab92:	331d      	adds	r3, #29
 800ab94:	461a      	mov	r2, r3
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d816      	bhi.n	800abca <LCD_print_segment+0x22a>
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	7b5b      	ldrb	r3, [r3, #13]
 800aba0:	3303      	adds	r3, #3
 800aba2:	461a      	mov	r2, r3
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d30f      	bcc.n	800abca <LCD_print_segment+0x22a>
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	7b5b      	ldrb	r3, [r3, #13]
 800abae:	3317      	adds	r3, #23
 800abb0:	461a      	mov	r2, r3
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d808      	bhi.n	800abca <LCD_print_segment+0x22a>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800abb8:	f107 0110 	add.w	r1, r7, #16
 800abbc:	f04f 33ff 	mov.w	r3, #4294967295
 800abc0:	2202      	movs	r2, #2
 800abc2:	4884      	ldr	r0, [pc, #528]	@ (800add4 <LCD_print_segment+0x434>)
 800abc4:	f00d fd9b 	bl	80186fe <HAL_SPI_Transmit>
 800abc8:	e0c0      	b.n	800ad4c <LCD_print_segment+0x3ac>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	7b1b      	ldrb	r3, [r3, #12]
 800abce:	331a      	adds	r3, #26
 800abd0:	461a      	mov	r2, r3
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d31d      	bcc.n	800ac14 <LCD_print_segment+0x274>
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	7b1b      	ldrb	r3, [r3, #12]
 800abdc:	331d      	adds	r3, #29
 800abde:	461a      	mov	r2, r3
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d816      	bhi.n	800ac14 <LCD_print_segment+0x274>
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	7b5b      	ldrb	r3, [r3, #13]
 800abea:	331b      	adds	r3, #27
 800abec:	461a      	mov	r2, r3
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d30f      	bcc.n	800ac14 <LCD_print_segment+0x274>
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	7b5b      	ldrb	r3, [r3, #13]
 800abf8:	332f      	adds	r3, #47	@ 0x2f
 800abfa:	461a      	mov	r2, r3
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d808      	bhi.n	800ac14 <LCD_print_segment+0x274>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800ac02:	f107 0110 	add.w	r1, r7, #16
 800ac06:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	4871      	ldr	r0, [pc, #452]	@ (800add4 <LCD_print_segment+0x434>)
 800ac0e:	f00d fd76 	bl	80186fe <HAL_SPI_Transmit>
 800ac12:	e09b      	b.n	800ad4c <LCD_print_segment+0x3ac>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+48) && wiersz<=(ADRES->Y0_SET+50))))
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	7b1b      	ldrb	r3, [r3, #12]
 800ac18:	3309      	adds	r3, #9
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d31d      	bcc.n	800ac5e <LCD_print_segment+0x2be>
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	7b1b      	ldrb	r3, [r3, #12]
 800ac26:	3317      	adds	r3, #23
 800ac28:	461a      	mov	r2, r3
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d816      	bhi.n	800ac5e <LCD_print_segment+0x2be>
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	7b5b      	ldrb	r3, [r3, #13]
 800ac34:	3330      	adds	r3, #48	@ 0x30
 800ac36:	461a      	mov	r2, r3
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d30f      	bcc.n	800ac5e <LCD_print_segment+0x2be>
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	7b5b      	ldrb	r3, [r3, #13]
 800ac42:	3332      	adds	r3, #50	@ 0x32
 800ac44:	461a      	mov	r2, r3
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d808      	bhi.n	800ac5e <LCD_print_segment+0x2be>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800ac4c:	f107 0110 	add.w	r1, r7, #16
 800ac50:	f04f 33ff 	mov.w	r3, #4294967295
 800ac54:	2202      	movs	r2, #2
 800ac56:	485f      	ldr	r0, [pc, #380]	@ (800add4 <LCD_print_segment+0x434>)
 800ac58:	f00d fd51 	bl	80186fe <HAL_SPI_Transmit>
 800ac5c:	e076      	b.n	800ad4c <LCD_print_segment+0x3ac>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	7b1b      	ldrb	r3, [r3, #12]
 800ac62:	3303      	adds	r3, #3
 800ac64:	461a      	mov	r2, r3
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d31d      	bcc.n	800aca8 <LCD_print_segment+0x308>
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	7b1b      	ldrb	r3, [r3, #12]
 800ac70:	3306      	adds	r3, #6
 800ac72:	461a      	mov	r2, r3
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d816      	bhi.n	800aca8 <LCD_print_segment+0x308>
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	7b5b      	ldrb	r3, [r3, #13]
 800ac7e:	331b      	adds	r3, #27
 800ac80:	461a      	mov	r2, r3
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d30f      	bcc.n	800aca8 <LCD_print_segment+0x308>
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	7b5b      	ldrb	r3, [r3, #13]
 800ac8c:	332f      	adds	r3, #47	@ 0x2f
 800ac8e:	461a      	mov	r2, r3
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d808      	bhi.n	800aca8 <LCD_print_segment+0x308>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800ac96:	f107 0110 	add.w	r1, r7, #16
 800ac9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac9e:	2202      	movs	r2, #2
 800aca0:	484c      	ldr	r0, [pc, #304]	@ (800add4 <LCD_print_segment+0x434>)
 800aca2:	f00d fd2c 	bl	80186fe <HAL_SPI_Transmit>
 800aca6:	e051      	b.n	800ad4c <LCD_print_segment+0x3ac>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	7b1b      	ldrb	r3, [r3, #12]
 800acac:	3303      	adds	r3, #3
 800acae:	461a      	mov	r2, r3
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d31d      	bcc.n	800acf2 <LCD_print_segment+0x352>
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	7b1b      	ldrb	r3, [r3, #12]
 800acba:	3306      	adds	r3, #6
 800acbc:	461a      	mov	r2, r3
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d816      	bhi.n	800acf2 <LCD_print_segment+0x352>
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	7b5b      	ldrb	r3, [r3, #13]
 800acc8:	3303      	adds	r3, #3
 800acca:	461a      	mov	r2, r3
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	4293      	cmp	r3, r2
 800acd0:	d30f      	bcc.n	800acf2 <LCD_print_segment+0x352>
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	7b5b      	ldrb	r3, [r3, #13]
 800acd6:	3317      	adds	r3, #23
 800acd8:	461a      	mov	r2, r3
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	4293      	cmp	r3, r2
 800acde:	d808      	bhi.n	800acf2 <LCD_print_segment+0x352>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800ace0:	f107 0110 	add.w	r1, r7, #16
 800ace4:	f04f 33ff 	mov.w	r3, #4294967295
 800ace8:	2202      	movs	r2, #2
 800acea:	483a      	ldr	r0, [pc, #232]	@ (800add4 <LCD_print_segment+0x434>)
 800acec:	f00d fd07 	bl	80186fe <HAL_SPI_Transmit>
 800acf0:	e02c      	b.n	800ad4c <LCD_print_segment+0x3ac>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+24) && wiersz<=(ADRES->Y0_SET+26))))
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	7b1b      	ldrb	r3, [r3, #12]
 800acf6:	3309      	adds	r3, #9
 800acf8:	461a      	mov	r2, r3
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d31d      	bcc.n	800ad3c <LCD_print_segment+0x39c>
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	7b1b      	ldrb	r3, [r3, #12]
 800ad04:	3317      	adds	r3, #23
 800ad06:	461a      	mov	r2, r3
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d816      	bhi.n	800ad3c <LCD_print_segment+0x39c>
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	7b5b      	ldrb	r3, [r3, #13]
 800ad12:	3318      	adds	r3, #24
 800ad14:	461a      	mov	r2, r3
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d30f      	bcc.n	800ad3c <LCD_print_segment+0x39c>
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	7b5b      	ldrb	r3, [r3, #13]
 800ad20:	331a      	adds	r3, #26
 800ad22:	461a      	mov	r2, r3
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d808      	bhi.n	800ad3c <LCD_print_segment+0x39c>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800ad2a:	f107 0114 	add.w	r1, r7, #20
 800ad2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad32:	2202      	movs	r2, #2
 800ad34:	4827      	ldr	r0, [pc, #156]	@ (800add4 <LCD_print_segment+0x434>)
 800ad36:	f00d fce2 	bl	80186fe <HAL_SPI_Transmit>
 800ad3a:	e007      	b.n	800ad4c <LCD_print_segment+0x3ac>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800ad3c:	f107 010c 	add.w	r1, r7, #12
 800ad40:	f04f 33ff 	mov.w	r3, #4294967295
 800ad44:	2202      	movs	r2, #2
 800ad46:	4823      	ldr	r0, [pc, #140]	@ (800add4 <LCD_print_segment+0x434>)
 800ad48:	f00d fcd9 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	61fb      	str	r3, [r7, #28]
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	7b9b      	ldrb	r3, [r3, #14]
 800ad56:	3301      	adds	r3, #1
 800ad58:	461a      	mov	r2, r3
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	f4ff aeeb 	bcc.w	800ab38 <LCD_print_segment+0x198>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	3301      	adds	r3, #1
 800ad66:	61bb      	str	r3, [r7, #24]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	7bdb      	ldrb	r3, [r3, #15]
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	4293      	cmp	r3, r2
 800ad72:	f67f aedd 	bls.w	800ab30 <LCD_print_segment+0x190>
				}
			}
		}
		break;
 800ad76:	f001 ba82 	b.w	800c27e <LCD_print_segment+0x18de>
		case 1:
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	7b5b      	ldrb	r3, [r3, #13]
 800ad7e:	61bb      	str	r3, [r7, #24]
 800ad80:	e11e      	b.n	800afc0 <LCD_print_segment+0x620>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	7b1b      	ldrb	r3, [r3, #12]
 800ad86:	61fb      	str	r3, [r7, #28]
 800ad88:	e10f      	b.n	800afaa <LCD_print_segment+0x60a>
			{
				if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+2))))
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	7b1b      	ldrb	r3, [r3, #12]
 800ad8e:	3309      	adds	r3, #9
 800ad90:	461a      	mov	r2, r3
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d31f      	bcc.n	800add8 <LCD_print_segment+0x438>
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	7b1b      	ldrb	r3, [r3, #12]
 800ad9c:	3317      	adds	r3, #23
 800ad9e:	461a      	mov	r2, r3
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d818      	bhi.n	800add8 <LCD_print_segment+0x438>
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	7b5b      	ldrb	r3, [r3, #13]
 800adaa:	461a      	mov	r2, r3
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	4293      	cmp	r3, r2
 800adb0:	d312      	bcc.n	800add8 <LCD_print_segment+0x438>
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	7b5b      	ldrb	r3, [r3, #13]
 800adb6:	3302      	adds	r3, #2
 800adb8:	461a      	mov	r2, r3
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d80b      	bhi.n	800add8 <LCD_print_segment+0x438>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800adc0:	f107 0114 	add.w	r1, r7, #20
 800adc4:	f04f 33ff 	mov.w	r3, #4294967295
 800adc8:	2202      	movs	r2, #2
 800adca:	4802      	ldr	r0, [pc, #8]	@ (800add4 <LCD_print_segment+0x434>)
 800adcc:	f00d fc97 	bl	80186fe <HAL_SPI_Transmit>
 800add0:	e0e8      	b.n	800afa4 <LCD_print_segment+0x604>
 800add2:	bf00      	nop
 800add4:	200004a4 	.word	0x200004a4
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	7b1b      	ldrb	r3, [r3, #12]
 800addc:	331a      	adds	r3, #26
 800adde:	461a      	mov	r2, r3
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d31d      	bcc.n	800ae22 <LCD_print_segment+0x482>
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	7b1b      	ldrb	r3, [r3, #12]
 800adea:	331d      	adds	r3, #29
 800adec:	461a      	mov	r2, r3
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d816      	bhi.n	800ae22 <LCD_print_segment+0x482>
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	7b5b      	ldrb	r3, [r3, #13]
 800adf8:	3303      	adds	r3, #3
 800adfa:	461a      	mov	r2, r3
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d30f      	bcc.n	800ae22 <LCD_print_segment+0x482>
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	7b5b      	ldrb	r3, [r3, #13]
 800ae06:	3317      	adds	r3, #23
 800ae08:	461a      	mov	r2, r3
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d808      	bhi.n	800ae22 <LCD_print_segment+0x482>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800ae10:	f107 0110 	add.w	r1, r7, #16
 800ae14:	f04f 33ff 	mov.w	r3, #4294967295
 800ae18:	2202      	movs	r2, #2
 800ae1a:	4896      	ldr	r0, [pc, #600]	@ (800b074 <LCD_print_segment+0x6d4>)
 800ae1c:	f00d fc6f 	bl	80186fe <HAL_SPI_Transmit>
 800ae20:	e0c0      	b.n	800afa4 <LCD_print_segment+0x604>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	7b1b      	ldrb	r3, [r3, #12]
 800ae26:	331a      	adds	r3, #26
 800ae28:	461a      	mov	r2, r3
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d31d      	bcc.n	800ae6c <LCD_print_segment+0x4cc>
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	7b1b      	ldrb	r3, [r3, #12]
 800ae34:	331d      	adds	r3, #29
 800ae36:	461a      	mov	r2, r3
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d816      	bhi.n	800ae6c <LCD_print_segment+0x4cc>
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	7b5b      	ldrb	r3, [r3, #13]
 800ae42:	331b      	adds	r3, #27
 800ae44:	461a      	mov	r2, r3
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d30f      	bcc.n	800ae6c <LCD_print_segment+0x4cc>
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	7b5b      	ldrb	r3, [r3, #13]
 800ae50:	332f      	adds	r3, #47	@ 0x2f
 800ae52:	461a      	mov	r2, r3
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d808      	bhi.n	800ae6c <LCD_print_segment+0x4cc>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800ae5a:	f107 0110 	add.w	r1, r7, #16
 800ae5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae62:	2202      	movs	r2, #2
 800ae64:	4883      	ldr	r0, [pc, #524]	@ (800b074 <LCD_print_segment+0x6d4>)
 800ae66:	f00d fc4a 	bl	80186fe <HAL_SPI_Transmit>
 800ae6a:	e09b      	b.n	800afa4 <LCD_print_segment+0x604>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+48) && wiersz<=(ADRES->Y0_SET+50))))
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	7b1b      	ldrb	r3, [r3, #12]
 800ae70:	3309      	adds	r3, #9
 800ae72:	461a      	mov	r2, r3
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d31d      	bcc.n	800aeb6 <LCD_print_segment+0x516>
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	7b1b      	ldrb	r3, [r3, #12]
 800ae7e:	3317      	adds	r3, #23
 800ae80:	461a      	mov	r2, r3
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d816      	bhi.n	800aeb6 <LCD_print_segment+0x516>
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	7b5b      	ldrb	r3, [r3, #13]
 800ae8c:	3330      	adds	r3, #48	@ 0x30
 800ae8e:	461a      	mov	r2, r3
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d30f      	bcc.n	800aeb6 <LCD_print_segment+0x516>
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	7b5b      	ldrb	r3, [r3, #13]
 800ae9a:	3332      	adds	r3, #50	@ 0x32
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d808      	bhi.n	800aeb6 <LCD_print_segment+0x516>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800aea4:	f107 0114 	add.w	r1, r7, #20
 800aea8:	f04f 33ff 	mov.w	r3, #4294967295
 800aeac:	2202      	movs	r2, #2
 800aeae:	4871      	ldr	r0, [pc, #452]	@ (800b074 <LCD_print_segment+0x6d4>)
 800aeb0:	f00d fc25 	bl	80186fe <HAL_SPI_Transmit>
 800aeb4:	e076      	b.n	800afa4 <LCD_print_segment+0x604>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	7b1b      	ldrb	r3, [r3, #12]
 800aeba:	3303      	adds	r3, #3
 800aebc:	461a      	mov	r2, r3
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d31d      	bcc.n	800af00 <LCD_print_segment+0x560>
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	7b1b      	ldrb	r3, [r3, #12]
 800aec8:	3306      	adds	r3, #6
 800aeca:	461a      	mov	r2, r3
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	4293      	cmp	r3, r2
 800aed0:	d816      	bhi.n	800af00 <LCD_print_segment+0x560>
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	7b5b      	ldrb	r3, [r3, #13]
 800aed6:	331b      	adds	r3, #27
 800aed8:	461a      	mov	r2, r3
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	4293      	cmp	r3, r2
 800aede:	d30f      	bcc.n	800af00 <LCD_print_segment+0x560>
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	7b5b      	ldrb	r3, [r3, #13]
 800aee4:	332f      	adds	r3, #47	@ 0x2f
 800aee6:	461a      	mov	r2, r3
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d808      	bhi.n	800af00 <LCD_print_segment+0x560>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800aeee:	f107 0114 	add.w	r1, r7, #20
 800aef2:	f04f 33ff 	mov.w	r3, #4294967295
 800aef6:	2202      	movs	r2, #2
 800aef8:	485e      	ldr	r0, [pc, #376]	@ (800b074 <LCD_print_segment+0x6d4>)
 800aefa:	f00d fc00 	bl	80186fe <HAL_SPI_Transmit>
 800aefe:	e051      	b.n	800afa4 <LCD_print_segment+0x604>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	7b1b      	ldrb	r3, [r3, #12]
 800af04:	3303      	adds	r3, #3
 800af06:	461a      	mov	r2, r3
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d31d      	bcc.n	800af4a <LCD_print_segment+0x5aa>
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	7b1b      	ldrb	r3, [r3, #12]
 800af12:	3306      	adds	r3, #6
 800af14:	461a      	mov	r2, r3
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	4293      	cmp	r3, r2
 800af1a:	d816      	bhi.n	800af4a <LCD_print_segment+0x5aa>
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	7b5b      	ldrb	r3, [r3, #13]
 800af20:	3303      	adds	r3, #3
 800af22:	461a      	mov	r2, r3
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	4293      	cmp	r3, r2
 800af28:	d30f      	bcc.n	800af4a <LCD_print_segment+0x5aa>
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	7b5b      	ldrb	r3, [r3, #13]
 800af2e:	3317      	adds	r3, #23
 800af30:	461a      	mov	r2, r3
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	4293      	cmp	r3, r2
 800af36:	d808      	bhi.n	800af4a <LCD_print_segment+0x5aa>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800af38:	f107 0114 	add.w	r1, r7, #20
 800af3c:	f04f 33ff 	mov.w	r3, #4294967295
 800af40:	2202      	movs	r2, #2
 800af42:	484c      	ldr	r0, [pc, #304]	@ (800b074 <LCD_print_segment+0x6d4>)
 800af44:	f00d fbdb 	bl	80186fe <HAL_SPI_Transmit>
 800af48:	e02c      	b.n	800afa4 <LCD_print_segment+0x604>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+24) && wiersz<=(ADRES->Y0_SET+26))))
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	7b1b      	ldrb	r3, [r3, #12]
 800af4e:	3309      	adds	r3, #9
 800af50:	461a      	mov	r2, r3
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	4293      	cmp	r3, r2
 800af56:	d31d      	bcc.n	800af94 <LCD_print_segment+0x5f4>
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	7b1b      	ldrb	r3, [r3, #12]
 800af5c:	3317      	adds	r3, #23
 800af5e:	461a      	mov	r2, r3
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	4293      	cmp	r3, r2
 800af64:	d816      	bhi.n	800af94 <LCD_print_segment+0x5f4>
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	7b5b      	ldrb	r3, [r3, #13]
 800af6a:	3318      	adds	r3, #24
 800af6c:	461a      	mov	r2, r3
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	4293      	cmp	r3, r2
 800af72:	d30f      	bcc.n	800af94 <LCD_print_segment+0x5f4>
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	7b5b      	ldrb	r3, [r3, #13]
 800af78:	331a      	adds	r3, #26
 800af7a:	461a      	mov	r2, r3
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	4293      	cmp	r3, r2
 800af80:	d808      	bhi.n	800af94 <LCD_print_segment+0x5f4>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800af82:	f107 0114 	add.w	r1, r7, #20
 800af86:	f04f 33ff 	mov.w	r3, #4294967295
 800af8a:	2202      	movs	r2, #2
 800af8c:	4839      	ldr	r0, [pc, #228]	@ (800b074 <LCD_print_segment+0x6d4>)
 800af8e:	f00d fbb6 	bl	80186fe <HAL_SPI_Transmit>
 800af92:	e007      	b.n	800afa4 <LCD_print_segment+0x604>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800af94:	f107 010c 	add.w	r1, r7, #12
 800af98:	f04f 33ff 	mov.w	r3, #4294967295
 800af9c:	2202      	movs	r2, #2
 800af9e:	4835      	ldr	r0, [pc, #212]	@ (800b074 <LCD_print_segment+0x6d4>)
 800afa0:	f00d fbad 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	3301      	adds	r3, #1
 800afa8:	61fb      	str	r3, [r7, #28]
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	7b9b      	ldrb	r3, [r3, #14]
 800afae:	3301      	adds	r3, #1
 800afb0:	461a      	mov	r2, r3
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	4293      	cmp	r3, r2
 800afb6:	f4ff aee8 	bcc.w	800ad8a <LCD_print_segment+0x3ea>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	3301      	adds	r3, #1
 800afbe:	61bb      	str	r3, [r7, #24]
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	7bdb      	ldrb	r3, [r3, #15]
 800afc4:	461a      	mov	r2, r3
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	4293      	cmp	r3, r2
 800afca:	f67f aeda 	bls.w	800ad82 <LCD_print_segment+0x3e2>
				}
			}
		}
			break;
 800afce:	f001 b956 	b.w	800c27e <LCD_print_segment+0x18de>
		case 2:
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	7b5b      	ldrb	r3, [r3, #13]
 800afd6:	61bb      	str	r3, [r7, #24]
 800afd8:	e11d      	b.n	800b216 <LCD_print_segment+0x876>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	7b1b      	ldrb	r3, [r3, #12]
 800afde:	61fb      	str	r3, [r7, #28]
 800afe0:	e10e      	b.n	800b200 <LCD_print_segment+0x860>
			{
				if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+2))))
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	7b1b      	ldrb	r3, [r3, #12]
 800afe6:	3309      	adds	r3, #9
 800afe8:	461a      	mov	r2, r3
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	4293      	cmp	r3, r2
 800afee:	d31c      	bcc.n	800b02a <LCD_print_segment+0x68a>
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	7b1b      	ldrb	r3, [r3, #12]
 800aff4:	3317      	adds	r3, #23
 800aff6:	461a      	mov	r2, r3
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	4293      	cmp	r3, r2
 800affc:	d815      	bhi.n	800b02a <LCD_print_segment+0x68a>
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	7b5b      	ldrb	r3, [r3, #13]
 800b002:	461a      	mov	r2, r3
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	4293      	cmp	r3, r2
 800b008:	d30f      	bcc.n	800b02a <LCD_print_segment+0x68a>
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	7b5b      	ldrb	r3, [r3, #13]
 800b00e:	3302      	adds	r3, #2
 800b010:	461a      	mov	r2, r3
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	4293      	cmp	r3, r2
 800b016:	d808      	bhi.n	800b02a <LCD_print_segment+0x68a>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b018:	f107 0110 	add.w	r1, r7, #16
 800b01c:	f04f 33ff 	mov.w	r3, #4294967295
 800b020:	2202      	movs	r2, #2
 800b022:	4814      	ldr	r0, [pc, #80]	@ (800b074 <LCD_print_segment+0x6d4>)
 800b024:	f00d fb6b 	bl	80186fe <HAL_SPI_Transmit>
 800b028:	e0e7      	b.n	800b1fa <LCD_print_segment+0x85a>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	7b1b      	ldrb	r3, [r3, #12]
 800b02e:	331a      	adds	r3, #26
 800b030:	461a      	mov	r2, r3
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	4293      	cmp	r3, r2
 800b036:	d31f      	bcc.n	800b078 <LCD_print_segment+0x6d8>
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	7b1b      	ldrb	r3, [r3, #12]
 800b03c:	331d      	adds	r3, #29
 800b03e:	461a      	mov	r2, r3
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	4293      	cmp	r3, r2
 800b044:	d818      	bhi.n	800b078 <LCD_print_segment+0x6d8>
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	7b5b      	ldrb	r3, [r3, #13]
 800b04a:	3303      	adds	r3, #3
 800b04c:	461a      	mov	r2, r3
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	4293      	cmp	r3, r2
 800b052:	d311      	bcc.n	800b078 <LCD_print_segment+0x6d8>
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	7b5b      	ldrb	r3, [r3, #13]
 800b058:	3317      	adds	r3, #23
 800b05a:	461a      	mov	r2, r3
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	4293      	cmp	r3, r2
 800b060:	d80a      	bhi.n	800b078 <LCD_print_segment+0x6d8>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b062:	f107 0110 	add.w	r1, r7, #16
 800b066:	f04f 33ff 	mov.w	r3, #4294967295
 800b06a:	2202      	movs	r2, #2
 800b06c:	4801      	ldr	r0, [pc, #4]	@ (800b074 <LCD_print_segment+0x6d4>)
 800b06e:	f00d fb46 	bl	80186fe <HAL_SPI_Transmit>
 800b072:	e0c2      	b.n	800b1fa <LCD_print_segment+0x85a>
 800b074:	200004a4 	.word	0x200004a4
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	7b1b      	ldrb	r3, [r3, #12]
 800b07c:	331a      	adds	r3, #26
 800b07e:	461a      	mov	r2, r3
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	4293      	cmp	r3, r2
 800b084:	d31d      	bcc.n	800b0c2 <LCD_print_segment+0x722>
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	7b1b      	ldrb	r3, [r3, #12]
 800b08a:	331d      	adds	r3, #29
 800b08c:	461a      	mov	r2, r3
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	4293      	cmp	r3, r2
 800b092:	d816      	bhi.n	800b0c2 <LCD_print_segment+0x722>
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	7b5b      	ldrb	r3, [r3, #13]
 800b098:	331b      	adds	r3, #27
 800b09a:	461a      	mov	r2, r3
 800b09c:	69bb      	ldr	r3, [r7, #24]
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d30f      	bcc.n	800b0c2 <LCD_print_segment+0x722>
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	7b5b      	ldrb	r3, [r3, #13]
 800b0a6:	332f      	adds	r3, #47	@ 0x2f
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d808      	bhi.n	800b0c2 <LCD_print_segment+0x722>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800b0b0:	f107 0114 	add.w	r1, r7, #20
 800b0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b8:	2202      	movs	r2, #2
 800b0ba:	4896      	ldr	r0, [pc, #600]	@ (800b314 <LCD_print_segment+0x974>)
 800b0bc:	f00d fb1f 	bl	80186fe <HAL_SPI_Transmit>
 800b0c0:	e09b      	b.n	800b1fa <LCD_print_segment+0x85a>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+48) && wiersz<=(ADRES->Y0_SET+50))))
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	7b1b      	ldrb	r3, [r3, #12]
 800b0c6:	3309      	adds	r3, #9
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d31d      	bcc.n	800b10c <LCD_print_segment+0x76c>
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	7b1b      	ldrb	r3, [r3, #12]
 800b0d4:	3317      	adds	r3, #23
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d816      	bhi.n	800b10c <LCD_print_segment+0x76c>
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	7b5b      	ldrb	r3, [r3, #13]
 800b0e2:	3330      	adds	r3, #48	@ 0x30
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d30f      	bcc.n	800b10c <LCD_print_segment+0x76c>
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	7b5b      	ldrb	r3, [r3, #13]
 800b0f0:	3332      	adds	r3, #50	@ 0x32
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d808      	bhi.n	800b10c <LCD_print_segment+0x76c>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b0fa:	f107 0110 	add.w	r1, r7, #16
 800b0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b102:	2202      	movs	r2, #2
 800b104:	4883      	ldr	r0, [pc, #524]	@ (800b314 <LCD_print_segment+0x974>)
 800b106:	f00d fafa 	bl	80186fe <HAL_SPI_Transmit>
 800b10a:	e076      	b.n	800b1fa <LCD_print_segment+0x85a>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	7b1b      	ldrb	r3, [r3, #12]
 800b110:	3303      	adds	r3, #3
 800b112:	461a      	mov	r2, r3
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	4293      	cmp	r3, r2
 800b118:	d31d      	bcc.n	800b156 <LCD_print_segment+0x7b6>
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	7b1b      	ldrb	r3, [r3, #12]
 800b11e:	3306      	adds	r3, #6
 800b120:	461a      	mov	r2, r3
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	4293      	cmp	r3, r2
 800b126:	d816      	bhi.n	800b156 <LCD_print_segment+0x7b6>
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	7b5b      	ldrb	r3, [r3, #13]
 800b12c:	331b      	adds	r3, #27
 800b12e:	461a      	mov	r2, r3
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	4293      	cmp	r3, r2
 800b134:	d30f      	bcc.n	800b156 <LCD_print_segment+0x7b6>
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	7b5b      	ldrb	r3, [r3, #13]
 800b13a:	332f      	adds	r3, #47	@ 0x2f
 800b13c:	461a      	mov	r2, r3
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	4293      	cmp	r3, r2
 800b142:	d808      	bhi.n	800b156 <LCD_print_segment+0x7b6>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b144:	f107 0110 	add.w	r1, r7, #16
 800b148:	f04f 33ff 	mov.w	r3, #4294967295
 800b14c:	2202      	movs	r2, #2
 800b14e:	4871      	ldr	r0, [pc, #452]	@ (800b314 <LCD_print_segment+0x974>)
 800b150:	f00d fad5 	bl	80186fe <HAL_SPI_Transmit>
 800b154:	e051      	b.n	800b1fa <LCD_print_segment+0x85a>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	7b1b      	ldrb	r3, [r3, #12]
 800b15a:	3303      	adds	r3, #3
 800b15c:	461a      	mov	r2, r3
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	4293      	cmp	r3, r2
 800b162:	d31d      	bcc.n	800b1a0 <LCD_print_segment+0x800>
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	7b1b      	ldrb	r3, [r3, #12]
 800b168:	3306      	adds	r3, #6
 800b16a:	461a      	mov	r2, r3
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	4293      	cmp	r3, r2
 800b170:	d816      	bhi.n	800b1a0 <LCD_print_segment+0x800>
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	7b5b      	ldrb	r3, [r3, #13]
 800b176:	3303      	adds	r3, #3
 800b178:	461a      	mov	r2, r3
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d30f      	bcc.n	800b1a0 <LCD_print_segment+0x800>
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	7b5b      	ldrb	r3, [r3, #13]
 800b184:	3317      	adds	r3, #23
 800b186:	461a      	mov	r2, r3
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d808      	bhi.n	800b1a0 <LCD_print_segment+0x800>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800b18e:	f107 0114 	add.w	r1, r7, #20
 800b192:	f04f 33ff 	mov.w	r3, #4294967295
 800b196:	2202      	movs	r2, #2
 800b198:	485e      	ldr	r0, [pc, #376]	@ (800b314 <LCD_print_segment+0x974>)
 800b19a:	f00d fab0 	bl	80186fe <HAL_SPI_Transmit>
 800b19e:	e02c      	b.n	800b1fa <LCD_print_segment+0x85a>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+24) && wiersz<=(ADRES->Y0_SET+26))))
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	7b1b      	ldrb	r3, [r3, #12]
 800b1a4:	3309      	adds	r3, #9
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d31d      	bcc.n	800b1ea <LCD_print_segment+0x84a>
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	7b1b      	ldrb	r3, [r3, #12]
 800b1b2:	3317      	adds	r3, #23
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d816      	bhi.n	800b1ea <LCD_print_segment+0x84a>
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	7b5b      	ldrb	r3, [r3, #13]
 800b1c0:	3318      	adds	r3, #24
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d30f      	bcc.n	800b1ea <LCD_print_segment+0x84a>
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	7b5b      	ldrb	r3, [r3, #13]
 800b1ce:	331a      	adds	r3, #26
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d808      	bhi.n	800b1ea <LCD_print_segment+0x84a>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b1d8:	f107 0110 	add.w	r1, r7, #16
 800b1dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b1e0:	2202      	movs	r2, #2
 800b1e2:	484c      	ldr	r0, [pc, #304]	@ (800b314 <LCD_print_segment+0x974>)
 800b1e4:	f00d fa8b 	bl	80186fe <HAL_SPI_Transmit>
 800b1e8:	e007      	b.n	800b1fa <LCD_print_segment+0x85a>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800b1ea:	f107 010c 	add.w	r1, r7, #12
 800b1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b1f2:	2202      	movs	r2, #2
 800b1f4:	4847      	ldr	r0, [pc, #284]	@ (800b314 <LCD_print_segment+0x974>)
 800b1f6:	f00d fa82 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800b1fa:	69fb      	ldr	r3, [r7, #28]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	61fb      	str	r3, [r7, #28]
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	7b9b      	ldrb	r3, [r3, #14]
 800b204:	3301      	adds	r3, #1
 800b206:	461a      	mov	r2, r3
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	4293      	cmp	r3, r2
 800b20c:	f4ff aee9 	bcc.w	800afe2 <LCD_print_segment+0x642>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	3301      	adds	r3, #1
 800b214:	61bb      	str	r3, [r7, #24]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	7bdb      	ldrb	r3, [r3, #15]
 800b21a:	461a      	mov	r2, r3
 800b21c:	69bb      	ldr	r3, [r7, #24]
 800b21e:	4293      	cmp	r3, r2
 800b220:	f67f aedb 	bls.w	800afda <LCD_print_segment+0x63a>
				}
			}
		}
		break;
 800b224:	f001 b82b 	b.w	800c27e <LCD_print_segment+0x18de>
		case 3:
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	7b5b      	ldrb	r3, [r3, #13]
 800b22c:	61bb      	str	r3, [r7, #24]
 800b22e:	e11d      	b.n	800b46c <LCD_print_segment+0xacc>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	7b1b      	ldrb	r3, [r3, #12]
 800b234:	61fb      	str	r3, [r7, #28]
 800b236:	e10e      	b.n	800b456 <LCD_print_segment+0xab6>
			{
				if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+2))))
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	7b1b      	ldrb	r3, [r3, #12]
 800b23c:	3309      	adds	r3, #9
 800b23e:	461a      	mov	r2, r3
 800b240:	69fb      	ldr	r3, [r7, #28]
 800b242:	4293      	cmp	r3, r2
 800b244:	d31c      	bcc.n	800b280 <LCD_print_segment+0x8e0>
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	7b1b      	ldrb	r3, [r3, #12]
 800b24a:	3317      	adds	r3, #23
 800b24c:	461a      	mov	r2, r3
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	4293      	cmp	r3, r2
 800b252:	d815      	bhi.n	800b280 <LCD_print_segment+0x8e0>
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	7b5b      	ldrb	r3, [r3, #13]
 800b258:	461a      	mov	r2, r3
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d30f      	bcc.n	800b280 <LCD_print_segment+0x8e0>
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	7b5b      	ldrb	r3, [r3, #13]
 800b264:	3302      	adds	r3, #2
 800b266:	461a      	mov	r2, r3
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d808      	bhi.n	800b280 <LCD_print_segment+0x8e0>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b26e:	f107 0110 	add.w	r1, r7, #16
 800b272:	f04f 33ff 	mov.w	r3, #4294967295
 800b276:	2202      	movs	r2, #2
 800b278:	4826      	ldr	r0, [pc, #152]	@ (800b314 <LCD_print_segment+0x974>)
 800b27a:	f00d fa40 	bl	80186fe <HAL_SPI_Transmit>
 800b27e:	e0e7      	b.n	800b450 <LCD_print_segment+0xab0>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	7b1b      	ldrb	r3, [r3, #12]
 800b284:	331a      	adds	r3, #26
 800b286:	461a      	mov	r2, r3
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d31d      	bcc.n	800b2ca <LCD_print_segment+0x92a>
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	7b1b      	ldrb	r3, [r3, #12]
 800b292:	331d      	adds	r3, #29
 800b294:	461a      	mov	r2, r3
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	4293      	cmp	r3, r2
 800b29a:	d816      	bhi.n	800b2ca <LCD_print_segment+0x92a>
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	7b5b      	ldrb	r3, [r3, #13]
 800b2a0:	3303      	adds	r3, #3
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d30f      	bcc.n	800b2ca <LCD_print_segment+0x92a>
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	7b5b      	ldrb	r3, [r3, #13]
 800b2ae:	3317      	adds	r3, #23
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d808      	bhi.n	800b2ca <LCD_print_segment+0x92a>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b2b8:	f107 0110 	add.w	r1, r7, #16
 800b2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c0:	2202      	movs	r2, #2
 800b2c2:	4814      	ldr	r0, [pc, #80]	@ (800b314 <LCD_print_segment+0x974>)
 800b2c4:	f00d fa1b 	bl	80186fe <HAL_SPI_Transmit>
 800b2c8:	e0c2      	b.n	800b450 <LCD_print_segment+0xab0>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	7b1b      	ldrb	r3, [r3, #12]
 800b2ce:	331a      	adds	r3, #26
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d31f      	bcc.n	800b318 <LCD_print_segment+0x978>
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	7b1b      	ldrb	r3, [r3, #12]
 800b2dc:	331d      	adds	r3, #29
 800b2de:	461a      	mov	r2, r3
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d818      	bhi.n	800b318 <LCD_print_segment+0x978>
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	7b5b      	ldrb	r3, [r3, #13]
 800b2ea:	331b      	adds	r3, #27
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d311      	bcc.n	800b318 <LCD_print_segment+0x978>
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	7b5b      	ldrb	r3, [r3, #13]
 800b2f8:	332f      	adds	r3, #47	@ 0x2f
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d80a      	bhi.n	800b318 <LCD_print_segment+0x978>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b302:	f107 0110 	add.w	r1, r7, #16
 800b306:	f04f 33ff 	mov.w	r3, #4294967295
 800b30a:	2202      	movs	r2, #2
 800b30c:	4801      	ldr	r0, [pc, #4]	@ (800b314 <LCD_print_segment+0x974>)
 800b30e:	f00d f9f6 	bl	80186fe <HAL_SPI_Transmit>
 800b312:	e09d      	b.n	800b450 <LCD_print_segment+0xab0>
 800b314:	200004a4 	.word	0x200004a4
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+48) && wiersz<=(ADRES->Y0_SET+50))))
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	7b1b      	ldrb	r3, [r3, #12]
 800b31c:	3309      	adds	r3, #9
 800b31e:	461a      	mov	r2, r3
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	4293      	cmp	r3, r2
 800b324:	d31d      	bcc.n	800b362 <LCD_print_segment+0x9c2>
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	7b1b      	ldrb	r3, [r3, #12]
 800b32a:	3317      	adds	r3, #23
 800b32c:	461a      	mov	r2, r3
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	4293      	cmp	r3, r2
 800b332:	d816      	bhi.n	800b362 <LCD_print_segment+0x9c2>
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	7b5b      	ldrb	r3, [r3, #13]
 800b338:	3330      	adds	r3, #48	@ 0x30
 800b33a:	461a      	mov	r2, r3
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	4293      	cmp	r3, r2
 800b340:	d30f      	bcc.n	800b362 <LCD_print_segment+0x9c2>
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	7b5b      	ldrb	r3, [r3, #13]
 800b346:	3332      	adds	r3, #50	@ 0x32
 800b348:	461a      	mov	r2, r3
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d808      	bhi.n	800b362 <LCD_print_segment+0x9c2>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b350:	f107 0110 	add.w	r1, r7, #16
 800b354:	f04f 33ff 	mov.w	r3, #4294967295
 800b358:	2202      	movs	r2, #2
 800b35a:	4896      	ldr	r0, [pc, #600]	@ (800b5b4 <LCD_print_segment+0xc14>)
 800b35c:	f00d f9cf 	bl	80186fe <HAL_SPI_Transmit>
 800b360:	e076      	b.n	800b450 <LCD_print_segment+0xab0>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	7b1b      	ldrb	r3, [r3, #12]
 800b366:	3303      	adds	r3, #3
 800b368:	461a      	mov	r2, r3
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d31d      	bcc.n	800b3ac <LCD_print_segment+0xa0c>
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	7b1b      	ldrb	r3, [r3, #12]
 800b374:	3306      	adds	r3, #6
 800b376:	461a      	mov	r2, r3
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d816      	bhi.n	800b3ac <LCD_print_segment+0xa0c>
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	7b5b      	ldrb	r3, [r3, #13]
 800b382:	331b      	adds	r3, #27
 800b384:	461a      	mov	r2, r3
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	4293      	cmp	r3, r2
 800b38a:	d30f      	bcc.n	800b3ac <LCD_print_segment+0xa0c>
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	7b5b      	ldrb	r3, [r3, #13]
 800b390:	332f      	adds	r3, #47	@ 0x2f
 800b392:	461a      	mov	r2, r3
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	4293      	cmp	r3, r2
 800b398:	d808      	bhi.n	800b3ac <LCD_print_segment+0xa0c>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800b39a:	f107 0114 	add.w	r1, r7, #20
 800b39e:	f04f 33ff 	mov.w	r3, #4294967295
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	4883      	ldr	r0, [pc, #524]	@ (800b5b4 <LCD_print_segment+0xc14>)
 800b3a6:	f00d f9aa 	bl	80186fe <HAL_SPI_Transmit>
 800b3aa:	e051      	b.n	800b450 <LCD_print_segment+0xab0>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	7b1b      	ldrb	r3, [r3, #12]
 800b3b0:	3303      	adds	r3, #3
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d31d      	bcc.n	800b3f6 <LCD_print_segment+0xa56>
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	7b1b      	ldrb	r3, [r3, #12]
 800b3be:	3306      	adds	r3, #6
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d816      	bhi.n	800b3f6 <LCD_print_segment+0xa56>
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	7b5b      	ldrb	r3, [r3, #13]
 800b3cc:	3303      	adds	r3, #3
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d30f      	bcc.n	800b3f6 <LCD_print_segment+0xa56>
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	7b5b      	ldrb	r3, [r3, #13]
 800b3da:	3317      	adds	r3, #23
 800b3dc:	461a      	mov	r2, r3
 800b3de:	69bb      	ldr	r3, [r7, #24]
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d808      	bhi.n	800b3f6 <LCD_print_segment+0xa56>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800b3e4:	f107 0114 	add.w	r1, r7, #20
 800b3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ec:	2202      	movs	r2, #2
 800b3ee:	4871      	ldr	r0, [pc, #452]	@ (800b5b4 <LCD_print_segment+0xc14>)
 800b3f0:	f00d f985 	bl	80186fe <HAL_SPI_Transmit>
 800b3f4:	e02c      	b.n	800b450 <LCD_print_segment+0xab0>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+24) && wiersz<=(ADRES->Y0_SET+26))))
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	7b1b      	ldrb	r3, [r3, #12]
 800b3fa:	3309      	adds	r3, #9
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	4293      	cmp	r3, r2
 800b402:	d31d      	bcc.n	800b440 <LCD_print_segment+0xaa0>
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	7b1b      	ldrb	r3, [r3, #12]
 800b408:	3317      	adds	r3, #23
 800b40a:	461a      	mov	r2, r3
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	4293      	cmp	r3, r2
 800b410:	d816      	bhi.n	800b440 <LCD_print_segment+0xaa0>
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	7b5b      	ldrb	r3, [r3, #13]
 800b416:	3318      	adds	r3, #24
 800b418:	461a      	mov	r2, r3
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d30f      	bcc.n	800b440 <LCD_print_segment+0xaa0>
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	7b5b      	ldrb	r3, [r3, #13]
 800b424:	331a      	adds	r3, #26
 800b426:	461a      	mov	r2, r3
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d808      	bhi.n	800b440 <LCD_print_segment+0xaa0>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b42e:	f107 0110 	add.w	r1, r7, #16
 800b432:	f04f 33ff 	mov.w	r3, #4294967295
 800b436:	2202      	movs	r2, #2
 800b438:	485e      	ldr	r0, [pc, #376]	@ (800b5b4 <LCD_print_segment+0xc14>)
 800b43a:	f00d f960 	bl	80186fe <HAL_SPI_Transmit>
 800b43e:	e007      	b.n	800b450 <LCD_print_segment+0xab0>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800b440:	f107 010c 	add.w	r1, r7, #12
 800b444:	f04f 33ff 	mov.w	r3, #4294967295
 800b448:	2202      	movs	r2, #2
 800b44a:	485a      	ldr	r0, [pc, #360]	@ (800b5b4 <LCD_print_segment+0xc14>)
 800b44c:	f00d f957 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	3301      	adds	r3, #1
 800b454:	61fb      	str	r3, [r7, #28]
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	7b9b      	ldrb	r3, [r3, #14]
 800b45a:	3301      	adds	r3, #1
 800b45c:	461a      	mov	r2, r3
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	4293      	cmp	r3, r2
 800b462:	f4ff aee9 	bcc.w	800b238 <LCD_print_segment+0x898>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	3301      	adds	r3, #1
 800b46a:	61bb      	str	r3, [r7, #24]
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	7bdb      	ldrb	r3, [r3, #15]
 800b470:	461a      	mov	r2, r3
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	4293      	cmp	r3, r2
 800b476:	f67f aedb 	bls.w	800b230 <LCD_print_segment+0x890>
				}
			}
		}
		break;
 800b47a:	f000 bf00 	b.w	800c27e <LCD_print_segment+0x18de>
		case 4:
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	7b5b      	ldrb	r3, [r3, #13]
 800b482:	61bb      	str	r3, [r7, #24]
 800b484:	e11d      	b.n	800b6c2 <LCD_print_segment+0xd22>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	7b1b      	ldrb	r3, [r3, #12]
 800b48a:	61fb      	str	r3, [r7, #28]
 800b48c:	e10e      	b.n	800b6ac <LCD_print_segment+0xd0c>
			{
				if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+2))))
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	7b1b      	ldrb	r3, [r3, #12]
 800b492:	3309      	adds	r3, #9
 800b494:	461a      	mov	r2, r3
 800b496:	69fb      	ldr	r3, [r7, #28]
 800b498:	4293      	cmp	r3, r2
 800b49a:	d31c      	bcc.n	800b4d6 <LCD_print_segment+0xb36>
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	7b1b      	ldrb	r3, [r3, #12]
 800b4a0:	3317      	adds	r3, #23
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d815      	bhi.n	800b4d6 <LCD_print_segment+0xb36>
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	7b5b      	ldrb	r3, [r3, #13]
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d30f      	bcc.n	800b4d6 <LCD_print_segment+0xb36>
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	7b5b      	ldrb	r3, [r3, #13]
 800b4ba:	3302      	adds	r3, #2
 800b4bc:	461a      	mov	r2, r3
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d808      	bhi.n	800b4d6 <LCD_print_segment+0xb36>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800b4c4:	f107 0114 	add.w	r1, r7, #20
 800b4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4cc:	2202      	movs	r2, #2
 800b4ce:	4839      	ldr	r0, [pc, #228]	@ (800b5b4 <LCD_print_segment+0xc14>)
 800b4d0:	f00d f915 	bl	80186fe <HAL_SPI_Transmit>
 800b4d4:	e0e7      	b.n	800b6a6 <LCD_print_segment+0xd06>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	7b1b      	ldrb	r3, [r3, #12]
 800b4da:	331a      	adds	r3, #26
 800b4dc:	461a      	mov	r2, r3
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d31d      	bcc.n	800b520 <LCD_print_segment+0xb80>
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	7b1b      	ldrb	r3, [r3, #12]
 800b4e8:	331d      	adds	r3, #29
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d816      	bhi.n	800b520 <LCD_print_segment+0xb80>
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	7b5b      	ldrb	r3, [r3, #13]
 800b4f6:	3303      	adds	r3, #3
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d30f      	bcc.n	800b520 <LCD_print_segment+0xb80>
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	7b5b      	ldrb	r3, [r3, #13]
 800b504:	3317      	adds	r3, #23
 800b506:	461a      	mov	r2, r3
 800b508:	69bb      	ldr	r3, [r7, #24]
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d808      	bhi.n	800b520 <LCD_print_segment+0xb80>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b50e:	f107 0110 	add.w	r1, r7, #16
 800b512:	f04f 33ff 	mov.w	r3, #4294967295
 800b516:	2202      	movs	r2, #2
 800b518:	4826      	ldr	r0, [pc, #152]	@ (800b5b4 <LCD_print_segment+0xc14>)
 800b51a:	f00d f8f0 	bl	80186fe <HAL_SPI_Transmit>
 800b51e:	e0c2      	b.n	800b6a6 <LCD_print_segment+0xd06>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	7b1b      	ldrb	r3, [r3, #12]
 800b524:	331a      	adds	r3, #26
 800b526:	461a      	mov	r2, r3
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d31d      	bcc.n	800b56a <LCD_print_segment+0xbca>
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	7b1b      	ldrb	r3, [r3, #12]
 800b532:	331d      	adds	r3, #29
 800b534:	461a      	mov	r2, r3
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	4293      	cmp	r3, r2
 800b53a:	d816      	bhi.n	800b56a <LCD_print_segment+0xbca>
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	7b5b      	ldrb	r3, [r3, #13]
 800b540:	331b      	adds	r3, #27
 800b542:	461a      	mov	r2, r3
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	4293      	cmp	r3, r2
 800b548:	d30f      	bcc.n	800b56a <LCD_print_segment+0xbca>
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	7b5b      	ldrb	r3, [r3, #13]
 800b54e:	332f      	adds	r3, #47	@ 0x2f
 800b550:	461a      	mov	r2, r3
 800b552:	69bb      	ldr	r3, [r7, #24]
 800b554:	4293      	cmp	r3, r2
 800b556:	d808      	bhi.n	800b56a <LCD_print_segment+0xbca>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b558:	f107 0110 	add.w	r1, r7, #16
 800b55c:	f04f 33ff 	mov.w	r3, #4294967295
 800b560:	2202      	movs	r2, #2
 800b562:	4814      	ldr	r0, [pc, #80]	@ (800b5b4 <LCD_print_segment+0xc14>)
 800b564:	f00d f8cb 	bl	80186fe <HAL_SPI_Transmit>
 800b568:	e09d      	b.n	800b6a6 <LCD_print_segment+0xd06>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+48) && wiersz<=(ADRES->Y0_SET+50))))
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	7b1b      	ldrb	r3, [r3, #12]
 800b56e:	3309      	adds	r3, #9
 800b570:	461a      	mov	r2, r3
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	4293      	cmp	r3, r2
 800b576:	d31f      	bcc.n	800b5b8 <LCD_print_segment+0xc18>
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	7b1b      	ldrb	r3, [r3, #12]
 800b57c:	3317      	adds	r3, #23
 800b57e:	461a      	mov	r2, r3
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	4293      	cmp	r3, r2
 800b584:	d818      	bhi.n	800b5b8 <LCD_print_segment+0xc18>
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	7b5b      	ldrb	r3, [r3, #13]
 800b58a:	3330      	adds	r3, #48	@ 0x30
 800b58c:	461a      	mov	r2, r3
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	4293      	cmp	r3, r2
 800b592:	d311      	bcc.n	800b5b8 <LCD_print_segment+0xc18>
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	7b5b      	ldrb	r3, [r3, #13]
 800b598:	3332      	adds	r3, #50	@ 0x32
 800b59a:	461a      	mov	r2, r3
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d80a      	bhi.n	800b5b8 <LCD_print_segment+0xc18>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800b5a2:	f107 0114 	add.w	r1, r7, #20
 800b5a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5aa:	2202      	movs	r2, #2
 800b5ac:	4801      	ldr	r0, [pc, #4]	@ (800b5b4 <LCD_print_segment+0xc14>)
 800b5ae:	f00d f8a6 	bl	80186fe <HAL_SPI_Transmit>
 800b5b2:	e078      	b.n	800b6a6 <LCD_print_segment+0xd06>
 800b5b4:	200004a4 	.word	0x200004a4
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	7b1b      	ldrb	r3, [r3, #12]
 800b5bc:	3303      	adds	r3, #3
 800b5be:	461a      	mov	r2, r3
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d31d      	bcc.n	800b602 <LCD_print_segment+0xc62>
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	7b1b      	ldrb	r3, [r3, #12]
 800b5ca:	3306      	adds	r3, #6
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d816      	bhi.n	800b602 <LCD_print_segment+0xc62>
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	7b5b      	ldrb	r3, [r3, #13]
 800b5d8:	331b      	adds	r3, #27
 800b5da:	461a      	mov	r2, r3
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d30f      	bcc.n	800b602 <LCD_print_segment+0xc62>
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	7b5b      	ldrb	r3, [r3, #13]
 800b5e6:	332f      	adds	r3, #47	@ 0x2f
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	69bb      	ldr	r3, [r7, #24]
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d808      	bhi.n	800b602 <LCD_print_segment+0xc62>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800b5f0:	f107 0114 	add.w	r1, r7, #20
 800b5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5f8:	2202      	movs	r2, #2
 800b5fa:	4896      	ldr	r0, [pc, #600]	@ (800b854 <LCD_print_segment+0xeb4>)
 800b5fc:	f00d f87f 	bl	80186fe <HAL_SPI_Transmit>
 800b600:	e051      	b.n	800b6a6 <LCD_print_segment+0xd06>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	7b1b      	ldrb	r3, [r3, #12]
 800b606:	3303      	adds	r3, #3
 800b608:	461a      	mov	r2, r3
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d31d      	bcc.n	800b64c <LCD_print_segment+0xcac>
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	7b1b      	ldrb	r3, [r3, #12]
 800b614:	3306      	adds	r3, #6
 800b616:	461a      	mov	r2, r3
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d816      	bhi.n	800b64c <LCD_print_segment+0xcac>
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	7b5b      	ldrb	r3, [r3, #13]
 800b622:	3303      	adds	r3, #3
 800b624:	461a      	mov	r2, r3
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	4293      	cmp	r3, r2
 800b62a:	d30f      	bcc.n	800b64c <LCD_print_segment+0xcac>
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	7b5b      	ldrb	r3, [r3, #13]
 800b630:	3317      	adds	r3, #23
 800b632:	461a      	mov	r2, r3
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	4293      	cmp	r3, r2
 800b638:	d808      	bhi.n	800b64c <LCD_print_segment+0xcac>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b63a:	f107 0110 	add.w	r1, r7, #16
 800b63e:	f04f 33ff 	mov.w	r3, #4294967295
 800b642:	2202      	movs	r2, #2
 800b644:	4883      	ldr	r0, [pc, #524]	@ (800b854 <LCD_print_segment+0xeb4>)
 800b646:	f00d f85a 	bl	80186fe <HAL_SPI_Transmit>
 800b64a:	e02c      	b.n	800b6a6 <LCD_print_segment+0xd06>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+24) && wiersz<=(ADRES->Y0_SET+26))))
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	7b1b      	ldrb	r3, [r3, #12]
 800b650:	3309      	adds	r3, #9
 800b652:	461a      	mov	r2, r3
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	4293      	cmp	r3, r2
 800b658:	d31d      	bcc.n	800b696 <LCD_print_segment+0xcf6>
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	7b1b      	ldrb	r3, [r3, #12]
 800b65e:	3317      	adds	r3, #23
 800b660:	461a      	mov	r2, r3
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	4293      	cmp	r3, r2
 800b666:	d816      	bhi.n	800b696 <LCD_print_segment+0xcf6>
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	7b5b      	ldrb	r3, [r3, #13]
 800b66c:	3318      	adds	r3, #24
 800b66e:	461a      	mov	r2, r3
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	4293      	cmp	r3, r2
 800b674:	d30f      	bcc.n	800b696 <LCD_print_segment+0xcf6>
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	7b5b      	ldrb	r3, [r3, #13]
 800b67a:	331a      	adds	r3, #26
 800b67c:	461a      	mov	r2, r3
 800b67e:	69bb      	ldr	r3, [r7, #24]
 800b680:	4293      	cmp	r3, r2
 800b682:	d808      	bhi.n	800b696 <LCD_print_segment+0xcf6>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b684:	f107 0110 	add.w	r1, r7, #16
 800b688:	f04f 33ff 	mov.w	r3, #4294967295
 800b68c:	2202      	movs	r2, #2
 800b68e:	4871      	ldr	r0, [pc, #452]	@ (800b854 <LCD_print_segment+0xeb4>)
 800b690:	f00d f835 	bl	80186fe <HAL_SPI_Transmit>
 800b694:	e007      	b.n	800b6a6 <LCD_print_segment+0xd06>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800b696:	f107 010c 	add.w	r1, r7, #12
 800b69a:	f04f 33ff 	mov.w	r3, #4294967295
 800b69e:	2202      	movs	r2, #2
 800b6a0:	486c      	ldr	r0, [pc, #432]	@ (800b854 <LCD_print_segment+0xeb4>)
 800b6a2:	f00d f82c 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800b6a6:	69fb      	ldr	r3, [r7, #28]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	61fb      	str	r3, [r7, #28]
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	7b9b      	ldrb	r3, [r3, #14]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	f4ff aee9 	bcc.w	800b48e <LCD_print_segment+0xaee>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800b6bc:	69bb      	ldr	r3, [r7, #24]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	61bb      	str	r3, [r7, #24]
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	7bdb      	ldrb	r3, [r3, #15]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	f67f aedb 	bls.w	800b486 <LCD_print_segment+0xae6>
				}
			}
		}
		break;
 800b6d0:	f000 bdd5 	b.w	800c27e <LCD_print_segment+0x18de>
		case 5:
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	7b5b      	ldrb	r3, [r3, #13]
 800b6d8:	61bb      	str	r3, [r7, #24]
 800b6da:	e11d      	b.n	800b918 <LCD_print_segment+0xf78>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	7b1b      	ldrb	r3, [r3, #12]
 800b6e0:	61fb      	str	r3, [r7, #28]
 800b6e2:	e10e      	b.n	800b902 <LCD_print_segment+0xf62>
			{
				if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+2))))
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	7b1b      	ldrb	r3, [r3, #12]
 800b6e8:	3309      	adds	r3, #9
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d31c      	bcc.n	800b72c <LCD_print_segment+0xd8c>
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	7b1b      	ldrb	r3, [r3, #12]
 800b6f6:	3317      	adds	r3, #23
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d815      	bhi.n	800b72c <LCD_print_segment+0xd8c>
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	7b5b      	ldrb	r3, [r3, #13]
 800b704:	461a      	mov	r2, r3
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	4293      	cmp	r3, r2
 800b70a:	d30f      	bcc.n	800b72c <LCD_print_segment+0xd8c>
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	7b5b      	ldrb	r3, [r3, #13]
 800b710:	3302      	adds	r3, #2
 800b712:	461a      	mov	r2, r3
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	4293      	cmp	r3, r2
 800b718:	d808      	bhi.n	800b72c <LCD_print_segment+0xd8c>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b71a:	f107 0110 	add.w	r1, r7, #16
 800b71e:	f04f 33ff 	mov.w	r3, #4294967295
 800b722:	2202      	movs	r2, #2
 800b724:	484b      	ldr	r0, [pc, #300]	@ (800b854 <LCD_print_segment+0xeb4>)
 800b726:	f00c ffea 	bl	80186fe <HAL_SPI_Transmit>
 800b72a:	e0e7      	b.n	800b8fc <LCD_print_segment+0xf5c>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	7b1b      	ldrb	r3, [r3, #12]
 800b730:	331a      	adds	r3, #26
 800b732:	461a      	mov	r2, r3
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	4293      	cmp	r3, r2
 800b738:	d31d      	bcc.n	800b776 <LCD_print_segment+0xdd6>
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	7b1b      	ldrb	r3, [r3, #12]
 800b73e:	331d      	adds	r3, #29
 800b740:	461a      	mov	r2, r3
 800b742:	69fb      	ldr	r3, [r7, #28]
 800b744:	4293      	cmp	r3, r2
 800b746:	d816      	bhi.n	800b776 <LCD_print_segment+0xdd6>
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	7b5b      	ldrb	r3, [r3, #13]
 800b74c:	3303      	adds	r3, #3
 800b74e:	461a      	mov	r2, r3
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	4293      	cmp	r3, r2
 800b754:	d30f      	bcc.n	800b776 <LCD_print_segment+0xdd6>
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	7b5b      	ldrb	r3, [r3, #13]
 800b75a:	3317      	adds	r3, #23
 800b75c:	461a      	mov	r2, r3
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	4293      	cmp	r3, r2
 800b762:	d808      	bhi.n	800b776 <LCD_print_segment+0xdd6>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800b764:	f107 0114 	add.w	r1, r7, #20
 800b768:	f04f 33ff 	mov.w	r3, #4294967295
 800b76c:	2202      	movs	r2, #2
 800b76e:	4839      	ldr	r0, [pc, #228]	@ (800b854 <LCD_print_segment+0xeb4>)
 800b770:	f00c ffc5 	bl	80186fe <HAL_SPI_Transmit>
 800b774:	e0c2      	b.n	800b8fc <LCD_print_segment+0xf5c>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	7b1b      	ldrb	r3, [r3, #12]
 800b77a:	331a      	adds	r3, #26
 800b77c:	461a      	mov	r2, r3
 800b77e:	69fb      	ldr	r3, [r7, #28]
 800b780:	4293      	cmp	r3, r2
 800b782:	d31d      	bcc.n	800b7c0 <LCD_print_segment+0xe20>
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	7b1b      	ldrb	r3, [r3, #12]
 800b788:	331d      	adds	r3, #29
 800b78a:	461a      	mov	r2, r3
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	4293      	cmp	r3, r2
 800b790:	d816      	bhi.n	800b7c0 <LCD_print_segment+0xe20>
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	7b5b      	ldrb	r3, [r3, #13]
 800b796:	331b      	adds	r3, #27
 800b798:	461a      	mov	r2, r3
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d30f      	bcc.n	800b7c0 <LCD_print_segment+0xe20>
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	7b5b      	ldrb	r3, [r3, #13]
 800b7a4:	332f      	adds	r3, #47	@ 0x2f
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d808      	bhi.n	800b7c0 <LCD_print_segment+0xe20>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b7ae:	f107 0110 	add.w	r1, r7, #16
 800b7b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b7b6:	2202      	movs	r2, #2
 800b7b8:	4826      	ldr	r0, [pc, #152]	@ (800b854 <LCD_print_segment+0xeb4>)
 800b7ba:	f00c ffa0 	bl	80186fe <HAL_SPI_Transmit>
 800b7be:	e09d      	b.n	800b8fc <LCD_print_segment+0xf5c>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+48) && wiersz<=(ADRES->Y0_SET+50))))
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	7b1b      	ldrb	r3, [r3, #12]
 800b7c4:	3309      	adds	r3, #9
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d31d      	bcc.n	800b80a <LCD_print_segment+0xe6a>
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	7b1b      	ldrb	r3, [r3, #12]
 800b7d2:	3317      	adds	r3, #23
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d816      	bhi.n	800b80a <LCD_print_segment+0xe6a>
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	7b5b      	ldrb	r3, [r3, #13]
 800b7e0:	3330      	adds	r3, #48	@ 0x30
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d30f      	bcc.n	800b80a <LCD_print_segment+0xe6a>
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	7b5b      	ldrb	r3, [r3, #13]
 800b7ee:	3332      	adds	r3, #50	@ 0x32
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d808      	bhi.n	800b80a <LCD_print_segment+0xe6a>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b7f8:	f107 0110 	add.w	r1, r7, #16
 800b7fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b800:	2202      	movs	r2, #2
 800b802:	4814      	ldr	r0, [pc, #80]	@ (800b854 <LCD_print_segment+0xeb4>)
 800b804:	f00c ff7b 	bl	80186fe <HAL_SPI_Transmit>
 800b808:	e078      	b.n	800b8fc <LCD_print_segment+0xf5c>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	7b1b      	ldrb	r3, [r3, #12]
 800b80e:	3303      	adds	r3, #3
 800b810:	461a      	mov	r2, r3
 800b812:	69fb      	ldr	r3, [r7, #28]
 800b814:	4293      	cmp	r3, r2
 800b816:	d31f      	bcc.n	800b858 <LCD_print_segment+0xeb8>
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	7b1b      	ldrb	r3, [r3, #12]
 800b81c:	3306      	adds	r3, #6
 800b81e:	461a      	mov	r2, r3
 800b820:	69fb      	ldr	r3, [r7, #28]
 800b822:	4293      	cmp	r3, r2
 800b824:	d818      	bhi.n	800b858 <LCD_print_segment+0xeb8>
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	7b5b      	ldrb	r3, [r3, #13]
 800b82a:	331b      	adds	r3, #27
 800b82c:	461a      	mov	r2, r3
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	4293      	cmp	r3, r2
 800b832:	d311      	bcc.n	800b858 <LCD_print_segment+0xeb8>
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	7b5b      	ldrb	r3, [r3, #13]
 800b838:	332f      	adds	r3, #47	@ 0x2f
 800b83a:	461a      	mov	r2, r3
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	4293      	cmp	r3, r2
 800b840:	d80a      	bhi.n	800b858 <LCD_print_segment+0xeb8>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800b842:	f107 0114 	add.w	r1, r7, #20
 800b846:	f04f 33ff 	mov.w	r3, #4294967295
 800b84a:	2202      	movs	r2, #2
 800b84c:	4801      	ldr	r0, [pc, #4]	@ (800b854 <LCD_print_segment+0xeb4>)
 800b84e:	f00c ff56 	bl	80186fe <HAL_SPI_Transmit>
 800b852:	e053      	b.n	800b8fc <LCD_print_segment+0xf5c>
 800b854:	200004a4 	.word	0x200004a4
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	7b1b      	ldrb	r3, [r3, #12]
 800b85c:	3303      	adds	r3, #3
 800b85e:	461a      	mov	r2, r3
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	4293      	cmp	r3, r2
 800b864:	d31d      	bcc.n	800b8a2 <LCD_print_segment+0xf02>
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	7b1b      	ldrb	r3, [r3, #12]
 800b86a:	3306      	adds	r3, #6
 800b86c:	461a      	mov	r2, r3
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	4293      	cmp	r3, r2
 800b872:	d816      	bhi.n	800b8a2 <LCD_print_segment+0xf02>
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	7b5b      	ldrb	r3, [r3, #13]
 800b878:	3303      	adds	r3, #3
 800b87a:	461a      	mov	r2, r3
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	4293      	cmp	r3, r2
 800b880:	d30f      	bcc.n	800b8a2 <LCD_print_segment+0xf02>
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	7b5b      	ldrb	r3, [r3, #13]
 800b886:	3317      	adds	r3, #23
 800b888:	461a      	mov	r2, r3
 800b88a:	69bb      	ldr	r3, [r7, #24]
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d808      	bhi.n	800b8a2 <LCD_print_segment+0xf02>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b890:	f107 0110 	add.w	r1, r7, #16
 800b894:	f04f 33ff 	mov.w	r3, #4294967295
 800b898:	2202      	movs	r2, #2
 800b89a:	4896      	ldr	r0, [pc, #600]	@ (800baf4 <LCD_print_segment+0x1154>)
 800b89c:	f00c ff2f 	bl	80186fe <HAL_SPI_Transmit>
 800b8a0:	e02c      	b.n	800b8fc <LCD_print_segment+0xf5c>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+24) && wiersz<=(ADRES->Y0_SET+26))))
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	7b1b      	ldrb	r3, [r3, #12]
 800b8a6:	3309      	adds	r3, #9
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d31d      	bcc.n	800b8ec <LCD_print_segment+0xf4c>
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	7b1b      	ldrb	r3, [r3, #12]
 800b8b4:	3317      	adds	r3, #23
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d816      	bhi.n	800b8ec <LCD_print_segment+0xf4c>
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	7b5b      	ldrb	r3, [r3, #13]
 800b8c2:	3318      	adds	r3, #24
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d30f      	bcc.n	800b8ec <LCD_print_segment+0xf4c>
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	7b5b      	ldrb	r3, [r3, #13]
 800b8d0:	331a      	adds	r3, #26
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	69bb      	ldr	r3, [r7, #24]
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d808      	bhi.n	800b8ec <LCD_print_segment+0xf4c>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b8da:	f107 0110 	add.w	r1, r7, #16
 800b8de:	f04f 33ff 	mov.w	r3, #4294967295
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	4883      	ldr	r0, [pc, #524]	@ (800baf4 <LCD_print_segment+0x1154>)
 800b8e6:	f00c ff0a 	bl	80186fe <HAL_SPI_Transmit>
 800b8ea:	e007      	b.n	800b8fc <LCD_print_segment+0xf5c>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800b8ec:	f107 010c 	add.w	r1, r7, #12
 800b8f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b8f4:	2202      	movs	r2, #2
 800b8f6:	487f      	ldr	r0, [pc, #508]	@ (800baf4 <LCD_print_segment+0x1154>)
 800b8f8:	f00c ff01 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	3301      	adds	r3, #1
 800b900:	61fb      	str	r3, [r7, #28]
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	7b9b      	ldrb	r3, [r3, #14]
 800b906:	3301      	adds	r3, #1
 800b908:	461a      	mov	r2, r3
 800b90a:	69fb      	ldr	r3, [r7, #28]
 800b90c:	4293      	cmp	r3, r2
 800b90e:	f4ff aee9 	bcc.w	800b6e4 <LCD_print_segment+0xd44>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	3301      	adds	r3, #1
 800b916:	61bb      	str	r3, [r7, #24]
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	7bdb      	ldrb	r3, [r3, #15]
 800b91c:	461a      	mov	r2, r3
 800b91e:	69bb      	ldr	r3, [r7, #24]
 800b920:	4293      	cmp	r3, r2
 800b922:	f67f aedb 	bls.w	800b6dc <LCD_print_segment+0xd3c>
				}
			}
		}
		break;
 800b926:	f000 bcaa 	b.w	800c27e <LCD_print_segment+0x18de>
		case 6:
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	7b5b      	ldrb	r3, [r3, #13]
 800b92e:	61bb      	str	r3, [r7, #24]
 800b930:	e11d      	b.n	800bb6e <LCD_print_segment+0x11ce>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	7b1b      	ldrb	r3, [r3, #12]
 800b936:	61fb      	str	r3, [r7, #28]
 800b938:	e10e      	b.n	800bb58 <LCD_print_segment+0x11b8>
			{
				if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+2))))
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	7b1b      	ldrb	r3, [r3, #12]
 800b93e:	3309      	adds	r3, #9
 800b940:	461a      	mov	r2, r3
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	4293      	cmp	r3, r2
 800b946:	d31c      	bcc.n	800b982 <LCD_print_segment+0xfe2>
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	7b1b      	ldrb	r3, [r3, #12]
 800b94c:	3317      	adds	r3, #23
 800b94e:	461a      	mov	r2, r3
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	4293      	cmp	r3, r2
 800b954:	d815      	bhi.n	800b982 <LCD_print_segment+0xfe2>
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	7b5b      	ldrb	r3, [r3, #13]
 800b95a:	461a      	mov	r2, r3
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	4293      	cmp	r3, r2
 800b960:	d30f      	bcc.n	800b982 <LCD_print_segment+0xfe2>
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	7b5b      	ldrb	r3, [r3, #13]
 800b966:	3302      	adds	r3, #2
 800b968:	461a      	mov	r2, r3
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d808      	bhi.n	800b982 <LCD_print_segment+0xfe2>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800b970:	f107 0110 	add.w	r1, r7, #16
 800b974:	f04f 33ff 	mov.w	r3, #4294967295
 800b978:	2202      	movs	r2, #2
 800b97a:	485e      	ldr	r0, [pc, #376]	@ (800baf4 <LCD_print_segment+0x1154>)
 800b97c:	f00c febf 	bl	80186fe <HAL_SPI_Transmit>
 800b980:	e0e7      	b.n	800bb52 <LCD_print_segment+0x11b2>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	7b1b      	ldrb	r3, [r3, #12]
 800b986:	331a      	adds	r3, #26
 800b988:	461a      	mov	r2, r3
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d31d      	bcc.n	800b9cc <LCD_print_segment+0x102c>
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	7b1b      	ldrb	r3, [r3, #12]
 800b994:	331d      	adds	r3, #29
 800b996:	461a      	mov	r2, r3
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d816      	bhi.n	800b9cc <LCD_print_segment+0x102c>
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	7b5b      	ldrb	r3, [r3, #13]
 800b9a2:	3303      	adds	r3, #3
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d30f      	bcc.n	800b9cc <LCD_print_segment+0x102c>
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	7b5b      	ldrb	r3, [r3, #13]
 800b9b0:	3317      	adds	r3, #23
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d808      	bhi.n	800b9cc <LCD_print_segment+0x102c>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800b9ba:	f107 0114 	add.w	r1, r7, #20
 800b9be:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	484b      	ldr	r0, [pc, #300]	@ (800baf4 <LCD_print_segment+0x1154>)
 800b9c6:	f00c fe9a 	bl	80186fe <HAL_SPI_Transmit>
 800b9ca:	e0c2      	b.n	800bb52 <LCD_print_segment+0x11b2>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	7b1b      	ldrb	r3, [r3, #12]
 800b9d0:	331a      	adds	r3, #26
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d31d      	bcc.n	800ba16 <LCD_print_segment+0x1076>
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	7b1b      	ldrb	r3, [r3, #12]
 800b9de:	331d      	adds	r3, #29
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d816      	bhi.n	800ba16 <LCD_print_segment+0x1076>
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	7b5b      	ldrb	r3, [r3, #13]
 800b9ec:	331b      	adds	r3, #27
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d30f      	bcc.n	800ba16 <LCD_print_segment+0x1076>
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	7b5b      	ldrb	r3, [r3, #13]
 800b9fa:	332f      	adds	r3, #47	@ 0x2f
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d808      	bhi.n	800ba16 <LCD_print_segment+0x1076>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800ba04:	f107 0110 	add.w	r1, r7, #16
 800ba08:	f04f 33ff 	mov.w	r3, #4294967295
 800ba0c:	2202      	movs	r2, #2
 800ba0e:	4839      	ldr	r0, [pc, #228]	@ (800baf4 <LCD_print_segment+0x1154>)
 800ba10:	f00c fe75 	bl	80186fe <HAL_SPI_Transmit>
 800ba14:	e09d      	b.n	800bb52 <LCD_print_segment+0x11b2>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+48) && wiersz<=(ADRES->Y0_SET+50))))
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	7b1b      	ldrb	r3, [r3, #12]
 800ba1a:	3309      	adds	r3, #9
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d31d      	bcc.n	800ba60 <LCD_print_segment+0x10c0>
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	7b1b      	ldrb	r3, [r3, #12]
 800ba28:	3317      	adds	r3, #23
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d816      	bhi.n	800ba60 <LCD_print_segment+0x10c0>
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	7b5b      	ldrb	r3, [r3, #13]
 800ba36:	3330      	adds	r3, #48	@ 0x30
 800ba38:	461a      	mov	r2, r3
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d30f      	bcc.n	800ba60 <LCD_print_segment+0x10c0>
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	7b5b      	ldrb	r3, [r3, #13]
 800ba44:	3332      	adds	r3, #50	@ 0x32
 800ba46:	461a      	mov	r2, r3
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d808      	bhi.n	800ba60 <LCD_print_segment+0x10c0>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800ba4e:	f107 0110 	add.w	r1, r7, #16
 800ba52:	f04f 33ff 	mov.w	r3, #4294967295
 800ba56:	2202      	movs	r2, #2
 800ba58:	4826      	ldr	r0, [pc, #152]	@ (800baf4 <LCD_print_segment+0x1154>)
 800ba5a:	f00c fe50 	bl	80186fe <HAL_SPI_Transmit>
 800ba5e:	e078      	b.n	800bb52 <LCD_print_segment+0x11b2>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	7b1b      	ldrb	r3, [r3, #12]
 800ba64:	3303      	adds	r3, #3
 800ba66:	461a      	mov	r2, r3
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d31d      	bcc.n	800baaa <LCD_print_segment+0x110a>
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	7b1b      	ldrb	r3, [r3, #12]
 800ba72:	3306      	adds	r3, #6
 800ba74:	461a      	mov	r2, r3
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d816      	bhi.n	800baaa <LCD_print_segment+0x110a>
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	7b5b      	ldrb	r3, [r3, #13]
 800ba80:	331b      	adds	r3, #27
 800ba82:	461a      	mov	r2, r3
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d30f      	bcc.n	800baaa <LCD_print_segment+0x110a>
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	7b5b      	ldrb	r3, [r3, #13]
 800ba8e:	332f      	adds	r3, #47	@ 0x2f
 800ba90:	461a      	mov	r2, r3
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d808      	bhi.n	800baaa <LCD_print_segment+0x110a>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800ba98:	f107 0110 	add.w	r1, r7, #16
 800ba9c:	f04f 33ff 	mov.w	r3, #4294967295
 800baa0:	2202      	movs	r2, #2
 800baa2:	4814      	ldr	r0, [pc, #80]	@ (800baf4 <LCD_print_segment+0x1154>)
 800baa4:	f00c fe2b 	bl	80186fe <HAL_SPI_Transmit>
 800baa8:	e053      	b.n	800bb52 <LCD_print_segment+0x11b2>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	7b1b      	ldrb	r3, [r3, #12]
 800baae:	3303      	adds	r3, #3
 800bab0:	461a      	mov	r2, r3
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d31f      	bcc.n	800baf8 <LCD_print_segment+0x1158>
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	7b1b      	ldrb	r3, [r3, #12]
 800babc:	3306      	adds	r3, #6
 800babe:	461a      	mov	r2, r3
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d818      	bhi.n	800baf8 <LCD_print_segment+0x1158>
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	7b5b      	ldrb	r3, [r3, #13]
 800baca:	3303      	adds	r3, #3
 800bacc:	461a      	mov	r2, r3
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d311      	bcc.n	800baf8 <LCD_print_segment+0x1158>
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	7b5b      	ldrb	r3, [r3, #13]
 800bad8:	3317      	adds	r3, #23
 800bada:	461a      	mov	r2, r3
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	4293      	cmp	r3, r2
 800bae0:	d80a      	bhi.n	800baf8 <LCD_print_segment+0x1158>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800bae2:	f107 0110 	add.w	r1, r7, #16
 800bae6:	f04f 33ff 	mov.w	r3, #4294967295
 800baea:	2202      	movs	r2, #2
 800baec:	4801      	ldr	r0, [pc, #4]	@ (800baf4 <LCD_print_segment+0x1154>)
 800baee:	f00c fe06 	bl	80186fe <HAL_SPI_Transmit>
 800baf2:	e02e      	b.n	800bb52 <LCD_print_segment+0x11b2>
 800baf4:	200004a4 	.word	0x200004a4
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+24) && wiersz<=(ADRES->Y0_SET+26))))
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	7b1b      	ldrb	r3, [r3, #12]
 800bafc:	3309      	adds	r3, #9
 800bafe:	461a      	mov	r2, r3
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d31d      	bcc.n	800bb42 <LCD_print_segment+0x11a2>
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	7b1b      	ldrb	r3, [r3, #12]
 800bb0a:	3317      	adds	r3, #23
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d816      	bhi.n	800bb42 <LCD_print_segment+0x11a2>
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	7b5b      	ldrb	r3, [r3, #13]
 800bb18:	3318      	adds	r3, #24
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d30f      	bcc.n	800bb42 <LCD_print_segment+0x11a2>
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	7b5b      	ldrb	r3, [r3, #13]
 800bb26:	331a      	adds	r3, #26
 800bb28:	461a      	mov	r2, r3
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d808      	bhi.n	800bb42 <LCD_print_segment+0x11a2>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800bb30:	f107 0110 	add.w	r1, r7, #16
 800bb34:	f04f 33ff 	mov.w	r3, #4294967295
 800bb38:	2202      	movs	r2, #2
 800bb3a:	4896      	ldr	r0, [pc, #600]	@ (800bd94 <LCD_print_segment+0x13f4>)
 800bb3c:	f00c fddf 	bl	80186fe <HAL_SPI_Transmit>
 800bb40:	e007      	b.n	800bb52 <LCD_print_segment+0x11b2>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800bb42:	f107 010c 	add.w	r1, r7, #12
 800bb46:	f04f 33ff 	mov.w	r3, #4294967295
 800bb4a:	2202      	movs	r2, #2
 800bb4c:	4891      	ldr	r0, [pc, #580]	@ (800bd94 <LCD_print_segment+0x13f4>)
 800bb4e:	f00c fdd6 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	3301      	adds	r3, #1
 800bb56:	61fb      	str	r3, [r7, #28]
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	7b9b      	ldrb	r3, [r3, #14]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	461a      	mov	r2, r3
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	4293      	cmp	r3, r2
 800bb64:	f4ff aee9 	bcc.w	800b93a <LCD_print_segment+0xf9a>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800bb68:	69bb      	ldr	r3, [r7, #24]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	61bb      	str	r3, [r7, #24]
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	7bdb      	ldrb	r3, [r3, #15]
 800bb72:	461a      	mov	r2, r3
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	4293      	cmp	r3, r2
 800bb78:	f67f aedb 	bls.w	800b932 <LCD_print_segment+0xf92>
				}
			}
		}
		break;
 800bb7c:	e37f      	b.n	800c27e <LCD_print_segment+0x18de>
		case 7:
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	7b5b      	ldrb	r3, [r3, #13]
 800bb82:	61bb      	str	r3, [r7, #24]
 800bb84:	e11e      	b.n	800bdc4 <LCD_print_segment+0x1424>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	7b1b      	ldrb	r3, [r3, #12]
 800bb8a:	61fb      	str	r3, [r7, #28]
 800bb8c:	e10f      	b.n	800bdae <LCD_print_segment+0x140e>
			{
				if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+2))))
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	7b1b      	ldrb	r3, [r3, #12]
 800bb92:	3309      	adds	r3, #9
 800bb94:	461a      	mov	r2, r3
 800bb96:	69fb      	ldr	r3, [r7, #28]
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d31c      	bcc.n	800bbd6 <LCD_print_segment+0x1236>
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	7b1b      	ldrb	r3, [r3, #12]
 800bba0:	3317      	adds	r3, #23
 800bba2:	461a      	mov	r2, r3
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d815      	bhi.n	800bbd6 <LCD_print_segment+0x1236>
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	7b5b      	ldrb	r3, [r3, #13]
 800bbae:	461a      	mov	r2, r3
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d30f      	bcc.n	800bbd6 <LCD_print_segment+0x1236>
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	7b5b      	ldrb	r3, [r3, #13]
 800bbba:	3302      	adds	r3, #2
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d808      	bhi.n	800bbd6 <LCD_print_segment+0x1236>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800bbc4:	f107 0110 	add.w	r1, r7, #16
 800bbc8:	f04f 33ff 	mov.w	r3, #4294967295
 800bbcc:	2202      	movs	r2, #2
 800bbce:	4871      	ldr	r0, [pc, #452]	@ (800bd94 <LCD_print_segment+0x13f4>)
 800bbd0:	f00c fd95 	bl	80186fe <HAL_SPI_Transmit>
 800bbd4:	e0e8      	b.n	800bda8 <LCD_print_segment+0x1408>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	7b1b      	ldrb	r3, [r3, #12]
 800bbda:	331a      	adds	r3, #26
 800bbdc:	461a      	mov	r2, r3
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d31d      	bcc.n	800bc20 <LCD_print_segment+0x1280>
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	7b1b      	ldrb	r3, [r3, #12]
 800bbe8:	331d      	adds	r3, #29
 800bbea:	461a      	mov	r2, r3
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d816      	bhi.n	800bc20 <LCD_print_segment+0x1280>
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	7b5b      	ldrb	r3, [r3, #13]
 800bbf6:	3303      	adds	r3, #3
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d30f      	bcc.n	800bc20 <LCD_print_segment+0x1280>
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	7b5b      	ldrb	r3, [r3, #13]
 800bc04:	3317      	adds	r3, #23
 800bc06:	461a      	mov	r2, r3
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d808      	bhi.n	800bc20 <LCD_print_segment+0x1280>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800bc0e:	f107 0110 	add.w	r1, r7, #16
 800bc12:	f04f 33ff 	mov.w	r3, #4294967295
 800bc16:	2202      	movs	r2, #2
 800bc18:	485e      	ldr	r0, [pc, #376]	@ (800bd94 <LCD_print_segment+0x13f4>)
 800bc1a:	f00c fd70 	bl	80186fe <HAL_SPI_Transmit>
 800bc1e:	e0c3      	b.n	800bda8 <LCD_print_segment+0x1408>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	7b1b      	ldrb	r3, [r3, #12]
 800bc24:	331a      	adds	r3, #26
 800bc26:	461a      	mov	r2, r3
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d31d      	bcc.n	800bc6a <LCD_print_segment+0x12ca>
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	7b1b      	ldrb	r3, [r3, #12]
 800bc32:	331d      	adds	r3, #29
 800bc34:	461a      	mov	r2, r3
 800bc36:	69fb      	ldr	r3, [r7, #28]
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d816      	bhi.n	800bc6a <LCD_print_segment+0x12ca>
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	7b5b      	ldrb	r3, [r3, #13]
 800bc40:	331b      	adds	r3, #27
 800bc42:	461a      	mov	r2, r3
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d30f      	bcc.n	800bc6a <LCD_print_segment+0x12ca>
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	7b5b      	ldrb	r3, [r3, #13]
 800bc4e:	332f      	adds	r3, #47	@ 0x2f
 800bc50:	461a      	mov	r2, r3
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d808      	bhi.n	800bc6a <LCD_print_segment+0x12ca>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800bc58:	f107 0110 	add.w	r1, r7, #16
 800bc5c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc60:	2202      	movs	r2, #2
 800bc62:	484c      	ldr	r0, [pc, #304]	@ (800bd94 <LCD_print_segment+0x13f4>)
 800bc64:	f00c fd4b 	bl	80186fe <HAL_SPI_Transmit>
 800bc68:	e09e      	b.n	800bda8 <LCD_print_segment+0x1408>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+48) && wiersz<=(ADRES->Y0_SET+50))))
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	7b1b      	ldrb	r3, [r3, #12]
 800bc6e:	3309      	adds	r3, #9
 800bc70:	461a      	mov	r2, r3
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d31d      	bcc.n	800bcb4 <LCD_print_segment+0x1314>
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	7b1b      	ldrb	r3, [r3, #12]
 800bc7c:	3317      	adds	r3, #23
 800bc7e:	461a      	mov	r2, r3
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d816      	bhi.n	800bcb4 <LCD_print_segment+0x1314>
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	7b5b      	ldrb	r3, [r3, #13]
 800bc8a:	3330      	adds	r3, #48	@ 0x30
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	69bb      	ldr	r3, [r7, #24]
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d30f      	bcc.n	800bcb4 <LCD_print_segment+0x1314>
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	7b5b      	ldrb	r3, [r3, #13]
 800bc98:	3332      	adds	r3, #50	@ 0x32
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d808      	bhi.n	800bcb4 <LCD_print_segment+0x1314>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800bca2:	f107 0114 	add.w	r1, r7, #20
 800bca6:	f04f 33ff 	mov.w	r3, #4294967295
 800bcaa:	2202      	movs	r2, #2
 800bcac:	4839      	ldr	r0, [pc, #228]	@ (800bd94 <LCD_print_segment+0x13f4>)
 800bcae:	f00c fd26 	bl	80186fe <HAL_SPI_Transmit>
 800bcb2:	e079      	b.n	800bda8 <LCD_print_segment+0x1408>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	7b1b      	ldrb	r3, [r3, #12]
 800bcb8:	3303      	adds	r3, #3
 800bcba:	461a      	mov	r2, r3
 800bcbc:	69fb      	ldr	r3, [r7, #28]
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d31d      	bcc.n	800bcfe <LCD_print_segment+0x135e>
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	7b1b      	ldrb	r3, [r3, #12]
 800bcc6:	3306      	adds	r3, #6
 800bcc8:	461a      	mov	r2, r3
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d816      	bhi.n	800bcfe <LCD_print_segment+0x135e>
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	7b5b      	ldrb	r3, [r3, #13]
 800bcd4:	331b      	adds	r3, #27
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d30f      	bcc.n	800bcfe <LCD_print_segment+0x135e>
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	7b5b      	ldrb	r3, [r3, #13]
 800bce2:	332f      	adds	r3, #47	@ 0x2f
 800bce4:	461a      	mov	r2, r3
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d808      	bhi.n	800bcfe <LCD_print_segment+0x135e>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800bcec:	f107 0114 	add.w	r1, r7, #20
 800bcf0:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf4:	2202      	movs	r2, #2
 800bcf6:	4827      	ldr	r0, [pc, #156]	@ (800bd94 <LCD_print_segment+0x13f4>)
 800bcf8:	f00c fd01 	bl	80186fe <HAL_SPI_Transmit>
 800bcfc:	e054      	b.n	800bda8 <LCD_print_segment+0x1408>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	7b1b      	ldrb	r3, [r3, #12]
 800bd02:	3303      	adds	r3, #3
 800bd04:	461a      	mov	r2, r3
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d31d      	bcc.n	800bd48 <LCD_print_segment+0x13a8>
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	7b1b      	ldrb	r3, [r3, #12]
 800bd10:	3306      	adds	r3, #6
 800bd12:	461a      	mov	r2, r3
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d816      	bhi.n	800bd48 <LCD_print_segment+0x13a8>
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	7b5b      	ldrb	r3, [r3, #13]
 800bd1e:	3303      	adds	r3, #3
 800bd20:	461a      	mov	r2, r3
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d30f      	bcc.n	800bd48 <LCD_print_segment+0x13a8>
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	7b5b      	ldrb	r3, [r3, #13]
 800bd2c:	3317      	adds	r3, #23
 800bd2e:	461a      	mov	r2, r3
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d808      	bhi.n	800bd48 <LCD_print_segment+0x13a8>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800bd36:	f107 0114 	add.w	r1, r7, #20
 800bd3a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd3e:	2202      	movs	r2, #2
 800bd40:	4814      	ldr	r0, [pc, #80]	@ (800bd94 <LCD_print_segment+0x13f4>)
 800bd42:	f00c fcdc 	bl	80186fe <HAL_SPI_Transmit>
 800bd46:	e02f      	b.n	800bda8 <LCD_print_segment+0x1408>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+24) && wiersz<=(ADRES->Y0_SET+26))))
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	7b1b      	ldrb	r3, [r3, #12]
 800bd4c:	3309      	adds	r3, #9
 800bd4e:	461a      	mov	r2, r3
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d320      	bcc.n	800bd98 <LCD_print_segment+0x13f8>
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	7b1b      	ldrb	r3, [r3, #12]
 800bd5a:	3317      	adds	r3, #23
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d819      	bhi.n	800bd98 <LCD_print_segment+0x13f8>
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	7b5b      	ldrb	r3, [r3, #13]
 800bd68:	3318      	adds	r3, #24
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	69bb      	ldr	r3, [r7, #24]
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d312      	bcc.n	800bd98 <LCD_print_segment+0x13f8>
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	7b5b      	ldrb	r3, [r3, #13]
 800bd76:	331a      	adds	r3, #26
 800bd78:	461a      	mov	r2, r3
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d80b      	bhi.n	800bd98 <LCD_print_segment+0x13f8>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800bd80:	f107 0114 	add.w	r1, r7, #20
 800bd84:	f04f 33ff 	mov.w	r3, #4294967295
 800bd88:	2202      	movs	r2, #2
 800bd8a:	4802      	ldr	r0, [pc, #8]	@ (800bd94 <LCD_print_segment+0x13f4>)
 800bd8c:	f00c fcb7 	bl	80186fe <HAL_SPI_Transmit>
 800bd90:	e00a      	b.n	800bda8 <LCD_print_segment+0x1408>
 800bd92:	bf00      	nop
 800bd94:	200004a4 	.word	0x200004a4
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800bd98:	f107 010c 	add.w	r1, r7, #12
 800bd9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bda0:	2202      	movs	r2, #2
 800bda2:	4891      	ldr	r0, [pc, #580]	@ (800bfe8 <LCD_print_segment+0x1648>)
 800bda4:	f00c fcab 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	61fb      	str	r3, [r7, #28]
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	7b9b      	ldrb	r3, [r3, #14]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	69fb      	ldr	r3, [r7, #28]
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	f4ff aee8 	bcc.w	800bb8e <LCD_print_segment+0x11ee>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	61bb      	str	r3, [r7, #24]
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	7bdb      	ldrb	r3, [r3, #15]
 800bdc8:	461a      	mov	r2, r3
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	f67f aeda 	bls.w	800bb86 <LCD_print_segment+0x11e6>
				}
			}
		}
		break;
 800bdd2:	e254      	b.n	800c27e <LCD_print_segment+0x18de>
		case 8:
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	7b5b      	ldrb	r3, [r3, #13]
 800bdd8:	61bb      	str	r3, [r7, #24]
 800bdda:	e11d      	b.n	800c018 <LCD_print_segment+0x1678>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	7b1b      	ldrb	r3, [r3, #12]
 800bde0:	61fb      	str	r3, [r7, #28]
 800bde2:	e10e      	b.n	800c002 <LCD_print_segment+0x1662>
			{
				if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+2))))
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	7b1b      	ldrb	r3, [r3, #12]
 800bde8:	3309      	adds	r3, #9
 800bdea:	461a      	mov	r2, r3
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d31c      	bcc.n	800be2c <LCD_print_segment+0x148c>
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	7b1b      	ldrb	r3, [r3, #12]
 800bdf6:	3317      	adds	r3, #23
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d815      	bhi.n	800be2c <LCD_print_segment+0x148c>
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	7b5b      	ldrb	r3, [r3, #13]
 800be04:	461a      	mov	r2, r3
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	4293      	cmp	r3, r2
 800be0a:	d30f      	bcc.n	800be2c <LCD_print_segment+0x148c>
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	7b5b      	ldrb	r3, [r3, #13]
 800be10:	3302      	adds	r3, #2
 800be12:	461a      	mov	r2, r3
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	4293      	cmp	r3, r2
 800be18:	d808      	bhi.n	800be2c <LCD_print_segment+0x148c>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800be1a:	f107 0110 	add.w	r1, r7, #16
 800be1e:	f04f 33ff 	mov.w	r3, #4294967295
 800be22:	2202      	movs	r2, #2
 800be24:	4870      	ldr	r0, [pc, #448]	@ (800bfe8 <LCD_print_segment+0x1648>)
 800be26:	f00c fc6a 	bl	80186fe <HAL_SPI_Transmit>
 800be2a:	e0e7      	b.n	800bffc <LCD_print_segment+0x165c>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	7b1b      	ldrb	r3, [r3, #12]
 800be30:	331a      	adds	r3, #26
 800be32:	461a      	mov	r2, r3
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	4293      	cmp	r3, r2
 800be38:	d31d      	bcc.n	800be76 <LCD_print_segment+0x14d6>
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	7b1b      	ldrb	r3, [r3, #12]
 800be3e:	331d      	adds	r3, #29
 800be40:	461a      	mov	r2, r3
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	4293      	cmp	r3, r2
 800be46:	d816      	bhi.n	800be76 <LCD_print_segment+0x14d6>
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	7b5b      	ldrb	r3, [r3, #13]
 800be4c:	3303      	adds	r3, #3
 800be4e:	461a      	mov	r2, r3
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	4293      	cmp	r3, r2
 800be54:	d30f      	bcc.n	800be76 <LCD_print_segment+0x14d6>
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	7b5b      	ldrb	r3, [r3, #13]
 800be5a:	3317      	adds	r3, #23
 800be5c:	461a      	mov	r2, r3
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	4293      	cmp	r3, r2
 800be62:	d808      	bhi.n	800be76 <LCD_print_segment+0x14d6>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800be64:	f107 0110 	add.w	r1, r7, #16
 800be68:	f04f 33ff 	mov.w	r3, #4294967295
 800be6c:	2202      	movs	r2, #2
 800be6e:	485e      	ldr	r0, [pc, #376]	@ (800bfe8 <LCD_print_segment+0x1648>)
 800be70:	f00c fc45 	bl	80186fe <HAL_SPI_Transmit>
 800be74:	e0c2      	b.n	800bffc <LCD_print_segment+0x165c>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	7b1b      	ldrb	r3, [r3, #12]
 800be7a:	331a      	adds	r3, #26
 800be7c:	461a      	mov	r2, r3
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	4293      	cmp	r3, r2
 800be82:	d31d      	bcc.n	800bec0 <LCD_print_segment+0x1520>
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	7b1b      	ldrb	r3, [r3, #12]
 800be88:	331d      	adds	r3, #29
 800be8a:	461a      	mov	r2, r3
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	4293      	cmp	r3, r2
 800be90:	d816      	bhi.n	800bec0 <LCD_print_segment+0x1520>
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	7b5b      	ldrb	r3, [r3, #13]
 800be96:	331b      	adds	r3, #27
 800be98:	461a      	mov	r2, r3
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d30f      	bcc.n	800bec0 <LCD_print_segment+0x1520>
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	7b5b      	ldrb	r3, [r3, #13]
 800bea4:	332f      	adds	r3, #47	@ 0x2f
 800bea6:	461a      	mov	r2, r3
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	4293      	cmp	r3, r2
 800beac:	d808      	bhi.n	800bec0 <LCD_print_segment+0x1520>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800beae:	f107 0110 	add.w	r1, r7, #16
 800beb2:	f04f 33ff 	mov.w	r3, #4294967295
 800beb6:	2202      	movs	r2, #2
 800beb8:	484b      	ldr	r0, [pc, #300]	@ (800bfe8 <LCD_print_segment+0x1648>)
 800beba:	f00c fc20 	bl	80186fe <HAL_SPI_Transmit>
 800bebe:	e09d      	b.n	800bffc <LCD_print_segment+0x165c>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+48) && wiersz<=(ADRES->Y0_SET+50))))
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	7b1b      	ldrb	r3, [r3, #12]
 800bec4:	3309      	adds	r3, #9
 800bec6:	461a      	mov	r2, r3
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	4293      	cmp	r3, r2
 800becc:	d31d      	bcc.n	800bf0a <LCD_print_segment+0x156a>
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	7b1b      	ldrb	r3, [r3, #12]
 800bed2:	3317      	adds	r3, #23
 800bed4:	461a      	mov	r2, r3
 800bed6:	69fb      	ldr	r3, [r7, #28]
 800bed8:	4293      	cmp	r3, r2
 800beda:	d816      	bhi.n	800bf0a <LCD_print_segment+0x156a>
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	7b5b      	ldrb	r3, [r3, #13]
 800bee0:	3330      	adds	r3, #48	@ 0x30
 800bee2:	461a      	mov	r2, r3
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d30f      	bcc.n	800bf0a <LCD_print_segment+0x156a>
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	7b5b      	ldrb	r3, [r3, #13]
 800beee:	3332      	adds	r3, #50	@ 0x32
 800bef0:	461a      	mov	r2, r3
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d808      	bhi.n	800bf0a <LCD_print_segment+0x156a>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800bef8:	f107 0110 	add.w	r1, r7, #16
 800befc:	f04f 33ff 	mov.w	r3, #4294967295
 800bf00:	2202      	movs	r2, #2
 800bf02:	4839      	ldr	r0, [pc, #228]	@ (800bfe8 <LCD_print_segment+0x1648>)
 800bf04:	f00c fbfb 	bl	80186fe <HAL_SPI_Transmit>
 800bf08:	e078      	b.n	800bffc <LCD_print_segment+0x165c>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	7b1b      	ldrb	r3, [r3, #12]
 800bf0e:	3303      	adds	r3, #3
 800bf10:	461a      	mov	r2, r3
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d31d      	bcc.n	800bf54 <LCD_print_segment+0x15b4>
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	7b1b      	ldrb	r3, [r3, #12]
 800bf1c:	3306      	adds	r3, #6
 800bf1e:	461a      	mov	r2, r3
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d816      	bhi.n	800bf54 <LCD_print_segment+0x15b4>
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	7b5b      	ldrb	r3, [r3, #13]
 800bf2a:	331b      	adds	r3, #27
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d30f      	bcc.n	800bf54 <LCD_print_segment+0x15b4>
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	7b5b      	ldrb	r3, [r3, #13]
 800bf38:	332f      	adds	r3, #47	@ 0x2f
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d808      	bhi.n	800bf54 <LCD_print_segment+0x15b4>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800bf42:	f107 0110 	add.w	r1, r7, #16
 800bf46:	f04f 33ff 	mov.w	r3, #4294967295
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	4826      	ldr	r0, [pc, #152]	@ (800bfe8 <LCD_print_segment+0x1648>)
 800bf4e:	f00c fbd6 	bl	80186fe <HAL_SPI_Transmit>
 800bf52:	e053      	b.n	800bffc <LCD_print_segment+0x165c>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	7b1b      	ldrb	r3, [r3, #12]
 800bf58:	3303      	adds	r3, #3
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d31d      	bcc.n	800bf9e <LCD_print_segment+0x15fe>
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	7b1b      	ldrb	r3, [r3, #12]
 800bf66:	3306      	adds	r3, #6
 800bf68:	461a      	mov	r2, r3
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d816      	bhi.n	800bf9e <LCD_print_segment+0x15fe>
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	7b5b      	ldrb	r3, [r3, #13]
 800bf74:	3303      	adds	r3, #3
 800bf76:	461a      	mov	r2, r3
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d30f      	bcc.n	800bf9e <LCD_print_segment+0x15fe>
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	7b5b      	ldrb	r3, [r3, #13]
 800bf82:	3317      	adds	r3, #23
 800bf84:	461a      	mov	r2, r3
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d808      	bhi.n	800bf9e <LCD_print_segment+0x15fe>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800bf8c:	f107 0110 	add.w	r1, r7, #16
 800bf90:	f04f 33ff 	mov.w	r3, #4294967295
 800bf94:	2202      	movs	r2, #2
 800bf96:	4814      	ldr	r0, [pc, #80]	@ (800bfe8 <LCD_print_segment+0x1648>)
 800bf98:	f00c fbb1 	bl	80186fe <HAL_SPI_Transmit>
 800bf9c:	e02e      	b.n	800bffc <LCD_print_segment+0x165c>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+24) && wiersz<=(ADRES->Y0_SET+26))))
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	7b1b      	ldrb	r3, [r3, #12]
 800bfa2:	3309      	adds	r3, #9
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d31f      	bcc.n	800bfec <LCD_print_segment+0x164c>
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	7b1b      	ldrb	r3, [r3, #12]
 800bfb0:	3317      	adds	r3, #23
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d818      	bhi.n	800bfec <LCD_print_segment+0x164c>
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	7b5b      	ldrb	r3, [r3, #13]
 800bfbe:	3318      	adds	r3, #24
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d311      	bcc.n	800bfec <LCD_print_segment+0x164c>
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	7b5b      	ldrb	r3, [r3, #13]
 800bfcc:	331a      	adds	r3, #26
 800bfce:	461a      	mov	r2, r3
 800bfd0:	69bb      	ldr	r3, [r7, #24]
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d80a      	bhi.n	800bfec <LCD_print_segment+0x164c>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800bfd6:	f107 0110 	add.w	r1, r7, #16
 800bfda:	f04f 33ff 	mov.w	r3, #4294967295
 800bfde:	2202      	movs	r2, #2
 800bfe0:	4801      	ldr	r0, [pc, #4]	@ (800bfe8 <LCD_print_segment+0x1648>)
 800bfe2:	f00c fb8c 	bl	80186fe <HAL_SPI_Transmit>
 800bfe6:	e009      	b.n	800bffc <LCD_print_segment+0x165c>
 800bfe8:	200004a4 	.word	0x200004a4
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800bfec:	f107 010c 	add.w	r1, r7, #12
 800bff0:	f04f 33ff 	mov.w	r3, #4294967295
 800bff4:	2202      	movs	r2, #2
 800bff6:	4891      	ldr	r0, [pc, #580]	@ (800c23c <LCD_print_segment+0x189c>)
 800bff8:	f00c fb81 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	3301      	adds	r3, #1
 800c000:	61fb      	str	r3, [r7, #28]
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	7b9b      	ldrb	r3, [r3, #14]
 800c006:	3301      	adds	r3, #1
 800c008:	461a      	mov	r2, r3
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	4293      	cmp	r3, r2
 800c00e:	f4ff aee9 	bcc.w	800bde4 <LCD_print_segment+0x1444>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	3301      	adds	r3, #1
 800c016:	61bb      	str	r3, [r7, #24]
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	7bdb      	ldrb	r3, [r3, #15]
 800c01c:	461a      	mov	r2, r3
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	4293      	cmp	r3, r2
 800c022:	f67f aedb 	bls.w	800bddc <LCD_print_segment+0x143c>
				}
			}
		}
		break;
 800c026:	e12a      	b.n	800c27e <LCD_print_segment+0x18de>
		case 9:
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	7b5b      	ldrb	r3, [r3, #13]
 800c02c:	61bb      	str	r3, [r7, #24]
 800c02e:	e11d      	b.n	800c26c <LCD_print_segment+0x18cc>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	7b1b      	ldrb	r3, [r3, #12]
 800c034:	61fb      	str	r3, [r7, #28]
 800c036:	e10e      	b.n	800c256 <LCD_print_segment+0x18b6>
			{
				if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+0) && wiersz<=(ADRES->Y0_SET+2))))
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	7b1b      	ldrb	r3, [r3, #12]
 800c03c:	3309      	adds	r3, #9
 800c03e:	461a      	mov	r2, r3
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	4293      	cmp	r3, r2
 800c044:	d31c      	bcc.n	800c080 <LCD_print_segment+0x16e0>
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	7b1b      	ldrb	r3, [r3, #12]
 800c04a:	3317      	adds	r3, #23
 800c04c:	461a      	mov	r2, r3
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	4293      	cmp	r3, r2
 800c052:	d815      	bhi.n	800c080 <LCD_print_segment+0x16e0>
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	7b5b      	ldrb	r3, [r3, #13]
 800c058:	461a      	mov	r2, r3
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d30f      	bcc.n	800c080 <LCD_print_segment+0x16e0>
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	7b5b      	ldrb	r3, [r3, #13]
 800c064:	3302      	adds	r3, #2
 800c066:	461a      	mov	r2, r3
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d808      	bhi.n	800c080 <LCD_print_segment+0x16e0>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800c06e:	f107 0110 	add.w	r1, r7, #16
 800c072:	f04f 33ff 	mov.w	r3, #4294967295
 800c076:	2202      	movs	r2, #2
 800c078:	4870      	ldr	r0, [pc, #448]	@ (800c23c <LCD_print_segment+0x189c>)
 800c07a:	f00c fb40 	bl	80186fe <HAL_SPI_Transmit>
 800c07e:	e0e7      	b.n	800c250 <LCD_print_segment+0x18b0>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	7b1b      	ldrb	r3, [r3, #12]
 800c084:	331a      	adds	r3, #26
 800c086:	461a      	mov	r2, r3
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d31d      	bcc.n	800c0ca <LCD_print_segment+0x172a>
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	7b1b      	ldrb	r3, [r3, #12]
 800c092:	331d      	adds	r3, #29
 800c094:	461a      	mov	r2, r3
 800c096:	69fb      	ldr	r3, [r7, #28]
 800c098:	4293      	cmp	r3, r2
 800c09a:	d816      	bhi.n	800c0ca <LCD_print_segment+0x172a>
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	7b5b      	ldrb	r3, [r3, #13]
 800c0a0:	3303      	adds	r3, #3
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	69bb      	ldr	r3, [r7, #24]
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d30f      	bcc.n	800c0ca <LCD_print_segment+0x172a>
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	7b5b      	ldrb	r3, [r3, #13]
 800c0ae:	3317      	adds	r3, #23
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d808      	bhi.n	800c0ca <LCD_print_segment+0x172a>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800c0b8:	f107 0110 	add.w	r1, r7, #16
 800c0bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c0c0:	2202      	movs	r2, #2
 800c0c2:	485e      	ldr	r0, [pc, #376]	@ (800c23c <LCD_print_segment+0x189c>)
 800c0c4:	f00c fb1b 	bl	80186fe <HAL_SPI_Transmit>
 800c0c8:	e0c2      	b.n	800c250 <LCD_print_segment+0x18b0>
				}
				else if((kolumna>=(ADRES->X0_SET+26) && kolumna<=(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	7b1b      	ldrb	r3, [r3, #12]
 800c0ce:	331a      	adds	r3, #26
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d31d      	bcc.n	800c114 <LCD_print_segment+0x1774>
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	7b1b      	ldrb	r3, [r3, #12]
 800c0dc:	331d      	adds	r3, #29
 800c0de:	461a      	mov	r2, r3
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d816      	bhi.n	800c114 <LCD_print_segment+0x1774>
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	7b5b      	ldrb	r3, [r3, #13]
 800c0ea:	331b      	adds	r3, #27
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d30f      	bcc.n	800c114 <LCD_print_segment+0x1774>
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	7b5b      	ldrb	r3, [r3, #13]
 800c0f8:	332f      	adds	r3, #47	@ 0x2f
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d808      	bhi.n	800c114 <LCD_print_segment+0x1774>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800c102:	f107 0110 	add.w	r1, r7, #16
 800c106:	f04f 33ff 	mov.w	r3, #4294967295
 800c10a:	2202      	movs	r2, #2
 800c10c:	484b      	ldr	r0, [pc, #300]	@ (800c23c <LCD_print_segment+0x189c>)
 800c10e:	f00c faf6 	bl	80186fe <HAL_SPI_Transmit>
 800c112:	e09d      	b.n	800c250 <LCD_print_segment+0x18b0>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+48) && wiersz<=(ADRES->Y0_SET+50))))
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	7b1b      	ldrb	r3, [r3, #12]
 800c118:	3309      	adds	r3, #9
 800c11a:	461a      	mov	r2, r3
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	4293      	cmp	r3, r2
 800c120:	d31d      	bcc.n	800c15e <LCD_print_segment+0x17be>
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	7b1b      	ldrb	r3, [r3, #12]
 800c126:	3317      	adds	r3, #23
 800c128:	461a      	mov	r2, r3
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d816      	bhi.n	800c15e <LCD_print_segment+0x17be>
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	7b5b      	ldrb	r3, [r3, #13]
 800c134:	3330      	adds	r3, #48	@ 0x30
 800c136:	461a      	mov	r2, r3
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d30f      	bcc.n	800c15e <LCD_print_segment+0x17be>
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	7b5b      	ldrb	r3, [r3, #13]
 800c142:	3332      	adds	r3, #50	@ 0x32
 800c144:	461a      	mov	r2, r3
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	4293      	cmp	r3, r2
 800c14a:	d808      	bhi.n	800c15e <LCD_print_segment+0x17be>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800c14c:	f107 0110 	add.w	r1, r7, #16
 800c150:	f04f 33ff 	mov.w	r3, #4294967295
 800c154:	2202      	movs	r2, #2
 800c156:	4839      	ldr	r0, [pc, #228]	@ (800c23c <LCD_print_segment+0x189c>)
 800c158:	f00c fad1 	bl	80186fe <HAL_SPI_Transmit>
 800c15c:	e078      	b.n	800c250 <LCD_print_segment+0x18b0>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+47))))
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	7b1b      	ldrb	r3, [r3, #12]
 800c162:	3303      	adds	r3, #3
 800c164:	461a      	mov	r2, r3
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	4293      	cmp	r3, r2
 800c16a:	d31d      	bcc.n	800c1a8 <LCD_print_segment+0x1808>
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	7b1b      	ldrb	r3, [r3, #12]
 800c170:	3306      	adds	r3, #6
 800c172:	461a      	mov	r2, r3
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	4293      	cmp	r3, r2
 800c178:	d816      	bhi.n	800c1a8 <LCD_print_segment+0x1808>
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	7b5b      	ldrb	r3, [r3, #13]
 800c17e:	331b      	adds	r3, #27
 800c180:	461a      	mov	r2, r3
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	4293      	cmp	r3, r2
 800c186:	d30f      	bcc.n	800c1a8 <LCD_print_segment+0x1808>
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	7b5b      	ldrb	r3, [r3, #13]
 800c18c:	332f      	adds	r3, #47	@ 0x2f
 800c18e:	461a      	mov	r2, r3
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	4293      	cmp	r3, r2
 800c194:	d808      	bhi.n	800c1a8 <LCD_print_segment+0x1808>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800c196:	f107 0114 	add.w	r1, r7, #20
 800c19a:	f04f 33ff 	mov.w	r3, #4294967295
 800c19e:	2202      	movs	r2, #2
 800c1a0:	4826      	ldr	r0, [pc, #152]	@ (800c23c <LCD_print_segment+0x189c>)
 800c1a2:	f00c faac 	bl	80186fe <HAL_SPI_Transmit>
 800c1a6:	e053      	b.n	800c250 <LCD_print_segment+0x18b0>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+6)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+23))))
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	7b1b      	ldrb	r3, [r3, #12]
 800c1ac:	3303      	adds	r3, #3
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d31d      	bcc.n	800c1f2 <LCD_print_segment+0x1852>
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	7b1b      	ldrb	r3, [r3, #12]
 800c1ba:	3306      	adds	r3, #6
 800c1bc:	461a      	mov	r2, r3
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d816      	bhi.n	800c1f2 <LCD_print_segment+0x1852>
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	7b5b      	ldrb	r3, [r3, #13]
 800c1c8:	3303      	adds	r3, #3
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d30f      	bcc.n	800c1f2 <LCD_print_segment+0x1852>
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	7b5b      	ldrb	r3, [r3, #13]
 800c1d6:	3317      	adds	r3, #23
 800c1d8:	461a      	mov	r2, r3
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d808      	bhi.n	800c1f2 <LCD_print_segment+0x1852>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800c1e0:	f107 0110 	add.w	r1, r7, #16
 800c1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1e8:	2202      	movs	r2, #2
 800c1ea:	4814      	ldr	r0, [pc, #80]	@ (800c23c <LCD_print_segment+0x189c>)
 800c1ec:	f00c fa87 	bl	80186fe <HAL_SPI_Transmit>
 800c1f0:	e02e      	b.n	800c250 <LCD_print_segment+0x18b0>
				}
				else if((kolumna>=(ADRES->X0_SET+9) && kolumna<=(ADRES->X0_SET+23)) && ((wiersz>=(ADRES->Y0_SET+24) && wiersz<=(ADRES->Y0_SET+26))))
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	7b1b      	ldrb	r3, [r3, #12]
 800c1f6:	3309      	adds	r3, #9
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d31f      	bcc.n	800c240 <LCD_print_segment+0x18a0>
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	7b1b      	ldrb	r3, [r3, #12]
 800c204:	3317      	adds	r3, #23
 800c206:	461a      	mov	r2, r3
 800c208:	69fb      	ldr	r3, [r7, #28]
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d818      	bhi.n	800c240 <LCD_print_segment+0x18a0>
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	7b5b      	ldrb	r3, [r3, #13]
 800c212:	3318      	adds	r3, #24
 800c214:	461a      	mov	r2, r3
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	4293      	cmp	r3, r2
 800c21a:	d311      	bcc.n	800c240 <LCD_print_segment+0x18a0>
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	7b5b      	ldrb	r3, [r3, #13]
 800c220:	331a      	adds	r3, #26
 800c222:	461a      	mov	r2, r3
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	4293      	cmp	r3, r2
 800c228:	d80a      	bhi.n	800c240 <LCD_print_segment+0x18a0>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800c22a:	f107 0110 	add.w	r1, r7, #16
 800c22e:	f04f 33ff 	mov.w	r3, #4294967295
 800c232:	2202      	movs	r2, #2
 800c234:	4801      	ldr	r0, [pc, #4]	@ (800c23c <LCD_print_segment+0x189c>)
 800c236:	f00c fa62 	bl	80186fe <HAL_SPI_Transmit>
 800c23a:	e009      	b.n	800c250 <LCD_print_segment+0x18b0>
 800c23c:	200004a4 	.word	0x200004a4
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800c240:	f107 010c 	add.w	r1, r7, #12
 800c244:	f04f 33ff 	mov.w	r3, #4294967295
 800c248:	2202      	movs	r2, #2
 800c24a:	4810      	ldr	r0, [pc, #64]	@ (800c28c <LCD_print_segment+0x18ec>)
 800c24c:	f00c fa57 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800c250:	69fb      	ldr	r3, [r7, #28]
 800c252:	3301      	adds	r3, #1
 800c254:	61fb      	str	r3, [r7, #28]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	7b9b      	ldrb	r3, [r3, #14]
 800c25a:	3301      	adds	r3, #1
 800c25c:	461a      	mov	r2, r3
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	4293      	cmp	r3, r2
 800c262:	f4ff aee9 	bcc.w	800c038 <LCD_print_segment+0x1698>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	3301      	adds	r3, #1
 800c26a:	61bb      	str	r3, [r7, #24]
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	7bdb      	ldrb	r3, [r3, #15]
 800c270:	461a      	mov	r2, r3
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	4293      	cmp	r3, r2
 800c276:	f67f aedb 	bls.w	800c030 <LCD_print_segment+0x1690>
				}
			}
		}
		break;
 800c27a:	e000      	b.n	800c27e <LCD_print_segment+0x18de>
		default: break;
 800c27c:	bf00      	nop
	}
	CS_ON();
 800c27e:	f7f4 fed1 	bl	8001024 <CS_ON>
}
 800c282:	bf00      	nop
 800c284:	3720      	adds	r7, #32
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	200004a4 	.word	0x200004a4

0800c290 <LCD_print_tank>:

void LCD_print_tank(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES,float num)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b08a      	sub	sp, #40	@ 0x28
 800c294:	af00      	add	r7, sp, #0
 800c296:	60bb      	str	r3, [r7, #8]
 800c298:	ed87 0a01 	vstr	s0, [r7, #4]
 800c29c:	4603      	mov	r3, r0
 800c29e:	73fb      	strb	r3, [r7, #15]
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	73bb      	strb	r3, [r7, #14]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	737b      	strb	r3, [r7, #13]
	unsigned int kolumna=0,wiersz=0;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	623b      	str	r3, [r7, #32]
	ADRES->RM=0;
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	223f      	movs	r2, #63	@ 0x3f
 800c2ba:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	221f      	movs	r2, #31
 800c2c0:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	7cda      	ldrb	r2, [r3, #19]
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	7c1b      	ldrb	r3, [r3, #16]
 800c2d6:	4053      	eors	r3, r2
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	00db      	lsls	r3, r3, #3
 800c2dc:	b25a      	sxtb	r2, r3
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	7c5b      	ldrb	r3, [r3, #17]
 800c2e2:	b25b      	sxtb	r3, r3
 800c2e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c2e8:	b25b      	sxtb	r3, r3
 800c2ea:	4053      	eors	r3, r2
 800c2ec:	b25b      	sxtb	r3, r3
 800c2ee:	b2da      	uxtb	r2, r3
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	7d1b      	ldrb	r3, [r3, #20]
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	7c5b      	ldrb	r3, [r3, #17]
 800c2fe:	f003 0307 	and.w	r3, r3, #7
 800c302:	4053      	eors	r3, r2
 800c304:	015b      	lsls	r3, r3, #5
 800c306:	b25a      	sxtb	r2, r3
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	7c9b      	ldrb	r3, [r3, #18]
 800c30c:	b25b      	sxtb	r3, r3
 800c30e:	4053      	eors	r3, r2
 800c310:	b25b      	sxtb	r3, r3
 800c312:	b2da      	uxtb	r2, r3
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	751a      	strb	r2, [r3, #20]
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	7cdb      	ldrb	r3, [r3, #19]
 800c31c:	773b      	strb	r3, [r7, #28]
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	7d1b      	ldrb	r3, [r3, #20]
 800c322:	777b      	strb	r3, [r7, #29]
	ADRES->RM=31;
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	221f      	movs	r2, #31
 800c328:	741a      	strb	r2, [r3, #16]
	ADRES->GM=0;
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	2200      	movs	r2, #0
 800c32e:	745a      	strb	r2, [r3, #17]
	ADRES->BM=0;
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	2200      	movs	r2, #0
 800c334:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	2200      	movs	r2, #0
 800c33a:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2200      	movs	r2, #0
 800c340:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	7cda      	ldrb	r2, [r3, #19]
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	7c1b      	ldrb	r3, [r3, #16]
 800c34a:	4053      	eors	r3, r2
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	00db      	lsls	r3, r3, #3
 800c350:	b25a      	sxtb	r2, r3
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	7c5b      	ldrb	r3, [r3, #17]
 800c356:	b25b      	sxtb	r3, r3
 800c358:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c35c:	b25b      	sxtb	r3, r3
 800c35e:	4053      	eors	r3, r2
 800c360:	b25b      	sxtb	r3, r3
 800c362:	b2da      	uxtb	r2, r3
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	7d1b      	ldrb	r3, [r3, #20]
 800c36c:	461a      	mov	r2, r3
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	7c5b      	ldrb	r3, [r3, #17]
 800c372:	f003 0307 	and.w	r3, r3, #7
 800c376:	4053      	eors	r3, r2
 800c378:	015b      	lsls	r3, r3, #5
 800c37a:	b25a      	sxtb	r2, r3
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	7c9b      	ldrb	r3, [r3, #18]
 800c380:	b25b      	sxtb	r3, r3
 800c382:	4053      	eors	r3, r2
 800c384:	b25b      	sxtb	r3, r3
 800c386:	b2da      	uxtb	r2, r3
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	751a      	strb	r2, [r3, #20]
	uint8_t Mword2[]={ADRES->Mbyte,ADRES->Mbyte2};
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	7cdb      	ldrb	r3, [r3, #19]
 800c390:	763b      	strb	r3, [r7, #24]
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	7d1b      	ldrb	r3, [r3, #20]
 800c396:	767b      	strb	r3, [r7, #25]
	ADRES->RM=12;
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	220c      	movs	r2, #12
 800c39c:	741a      	strb	r2, [r3, #16]
	ADRES->GM=18;
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	2212      	movs	r2, #18
 800c3a2:	745a      	strb	r2, [r3, #17]
	ADRES->BM=0;
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	7cda      	ldrb	r2, [r3, #19]
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	7c1b      	ldrb	r3, [r3, #16]
 800c3be:	4053      	eors	r3, r2
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	00db      	lsls	r3, r3, #3
 800c3c4:	b25a      	sxtb	r2, r3
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	7c5b      	ldrb	r3, [r3, #17]
 800c3ca:	b25b      	sxtb	r3, r3
 800c3cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c3d0:	b25b      	sxtb	r3, r3
 800c3d2:	4053      	eors	r3, r2
 800c3d4:	b25b      	sxtb	r3, r3
 800c3d6:	b2da      	uxtb	r2, r3
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	7d1b      	ldrb	r3, [r3, #20]
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	7c5b      	ldrb	r3, [r3, #17]
 800c3e6:	f003 0307 	and.w	r3, r3, #7
 800c3ea:	4053      	eors	r3, r2
 800c3ec:	015b      	lsls	r3, r3, #5
 800c3ee:	b25a      	sxtb	r2, r3
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	7c9b      	ldrb	r3, [r3, #18]
 800c3f4:	b25b      	sxtb	r3, r3
 800c3f6:	4053      	eors	r3, r2
 800c3f8:	b25b      	sxtb	r3, r3
 800c3fa:	b2da      	uxtb	r2, r3
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	751a      	strb	r2, [r3, #20]
	uint8_t Mword3[]={ADRES->Mbyte,ADRES->Mbyte2};
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	7cdb      	ldrb	r3, [r3, #19]
 800c404:	753b      	strb	r3, [r7, #20]
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	7d1b      	ldrb	r3, [r3, #20]
 800c40a:	757b      	strb	r3, [r7, #21]
	uint8_t fbyte=0x00;
 800c40c:	2300      	movs	r3, #0
 800c40e:	77fb      	strb	r3, [r7, #31]
	uint8_t sbyte=0x00;
 800c410:	2300      	movs	r3, #0
 800c412:	77bb      	strb	r3, [r7, #30]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 800c414:	7ffa      	ldrb	r2, [r7, #31]
 800c416:	7bfb      	ldrb	r3, [r7, #15]
 800c418:	4053      	eors	r3, r2
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	00db      	lsls	r3, r3, #3
 800c41e:	b25a      	sxtb	r2, r3
 800c420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c424:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c428:	b25b      	sxtb	r3, r3
 800c42a:	4053      	eors	r3, r2
 800c42c:	b25b      	sxtb	r3, r3
 800c42e:	77fb      	strb	r3, [r7, #31]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 800c430:	7fba      	ldrb	r2, [r7, #30]
 800c432:	7bbb      	ldrb	r3, [r7, #14]
 800c434:	f003 0307 	and.w	r3, r3, #7
 800c438:	4053      	eors	r3, r2
 800c43a:	015b      	lsls	r3, r3, #5
 800c43c:	b25a      	sxtb	r2, r3
 800c43e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c442:	4053      	eors	r3, r2
 800c444:	b25b      	sxtb	r3, r3
 800c446:	77bb      	strb	r3, [r7, #30]
	uint8_t word[]={fbyte,sbyte};
 800c448:	7ffb      	ldrb	r3, [r7, #31]
 800c44a:	743b      	strb	r3, [r7, #16]
 800c44c:	7fbb      	ldrb	r3, [r7, #30]
 800c44e:	747b      	strb	r3, [r7, #17]
	DC_ON();
 800c450:	f7f4 fdfe 	bl	8001050 <DC_ON>
	CS_OFF();
 800c454:	f7f4 fdf1 	bl	800103a <CS_OFF>
	if(num<0.1)
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f7f4 f943 	bl	80006e4 <__aeabi_f2d>
 800c45e:	a3b6      	add	r3, pc, #728	@ (adr r3, 800c738 <LCD_print_tank+0x4a8>)
 800c460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c464:	f7f4 f9f6 	bl	8000854 <__aeabi_dcmplt>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	f000 80e9 	beq.w	800c642 <LCD_print_tank+0x3b2>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	7b5b      	ldrb	r3, [r3, #13]
 800c474:	623b      	str	r3, [r7, #32]
 800c476:	e0db      	b.n	800c630 <LCD_print_tank+0x3a0>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	7b1b      	ldrb	r3, [r3, #12]
 800c47c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c47e:	e0cc      	b.n	800c61a <LCD_print_tank+0x38a>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	7b1b      	ldrb	r3, [r3, #12]
 800c484:	3303      	adds	r3, #3
 800c486:	461a      	mov	r2, r3
 800c488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d316      	bcc.n	800c4bc <LCD_print_tank+0x22c>
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	7b1b      	ldrb	r3, [r3, #12]
 800c492:	331d      	adds	r3, #29
 800c494:	461a      	mov	r2, r3
 800c496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c498:	4293      	cmp	r3, r2
 800c49a:	d80f      	bhi.n	800c4bc <LCD_print_tank+0x22c>
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	7b5b      	ldrb	r3, [r3, #13]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	6a3b      	ldr	r3, [r7, #32]
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d108      	bne.n	800c4bc <LCD_print_tank+0x22c>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800c4aa:	f107 011c 	add.w	r1, r7, #28
 800c4ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c4b2:	2202      	movs	r2, #2
 800c4b4:	48a4      	ldr	r0, [pc, #656]	@ (800c748 <LCD_print_tank+0x4b8>)
 800c4b6:	f00c f922 	bl	80186fe <HAL_SPI_Transmit>
 800c4ba:	e0ab      	b.n	800c614 <LCD_print_tank+0x384>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	7b1b      	ldrb	r3, [r3, #12]
 800c4c0:	3303      	adds	r3, #3
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d316      	bcc.n	800c4f8 <LCD_print_tank+0x268>
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	7b1b      	ldrb	r3, [r3, #12]
 800c4ce:	331d      	adds	r3, #29
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d80f      	bhi.n	800c4f8 <LCD_print_tank+0x268>
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	7b5b      	ldrb	r3, [r3, #13]
 800c4dc:	3342      	adds	r3, #66	@ 0x42
 800c4de:	461a      	mov	r2, r3
 800c4e0:	6a3b      	ldr	r3, [r7, #32]
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d108      	bne.n	800c4f8 <LCD_print_tank+0x268>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800c4e6:	f107 011c 	add.w	r1, r7, #28
 800c4ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ee:	2202      	movs	r2, #2
 800c4f0:	4895      	ldr	r0, [pc, #596]	@ (800c748 <LCD_print_tank+0x4b8>)
 800c4f2:	f00c f904 	bl	80186fe <HAL_SPI_Transmit>
 800c4f6:	e08d      	b.n	800c614 <LCD_print_tank+0x384>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	7b1b      	ldrb	r3, [r3, #12]
 800c4fc:	331d      	adds	r3, #29
 800c4fe:	461a      	mov	r2, r3
 800c500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c502:	4293      	cmp	r3, r2
 800c504:	d116      	bne.n	800c534 <LCD_print_tank+0x2a4>
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	7b5b      	ldrb	r3, [r3, #13]
 800c50a:	3301      	adds	r3, #1
 800c50c:	461a      	mov	r2, r3
 800c50e:	6a3b      	ldr	r3, [r7, #32]
 800c510:	4293      	cmp	r3, r2
 800c512:	d30f      	bcc.n	800c534 <LCD_print_tank+0x2a4>
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	7b5b      	ldrb	r3, [r3, #13]
 800c518:	3342      	adds	r3, #66	@ 0x42
 800c51a:	461a      	mov	r2, r3
 800c51c:	6a3b      	ldr	r3, [r7, #32]
 800c51e:	4293      	cmp	r3, r2
 800c520:	d808      	bhi.n	800c534 <LCD_print_tank+0x2a4>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800c522:	f107 011c 	add.w	r1, r7, #28
 800c526:	f04f 33ff 	mov.w	r3, #4294967295
 800c52a:	2202      	movs	r2, #2
 800c52c:	4886      	ldr	r0, [pc, #536]	@ (800c748 <LCD_print_tank+0x4b8>)
 800c52e:	f00c f8e6 	bl	80186fe <HAL_SPI_Transmit>
 800c532:	e06f      	b.n	800c614 <LCD_print_tank+0x384>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	7b1b      	ldrb	r3, [r3, #12]
 800c538:	3303      	adds	r3, #3
 800c53a:	461a      	mov	r2, r3
 800c53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c53e:	4293      	cmp	r3, r2
 800c540:	d116      	bne.n	800c570 <LCD_print_tank+0x2e0>
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	7b5b      	ldrb	r3, [r3, #13]
 800c546:	3301      	adds	r3, #1
 800c548:	461a      	mov	r2, r3
 800c54a:	6a3b      	ldr	r3, [r7, #32]
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d30f      	bcc.n	800c570 <LCD_print_tank+0x2e0>
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	7b5b      	ldrb	r3, [r3, #13]
 800c554:	3342      	adds	r3, #66	@ 0x42
 800c556:	461a      	mov	r2, r3
 800c558:	6a3b      	ldr	r3, [r7, #32]
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d808      	bhi.n	800c570 <LCD_print_tank+0x2e0>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800c55e:	f107 011c 	add.w	r1, r7, #28
 800c562:	f04f 33ff 	mov.w	r3, #4294967295
 800c566:	2202      	movs	r2, #2
 800c568:	4877      	ldr	r0, [pc, #476]	@ (800c748 <LCD_print_tank+0x4b8>)
 800c56a:	f00c f8c8 	bl	80186fe <HAL_SPI_Transmit>
 800c56e:	e051      	b.n	800c614 <LCD_print_tank+0x384>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+65) && wiersz<=(ADRES->Y0_SET+66))))
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	7b1b      	ldrb	r3, [r3, #12]
 800c574:	3304      	adds	r3, #4
 800c576:	461a      	mov	r2, r3
 800c578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d31d      	bcc.n	800c5ba <LCD_print_tank+0x32a>
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	7b1b      	ldrb	r3, [r3, #12]
 800c582:	331c      	adds	r3, #28
 800c584:	461a      	mov	r2, r3
 800c586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c588:	4293      	cmp	r3, r2
 800c58a:	d816      	bhi.n	800c5ba <LCD_print_tank+0x32a>
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	7b5b      	ldrb	r3, [r3, #13]
 800c590:	3341      	adds	r3, #65	@ 0x41
 800c592:	461a      	mov	r2, r3
 800c594:	6a3b      	ldr	r3, [r7, #32]
 800c596:	4293      	cmp	r3, r2
 800c598:	d30f      	bcc.n	800c5ba <LCD_print_tank+0x32a>
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	7b5b      	ldrb	r3, [r3, #13]
 800c59e:	3342      	adds	r3, #66	@ 0x42
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	6a3b      	ldr	r3, [r7, #32]
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d808      	bhi.n	800c5ba <LCD_print_tank+0x32a>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800c5a8:	f107 0114 	add.w	r1, r7, #20
 800c5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b0:	2202      	movs	r2, #2
 800c5b2:	4865      	ldr	r0, [pc, #404]	@ (800c748 <LCD_print_tank+0x4b8>)
 800c5b4:	f00c f8a3 	bl	80186fe <HAL_SPI_Transmit>
 800c5b8:	e02c      	b.n	800c614 <LCD_print_tank+0x384>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+64))))
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	7b1b      	ldrb	r3, [r3, #12]
 800c5be:	3304      	adds	r3, #4
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d31d      	bcc.n	800c604 <LCD_print_tank+0x374>
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	7b1b      	ldrb	r3, [r3, #12]
 800c5cc:	331c      	adds	r3, #28
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d816      	bhi.n	800c604 <LCD_print_tank+0x374>
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	7b5b      	ldrb	r3, [r3, #13]
 800c5da:	3302      	adds	r3, #2
 800c5dc:	461a      	mov	r2, r3
 800c5de:	6a3b      	ldr	r3, [r7, #32]
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d30f      	bcc.n	800c604 <LCD_print_tank+0x374>
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	7b5b      	ldrb	r3, [r3, #13]
 800c5e8:	3340      	adds	r3, #64	@ 0x40
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	6a3b      	ldr	r3, [r7, #32]
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d808      	bhi.n	800c604 <LCD_print_tank+0x374>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800c5f2:	f107 0118 	add.w	r1, r7, #24
 800c5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5fa:	2202      	movs	r2, #2
 800c5fc:	4852      	ldr	r0, [pc, #328]	@ (800c748 <LCD_print_tank+0x4b8>)
 800c5fe:	f00c f87e 	bl	80186fe <HAL_SPI_Transmit>
 800c602:	e007      	b.n	800c614 <LCD_print_tank+0x384>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800c604:	f107 0110 	add.w	r1, r7, #16
 800c608:	f04f 33ff 	mov.w	r3, #4294967295
 800c60c:	2202      	movs	r2, #2
 800c60e:	484e      	ldr	r0, [pc, #312]	@ (800c748 <LCD_print_tank+0x4b8>)
 800c610:	f00c f875 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800c614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c616:	3301      	adds	r3, #1
 800c618:	627b      	str	r3, [r7, #36]	@ 0x24
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	7b9b      	ldrb	r3, [r3, #14]
 800c61e:	3301      	adds	r3, #1
 800c620:	461a      	mov	r2, r3
 800c622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c624:	4293      	cmp	r3, r2
 800c626:	f4ff af2b 	bcc.w	800c480 <LCD_print_tank+0x1f0>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800c62a:	6a3b      	ldr	r3, [r7, #32]
 800c62c:	3301      	adds	r3, #1
 800c62e:	623b      	str	r3, [r7, #32]
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	7bdb      	ldrb	r3, [r3, #15]
 800c634:	461a      	mov	r2, r3
 800c636:	6a3b      	ldr	r3, [r7, #32]
 800c638:	4293      	cmp	r3, r2
 800c63a:	f67f af1d 	bls.w	800c478 <LCD_print_tank+0x1e8>
 800c63e:	f004 b90c 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=0.1 && num<0.2)
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f7f4 f84e 	bl	80006e4 <__aeabi_f2d>
 800c648:	a33b      	add	r3, pc, #236	@ (adr r3, 800c738 <LCD_print_tank+0x4a8>)
 800c64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64e:	f7f4 f915 	bl	800087c <__aeabi_dcmpge>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	f000 8100 	beq.w	800c85a <LCD_print_tank+0x5ca>
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f7f4 f842 	bl	80006e4 <__aeabi_f2d>
 800c660:	a337      	add	r3, pc, #220	@ (adr r3, 800c740 <LCD_print_tank+0x4b0>)
 800c662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c666:	f7f4 f8f5 	bl	8000854 <__aeabi_dcmplt>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f000 80f4 	beq.w	800c85a <LCD_print_tank+0x5ca>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	7b5b      	ldrb	r3, [r3, #13]
 800c676:	623b      	str	r3, [r7, #32]
 800c678:	e0e6      	b.n	800c848 <LCD_print_tank+0x5b8>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	7b1b      	ldrb	r3, [r3, #12]
 800c67e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c680:	e0d7      	b.n	800c832 <LCD_print_tank+0x5a2>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	7b1b      	ldrb	r3, [r3, #12]
 800c686:	3303      	adds	r3, #3
 800c688:	461a      	mov	r2, r3
 800c68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d316      	bcc.n	800c6be <LCD_print_tank+0x42e>
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	7b1b      	ldrb	r3, [r3, #12]
 800c694:	331d      	adds	r3, #29
 800c696:	461a      	mov	r2, r3
 800c698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d80f      	bhi.n	800c6be <LCD_print_tank+0x42e>
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	7b5b      	ldrb	r3, [r3, #13]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	6a3b      	ldr	r3, [r7, #32]
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d108      	bne.n	800c6be <LCD_print_tank+0x42e>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800c6ac:	f107 011c 	add.w	r1, r7, #28
 800c6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b4:	2202      	movs	r2, #2
 800c6b6:	4824      	ldr	r0, [pc, #144]	@ (800c748 <LCD_print_tank+0x4b8>)
 800c6b8:	f00c f821 	bl	80186fe <HAL_SPI_Transmit>
 800c6bc:	e0b6      	b.n	800c82c <LCD_print_tank+0x59c>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	7b1b      	ldrb	r3, [r3, #12]
 800c6c2:	3303      	adds	r3, #3
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d316      	bcc.n	800c6fa <LCD_print_tank+0x46a>
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	7b1b      	ldrb	r3, [r3, #12]
 800c6d0:	331d      	adds	r3, #29
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d80f      	bhi.n	800c6fa <LCD_print_tank+0x46a>
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	7b5b      	ldrb	r3, [r3, #13]
 800c6de:	3342      	adds	r3, #66	@ 0x42
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	6a3b      	ldr	r3, [r7, #32]
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d108      	bne.n	800c6fa <LCD_print_tank+0x46a>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800c6e8:	f107 011c 	add.w	r1, r7, #28
 800c6ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c6f0:	2202      	movs	r2, #2
 800c6f2:	4815      	ldr	r0, [pc, #84]	@ (800c748 <LCD_print_tank+0x4b8>)
 800c6f4:	f00c f803 	bl	80186fe <HAL_SPI_Transmit>
 800c6f8:	e098      	b.n	800c82c <LCD_print_tank+0x59c>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	7b1b      	ldrb	r3, [r3, #12]
 800c6fe:	331d      	adds	r3, #29
 800c700:	461a      	mov	r2, r3
 800c702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c704:	4293      	cmp	r3, r2
 800c706:	d121      	bne.n	800c74c <LCD_print_tank+0x4bc>
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	7b5b      	ldrb	r3, [r3, #13]
 800c70c:	3301      	adds	r3, #1
 800c70e:	461a      	mov	r2, r3
 800c710:	6a3b      	ldr	r3, [r7, #32]
 800c712:	4293      	cmp	r3, r2
 800c714:	d31a      	bcc.n	800c74c <LCD_print_tank+0x4bc>
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	7b5b      	ldrb	r3, [r3, #13]
 800c71a:	3342      	adds	r3, #66	@ 0x42
 800c71c:	461a      	mov	r2, r3
 800c71e:	6a3b      	ldr	r3, [r7, #32]
 800c720:	4293      	cmp	r3, r2
 800c722:	d813      	bhi.n	800c74c <LCD_print_tank+0x4bc>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800c724:	f107 011c 	add.w	r1, r7, #28
 800c728:	f04f 33ff 	mov.w	r3, #4294967295
 800c72c:	2202      	movs	r2, #2
 800c72e:	4806      	ldr	r0, [pc, #24]	@ (800c748 <LCD_print_tank+0x4b8>)
 800c730:	f00b ffe5 	bl	80186fe <HAL_SPI_Transmit>
 800c734:	e07a      	b.n	800c82c <LCD_print_tank+0x59c>
 800c736:	bf00      	nop
 800c738:	9999999a 	.word	0x9999999a
 800c73c:	3fb99999 	.word	0x3fb99999
 800c740:	9999999a 	.word	0x9999999a
 800c744:	3fc99999 	.word	0x3fc99999
 800c748:	200004a4 	.word	0x200004a4
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	7b1b      	ldrb	r3, [r3, #12]
 800c750:	3303      	adds	r3, #3
 800c752:	461a      	mov	r2, r3
 800c754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c756:	4293      	cmp	r3, r2
 800c758:	d116      	bne.n	800c788 <LCD_print_tank+0x4f8>
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	7b5b      	ldrb	r3, [r3, #13]
 800c75e:	3301      	adds	r3, #1
 800c760:	461a      	mov	r2, r3
 800c762:	6a3b      	ldr	r3, [r7, #32]
 800c764:	4293      	cmp	r3, r2
 800c766:	d30f      	bcc.n	800c788 <LCD_print_tank+0x4f8>
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	7b5b      	ldrb	r3, [r3, #13]
 800c76c:	3342      	adds	r3, #66	@ 0x42
 800c76e:	461a      	mov	r2, r3
 800c770:	6a3b      	ldr	r3, [r7, #32]
 800c772:	4293      	cmp	r3, r2
 800c774:	d808      	bhi.n	800c788 <LCD_print_tank+0x4f8>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800c776:	f107 011c 	add.w	r1, r7, #28
 800c77a:	f04f 33ff 	mov.w	r3, #4294967295
 800c77e:	2202      	movs	r2, #2
 800c780:	4899      	ldr	r0, [pc, #612]	@ (800c9e8 <LCD_print_tank+0x758>)
 800c782:	f00b ffbc 	bl	80186fe <HAL_SPI_Transmit>
 800c786:	e051      	b.n	800c82c <LCD_print_tank+0x59c>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+63) && wiersz<=(ADRES->Y0_SET+66))))
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	7b1b      	ldrb	r3, [r3, #12]
 800c78c:	3304      	adds	r3, #4
 800c78e:	461a      	mov	r2, r3
 800c790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c792:	4293      	cmp	r3, r2
 800c794:	d31d      	bcc.n	800c7d2 <LCD_print_tank+0x542>
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	7b1b      	ldrb	r3, [r3, #12]
 800c79a:	331c      	adds	r3, #28
 800c79c:	461a      	mov	r2, r3
 800c79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d816      	bhi.n	800c7d2 <LCD_print_tank+0x542>
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	7b5b      	ldrb	r3, [r3, #13]
 800c7a8:	333f      	adds	r3, #63	@ 0x3f
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	6a3b      	ldr	r3, [r7, #32]
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d30f      	bcc.n	800c7d2 <LCD_print_tank+0x542>
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	7b5b      	ldrb	r3, [r3, #13]
 800c7b6:	3342      	adds	r3, #66	@ 0x42
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	6a3b      	ldr	r3, [r7, #32]
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d808      	bhi.n	800c7d2 <LCD_print_tank+0x542>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800c7c0:	f107 0114 	add.w	r1, r7, #20
 800c7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	4887      	ldr	r0, [pc, #540]	@ (800c9e8 <LCD_print_tank+0x758>)
 800c7cc:	f00b ff97 	bl	80186fe <HAL_SPI_Transmit>
 800c7d0:	e02c      	b.n	800c82c <LCD_print_tank+0x59c>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+62))))
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	7b1b      	ldrb	r3, [r3, #12]
 800c7d6:	3304      	adds	r3, #4
 800c7d8:	461a      	mov	r2, r3
 800c7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d31d      	bcc.n	800c81c <LCD_print_tank+0x58c>
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	7b1b      	ldrb	r3, [r3, #12]
 800c7e4:	331c      	adds	r3, #28
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d816      	bhi.n	800c81c <LCD_print_tank+0x58c>
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	7b5b      	ldrb	r3, [r3, #13]
 800c7f2:	3302      	adds	r3, #2
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	6a3b      	ldr	r3, [r7, #32]
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d30f      	bcc.n	800c81c <LCD_print_tank+0x58c>
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	7b5b      	ldrb	r3, [r3, #13]
 800c800:	333e      	adds	r3, #62	@ 0x3e
 800c802:	461a      	mov	r2, r3
 800c804:	6a3b      	ldr	r3, [r7, #32]
 800c806:	4293      	cmp	r3, r2
 800c808:	d808      	bhi.n	800c81c <LCD_print_tank+0x58c>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800c80a:	f107 0118 	add.w	r1, r7, #24
 800c80e:	f04f 33ff 	mov.w	r3, #4294967295
 800c812:	2202      	movs	r2, #2
 800c814:	4874      	ldr	r0, [pc, #464]	@ (800c9e8 <LCD_print_tank+0x758>)
 800c816:	f00b ff72 	bl	80186fe <HAL_SPI_Transmit>
 800c81a:	e007      	b.n	800c82c <LCD_print_tank+0x59c>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800c81c:	f107 0110 	add.w	r1, r7, #16
 800c820:	f04f 33ff 	mov.w	r3, #4294967295
 800c824:	2202      	movs	r2, #2
 800c826:	4870      	ldr	r0, [pc, #448]	@ (800c9e8 <LCD_print_tank+0x758>)
 800c828:	f00b ff69 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800c82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82e:	3301      	adds	r3, #1
 800c830:	627b      	str	r3, [r7, #36]	@ 0x24
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	7b9b      	ldrb	r3, [r3, #14]
 800c836:	3301      	adds	r3, #1
 800c838:	461a      	mov	r2, r3
 800c83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83c:	4293      	cmp	r3, r2
 800c83e:	f4ff af20 	bcc.w	800c682 <LCD_print_tank+0x3f2>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800c842:	6a3b      	ldr	r3, [r7, #32]
 800c844:	3301      	adds	r3, #1
 800c846:	623b      	str	r3, [r7, #32]
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	7bdb      	ldrb	r3, [r3, #15]
 800c84c:	461a      	mov	r2, r3
 800c84e:	6a3b      	ldr	r3, [r7, #32]
 800c850:	4293      	cmp	r3, r2
 800c852:	f67f af12 	bls.w	800c67a <LCD_print_tank+0x3ea>
	else if(num>=0.1 && num<0.2)
 800c856:	f004 b800 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=0.2 && num<0.3)
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7f3 ff42 	bl	80006e4 <__aeabi_f2d>
 800c860:	a35d      	add	r3, pc, #372	@ (adr r3, 800c9d8 <LCD_print_tank+0x748>)
 800c862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c866:	f7f4 f809 	bl	800087c <__aeabi_dcmpge>
 800c86a:	4603      	mov	r3, r0
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f000 8101 	beq.w	800ca74 <LCD_print_tank+0x7e4>
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f7f3 ff36 	bl	80006e4 <__aeabi_f2d>
 800c878:	a359      	add	r3, pc, #356	@ (adr r3, 800c9e0 <LCD_print_tank+0x750>)
 800c87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87e:	f7f3 ffe9 	bl	8000854 <__aeabi_dcmplt>
 800c882:	4603      	mov	r3, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	f000 80f5 	beq.w	800ca74 <LCD_print_tank+0x7e4>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	7b5b      	ldrb	r3, [r3, #13]
 800c88e:	623b      	str	r3, [r7, #32]
 800c890:	e0e7      	b.n	800ca62 <LCD_print_tank+0x7d2>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	7b1b      	ldrb	r3, [r3, #12]
 800c896:	627b      	str	r3, [r7, #36]	@ 0x24
 800c898:	e0d8      	b.n	800ca4c <LCD_print_tank+0x7bc>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	7b1b      	ldrb	r3, [r3, #12]
 800c89e:	3303      	adds	r3, #3
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d316      	bcc.n	800c8d6 <LCD_print_tank+0x646>
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	7b1b      	ldrb	r3, [r3, #12]
 800c8ac:	331d      	adds	r3, #29
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d80f      	bhi.n	800c8d6 <LCD_print_tank+0x646>
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	7b5b      	ldrb	r3, [r3, #13]
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	461a      	mov	r2, r3
 800c8be:	6a3b      	ldr	r3, [r7, #32]
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d108      	bne.n	800c8d6 <LCD_print_tank+0x646>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800c8c4:	f107 011c 	add.w	r1, r7, #28
 800c8c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8cc:	2202      	movs	r2, #2
 800c8ce:	4846      	ldr	r0, [pc, #280]	@ (800c9e8 <LCD_print_tank+0x758>)
 800c8d0:	f00b ff15 	bl	80186fe <HAL_SPI_Transmit>
 800c8d4:	e0b7      	b.n	800ca46 <LCD_print_tank+0x7b6>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	7b1b      	ldrb	r3, [r3, #12]
 800c8da:	3303      	adds	r3, #3
 800c8dc:	461a      	mov	r2, r3
 800c8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d316      	bcc.n	800c912 <LCD_print_tank+0x682>
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	7b1b      	ldrb	r3, [r3, #12]
 800c8e8:	331d      	adds	r3, #29
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d80f      	bhi.n	800c912 <LCD_print_tank+0x682>
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	7b5b      	ldrb	r3, [r3, #13]
 800c8f6:	3342      	adds	r3, #66	@ 0x42
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	6a3b      	ldr	r3, [r7, #32]
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d108      	bne.n	800c912 <LCD_print_tank+0x682>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800c900:	f107 011c 	add.w	r1, r7, #28
 800c904:	f04f 33ff 	mov.w	r3, #4294967295
 800c908:	2202      	movs	r2, #2
 800c90a:	4837      	ldr	r0, [pc, #220]	@ (800c9e8 <LCD_print_tank+0x758>)
 800c90c:	f00b fef7 	bl	80186fe <HAL_SPI_Transmit>
 800c910:	e099      	b.n	800ca46 <LCD_print_tank+0x7b6>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	7b1b      	ldrb	r3, [r3, #12]
 800c916:	331d      	adds	r3, #29
 800c918:	461a      	mov	r2, r3
 800c91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d116      	bne.n	800c94e <LCD_print_tank+0x6be>
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	7b5b      	ldrb	r3, [r3, #13]
 800c924:	3301      	adds	r3, #1
 800c926:	461a      	mov	r2, r3
 800c928:	6a3b      	ldr	r3, [r7, #32]
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d30f      	bcc.n	800c94e <LCD_print_tank+0x6be>
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	7b5b      	ldrb	r3, [r3, #13]
 800c932:	3342      	adds	r3, #66	@ 0x42
 800c934:	461a      	mov	r2, r3
 800c936:	6a3b      	ldr	r3, [r7, #32]
 800c938:	4293      	cmp	r3, r2
 800c93a:	d808      	bhi.n	800c94e <LCD_print_tank+0x6be>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800c93c:	f107 011c 	add.w	r1, r7, #28
 800c940:	f04f 33ff 	mov.w	r3, #4294967295
 800c944:	2202      	movs	r2, #2
 800c946:	4828      	ldr	r0, [pc, #160]	@ (800c9e8 <LCD_print_tank+0x758>)
 800c948:	f00b fed9 	bl	80186fe <HAL_SPI_Transmit>
 800c94c:	e07b      	b.n	800ca46 <LCD_print_tank+0x7b6>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	7b1b      	ldrb	r3, [r3, #12]
 800c952:	3303      	adds	r3, #3
 800c954:	461a      	mov	r2, r3
 800c956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c958:	4293      	cmp	r3, r2
 800c95a:	d116      	bne.n	800c98a <LCD_print_tank+0x6fa>
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	7b5b      	ldrb	r3, [r3, #13]
 800c960:	3301      	adds	r3, #1
 800c962:	461a      	mov	r2, r3
 800c964:	6a3b      	ldr	r3, [r7, #32]
 800c966:	4293      	cmp	r3, r2
 800c968:	d30f      	bcc.n	800c98a <LCD_print_tank+0x6fa>
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	7b5b      	ldrb	r3, [r3, #13]
 800c96e:	3342      	adds	r3, #66	@ 0x42
 800c970:	461a      	mov	r2, r3
 800c972:	6a3b      	ldr	r3, [r7, #32]
 800c974:	4293      	cmp	r3, r2
 800c976:	d808      	bhi.n	800c98a <LCD_print_tank+0x6fa>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800c978:	f107 011c 	add.w	r1, r7, #28
 800c97c:	f04f 33ff 	mov.w	r3, #4294967295
 800c980:	2202      	movs	r2, #2
 800c982:	4819      	ldr	r0, [pc, #100]	@ (800c9e8 <LCD_print_tank+0x758>)
 800c984:	f00b febb 	bl	80186fe <HAL_SPI_Transmit>
 800c988:	e05d      	b.n	800ca46 <LCD_print_tank+0x7b6>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+61) && wiersz<=(ADRES->Y0_SET+66))))
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	7b1b      	ldrb	r3, [r3, #12]
 800c98e:	3304      	adds	r3, #4
 800c990:	461a      	mov	r2, r3
 800c992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c994:	4293      	cmp	r3, r2
 800c996:	d329      	bcc.n	800c9ec <LCD_print_tank+0x75c>
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	7b1b      	ldrb	r3, [r3, #12]
 800c99c:	331c      	adds	r3, #28
 800c99e:	461a      	mov	r2, r3
 800c9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d822      	bhi.n	800c9ec <LCD_print_tank+0x75c>
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	7b5b      	ldrb	r3, [r3, #13]
 800c9aa:	333d      	adds	r3, #61	@ 0x3d
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	6a3b      	ldr	r3, [r7, #32]
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d31b      	bcc.n	800c9ec <LCD_print_tank+0x75c>
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	7b5b      	ldrb	r3, [r3, #13]
 800c9b8:	3342      	adds	r3, #66	@ 0x42
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	6a3b      	ldr	r3, [r7, #32]
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d814      	bhi.n	800c9ec <LCD_print_tank+0x75c>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800c9c2:	f107 0114 	add.w	r1, r7, #20
 800c9c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c9ca:	2202      	movs	r2, #2
 800c9cc:	4806      	ldr	r0, [pc, #24]	@ (800c9e8 <LCD_print_tank+0x758>)
 800c9ce:	f00b fe96 	bl	80186fe <HAL_SPI_Transmit>
 800c9d2:	e038      	b.n	800ca46 <LCD_print_tank+0x7b6>
 800c9d4:	f3af 8000 	nop.w
 800c9d8:	9999999a 	.word	0x9999999a
 800c9dc:	3fc99999 	.word	0x3fc99999
 800c9e0:	33333333 	.word	0x33333333
 800c9e4:	3fd33333 	.word	0x3fd33333
 800c9e8:	200004a4 	.word	0x200004a4
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+60))))
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	7b1b      	ldrb	r3, [r3, #12]
 800c9f0:	3304      	adds	r3, #4
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d31d      	bcc.n	800ca36 <LCD_print_tank+0x7a6>
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	7b1b      	ldrb	r3, [r3, #12]
 800c9fe:	331c      	adds	r3, #28
 800ca00:	461a      	mov	r2, r3
 800ca02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d816      	bhi.n	800ca36 <LCD_print_tank+0x7a6>
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	7b5b      	ldrb	r3, [r3, #13]
 800ca0c:	3302      	adds	r3, #2
 800ca0e:	461a      	mov	r2, r3
 800ca10:	6a3b      	ldr	r3, [r7, #32]
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d30f      	bcc.n	800ca36 <LCD_print_tank+0x7a6>
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	7b5b      	ldrb	r3, [r3, #13]
 800ca1a:	333c      	adds	r3, #60	@ 0x3c
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	6a3b      	ldr	r3, [r7, #32]
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d808      	bhi.n	800ca36 <LCD_print_tank+0x7a6>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800ca24:	f107 0118 	add.w	r1, r7, #24
 800ca28:	f04f 33ff 	mov.w	r3, #4294967295
 800ca2c:	2202      	movs	r2, #2
 800ca2e:	48a6      	ldr	r0, [pc, #664]	@ (800ccc8 <LCD_print_tank+0xa38>)
 800ca30:	f00b fe65 	bl	80186fe <HAL_SPI_Transmit>
 800ca34:	e007      	b.n	800ca46 <LCD_print_tank+0x7b6>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800ca36:	f107 0110 	add.w	r1, r7, #16
 800ca3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ca3e:	2202      	movs	r2, #2
 800ca40:	48a1      	ldr	r0, [pc, #644]	@ (800ccc8 <LCD_print_tank+0xa38>)
 800ca42:	f00b fe5c 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800ca46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca48:	3301      	adds	r3, #1
 800ca4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	7b9b      	ldrb	r3, [r3, #14]
 800ca50:	3301      	adds	r3, #1
 800ca52:	461a      	mov	r2, r3
 800ca54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca56:	4293      	cmp	r3, r2
 800ca58:	f4ff af1f 	bcc.w	800c89a <LCD_print_tank+0x60a>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800ca5c:	6a3b      	ldr	r3, [r7, #32]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	623b      	str	r3, [r7, #32]
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	7bdb      	ldrb	r3, [r3, #15]
 800ca66:	461a      	mov	r2, r3
 800ca68:	6a3b      	ldr	r3, [r7, #32]
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	f67f af11 	bls.w	800c892 <LCD_print_tank+0x602>
	else if(num>=0.2 && num<0.3)
 800ca70:	f003 bef3 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=0.3 && num<0.4)
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f7f3 fe35 	bl	80006e4 <__aeabi_f2d>
 800ca7a:	a38f      	add	r3, pc, #572	@ (adr r3, 800ccb8 <LCD_print_tank+0xa28>)
 800ca7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca80:	f7f3 fefc 	bl	800087c <__aeabi_dcmpge>
 800ca84:	4603      	mov	r3, r0
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	f000 80f5 	beq.w	800cc76 <LCD_print_tank+0x9e6>
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f7f3 fe29 	bl	80006e4 <__aeabi_f2d>
 800ca92:	a38b      	add	r3, pc, #556	@ (adr r3, 800ccc0 <LCD_print_tank+0xa30>)
 800ca94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca98:	f7f3 fedc 	bl	8000854 <__aeabi_dcmplt>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	f000 80e9 	beq.w	800cc76 <LCD_print_tank+0x9e6>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	7b5b      	ldrb	r3, [r3, #13]
 800caa8:	623b      	str	r3, [r7, #32]
 800caaa:	e0db      	b.n	800cc64 <LCD_print_tank+0x9d4>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	7b1b      	ldrb	r3, [r3, #12]
 800cab0:	627b      	str	r3, [r7, #36]	@ 0x24
 800cab2:	e0cc      	b.n	800cc4e <LCD_print_tank+0x9be>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	7b1b      	ldrb	r3, [r3, #12]
 800cab8:	3303      	adds	r3, #3
 800caba:	461a      	mov	r2, r3
 800cabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d316      	bcc.n	800caf0 <LCD_print_tank+0x860>
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	7b1b      	ldrb	r3, [r3, #12]
 800cac6:	331d      	adds	r3, #29
 800cac8:	461a      	mov	r2, r3
 800caca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cacc:	4293      	cmp	r3, r2
 800cace:	d80f      	bhi.n	800caf0 <LCD_print_tank+0x860>
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	7b5b      	ldrb	r3, [r3, #13]
 800cad4:	3301      	adds	r3, #1
 800cad6:	461a      	mov	r2, r3
 800cad8:	6a3b      	ldr	r3, [r7, #32]
 800cada:	4293      	cmp	r3, r2
 800cadc:	d108      	bne.n	800caf0 <LCD_print_tank+0x860>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800cade:	f107 011c 	add.w	r1, r7, #28
 800cae2:	f04f 33ff 	mov.w	r3, #4294967295
 800cae6:	2202      	movs	r2, #2
 800cae8:	4877      	ldr	r0, [pc, #476]	@ (800ccc8 <LCD_print_tank+0xa38>)
 800caea:	f00b fe08 	bl	80186fe <HAL_SPI_Transmit>
 800caee:	e0ab      	b.n	800cc48 <LCD_print_tank+0x9b8>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	7b1b      	ldrb	r3, [r3, #12]
 800caf4:	3303      	adds	r3, #3
 800caf6:	461a      	mov	r2, r3
 800caf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d316      	bcc.n	800cb2c <LCD_print_tank+0x89c>
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	7b1b      	ldrb	r3, [r3, #12]
 800cb02:	331d      	adds	r3, #29
 800cb04:	461a      	mov	r2, r3
 800cb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d80f      	bhi.n	800cb2c <LCD_print_tank+0x89c>
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	7b5b      	ldrb	r3, [r3, #13]
 800cb10:	3342      	adds	r3, #66	@ 0x42
 800cb12:	461a      	mov	r2, r3
 800cb14:	6a3b      	ldr	r3, [r7, #32]
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d108      	bne.n	800cb2c <LCD_print_tank+0x89c>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800cb1a:	f107 011c 	add.w	r1, r7, #28
 800cb1e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb22:	2202      	movs	r2, #2
 800cb24:	4868      	ldr	r0, [pc, #416]	@ (800ccc8 <LCD_print_tank+0xa38>)
 800cb26:	f00b fdea 	bl	80186fe <HAL_SPI_Transmit>
 800cb2a:	e08d      	b.n	800cc48 <LCD_print_tank+0x9b8>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	7b1b      	ldrb	r3, [r3, #12]
 800cb30:	331d      	adds	r3, #29
 800cb32:	461a      	mov	r2, r3
 800cb34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d116      	bne.n	800cb68 <LCD_print_tank+0x8d8>
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	7b5b      	ldrb	r3, [r3, #13]
 800cb3e:	3301      	adds	r3, #1
 800cb40:	461a      	mov	r2, r3
 800cb42:	6a3b      	ldr	r3, [r7, #32]
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d30f      	bcc.n	800cb68 <LCD_print_tank+0x8d8>
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	7b5b      	ldrb	r3, [r3, #13]
 800cb4c:	3342      	adds	r3, #66	@ 0x42
 800cb4e:	461a      	mov	r2, r3
 800cb50:	6a3b      	ldr	r3, [r7, #32]
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d808      	bhi.n	800cb68 <LCD_print_tank+0x8d8>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800cb56:	f107 011c 	add.w	r1, r7, #28
 800cb5a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb5e:	2202      	movs	r2, #2
 800cb60:	4859      	ldr	r0, [pc, #356]	@ (800ccc8 <LCD_print_tank+0xa38>)
 800cb62:	f00b fdcc 	bl	80186fe <HAL_SPI_Transmit>
 800cb66:	e06f      	b.n	800cc48 <LCD_print_tank+0x9b8>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	7b1b      	ldrb	r3, [r3, #12]
 800cb6c:	3303      	adds	r3, #3
 800cb6e:	461a      	mov	r2, r3
 800cb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d116      	bne.n	800cba4 <LCD_print_tank+0x914>
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	7b5b      	ldrb	r3, [r3, #13]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	6a3b      	ldr	r3, [r7, #32]
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d30f      	bcc.n	800cba4 <LCD_print_tank+0x914>
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	7b5b      	ldrb	r3, [r3, #13]
 800cb88:	3342      	adds	r3, #66	@ 0x42
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	6a3b      	ldr	r3, [r7, #32]
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d808      	bhi.n	800cba4 <LCD_print_tank+0x914>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800cb92:	f107 011c 	add.w	r1, r7, #28
 800cb96:	f04f 33ff 	mov.w	r3, #4294967295
 800cb9a:	2202      	movs	r2, #2
 800cb9c:	484a      	ldr	r0, [pc, #296]	@ (800ccc8 <LCD_print_tank+0xa38>)
 800cb9e:	f00b fdae 	bl	80186fe <HAL_SPI_Transmit>
 800cba2:	e051      	b.n	800cc48 <LCD_print_tank+0x9b8>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+59) && wiersz<=(ADRES->Y0_SET+66))))
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	7b1b      	ldrb	r3, [r3, #12]
 800cba8:	3304      	adds	r3, #4
 800cbaa:	461a      	mov	r2, r3
 800cbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d31d      	bcc.n	800cbee <LCD_print_tank+0x95e>
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	7b1b      	ldrb	r3, [r3, #12]
 800cbb6:	331c      	adds	r3, #28
 800cbb8:	461a      	mov	r2, r3
 800cbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d816      	bhi.n	800cbee <LCD_print_tank+0x95e>
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	7b5b      	ldrb	r3, [r3, #13]
 800cbc4:	333b      	adds	r3, #59	@ 0x3b
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	6a3b      	ldr	r3, [r7, #32]
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d30f      	bcc.n	800cbee <LCD_print_tank+0x95e>
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	7b5b      	ldrb	r3, [r3, #13]
 800cbd2:	3342      	adds	r3, #66	@ 0x42
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	6a3b      	ldr	r3, [r7, #32]
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d808      	bhi.n	800cbee <LCD_print_tank+0x95e>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800cbdc:	f107 0114 	add.w	r1, r7, #20
 800cbe0:	f04f 33ff 	mov.w	r3, #4294967295
 800cbe4:	2202      	movs	r2, #2
 800cbe6:	4838      	ldr	r0, [pc, #224]	@ (800ccc8 <LCD_print_tank+0xa38>)
 800cbe8:	f00b fd89 	bl	80186fe <HAL_SPI_Transmit>
 800cbec:	e02c      	b.n	800cc48 <LCD_print_tank+0x9b8>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+58))))
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	7b1b      	ldrb	r3, [r3, #12]
 800cbf2:	3304      	adds	r3, #4
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d31d      	bcc.n	800cc38 <LCD_print_tank+0x9a8>
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	7b1b      	ldrb	r3, [r3, #12]
 800cc00:	331c      	adds	r3, #28
 800cc02:	461a      	mov	r2, r3
 800cc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d816      	bhi.n	800cc38 <LCD_print_tank+0x9a8>
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	7b5b      	ldrb	r3, [r3, #13]
 800cc0e:	3302      	adds	r3, #2
 800cc10:	461a      	mov	r2, r3
 800cc12:	6a3b      	ldr	r3, [r7, #32]
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d30f      	bcc.n	800cc38 <LCD_print_tank+0x9a8>
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	7b5b      	ldrb	r3, [r3, #13]
 800cc1c:	333a      	adds	r3, #58	@ 0x3a
 800cc1e:	461a      	mov	r2, r3
 800cc20:	6a3b      	ldr	r3, [r7, #32]
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d808      	bhi.n	800cc38 <LCD_print_tank+0x9a8>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800cc26:	f107 0118 	add.w	r1, r7, #24
 800cc2a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc2e:	2202      	movs	r2, #2
 800cc30:	4825      	ldr	r0, [pc, #148]	@ (800ccc8 <LCD_print_tank+0xa38>)
 800cc32:	f00b fd64 	bl	80186fe <HAL_SPI_Transmit>
 800cc36:	e007      	b.n	800cc48 <LCD_print_tank+0x9b8>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800cc38:	f107 0110 	add.w	r1, r7, #16
 800cc3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc40:	2202      	movs	r2, #2
 800cc42:	4821      	ldr	r0, [pc, #132]	@ (800ccc8 <LCD_print_tank+0xa38>)
 800cc44:	f00b fd5b 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800cc48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	7b9b      	ldrb	r3, [r3, #14]
 800cc52:	3301      	adds	r3, #1
 800cc54:	461a      	mov	r2, r3
 800cc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	f4ff af2b 	bcc.w	800cab4 <LCD_print_tank+0x824>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800cc5e:	6a3b      	ldr	r3, [r7, #32]
 800cc60:	3301      	adds	r3, #1
 800cc62:	623b      	str	r3, [r7, #32]
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	7bdb      	ldrb	r3, [r3, #15]
 800cc68:	461a      	mov	r2, r3
 800cc6a:	6a3b      	ldr	r3, [r7, #32]
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	f67f af1d 	bls.w	800caac <LCD_print_tank+0x81c>
	else if(num>=0.3 && num<0.4)
 800cc72:	f003 bdf2 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=0.4 && num<0.5)
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f7f3 fd34 	bl	80006e4 <__aeabi_f2d>
 800cc7c:	a310      	add	r3, pc, #64	@ (adr r3, 800ccc0 <LCD_print_tank+0xa30>)
 800cc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc82:	f7f3 fdfb 	bl	800087c <__aeabi_dcmpge>
 800cc86:	4603      	mov	r3, r0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	f000 8100 	beq.w	800ce8e <LCD_print_tank+0xbfe>
 800cc8e:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc92:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800cc96:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc9e:	f140 80f6 	bpl.w	800ce8e <LCD_print_tank+0xbfe>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	7b5b      	ldrb	r3, [r3, #13]
 800cca6:	623b      	str	r3, [r7, #32]
 800cca8:	e0e8      	b.n	800ce7c <LCD_print_tank+0xbec>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	7b1b      	ldrb	r3, [r3, #12]
 800ccae:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccb0:	e0d9      	b.n	800ce66 <LCD_print_tank+0xbd6>
 800ccb2:	bf00      	nop
 800ccb4:	f3af 8000 	nop.w
 800ccb8:	33333333 	.word	0x33333333
 800ccbc:	3fd33333 	.word	0x3fd33333
 800ccc0:	9999999a 	.word	0x9999999a
 800ccc4:	3fd99999 	.word	0x3fd99999
 800ccc8:	200004a4 	.word	0x200004a4
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	7b1b      	ldrb	r3, [r3, #12]
 800ccd0:	3303      	adds	r3, #3
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d316      	bcc.n	800cd08 <LCD_print_tank+0xa78>
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	7b1b      	ldrb	r3, [r3, #12]
 800ccde:	331d      	adds	r3, #29
 800cce0:	461a      	mov	r2, r3
 800cce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d80f      	bhi.n	800cd08 <LCD_print_tank+0xa78>
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	7b5b      	ldrb	r3, [r3, #13]
 800ccec:	3301      	adds	r3, #1
 800ccee:	461a      	mov	r2, r3
 800ccf0:	6a3b      	ldr	r3, [r7, #32]
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d108      	bne.n	800cd08 <LCD_print_tank+0xa78>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800ccf6:	f107 011c 	add.w	r1, r7, #28
 800ccfa:	f04f 33ff 	mov.w	r3, #4294967295
 800ccfe:	2202      	movs	r2, #2
 800cd00:	48a1      	ldr	r0, [pc, #644]	@ (800cf88 <LCD_print_tank+0xcf8>)
 800cd02:	f00b fcfc 	bl	80186fe <HAL_SPI_Transmit>
 800cd06:	e0ab      	b.n	800ce60 <LCD_print_tank+0xbd0>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	7b1b      	ldrb	r3, [r3, #12]
 800cd0c:	3303      	adds	r3, #3
 800cd0e:	461a      	mov	r2, r3
 800cd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d316      	bcc.n	800cd44 <LCD_print_tank+0xab4>
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	7b1b      	ldrb	r3, [r3, #12]
 800cd1a:	331d      	adds	r3, #29
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d80f      	bhi.n	800cd44 <LCD_print_tank+0xab4>
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	7b5b      	ldrb	r3, [r3, #13]
 800cd28:	3342      	adds	r3, #66	@ 0x42
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	6a3b      	ldr	r3, [r7, #32]
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d108      	bne.n	800cd44 <LCD_print_tank+0xab4>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800cd32:	f107 011c 	add.w	r1, r7, #28
 800cd36:	f04f 33ff 	mov.w	r3, #4294967295
 800cd3a:	2202      	movs	r2, #2
 800cd3c:	4892      	ldr	r0, [pc, #584]	@ (800cf88 <LCD_print_tank+0xcf8>)
 800cd3e:	f00b fcde 	bl	80186fe <HAL_SPI_Transmit>
 800cd42:	e08d      	b.n	800ce60 <LCD_print_tank+0xbd0>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	7b1b      	ldrb	r3, [r3, #12]
 800cd48:	331d      	adds	r3, #29
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d116      	bne.n	800cd80 <LCD_print_tank+0xaf0>
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	7b5b      	ldrb	r3, [r3, #13]
 800cd56:	3301      	adds	r3, #1
 800cd58:	461a      	mov	r2, r3
 800cd5a:	6a3b      	ldr	r3, [r7, #32]
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d30f      	bcc.n	800cd80 <LCD_print_tank+0xaf0>
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	7b5b      	ldrb	r3, [r3, #13]
 800cd64:	3342      	adds	r3, #66	@ 0x42
 800cd66:	461a      	mov	r2, r3
 800cd68:	6a3b      	ldr	r3, [r7, #32]
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d808      	bhi.n	800cd80 <LCD_print_tank+0xaf0>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800cd6e:	f107 011c 	add.w	r1, r7, #28
 800cd72:	f04f 33ff 	mov.w	r3, #4294967295
 800cd76:	2202      	movs	r2, #2
 800cd78:	4883      	ldr	r0, [pc, #524]	@ (800cf88 <LCD_print_tank+0xcf8>)
 800cd7a:	f00b fcc0 	bl	80186fe <HAL_SPI_Transmit>
 800cd7e:	e06f      	b.n	800ce60 <LCD_print_tank+0xbd0>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	7b1b      	ldrb	r3, [r3, #12]
 800cd84:	3303      	adds	r3, #3
 800cd86:	461a      	mov	r2, r3
 800cd88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d116      	bne.n	800cdbc <LCD_print_tank+0xb2c>
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	7b5b      	ldrb	r3, [r3, #13]
 800cd92:	3301      	adds	r3, #1
 800cd94:	461a      	mov	r2, r3
 800cd96:	6a3b      	ldr	r3, [r7, #32]
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d30f      	bcc.n	800cdbc <LCD_print_tank+0xb2c>
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	7b5b      	ldrb	r3, [r3, #13]
 800cda0:	3342      	adds	r3, #66	@ 0x42
 800cda2:	461a      	mov	r2, r3
 800cda4:	6a3b      	ldr	r3, [r7, #32]
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d808      	bhi.n	800cdbc <LCD_print_tank+0xb2c>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800cdaa:	f107 011c 	add.w	r1, r7, #28
 800cdae:	f04f 33ff 	mov.w	r3, #4294967295
 800cdb2:	2202      	movs	r2, #2
 800cdb4:	4874      	ldr	r0, [pc, #464]	@ (800cf88 <LCD_print_tank+0xcf8>)
 800cdb6:	f00b fca2 	bl	80186fe <HAL_SPI_Transmit>
 800cdba:	e051      	b.n	800ce60 <LCD_print_tank+0xbd0>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+57) && wiersz<=(ADRES->Y0_SET+66))))
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	7b1b      	ldrb	r3, [r3, #12]
 800cdc0:	3304      	adds	r3, #4
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d31d      	bcc.n	800ce06 <LCD_print_tank+0xb76>
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	7b1b      	ldrb	r3, [r3, #12]
 800cdce:	331c      	adds	r3, #28
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d816      	bhi.n	800ce06 <LCD_print_tank+0xb76>
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	7b5b      	ldrb	r3, [r3, #13]
 800cddc:	3339      	adds	r3, #57	@ 0x39
 800cdde:	461a      	mov	r2, r3
 800cde0:	6a3b      	ldr	r3, [r7, #32]
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d30f      	bcc.n	800ce06 <LCD_print_tank+0xb76>
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	7b5b      	ldrb	r3, [r3, #13]
 800cdea:	3342      	adds	r3, #66	@ 0x42
 800cdec:	461a      	mov	r2, r3
 800cdee:	6a3b      	ldr	r3, [r7, #32]
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d808      	bhi.n	800ce06 <LCD_print_tank+0xb76>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800cdf4:	f107 0114 	add.w	r1, r7, #20
 800cdf8:	f04f 33ff 	mov.w	r3, #4294967295
 800cdfc:	2202      	movs	r2, #2
 800cdfe:	4862      	ldr	r0, [pc, #392]	@ (800cf88 <LCD_print_tank+0xcf8>)
 800ce00:	f00b fc7d 	bl	80186fe <HAL_SPI_Transmit>
 800ce04:	e02c      	b.n	800ce60 <LCD_print_tank+0xbd0>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+56))))
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	7b1b      	ldrb	r3, [r3, #12]
 800ce0a:	3304      	adds	r3, #4
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d31d      	bcc.n	800ce50 <LCD_print_tank+0xbc0>
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	7b1b      	ldrb	r3, [r3, #12]
 800ce18:	331c      	adds	r3, #28
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d816      	bhi.n	800ce50 <LCD_print_tank+0xbc0>
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	7b5b      	ldrb	r3, [r3, #13]
 800ce26:	3302      	adds	r3, #2
 800ce28:	461a      	mov	r2, r3
 800ce2a:	6a3b      	ldr	r3, [r7, #32]
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d30f      	bcc.n	800ce50 <LCD_print_tank+0xbc0>
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	7b5b      	ldrb	r3, [r3, #13]
 800ce34:	3338      	adds	r3, #56	@ 0x38
 800ce36:	461a      	mov	r2, r3
 800ce38:	6a3b      	ldr	r3, [r7, #32]
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d808      	bhi.n	800ce50 <LCD_print_tank+0xbc0>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800ce3e:	f107 0118 	add.w	r1, r7, #24
 800ce42:	f04f 33ff 	mov.w	r3, #4294967295
 800ce46:	2202      	movs	r2, #2
 800ce48:	484f      	ldr	r0, [pc, #316]	@ (800cf88 <LCD_print_tank+0xcf8>)
 800ce4a:	f00b fc58 	bl	80186fe <HAL_SPI_Transmit>
 800ce4e:	e007      	b.n	800ce60 <LCD_print_tank+0xbd0>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800ce50:	f107 0110 	add.w	r1, r7, #16
 800ce54:	f04f 33ff 	mov.w	r3, #4294967295
 800ce58:	2202      	movs	r2, #2
 800ce5a:	484b      	ldr	r0, [pc, #300]	@ (800cf88 <LCD_print_tank+0xcf8>)
 800ce5c:	f00b fc4f 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800ce60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce62:	3301      	adds	r3, #1
 800ce64:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	7b9b      	ldrb	r3, [r3, #14]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce70:	4293      	cmp	r3, r2
 800ce72:	f4ff af2b 	bcc.w	800cccc <LCD_print_tank+0xa3c>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800ce76:	6a3b      	ldr	r3, [r7, #32]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	623b      	str	r3, [r7, #32]
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	7bdb      	ldrb	r3, [r3, #15]
 800ce80:	461a      	mov	r2, r3
 800ce82:	6a3b      	ldr	r3, [r7, #32]
 800ce84:	4293      	cmp	r3, r2
 800ce86:	f67f af10 	bls.w	800ccaa <LCD_print_tank+0xa1a>
	else if(num>=0.4 && num<0.5)
 800ce8a:	f003 bce6 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=0.5 && num<0.6)
 800ce8e:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce92:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ce96:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce9e:	f2c0 80fc 	blt.w	800d09a <LCD_print_tank+0xe0a>
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f7f3 fc1e 	bl	80006e4 <__aeabi_f2d>
 800cea8:	a335      	add	r3, pc, #212	@ (adr r3, 800cf80 <LCD_print_tank+0xcf0>)
 800ceaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceae:	f7f3 fcd1 	bl	8000854 <__aeabi_dcmplt>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	f000 80f0 	beq.w	800d09a <LCD_print_tank+0xe0a>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	7b5b      	ldrb	r3, [r3, #13]
 800cebe:	623b      	str	r3, [r7, #32]
 800cec0:	e0e2      	b.n	800d088 <LCD_print_tank+0xdf8>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	7b1b      	ldrb	r3, [r3, #12]
 800cec6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cec8:	e0d3      	b.n	800d072 <LCD_print_tank+0xde2>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	7b1b      	ldrb	r3, [r3, #12]
 800cece:	3303      	adds	r3, #3
 800ced0:	461a      	mov	r2, r3
 800ced2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d316      	bcc.n	800cf06 <LCD_print_tank+0xc76>
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	7b1b      	ldrb	r3, [r3, #12]
 800cedc:	331d      	adds	r3, #29
 800cede:	461a      	mov	r2, r3
 800cee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d80f      	bhi.n	800cf06 <LCD_print_tank+0xc76>
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	7b5b      	ldrb	r3, [r3, #13]
 800ceea:	3301      	adds	r3, #1
 800ceec:	461a      	mov	r2, r3
 800ceee:	6a3b      	ldr	r3, [r7, #32]
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d108      	bne.n	800cf06 <LCD_print_tank+0xc76>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800cef4:	f107 011c 	add.w	r1, r7, #28
 800cef8:	f04f 33ff 	mov.w	r3, #4294967295
 800cefc:	2202      	movs	r2, #2
 800cefe:	4822      	ldr	r0, [pc, #136]	@ (800cf88 <LCD_print_tank+0xcf8>)
 800cf00:	f00b fbfd 	bl	80186fe <HAL_SPI_Transmit>
 800cf04:	e0b2      	b.n	800d06c <LCD_print_tank+0xddc>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	7b1b      	ldrb	r3, [r3, #12]
 800cf0a:	3303      	adds	r3, #3
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d316      	bcc.n	800cf42 <LCD_print_tank+0xcb2>
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	7b1b      	ldrb	r3, [r3, #12]
 800cf18:	331d      	adds	r3, #29
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d80f      	bhi.n	800cf42 <LCD_print_tank+0xcb2>
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	7b5b      	ldrb	r3, [r3, #13]
 800cf26:	3342      	adds	r3, #66	@ 0x42
 800cf28:	461a      	mov	r2, r3
 800cf2a:	6a3b      	ldr	r3, [r7, #32]
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d108      	bne.n	800cf42 <LCD_print_tank+0xcb2>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800cf30:	f107 011c 	add.w	r1, r7, #28
 800cf34:	f04f 33ff 	mov.w	r3, #4294967295
 800cf38:	2202      	movs	r2, #2
 800cf3a:	4813      	ldr	r0, [pc, #76]	@ (800cf88 <LCD_print_tank+0xcf8>)
 800cf3c:	f00b fbdf 	bl	80186fe <HAL_SPI_Transmit>
 800cf40:	e094      	b.n	800d06c <LCD_print_tank+0xddc>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	7b1b      	ldrb	r3, [r3, #12]
 800cf46:	331d      	adds	r3, #29
 800cf48:	461a      	mov	r2, r3
 800cf4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d11d      	bne.n	800cf8c <LCD_print_tank+0xcfc>
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	7b5b      	ldrb	r3, [r3, #13]
 800cf54:	3301      	adds	r3, #1
 800cf56:	461a      	mov	r2, r3
 800cf58:	6a3b      	ldr	r3, [r7, #32]
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d316      	bcc.n	800cf8c <LCD_print_tank+0xcfc>
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	7b5b      	ldrb	r3, [r3, #13]
 800cf62:	3342      	adds	r3, #66	@ 0x42
 800cf64:	461a      	mov	r2, r3
 800cf66:	6a3b      	ldr	r3, [r7, #32]
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d80f      	bhi.n	800cf8c <LCD_print_tank+0xcfc>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800cf6c:	f107 011c 	add.w	r1, r7, #28
 800cf70:	f04f 33ff 	mov.w	r3, #4294967295
 800cf74:	2202      	movs	r2, #2
 800cf76:	4804      	ldr	r0, [pc, #16]	@ (800cf88 <LCD_print_tank+0xcf8>)
 800cf78:	f00b fbc1 	bl	80186fe <HAL_SPI_Transmit>
 800cf7c:	e076      	b.n	800d06c <LCD_print_tank+0xddc>
 800cf7e:	bf00      	nop
 800cf80:	33333333 	.word	0x33333333
 800cf84:	3fe33333 	.word	0x3fe33333
 800cf88:	200004a4 	.word	0x200004a4
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	7b1b      	ldrb	r3, [r3, #12]
 800cf90:	3303      	adds	r3, #3
 800cf92:	461a      	mov	r2, r3
 800cf94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d116      	bne.n	800cfc8 <LCD_print_tank+0xd38>
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	7b5b      	ldrb	r3, [r3, #13]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	6a3b      	ldr	r3, [r7, #32]
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d30f      	bcc.n	800cfc8 <LCD_print_tank+0xd38>
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	7b5b      	ldrb	r3, [r3, #13]
 800cfac:	3342      	adds	r3, #66	@ 0x42
 800cfae:	461a      	mov	r2, r3
 800cfb0:	6a3b      	ldr	r3, [r7, #32]
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d808      	bhi.n	800cfc8 <LCD_print_tank+0xd38>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800cfb6:	f107 011c 	add.w	r1, r7, #28
 800cfba:	f04f 33ff 	mov.w	r3, #4294967295
 800cfbe:	2202      	movs	r2, #2
 800cfc0:	4899      	ldr	r0, [pc, #612]	@ (800d228 <LCD_print_tank+0xf98>)
 800cfc2:	f00b fb9c 	bl	80186fe <HAL_SPI_Transmit>
 800cfc6:	e051      	b.n	800d06c <LCD_print_tank+0xddc>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+55) && wiersz<=(ADRES->Y0_SET+66))))
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	7b1b      	ldrb	r3, [r3, #12]
 800cfcc:	3304      	adds	r3, #4
 800cfce:	461a      	mov	r2, r3
 800cfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d31d      	bcc.n	800d012 <LCD_print_tank+0xd82>
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	7b1b      	ldrb	r3, [r3, #12]
 800cfda:	331c      	adds	r3, #28
 800cfdc:	461a      	mov	r2, r3
 800cfde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d816      	bhi.n	800d012 <LCD_print_tank+0xd82>
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	7b5b      	ldrb	r3, [r3, #13]
 800cfe8:	3337      	adds	r3, #55	@ 0x37
 800cfea:	461a      	mov	r2, r3
 800cfec:	6a3b      	ldr	r3, [r7, #32]
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d30f      	bcc.n	800d012 <LCD_print_tank+0xd82>
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	7b5b      	ldrb	r3, [r3, #13]
 800cff6:	3342      	adds	r3, #66	@ 0x42
 800cff8:	461a      	mov	r2, r3
 800cffa:	6a3b      	ldr	r3, [r7, #32]
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d808      	bhi.n	800d012 <LCD_print_tank+0xd82>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800d000:	f107 0114 	add.w	r1, r7, #20
 800d004:	f04f 33ff 	mov.w	r3, #4294967295
 800d008:	2202      	movs	r2, #2
 800d00a:	4887      	ldr	r0, [pc, #540]	@ (800d228 <LCD_print_tank+0xf98>)
 800d00c:	f00b fb77 	bl	80186fe <HAL_SPI_Transmit>
 800d010:	e02c      	b.n	800d06c <LCD_print_tank+0xddc>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+54))))
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	7b1b      	ldrb	r3, [r3, #12]
 800d016:	3304      	adds	r3, #4
 800d018:	461a      	mov	r2, r3
 800d01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d31d      	bcc.n	800d05c <LCD_print_tank+0xdcc>
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	7b1b      	ldrb	r3, [r3, #12]
 800d024:	331c      	adds	r3, #28
 800d026:	461a      	mov	r2, r3
 800d028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d816      	bhi.n	800d05c <LCD_print_tank+0xdcc>
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	7b5b      	ldrb	r3, [r3, #13]
 800d032:	3302      	adds	r3, #2
 800d034:	461a      	mov	r2, r3
 800d036:	6a3b      	ldr	r3, [r7, #32]
 800d038:	4293      	cmp	r3, r2
 800d03a:	d30f      	bcc.n	800d05c <LCD_print_tank+0xdcc>
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	7b5b      	ldrb	r3, [r3, #13]
 800d040:	3336      	adds	r3, #54	@ 0x36
 800d042:	461a      	mov	r2, r3
 800d044:	6a3b      	ldr	r3, [r7, #32]
 800d046:	4293      	cmp	r3, r2
 800d048:	d808      	bhi.n	800d05c <LCD_print_tank+0xdcc>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800d04a:	f107 0118 	add.w	r1, r7, #24
 800d04e:	f04f 33ff 	mov.w	r3, #4294967295
 800d052:	2202      	movs	r2, #2
 800d054:	4874      	ldr	r0, [pc, #464]	@ (800d228 <LCD_print_tank+0xf98>)
 800d056:	f00b fb52 	bl	80186fe <HAL_SPI_Transmit>
 800d05a:	e007      	b.n	800d06c <LCD_print_tank+0xddc>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800d05c:	f107 0110 	add.w	r1, r7, #16
 800d060:	f04f 33ff 	mov.w	r3, #4294967295
 800d064:	2202      	movs	r2, #2
 800d066:	4870      	ldr	r0, [pc, #448]	@ (800d228 <LCD_print_tank+0xf98>)
 800d068:	f00b fb49 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800d06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d06e:	3301      	adds	r3, #1
 800d070:	627b      	str	r3, [r7, #36]	@ 0x24
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	7b9b      	ldrb	r3, [r3, #14]
 800d076:	3301      	adds	r3, #1
 800d078:	461a      	mov	r2, r3
 800d07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d07c:	4293      	cmp	r3, r2
 800d07e:	f4ff af24 	bcc.w	800ceca <LCD_print_tank+0xc3a>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800d082:	6a3b      	ldr	r3, [r7, #32]
 800d084:	3301      	adds	r3, #1
 800d086:	623b      	str	r3, [r7, #32]
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	7bdb      	ldrb	r3, [r3, #15]
 800d08c:	461a      	mov	r2, r3
 800d08e:	6a3b      	ldr	r3, [r7, #32]
 800d090:	4293      	cmp	r3, r2
 800d092:	f67f af16 	bls.w	800cec2 <LCD_print_tank+0xc32>
	else if(num>=0.5 && num<0.6)
 800d096:	f003 bbe0 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=0.6 && num<0.7)
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f7f3 fb22 	bl	80006e4 <__aeabi_f2d>
 800d0a0:	a35d      	add	r3, pc, #372	@ (adr r3, 800d218 <LCD_print_tank+0xf88>)
 800d0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a6:	f7f3 fbe9 	bl	800087c <__aeabi_dcmpge>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f000 8101 	beq.w	800d2b4 <LCD_print_tank+0x1024>
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f7f3 fb16 	bl	80006e4 <__aeabi_f2d>
 800d0b8:	a359      	add	r3, pc, #356	@ (adr r3, 800d220 <LCD_print_tank+0xf90>)
 800d0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0be:	f7f3 fbc9 	bl	8000854 <__aeabi_dcmplt>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	f000 80f5 	beq.w	800d2b4 <LCD_print_tank+0x1024>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	7b5b      	ldrb	r3, [r3, #13]
 800d0ce:	623b      	str	r3, [r7, #32]
 800d0d0:	e0e7      	b.n	800d2a2 <LCD_print_tank+0x1012>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	7b1b      	ldrb	r3, [r3, #12]
 800d0d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0d8:	e0d8      	b.n	800d28c <LCD_print_tank+0xffc>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	7b1b      	ldrb	r3, [r3, #12]
 800d0de:	3303      	adds	r3, #3
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d316      	bcc.n	800d116 <LCD_print_tank+0xe86>
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	7b1b      	ldrb	r3, [r3, #12]
 800d0ec:	331d      	adds	r3, #29
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d80f      	bhi.n	800d116 <LCD_print_tank+0xe86>
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	7b5b      	ldrb	r3, [r3, #13]
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	6a3b      	ldr	r3, [r7, #32]
 800d100:	4293      	cmp	r3, r2
 800d102:	d108      	bne.n	800d116 <LCD_print_tank+0xe86>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d104:	f107 011c 	add.w	r1, r7, #28
 800d108:	f04f 33ff 	mov.w	r3, #4294967295
 800d10c:	2202      	movs	r2, #2
 800d10e:	4846      	ldr	r0, [pc, #280]	@ (800d228 <LCD_print_tank+0xf98>)
 800d110:	f00b faf5 	bl	80186fe <HAL_SPI_Transmit>
 800d114:	e0b7      	b.n	800d286 <LCD_print_tank+0xff6>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	7b1b      	ldrb	r3, [r3, #12]
 800d11a:	3303      	adds	r3, #3
 800d11c:	461a      	mov	r2, r3
 800d11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d120:	4293      	cmp	r3, r2
 800d122:	d316      	bcc.n	800d152 <LCD_print_tank+0xec2>
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	7b1b      	ldrb	r3, [r3, #12]
 800d128:	331d      	adds	r3, #29
 800d12a:	461a      	mov	r2, r3
 800d12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d12e:	4293      	cmp	r3, r2
 800d130:	d80f      	bhi.n	800d152 <LCD_print_tank+0xec2>
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	7b5b      	ldrb	r3, [r3, #13]
 800d136:	3342      	adds	r3, #66	@ 0x42
 800d138:	461a      	mov	r2, r3
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d108      	bne.n	800d152 <LCD_print_tank+0xec2>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d140:	f107 011c 	add.w	r1, r7, #28
 800d144:	f04f 33ff 	mov.w	r3, #4294967295
 800d148:	2202      	movs	r2, #2
 800d14a:	4837      	ldr	r0, [pc, #220]	@ (800d228 <LCD_print_tank+0xf98>)
 800d14c:	f00b fad7 	bl	80186fe <HAL_SPI_Transmit>
 800d150:	e099      	b.n	800d286 <LCD_print_tank+0xff6>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	7b1b      	ldrb	r3, [r3, #12]
 800d156:	331d      	adds	r3, #29
 800d158:	461a      	mov	r2, r3
 800d15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d116      	bne.n	800d18e <LCD_print_tank+0xefe>
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	7b5b      	ldrb	r3, [r3, #13]
 800d164:	3301      	adds	r3, #1
 800d166:	461a      	mov	r2, r3
 800d168:	6a3b      	ldr	r3, [r7, #32]
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d30f      	bcc.n	800d18e <LCD_print_tank+0xefe>
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	7b5b      	ldrb	r3, [r3, #13]
 800d172:	3342      	adds	r3, #66	@ 0x42
 800d174:	461a      	mov	r2, r3
 800d176:	6a3b      	ldr	r3, [r7, #32]
 800d178:	4293      	cmp	r3, r2
 800d17a:	d808      	bhi.n	800d18e <LCD_print_tank+0xefe>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d17c:	f107 011c 	add.w	r1, r7, #28
 800d180:	f04f 33ff 	mov.w	r3, #4294967295
 800d184:	2202      	movs	r2, #2
 800d186:	4828      	ldr	r0, [pc, #160]	@ (800d228 <LCD_print_tank+0xf98>)
 800d188:	f00b fab9 	bl	80186fe <HAL_SPI_Transmit>
 800d18c:	e07b      	b.n	800d286 <LCD_print_tank+0xff6>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	7b1b      	ldrb	r3, [r3, #12]
 800d192:	3303      	adds	r3, #3
 800d194:	461a      	mov	r2, r3
 800d196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d198:	4293      	cmp	r3, r2
 800d19a:	d116      	bne.n	800d1ca <LCD_print_tank+0xf3a>
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	7b5b      	ldrb	r3, [r3, #13]
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	6a3b      	ldr	r3, [r7, #32]
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d30f      	bcc.n	800d1ca <LCD_print_tank+0xf3a>
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	7b5b      	ldrb	r3, [r3, #13]
 800d1ae:	3342      	adds	r3, #66	@ 0x42
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	6a3b      	ldr	r3, [r7, #32]
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d808      	bhi.n	800d1ca <LCD_print_tank+0xf3a>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d1b8:	f107 011c 	add.w	r1, r7, #28
 800d1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d1c0:	2202      	movs	r2, #2
 800d1c2:	4819      	ldr	r0, [pc, #100]	@ (800d228 <LCD_print_tank+0xf98>)
 800d1c4:	f00b fa9b 	bl	80186fe <HAL_SPI_Transmit>
 800d1c8:	e05d      	b.n	800d286 <LCD_print_tank+0xff6>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+53) && wiersz<=(ADRES->Y0_SET+66))))
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	7b1b      	ldrb	r3, [r3, #12]
 800d1ce:	3304      	adds	r3, #4
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d329      	bcc.n	800d22c <LCD_print_tank+0xf9c>
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	7b1b      	ldrb	r3, [r3, #12]
 800d1dc:	331c      	adds	r3, #28
 800d1de:	461a      	mov	r2, r3
 800d1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d822      	bhi.n	800d22c <LCD_print_tank+0xf9c>
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	7b5b      	ldrb	r3, [r3, #13]
 800d1ea:	3335      	adds	r3, #53	@ 0x35
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	6a3b      	ldr	r3, [r7, #32]
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d31b      	bcc.n	800d22c <LCD_print_tank+0xf9c>
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	7b5b      	ldrb	r3, [r3, #13]
 800d1f8:	3342      	adds	r3, #66	@ 0x42
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	6a3b      	ldr	r3, [r7, #32]
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d814      	bhi.n	800d22c <LCD_print_tank+0xf9c>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800d202:	f107 0114 	add.w	r1, r7, #20
 800d206:	f04f 33ff 	mov.w	r3, #4294967295
 800d20a:	2202      	movs	r2, #2
 800d20c:	4806      	ldr	r0, [pc, #24]	@ (800d228 <LCD_print_tank+0xf98>)
 800d20e:	f00b fa76 	bl	80186fe <HAL_SPI_Transmit>
 800d212:	e038      	b.n	800d286 <LCD_print_tank+0xff6>
 800d214:	f3af 8000 	nop.w
 800d218:	33333333 	.word	0x33333333
 800d21c:	3fe33333 	.word	0x3fe33333
 800d220:	66666666 	.word	0x66666666
 800d224:	3fe66666 	.word	0x3fe66666
 800d228:	200004a4 	.word	0x200004a4
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+52))))
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	7b1b      	ldrb	r3, [r3, #12]
 800d230:	3304      	adds	r3, #4
 800d232:	461a      	mov	r2, r3
 800d234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d236:	4293      	cmp	r3, r2
 800d238:	d31d      	bcc.n	800d276 <LCD_print_tank+0xfe6>
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	7b1b      	ldrb	r3, [r3, #12]
 800d23e:	331c      	adds	r3, #28
 800d240:	461a      	mov	r2, r3
 800d242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d244:	4293      	cmp	r3, r2
 800d246:	d816      	bhi.n	800d276 <LCD_print_tank+0xfe6>
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	7b5b      	ldrb	r3, [r3, #13]
 800d24c:	3302      	adds	r3, #2
 800d24e:	461a      	mov	r2, r3
 800d250:	6a3b      	ldr	r3, [r7, #32]
 800d252:	4293      	cmp	r3, r2
 800d254:	d30f      	bcc.n	800d276 <LCD_print_tank+0xfe6>
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	7b5b      	ldrb	r3, [r3, #13]
 800d25a:	3334      	adds	r3, #52	@ 0x34
 800d25c:	461a      	mov	r2, r3
 800d25e:	6a3b      	ldr	r3, [r7, #32]
 800d260:	4293      	cmp	r3, r2
 800d262:	d808      	bhi.n	800d276 <LCD_print_tank+0xfe6>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800d264:	f107 0118 	add.w	r1, r7, #24
 800d268:	f04f 33ff 	mov.w	r3, #4294967295
 800d26c:	2202      	movs	r2, #2
 800d26e:	48a8      	ldr	r0, [pc, #672]	@ (800d510 <LCD_print_tank+0x1280>)
 800d270:	f00b fa45 	bl	80186fe <HAL_SPI_Transmit>
 800d274:	e007      	b.n	800d286 <LCD_print_tank+0xff6>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800d276:	f107 0110 	add.w	r1, r7, #16
 800d27a:	f04f 33ff 	mov.w	r3, #4294967295
 800d27e:	2202      	movs	r2, #2
 800d280:	48a3      	ldr	r0, [pc, #652]	@ (800d510 <LCD_print_tank+0x1280>)
 800d282:	f00b fa3c 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800d286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d288:	3301      	adds	r3, #1
 800d28a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	7b9b      	ldrb	r3, [r3, #14]
 800d290:	3301      	adds	r3, #1
 800d292:	461a      	mov	r2, r3
 800d294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d296:	4293      	cmp	r3, r2
 800d298:	f4ff af1f 	bcc.w	800d0da <LCD_print_tank+0xe4a>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800d29c:	6a3b      	ldr	r3, [r7, #32]
 800d29e:	3301      	adds	r3, #1
 800d2a0:	623b      	str	r3, [r7, #32]
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	7bdb      	ldrb	r3, [r3, #15]
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	6a3b      	ldr	r3, [r7, #32]
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	f67f af11 	bls.w	800d0d2 <LCD_print_tank+0xe42>
	else if(num>=0.6 && num<0.7)
 800d2b0:	f003 bad3 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=0.7 && num<0.8)
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f7f3 fa15 	bl	80006e4 <__aeabi_f2d>
 800d2ba:	a38f      	add	r3, pc, #572	@ (adr r3, 800d4f8 <LCD_print_tank+0x1268>)
 800d2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c0:	f7f3 fadc 	bl	800087c <__aeabi_dcmpge>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	f000 80f5 	beq.w	800d4b6 <LCD_print_tank+0x1226>
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f7f3 fa09 	bl	80006e4 <__aeabi_f2d>
 800d2d2:	a38b      	add	r3, pc, #556	@ (adr r3, 800d500 <LCD_print_tank+0x1270>)
 800d2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d8:	f7f3 fabc 	bl	8000854 <__aeabi_dcmplt>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f000 80e9 	beq.w	800d4b6 <LCD_print_tank+0x1226>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	7b5b      	ldrb	r3, [r3, #13]
 800d2e8:	623b      	str	r3, [r7, #32]
 800d2ea:	e0db      	b.n	800d4a4 <LCD_print_tank+0x1214>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	7b1b      	ldrb	r3, [r3, #12]
 800d2f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2f2:	e0cc      	b.n	800d48e <LCD_print_tank+0x11fe>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	7b1b      	ldrb	r3, [r3, #12]
 800d2f8:	3303      	adds	r3, #3
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d316      	bcc.n	800d330 <LCD_print_tank+0x10a0>
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	7b1b      	ldrb	r3, [r3, #12]
 800d306:	331d      	adds	r3, #29
 800d308:	461a      	mov	r2, r3
 800d30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d80f      	bhi.n	800d330 <LCD_print_tank+0x10a0>
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	7b5b      	ldrb	r3, [r3, #13]
 800d314:	3301      	adds	r3, #1
 800d316:	461a      	mov	r2, r3
 800d318:	6a3b      	ldr	r3, [r7, #32]
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d108      	bne.n	800d330 <LCD_print_tank+0x10a0>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d31e:	f107 011c 	add.w	r1, r7, #28
 800d322:	f04f 33ff 	mov.w	r3, #4294967295
 800d326:	2202      	movs	r2, #2
 800d328:	4879      	ldr	r0, [pc, #484]	@ (800d510 <LCD_print_tank+0x1280>)
 800d32a:	f00b f9e8 	bl	80186fe <HAL_SPI_Transmit>
 800d32e:	e0ab      	b.n	800d488 <LCD_print_tank+0x11f8>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	7b1b      	ldrb	r3, [r3, #12]
 800d334:	3303      	adds	r3, #3
 800d336:	461a      	mov	r2, r3
 800d338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d316      	bcc.n	800d36c <LCD_print_tank+0x10dc>
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	7b1b      	ldrb	r3, [r3, #12]
 800d342:	331d      	adds	r3, #29
 800d344:	461a      	mov	r2, r3
 800d346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d348:	4293      	cmp	r3, r2
 800d34a:	d80f      	bhi.n	800d36c <LCD_print_tank+0x10dc>
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	7b5b      	ldrb	r3, [r3, #13]
 800d350:	3342      	adds	r3, #66	@ 0x42
 800d352:	461a      	mov	r2, r3
 800d354:	6a3b      	ldr	r3, [r7, #32]
 800d356:	4293      	cmp	r3, r2
 800d358:	d108      	bne.n	800d36c <LCD_print_tank+0x10dc>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d35a:	f107 011c 	add.w	r1, r7, #28
 800d35e:	f04f 33ff 	mov.w	r3, #4294967295
 800d362:	2202      	movs	r2, #2
 800d364:	486a      	ldr	r0, [pc, #424]	@ (800d510 <LCD_print_tank+0x1280>)
 800d366:	f00b f9ca 	bl	80186fe <HAL_SPI_Transmit>
 800d36a:	e08d      	b.n	800d488 <LCD_print_tank+0x11f8>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	7b1b      	ldrb	r3, [r3, #12]
 800d370:	331d      	adds	r3, #29
 800d372:	461a      	mov	r2, r3
 800d374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d376:	4293      	cmp	r3, r2
 800d378:	d116      	bne.n	800d3a8 <LCD_print_tank+0x1118>
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	7b5b      	ldrb	r3, [r3, #13]
 800d37e:	3301      	adds	r3, #1
 800d380:	461a      	mov	r2, r3
 800d382:	6a3b      	ldr	r3, [r7, #32]
 800d384:	4293      	cmp	r3, r2
 800d386:	d30f      	bcc.n	800d3a8 <LCD_print_tank+0x1118>
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	7b5b      	ldrb	r3, [r3, #13]
 800d38c:	3342      	adds	r3, #66	@ 0x42
 800d38e:	461a      	mov	r2, r3
 800d390:	6a3b      	ldr	r3, [r7, #32]
 800d392:	4293      	cmp	r3, r2
 800d394:	d808      	bhi.n	800d3a8 <LCD_print_tank+0x1118>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d396:	f107 011c 	add.w	r1, r7, #28
 800d39a:	f04f 33ff 	mov.w	r3, #4294967295
 800d39e:	2202      	movs	r2, #2
 800d3a0:	485b      	ldr	r0, [pc, #364]	@ (800d510 <LCD_print_tank+0x1280>)
 800d3a2:	f00b f9ac 	bl	80186fe <HAL_SPI_Transmit>
 800d3a6:	e06f      	b.n	800d488 <LCD_print_tank+0x11f8>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	7b1b      	ldrb	r3, [r3, #12]
 800d3ac:	3303      	adds	r3, #3
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d116      	bne.n	800d3e4 <LCD_print_tank+0x1154>
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	7b5b      	ldrb	r3, [r3, #13]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	461a      	mov	r2, r3
 800d3be:	6a3b      	ldr	r3, [r7, #32]
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d30f      	bcc.n	800d3e4 <LCD_print_tank+0x1154>
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	7b5b      	ldrb	r3, [r3, #13]
 800d3c8:	3342      	adds	r3, #66	@ 0x42
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	6a3b      	ldr	r3, [r7, #32]
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d808      	bhi.n	800d3e4 <LCD_print_tank+0x1154>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d3d2:	f107 011c 	add.w	r1, r7, #28
 800d3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d3da:	2202      	movs	r2, #2
 800d3dc:	484c      	ldr	r0, [pc, #304]	@ (800d510 <LCD_print_tank+0x1280>)
 800d3de:	f00b f98e 	bl	80186fe <HAL_SPI_Transmit>
 800d3e2:	e051      	b.n	800d488 <LCD_print_tank+0x11f8>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+51) && wiersz<=(ADRES->Y0_SET+66))))
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	7b1b      	ldrb	r3, [r3, #12]
 800d3e8:	3304      	adds	r3, #4
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d31d      	bcc.n	800d42e <LCD_print_tank+0x119e>
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	7b1b      	ldrb	r3, [r3, #12]
 800d3f6:	331c      	adds	r3, #28
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d816      	bhi.n	800d42e <LCD_print_tank+0x119e>
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	7b5b      	ldrb	r3, [r3, #13]
 800d404:	3333      	adds	r3, #51	@ 0x33
 800d406:	461a      	mov	r2, r3
 800d408:	6a3b      	ldr	r3, [r7, #32]
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d30f      	bcc.n	800d42e <LCD_print_tank+0x119e>
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	7b5b      	ldrb	r3, [r3, #13]
 800d412:	3342      	adds	r3, #66	@ 0x42
 800d414:	461a      	mov	r2, r3
 800d416:	6a3b      	ldr	r3, [r7, #32]
 800d418:	4293      	cmp	r3, r2
 800d41a:	d808      	bhi.n	800d42e <LCD_print_tank+0x119e>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800d41c:	f107 0114 	add.w	r1, r7, #20
 800d420:	f04f 33ff 	mov.w	r3, #4294967295
 800d424:	2202      	movs	r2, #2
 800d426:	483a      	ldr	r0, [pc, #232]	@ (800d510 <LCD_print_tank+0x1280>)
 800d428:	f00b f969 	bl	80186fe <HAL_SPI_Transmit>
 800d42c:	e02c      	b.n	800d488 <LCD_print_tank+0x11f8>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+50))))
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	7b1b      	ldrb	r3, [r3, #12]
 800d432:	3304      	adds	r3, #4
 800d434:	461a      	mov	r2, r3
 800d436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d438:	4293      	cmp	r3, r2
 800d43a:	d31d      	bcc.n	800d478 <LCD_print_tank+0x11e8>
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	7b1b      	ldrb	r3, [r3, #12]
 800d440:	331c      	adds	r3, #28
 800d442:	461a      	mov	r2, r3
 800d444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d446:	4293      	cmp	r3, r2
 800d448:	d816      	bhi.n	800d478 <LCD_print_tank+0x11e8>
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	7b5b      	ldrb	r3, [r3, #13]
 800d44e:	3302      	adds	r3, #2
 800d450:	461a      	mov	r2, r3
 800d452:	6a3b      	ldr	r3, [r7, #32]
 800d454:	4293      	cmp	r3, r2
 800d456:	d30f      	bcc.n	800d478 <LCD_print_tank+0x11e8>
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	7b5b      	ldrb	r3, [r3, #13]
 800d45c:	3332      	adds	r3, #50	@ 0x32
 800d45e:	461a      	mov	r2, r3
 800d460:	6a3b      	ldr	r3, [r7, #32]
 800d462:	4293      	cmp	r3, r2
 800d464:	d808      	bhi.n	800d478 <LCD_print_tank+0x11e8>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800d466:	f107 0118 	add.w	r1, r7, #24
 800d46a:	f04f 33ff 	mov.w	r3, #4294967295
 800d46e:	2202      	movs	r2, #2
 800d470:	4827      	ldr	r0, [pc, #156]	@ (800d510 <LCD_print_tank+0x1280>)
 800d472:	f00b f944 	bl	80186fe <HAL_SPI_Transmit>
 800d476:	e007      	b.n	800d488 <LCD_print_tank+0x11f8>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800d478:	f107 0110 	add.w	r1, r7, #16
 800d47c:	f04f 33ff 	mov.w	r3, #4294967295
 800d480:	2202      	movs	r2, #2
 800d482:	4823      	ldr	r0, [pc, #140]	@ (800d510 <LCD_print_tank+0x1280>)
 800d484:	f00b f93b 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800d488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d48a:	3301      	adds	r3, #1
 800d48c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	7b9b      	ldrb	r3, [r3, #14]
 800d492:	3301      	adds	r3, #1
 800d494:	461a      	mov	r2, r3
 800d496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d498:	4293      	cmp	r3, r2
 800d49a:	f4ff af2b 	bcc.w	800d2f4 <LCD_print_tank+0x1064>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800d49e:	6a3b      	ldr	r3, [r7, #32]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	623b      	str	r3, [r7, #32]
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	7bdb      	ldrb	r3, [r3, #15]
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	6a3b      	ldr	r3, [r7, #32]
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	f67f af1d 	bls.w	800d2ec <LCD_print_tank+0x105c>
	else if(num>=0.7 && num<0.8)
 800d4b2:	f003 b9d2 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=0.8 && num<0.9)
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f7f3 f914 	bl	80006e4 <__aeabi_f2d>
 800d4bc:	a310      	add	r3, pc, #64	@ (adr r3, 800d500 <LCD_print_tank+0x1270>)
 800d4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c2:	f7f3 f9db 	bl	800087c <__aeabi_dcmpge>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f000 8104 	beq.w	800d6d6 <LCD_print_tank+0x1446>
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f7f3 f908 	bl	80006e4 <__aeabi_f2d>
 800d4d4:	a30c      	add	r3, pc, #48	@ (adr r3, 800d508 <LCD_print_tank+0x1278>)
 800d4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4da:	f7f3 f9bb 	bl	8000854 <__aeabi_dcmplt>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f000 80f8 	beq.w	800d6d6 <LCD_print_tank+0x1446>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	7b5b      	ldrb	r3, [r3, #13]
 800d4ea:	623b      	str	r3, [r7, #32]
 800d4ec:	e0ea      	b.n	800d6c4 <LCD_print_tank+0x1434>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	7b1b      	ldrb	r3, [r3, #12]
 800d4f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4f4:	e0db      	b.n	800d6ae <LCD_print_tank+0x141e>
 800d4f6:	bf00      	nop
 800d4f8:	66666666 	.word	0x66666666
 800d4fc:	3fe66666 	.word	0x3fe66666
 800d500:	9999999a 	.word	0x9999999a
 800d504:	3fe99999 	.word	0x3fe99999
 800d508:	cccccccd 	.word	0xcccccccd
 800d50c:	3feccccc 	.word	0x3feccccc
 800d510:	200004a4 	.word	0x200004a4
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	7b1b      	ldrb	r3, [r3, #12]
 800d518:	3303      	adds	r3, #3
 800d51a:	461a      	mov	r2, r3
 800d51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d51e:	4293      	cmp	r3, r2
 800d520:	d316      	bcc.n	800d550 <LCD_print_tank+0x12c0>
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	7b1b      	ldrb	r3, [r3, #12]
 800d526:	331d      	adds	r3, #29
 800d528:	461a      	mov	r2, r3
 800d52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d80f      	bhi.n	800d550 <LCD_print_tank+0x12c0>
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	7b5b      	ldrb	r3, [r3, #13]
 800d534:	3301      	adds	r3, #1
 800d536:	461a      	mov	r2, r3
 800d538:	6a3b      	ldr	r3, [r7, #32]
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d108      	bne.n	800d550 <LCD_print_tank+0x12c0>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d53e:	f107 011c 	add.w	r1, r7, #28
 800d542:	f04f 33ff 	mov.w	r3, #4294967295
 800d546:	2202      	movs	r2, #2
 800d548:	48a1      	ldr	r0, [pc, #644]	@ (800d7d0 <LCD_print_tank+0x1540>)
 800d54a:	f00b f8d8 	bl	80186fe <HAL_SPI_Transmit>
 800d54e:	e0ab      	b.n	800d6a8 <LCD_print_tank+0x1418>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	7b1b      	ldrb	r3, [r3, #12]
 800d554:	3303      	adds	r3, #3
 800d556:	461a      	mov	r2, r3
 800d558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d316      	bcc.n	800d58c <LCD_print_tank+0x12fc>
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	7b1b      	ldrb	r3, [r3, #12]
 800d562:	331d      	adds	r3, #29
 800d564:	461a      	mov	r2, r3
 800d566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d568:	4293      	cmp	r3, r2
 800d56a:	d80f      	bhi.n	800d58c <LCD_print_tank+0x12fc>
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	7b5b      	ldrb	r3, [r3, #13]
 800d570:	3342      	adds	r3, #66	@ 0x42
 800d572:	461a      	mov	r2, r3
 800d574:	6a3b      	ldr	r3, [r7, #32]
 800d576:	4293      	cmp	r3, r2
 800d578:	d108      	bne.n	800d58c <LCD_print_tank+0x12fc>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d57a:	f107 011c 	add.w	r1, r7, #28
 800d57e:	f04f 33ff 	mov.w	r3, #4294967295
 800d582:	2202      	movs	r2, #2
 800d584:	4892      	ldr	r0, [pc, #584]	@ (800d7d0 <LCD_print_tank+0x1540>)
 800d586:	f00b f8ba 	bl	80186fe <HAL_SPI_Transmit>
 800d58a:	e08d      	b.n	800d6a8 <LCD_print_tank+0x1418>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	7b1b      	ldrb	r3, [r3, #12]
 800d590:	331d      	adds	r3, #29
 800d592:	461a      	mov	r2, r3
 800d594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d596:	4293      	cmp	r3, r2
 800d598:	d116      	bne.n	800d5c8 <LCD_print_tank+0x1338>
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	7b5b      	ldrb	r3, [r3, #13]
 800d59e:	3301      	adds	r3, #1
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	6a3b      	ldr	r3, [r7, #32]
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d30f      	bcc.n	800d5c8 <LCD_print_tank+0x1338>
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	7b5b      	ldrb	r3, [r3, #13]
 800d5ac:	3342      	adds	r3, #66	@ 0x42
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	6a3b      	ldr	r3, [r7, #32]
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d808      	bhi.n	800d5c8 <LCD_print_tank+0x1338>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d5b6:	f107 011c 	add.w	r1, r7, #28
 800d5ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d5be:	2202      	movs	r2, #2
 800d5c0:	4883      	ldr	r0, [pc, #524]	@ (800d7d0 <LCD_print_tank+0x1540>)
 800d5c2:	f00b f89c 	bl	80186fe <HAL_SPI_Transmit>
 800d5c6:	e06f      	b.n	800d6a8 <LCD_print_tank+0x1418>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	7b1b      	ldrb	r3, [r3, #12]
 800d5cc:	3303      	adds	r3, #3
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d116      	bne.n	800d604 <LCD_print_tank+0x1374>
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	7b5b      	ldrb	r3, [r3, #13]
 800d5da:	3301      	adds	r3, #1
 800d5dc:	461a      	mov	r2, r3
 800d5de:	6a3b      	ldr	r3, [r7, #32]
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d30f      	bcc.n	800d604 <LCD_print_tank+0x1374>
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	7b5b      	ldrb	r3, [r3, #13]
 800d5e8:	3342      	adds	r3, #66	@ 0x42
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	6a3b      	ldr	r3, [r7, #32]
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d808      	bhi.n	800d604 <LCD_print_tank+0x1374>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d5f2:	f107 011c 	add.w	r1, r7, #28
 800d5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	4874      	ldr	r0, [pc, #464]	@ (800d7d0 <LCD_print_tank+0x1540>)
 800d5fe:	f00b f87e 	bl	80186fe <HAL_SPI_Transmit>
 800d602:	e051      	b.n	800d6a8 <LCD_print_tank+0x1418>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+49) && wiersz<=(ADRES->Y0_SET+66))))
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	7b1b      	ldrb	r3, [r3, #12]
 800d608:	3304      	adds	r3, #4
 800d60a:	461a      	mov	r2, r3
 800d60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d60e:	4293      	cmp	r3, r2
 800d610:	d31d      	bcc.n	800d64e <LCD_print_tank+0x13be>
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	7b1b      	ldrb	r3, [r3, #12]
 800d616:	331c      	adds	r3, #28
 800d618:	461a      	mov	r2, r3
 800d61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d816      	bhi.n	800d64e <LCD_print_tank+0x13be>
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	7b5b      	ldrb	r3, [r3, #13]
 800d624:	3331      	adds	r3, #49	@ 0x31
 800d626:	461a      	mov	r2, r3
 800d628:	6a3b      	ldr	r3, [r7, #32]
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d30f      	bcc.n	800d64e <LCD_print_tank+0x13be>
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	7b5b      	ldrb	r3, [r3, #13]
 800d632:	3342      	adds	r3, #66	@ 0x42
 800d634:	461a      	mov	r2, r3
 800d636:	6a3b      	ldr	r3, [r7, #32]
 800d638:	4293      	cmp	r3, r2
 800d63a:	d808      	bhi.n	800d64e <LCD_print_tank+0x13be>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800d63c:	f107 0114 	add.w	r1, r7, #20
 800d640:	f04f 33ff 	mov.w	r3, #4294967295
 800d644:	2202      	movs	r2, #2
 800d646:	4862      	ldr	r0, [pc, #392]	@ (800d7d0 <LCD_print_tank+0x1540>)
 800d648:	f00b f859 	bl	80186fe <HAL_SPI_Transmit>
 800d64c:	e02c      	b.n	800d6a8 <LCD_print_tank+0x1418>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+48))))
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	7b1b      	ldrb	r3, [r3, #12]
 800d652:	3304      	adds	r3, #4
 800d654:	461a      	mov	r2, r3
 800d656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d658:	4293      	cmp	r3, r2
 800d65a:	d31d      	bcc.n	800d698 <LCD_print_tank+0x1408>
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	7b1b      	ldrb	r3, [r3, #12]
 800d660:	331c      	adds	r3, #28
 800d662:	461a      	mov	r2, r3
 800d664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d666:	4293      	cmp	r3, r2
 800d668:	d816      	bhi.n	800d698 <LCD_print_tank+0x1408>
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	7b5b      	ldrb	r3, [r3, #13]
 800d66e:	3302      	adds	r3, #2
 800d670:	461a      	mov	r2, r3
 800d672:	6a3b      	ldr	r3, [r7, #32]
 800d674:	4293      	cmp	r3, r2
 800d676:	d30f      	bcc.n	800d698 <LCD_print_tank+0x1408>
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	7b5b      	ldrb	r3, [r3, #13]
 800d67c:	3330      	adds	r3, #48	@ 0x30
 800d67e:	461a      	mov	r2, r3
 800d680:	6a3b      	ldr	r3, [r7, #32]
 800d682:	4293      	cmp	r3, r2
 800d684:	d808      	bhi.n	800d698 <LCD_print_tank+0x1408>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800d686:	f107 0118 	add.w	r1, r7, #24
 800d68a:	f04f 33ff 	mov.w	r3, #4294967295
 800d68e:	2202      	movs	r2, #2
 800d690:	484f      	ldr	r0, [pc, #316]	@ (800d7d0 <LCD_print_tank+0x1540>)
 800d692:	f00b f834 	bl	80186fe <HAL_SPI_Transmit>
 800d696:	e007      	b.n	800d6a8 <LCD_print_tank+0x1418>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800d698:	f107 0110 	add.w	r1, r7, #16
 800d69c:	f04f 33ff 	mov.w	r3, #4294967295
 800d6a0:	2202      	movs	r2, #2
 800d6a2:	484b      	ldr	r0, [pc, #300]	@ (800d7d0 <LCD_print_tank+0x1540>)
 800d6a4:	f00b f82b 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800d6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	7b9b      	ldrb	r3, [r3, #14]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	f4ff af2b 	bcc.w	800d514 <LCD_print_tank+0x1284>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800d6be:	6a3b      	ldr	r3, [r7, #32]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	623b      	str	r3, [r7, #32]
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	7bdb      	ldrb	r3, [r3, #15]
 800d6c8:	461a      	mov	r2, r3
 800d6ca:	6a3b      	ldr	r3, [r7, #32]
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	f67f af0e 	bls.w	800d4ee <LCD_print_tank+0x125e>
	else if(num>=0.8 && num<0.9)
 800d6d2:	f003 b8c2 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=0.9 && num<1.0)
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f7f3 f804 	bl	80006e4 <__aeabi_f2d>
 800d6dc:	a33a      	add	r3, pc, #232	@ (adr r3, 800d7c8 <LCD_print_tank+0x1538>)
 800d6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e2:	f7f3 f8cb 	bl	800087c <__aeabi_dcmpge>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f000 80fa 	beq.w	800d8e2 <LCD_print_tank+0x1652>
 800d6ee:	edd7 7a01 	vldr	s15, [r7, #4]
 800d6f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d6f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6fe:	f140 80f0 	bpl.w	800d8e2 <LCD_print_tank+0x1652>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	7b5b      	ldrb	r3, [r3, #13]
 800d706:	623b      	str	r3, [r7, #32]
 800d708:	e0e2      	b.n	800d8d0 <LCD_print_tank+0x1640>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	7b1b      	ldrb	r3, [r3, #12]
 800d70e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d710:	e0d3      	b.n	800d8ba <LCD_print_tank+0x162a>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	7b1b      	ldrb	r3, [r3, #12]
 800d716:	3303      	adds	r3, #3
 800d718:	461a      	mov	r2, r3
 800d71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d316      	bcc.n	800d74e <LCD_print_tank+0x14be>
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	7b1b      	ldrb	r3, [r3, #12]
 800d724:	331d      	adds	r3, #29
 800d726:	461a      	mov	r2, r3
 800d728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d80f      	bhi.n	800d74e <LCD_print_tank+0x14be>
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	7b5b      	ldrb	r3, [r3, #13]
 800d732:	3301      	adds	r3, #1
 800d734:	461a      	mov	r2, r3
 800d736:	6a3b      	ldr	r3, [r7, #32]
 800d738:	4293      	cmp	r3, r2
 800d73a:	d108      	bne.n	800d74e <LCD_print_tank+0x14be>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d73c:	f107 011c 	add.w	r1, r7, #28
 800d740:	f04f 33ff 	mov.w	r3, #4294967295
 800d744:	2202      	movs	r2, #2
 800d746:	4822      	ldr	r0, [pc, #136]	@ (800d7d0 <LCD_print_tank+0x1540>)
 800d748:	f00a ffd9 	bl	80186fe <HAL_SPI_Transmit>
 800d74c:	e0b2      	b.n	800d8b4 <LCD_print_tank+0x1624>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	7b1b      	ldrb	r3, [r3, #12]
 800d752:	3303      	adds	r3, #3
 800d754:	461a      	mov	r2, r3
 800d756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d758:	4293      	cmp	r3, r2
 800d75a:	d316      	bcc.n	800d78a <LCD_print_tank+0x14fa>
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	7b1b      	ldrb	r3, [r3, #12]
 800d760:	331d      	adds	r3, #29
 800d762:	461a      	mov	r2, r3
 800d764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d766:	4293      	cmp	r3, r2
 800d768:	d80f      	bhi.n	800d78a <LCD_print_tank+0x14fa>
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	7b5b      	ldrb	r3, [r3, #13]
 800d76e:	3342      	adds	r3, #66	@ 0x42
 800d770:	461a      	mov	r2, r3
 800d772:	6a3b      	ldr	r3, [r7, #32]
 800d774:	4293      	cmp	r3, r2
 800d776:	d108      	bne.n	800d78a <LCD_print_tank+0x14fa>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d778:	f107 011c 	add.w	r1, r7, #28
 800d77c:	f04f 33ff 	mov.w	r3, #4294967295
 800d780:	2202      	movs	r2, #2
 800d782:	4813      	ldr	r0, [pc, #76]	@ (800d7d0 <LCD_print_tank+0x1540>)
 800d784:	f00a ffbb 	bl	80186fe <HAL_SPI_Transmit>
 800d788:	e094      	b.n	800d8b4 <LCD_print_tank+0x1624>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	7b1b      	ldrb	r3, [r3, #12]
 800d78e:	331d      	adds	r3, #29
 800d790:	461a      	mov	r2, r3
 800d792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d794:	4293      	cmp	r3, r2
 800d796:	d11d      	bne.n	800d7d4 <LCD_print_tank+0x1544>
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	7b5b      	ldrb	r3, [r3, #13]
 800d79c:	3301      	adds	r3, #1
 800d79e:	461a      	mov	r2, r3
 800d7a0:	6a3b      	ldr	r3, [r7, #32]
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d316      	bcc.n	800d7d4 <LCD_print_tank+0x1544>
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	7b5b      	ldrb	r3, [r3, #13]
 800d7aa:	3342      	adds	r3, #66	@ 0x42
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	6a3b      	ldr	r3, [r7, #32]
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d80f      	bhi.n	800d7d4 <LCD_print_tank+0x1544>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d7b4:	f107 011c 	add.w	r1, r7, #28
 800d7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7bc:	2202      	movs	r2, #2
 800d7be:	4804      	ldr	r0, [pc, #16]	@ (800d7d0 <LCD_print_tank+0x1540>)
 800d7c0:	f00a ff9d 	bl	80186fe <HAL_SPI_Transmit>
 800d7c4:	e076      	b.n	800d8b4 <LCD_print_tank+0x1624>
 800d7c6:	bf00      	nop
 800d7c8:	cccccccd 	.word	0xcccccccd
 800d7cc:	3feccccc 	.word	0x3feccccc
 800d7d0:	200004a4 	.word	0x200004a4
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	7b1b      	ldrb	r3, [r3, #12]
 800d7d8:	3303      	adds	r3, #3
 800d7da:	461a      	mov	r2, r3
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	d116      	bne.n	800d810 <LCD_print_tank+0x1580>
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	7b5b      	ldrb	r3, [r3, #13]
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	6a3b      	ldr	r3, [r7, #32]
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d30f      	bcc.n	800d810 <LCD_print_tank+0x1580>
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	7b5b      	ldrb	r3, [r3, #13]
 800d7f4:	3342      	adds	r3, #66	@ 0x42
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	6a3b      	ldr	r3, [r7, #32]
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d808      	bhi.n	800d810 <LCD_print_tank+0x1580>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d7fe:	f107 011c 	add.w	r1, r7, #28
 800d802:	f04f 33ff 	mov.w	r3, #4294967295
 800d806:	2202      	movs	r2, #2
 800d808:	4895      	ldr	r0, [pc, #596]	@ (800da60 <LCD_print_tank+0x17d0>)
 800d80a:	f00a ff78 	bl	80186fe <HAL_SPI_Transmit>
 800d80e:	e051      	b.n	800d8b4 <LCD_print_tank+0x1624>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+47) && wiersz<=(ADRES->Y0_SET+66))))
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	7b1b      	ldrb	r3, [r3, #12]
 800d814:	3304      	adds	r3, #4
 800d816:	461a      	mov	r2, r3
 800d818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d31d      	bcc.n	800d85a <LCD_print_tank+0x15ca>
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	7b1b      	ldrb	r3, [r3, #12]
 800d822:	331c      	adds	r3, #28
 800d824:	461a      	mov	r2, r3
 800d826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d828:	4293      	cmp	r3, r2
 800d82a:	d816      	bhi.n	800d85a <LCD_print_tank+0x15ca>
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	7b5b      	ldrb	r3, [r3, #13]
 800d830:	332f      	adds	r3, #47	@ 0x2f
 800d832:	461a      	mov	r2, r3
 800d834:	6a3b      	ldr	r3, [r7, #32]
 800d836:	4293      	cmp	r3, r2
 800d838:	d30f      	bcc.n	800d85a <LCD_print_tank+0x15ca>
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	7b5b      	ldrb	r3, [r3, #13]
 800d83e:	3342      	adds	r3, #66	@ 0x42
 800d840:	461a      	mov	r2, r3
 800d842:	6a3b      	ldr	r3, [r7, #32]
 800d844:	4293      	cmp	r3, r2
 800d846:	d808      	bhi.n	800d85a <LCD_print_tank+0x15ca>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800d848:	f107 0114 	add.w	r1, r7, #20
 800d84c:	f04f 33ff 	mov.w	r3, #4294967295
 800d850:	2202      	movs	r2, #2
 800d852:	4883      	ldr	r0, [pc, #524]	@ (800da60 <LCD_print_tank+0x17d0>)
 800d854:	f00a ff53 	bl	80186fe <HAL_SPI_Transmit>
 800d858:	e02c      	b.n	800d8b4 <LCD_print_tank+0x1624>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+46))))
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	7b1b      	ldrb	r3, [r3, #12]
 800d85e:	3304      	adds	r3, #4
 800d860:	461a      	mov	r2, r3
 800d862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d864:	4293      	cmp	r3, r2
 800d866:	d31d      	bcc.n	800d8a4 <LCD_print_tank+0x1614>
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	7b1b      	ldrb	r3, [r3, #12]
 800d86c:	331c      	adds	r3, #28
 800d86e:	461a      	mov	r2, r3
 800d870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d872:	4293      	cmp	r3, r2
 800d874:	d816      	bhi.n	800d8a4 <LCD_print_tank+0x1614>
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	7b5b      	ldrb	r3, [r3, #13]
 800d87a:	3302      	adds	r3, #2
 800d87c:	461a      	mov	r2, r3
 800d87e:	6a3b      	ldr	r3, [r7, #32]
 800d880:	4293      	cmp	r3, r2
 800d882:	d30f      	bcc.n	800d8a4 <LCD_print_tank+0x1614>
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	7b5b      	ldrb	r3, [r3, #13]
 800d888:	332e      	adds	r3, #46	@ 0x2e
 800d88a:	461a      	mov	r2, r3
 800d88c:	6a3b      	ldr	r3, [r7, #32]
 800d88e:	4293      	cmp	r3, r2
 800d890:	d808      	bhi.n	800d8a4 <LCD_print_tank+0x1614>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800d892:	f107 0118 	add.w	r1, r7, #24
 800d896:	f04f 33ff 	mov.w	r3, #4294967295
 800d89a:	2202      	movs	r2, #2
 800d89c:	4870      	ldr	r0, [pc, #448]	@ (800da60 <LCD_print_tank+0x17d0>)
 800d89e:	f00a ff2e 	bl	80186fe <HAL_SPI_Transmit>
 800d8a2:	e007      	b.n	800d8b4 <LCD_print_tank+0x1624>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800d8a4:	f107 0110 	add.w	r1, r7, #16
 800d8a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d8ac:	2202      	movs	r2, #2
 800d8ae:	486c      	ldr	r0, [pc, #432]	@ (800da60 <LCD_print_tank+0x17d0>)
 800d8b0:	f00a ff25 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800d8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	7b9b      	ldrb	r3, [r3, #14]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	f4ff af24 	bcc.w	800d712 <LCD_print_tank+0x1482>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800d8ca:	6a3b      	ldr	r3, [r7, #32]
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	623b      	str	r3, [r7, #32]
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	7bdb      	ldrb	r3, [r3, #15]
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	6a3b      	ldr	r3, [r7, #32]
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	f67f af16 	bls.w	800d70a <LCD_print_tank+0x147a>
	else if(num>=0.9 && num<1.0)
 800d8de:	f002 bfbc 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=1.0 && num<1.1)
 800d8e2:	edd7 7a01 	vldr	s15, [r7, #4]
 800d8e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d8ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8f2:	f2c0 80fb 	blt.w	800daec <LCD_print_tank+0x185c>
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f7f2 fef4 	bl	80006e4 <__aeabi_f2d>
 800d8fc:	a356      	add	r3, pc, #344	@ (adr r3, 800da58 <LCD_print_tank+0x17c8>)
 800d8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d902:	f7f2 ffa7 	bl	8000854 <__aeabi_dcmplt>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	f000 80ef 	beq.w	800daec <LCD_print_tank+0x185c>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	7b5b      	ldrb	r3, [r3, #13]
 800d912:	623b      	str	r3, [r7, #32]
 800d914:	e0e1      	b.n	800dada <LCD_print_tank+0x184a>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	7b1b      	ldrb	r3, [r3, #12]
 800d91a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d91c:	e0d2      	b.n	800dac4 <LCD_print_tank+0x1834>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	7b1b      	ldrb	r3, [r3, #12]
 800d922:	3303      	adds	r3, #3
 800d924:	461a      	mov	r2, r3
 800d926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d928:	4293      	cmp	r3, r2
 800d92a:	d316      	bcc.n	800d95a <LCD_print_tank+0x16ca>
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	7b1b      	ldrb	r3, [r3, #12]
 800d930:	331d      	adds	r3, #29
 800d932:	461a      	mov	r2, r3
 800d934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d936:	4293      	cmp	r3, r2
 800d938:	d80f      	bhi.n	800d95a <LCD_print_tank+0x16ca>
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	7b5b      	ldrb	r3, [r3, #13]
 800d93e:	3301      	adds	r3, #1
 800d940:	461a      	mov	r2, r3
 800d942:	6a3b      	ldr	r3, [r7, #32]
 800d944:	4293      	cmp	r3, r2
 800d946:	d108      	bne.n	800d95a <LCD_print_tank+0x16ca>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d948:	f107 011c 	add.w	r1, r7, #28
 800d94c:	f04f 33ff 	mov.w	r3, #4294967295
 800d950:	2202      	movs	r2, #2
 800d952:	4843      	ldr	r0, [pc, #268]	@ (800da60 <LCD_print_tank+0x17d0>)
 800d954:	f00a fed3 	bl	80186fe <HAL_SPI_Transmit>
 800d958:	e0b1      	b.n	800dabe <LCD_print_tank+0x182e>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	7b1b      	ldrb	r3, [r3, #12]
 800d95e:	3303      	adds	r3, #3
 800d960:	461a      	mov	r2, r3
 800d962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d964:	4293      	cmp	r3, r2
 800d966:	d316      	bcc.n	800d996 <LCD_print_tank+0x1706>
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	7b1b      	ldrb	r3, [r3, #12]
 800d96c:	331d      	adds	r3, #29
 800d96e:	461a      	mov	r2, r3
 800d970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d972:	4293      	cmp	r3, r2
 800d974:	d80f      	bhi.n	800d996 <LCD_print_tank+0x1706>
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	7b5b      	ldrb	r3, [r3, #13]
 800d97a:	3342      	adds	r3, #66	@ 0x42
 800d97c:	461a      	mov	r2, r3
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	4293      	cmp	r3, r2
 800d982:	d108      	bne.n	800d996 <LCD_print_tank+0x1706>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d984:	f107 011c 	add.w	r1, r7, #28
 800d988:	f04f 33ff 	mov.w	r3, #4294967295
 800d98c:	2202      	movs	r2, #2
 800d98e:	4834      	ldr	r0, [pc, #208]	@ (800da60 <LCD_print_tank+0x17d0>)
 800d990:	f00a feb5 	bl	80186fe <HAL_SPI_Transmit>
 800d994:	e093      	b.n	800dabe <LCD_print_tank+0x182e>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	7b1b      	ldrb	r3, [r3, #12]
 800d99a:	331d      	adds	r3, #29
 800d99c:	461a      	mov	r2, r3
 800d99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d116      	bne.n	800d9d2 <LCD_print_tank+0x1742>
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	7b5b      	ldrb	r3, [r3, #13]
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	6a3b      	ldr	r3, [r7, #32]
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d30f      	bcc.n	800d9d2 <LCD_print_tank+0x1742>
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	7b5b      	ldrb	r3, [r3, #13]
 800d9b6:	3342      	adds	r3, #66	@ 0x42
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	6a3b      	ldr	r3, [r7, #32]
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d808      	bhi.n	800d9d2 <LCD_print_tank+0x1742>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d9c0:	f107 011c 	add.w	r1, r7, #28
 800d9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c8:	2202      	movs	r2, #2
 800d9ca:	4825      	ldr	r0, [pc, #148]	@ (800da60 <LCD_print_tank+0x17d0>)
 800d9cc:	f00a fe97 	bl	80186fe <HAL_SPI_Transmit>
 800d9d0:	e075      	b.n	800dabe <LCD_print_tank+0x182e>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	7b1b      	ldrb	r3, [r3, #12]
 800d9d6:	3303      	adds	r3, #3
 800d9d8:	461a      	mov	r2, r3
 800d9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d116      	bne.n	800da0e <LCD_print_tank+0x177e>
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	7b5b      	ldrb	r3, [r3, #13]
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	6a3b      	ldr	r3, [r7, #32]
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d30f      	bcc.n	800da0e <LCD_print_tank+0x177e>
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	7b5b      	ldrb	r3, [r3, #13]
 800d9f2:	3342      	adds	r3, #66	@ 0x42
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	6a3b      	ldr	r3, [r7, #32]
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d808      	bhi.n	800da0e <LCD_print_tank+0x177e>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800d9fc:	f107 011c 	add.w	r1, r7, #28
 800da00:	f04f 33ff 	mov.w	r3, #4294967295
 800da04:	2202      	movs	r2, #2
 800da06:	4816      	ldr	r0, [pc, #88]	@ (800da60 <LCD_print_tank+0x17d0>)
 800da08:	f00a fe79 	bl	80186fe <HAL_SPI_Transmit>
 800da0c:	e057      	b.n	800dabe <LCD_print_tank+0x182e>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+45) && wiersz<=(ADRES->Y0_SET+66))))
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	7b1b      	ldrb	r3, [r3, #12]
 800da12:	3304      	adds	r3, #4
 800da14:	461a      	mov	r2, r3
 800da16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da18:	4293      	cmp	r3, r2
 800da1a:	d323      	bcc.n	800da64 <LCD_print_tank+0x17d4>
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	7b1b      	ldrb	r3, [r3, #12]
 800da20:	331c      	adds	r3, #28
 800da22:	461a      	mov	r2, r3
 800da24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da26:	4293      	cmp	r3, r2
 800da28:	d81c      	bhi.n	800da64 <LCD_print_tank+0x17d4>
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	7b5b      	ldrb	r3, [r3, #13]
 800da2e:	332d      	adds	r3, #45	@ 0x2d
 800da30:	461a      	mov	r2, r3
 800da32:	6a3b      	ldr	r3, [r7, #32]
 800da34:	4293      	cmp	r3, r2
 800da36:	d315      	bcc.n	800da64 <LCD_print_tank+0x17d4>
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	7b5b      	ldrb	r3, [r3, #13]
 800da3c:	3342      	adds	r3, #66	@ 0x42
 800da3e:	461a      	mov	r2, r3
 800da40:	6a3b      	ldr	r3, [r7, #32]
 800da42:	4293      	cmp	r3, r2
 800da44:	d80e      	bhi.n	800da64 <LCD_print_tank+0x17d4>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800da46:	f107 0114 	add.w	r1, r7, #20
 800da4a:	f04f 33ff 	mov.w	r3, #4294967295
 800da4e:	2202      	movs	r2, #2
 800da50:	4803      	ldr	r0, [pc, #12]	@ (800da60 <LCD_print_tank+0x17d0>)
 800da52:	f00a fe54 	bl	80186fe <HAL_SPI_Transmit>
 800da56:	e032      	b.n	800dabe <LCD_print_tank+0x182e>
 800da58:	9999999a 	.word	0x9999999a
 800da5c:	3ff19999 	.word	0x3ff19999
 800da60:	200004a4 	.word	0x200004a4
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+44))))
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	7b1b      	ldrb	r3, [r3, #12]
 800da68:	3304      	adds	r3, #4
 800da6a:	461a      	mov	r2, r3
 800da6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da6e:	4293      	cmp	r3, r2
 800da70:	d31d      	bcc.n	800daae <LCD_print_tank+0x181e>
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	7b1b      	ldrb	r3, [r3, #12]
 800da76:	331c      	adds	r3, #28
 800da78:	461a      	mov	r2, r3
 800da7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d816      	bhi.n	800daae <LCD_print_tank+0x181e>
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	7b5b      	ldrb	r3, [r3, #13]
 800da84:	3302      	adds	r3, #2
 800da86:	461a      	mov	r2, r3
 800da88:	6a3b      	ldr	r3, [r7, #32]
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d30f      	bcc.n	800daae <LCD_print_tank+0x181e>
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	7b5b      	ldrb	r3, [r3, #13]
 800da92:	332c      	adds	r3, #44	@ 0x2c
 800da94:	461a      	mov	r2, r3
 800da96:	6a3b      	ldr	r3, [r7, #32]
 800da98:	4293      	cmp	r3, r2
 800da9a:	d808      	bhi.n	800daae <LCD_print_tank+0x181e>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800da9c:	f107 0118 	add.w	r1, r7, #24
 800daa0:	f04f 33ff 	mov.w	r3, #4294967295
 800daa4:	2202      	movs	r2, #2
 800daa6:	48a6      	ldr	r0, [pc, #664]	@ (800dd40 <LCD_print_tank+0x1ab0>)
 800daa8:	f00a fe29 	bl	80186fe <HAL_SPI_Transmit>
 800daac:	e007      	b.n	800dabe <LCD_print_tank+0x182e>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800daae:	f107 0110 	add.w	r1, r7, #16
 800dab2:	f04f 33ff 	mov.w	r3, #4294967295
 800dab6:	2202      	movs	r2, #2
 800dab8:	48a1      	ldr	r0, [pc, #644]	@ (800dd40 <LCD_print_tank+0x1ab0>)
 800daba:	f00a fe20 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800dabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac0:	3301      	adds	r3, #1
 800dac2:	627b      	str	r3, [r7, #36]	@ 0x24
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	7b9b      	ldrb	r3, [r3, #14]
 800dac8:	3301      	adds	r3, #1
 800daca:	461a      	mov	r2, r3
 800dacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dace:	4293      	cmp	r3, r2
 800dad0:	f4ff af25 	bcc.w	800d91e <LCD_print_tank+0x168e>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800dad4:	6a3b      	ldr	r3, [r7, #32]
 800dad6:	3301      	adds	r3, #1
 800dad8:	623b      	str	r3, [r7, #32]
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	7bdb      	ldrb	r3, [r3, #15]
 800dade:	461a      	mov	r2, r3
 800dae0:	6a3b      	ldr	r3, [r7, #32]
 800dae2:	4293      	cmp	r3, r2
 800dae4:	f67f af17 	bls.w	800d916 <LCD_print_tank+0x1686>
	else if(num>=1.0 && num<1.1)
 800dae8:	f002 beb7 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=1.1 && num<1.2)
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f7f2 fdf9 	bl	80006e4 <__aeabi_f2d>
 800daf2:	a38f      	add	r3, pc, #572	@ (adr r3, 800dd30 <LCD_print_tank+0x1aa0>)
 800daf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf8:	f7f2 fec0 	bl	800087c <__aeabi_dcmpge>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	f000 80f5 	beq.w	800dcee <LCD_print_tank+0x1a5e>
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f7f2 fded 	bl	80006e4 <__aeabi_f2d>
 800db0a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800db0e:	4b8d      	ldr	r3, [pc, #564]	@ (800dd44 <LCD_print_tank+0x1ab4>)
 800db10:	f7f2 fea0 	bl	8000854 <__aeabi_dcmplt>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	f000 80e9 	beq.w	800dcee <LCD_print_tank+0x1a5e>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	7b5b      	ldrb	r3, [r3, #13]
 800db20:	623b      	str	r3, [r7, #32]
 800db22:	e0db      	b.n	800dcdc <LCD_print_tank+0x1a4c>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	7b1b      	ldrb	r3, [r3, #12]
 800db28:	627b      	str	r3, [r7, #36]	@ 0x24
 800db2a:	e0cc      	b.n	800dcc6 <LCD_print_tank+0x1a36>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	7b1b      	ldrb	r3, [r3, #12]
 800db30:	3303      	adds	r3, #3
 800db32:	461a      	mov	r2, r3
 800db34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db36:	4293      	cmp	r3, r2
 800db38:	d316      	bcc.n	800db68 <LCD_print_tank+0x18d8>
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	7b1b      	ldrb	r3, [r3, #12]
 800db3e:	331d      	adds	r3, #29
 800db40:	461a      	mov	r2, r3
 800db42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db44:	4293      	cmp	r3, r2
 800db46:	d80f      	bhi.n	800db68 <LCD_print_tank+0x18d8>
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	7b5b      	ldrb	r3, [r3, #13]
 800db4c:	3301      	adds	r3, #1
 800db4e:	461a      	mov	r2, r3
 800db50:	6a3b      	ldr	r3, [r7, #32]
 800db52:	4293      	cmp	r3, r2
 800db54:	d108      	bne.n	800db68 <LCD_print_tank+0x18d8>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800db56:	f107 011c 	add.w	r1, r7, #28
 800db5a:	f04f 33ff 	mov.w	r3, #4294967295
 800db5e:	2202      	movs	r2, #2
 800db60:	4877      	ldr	r0, [pc, #476]	@ (800dd40 <LCD_print_tank+0x1ab0>)
 800db62:	f00a fdcc 	bl	80186fe <HAL_SPI_Transmit>
 800db66:	e0ab      	b.n	800dcc0 <LCD_print_tank+0x1a30>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	7b1b      	ldrb	r3, [r3, #12]
 800db6c:	3303      	adds	r3, #3
 800db6e:	461a      	mov	r2, r3
 800db70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db72:	4293      	cmp	r3, r2
 800db74:	d316      	bcc.n	800dba4 <LCD_print_tank+0x1914>
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	7b1b      	ldrb	r3, [r3, #12]
 800db7a:	331d      	adds	r3, #29
 800db7c:	461a      	mov	r2, r3
 800db7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db80:	4293      	cmp	r3, r2
 800db82:	d80f      	bhi.n	800dba4 <LCD_print_tank+0x1914>
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	7b5b      	ldrb	r3, [r3, #13]
 800db88:	3342      	adds	r3, #66	@ 0x42
 800db8a:	461a      	mov	r2, r3
 800db8c:	6a3b      	ldr	r3, [r7, #32]
 800db8e:	4293      	cmp	r3, r2
 800db90:	d108      	bne.n	800dba4 <LCD_print_tank+0x1914>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800db92:	f107 011c 	add.w	r1, r7, #28
 800db96:	f04f 33ff 	mov.w	r3, #4294967295
 800db9a:	2202      	movs	r2, #2
 800db9c:	4868      	ldr	r0, [pc, #416]	@ (800dd40 <LCD_print_tank+0x1ab0>)
 800db9e:	f00a fdae 	bl	80186fe <HAL_SPI_Transmit>
 800dba2:	e08d      	b.n	800dcc0 <LCD_print_tank+0x1a30>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	7b1b      	ldrb	r3, [r3, #12]
 800dba8:	331d      	adds	r3, #29
 800dbaa:	461a      	mov	r2, r3
 800dbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d116      	bne.n	800dbe0 <LCD_print_tank+0x1950>
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	7b5b      	ldrb	r3, [r3, #13]
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	461a      	mov	r2, r3
 800dbba:	6a3b      	ldr	r3, [r7, #32]
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d30f      	bcc.n	800dbe0 <LCD_print_tank+0x1950>
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	7b5b      	ldrb	r3, [r3, #13]
 800dbc4:	3342      	adds	r3, #66	@ 0x42
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	6a3b      	ldr	r3, [r7, #32]
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d808      	bhi.n	800dbe0 <LCD_print_tank+0x1950>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800dbce:	f107 011c 	add.w	r1, r7, #28
 800dbd2:	f04f 33ff 	mov.w	r3, #4294967295
 800dbd6:	2202      	movs	r2, #2
 800dbd8:	4859      	ldr	r0, [pc, #356]	@ (800dd40 <LCD_print_tank+0x1ab0>)
 800dbda:	f00a fd90 	bl	80186fe <HAL_SPI_Transmit>
 800dbde:	e06f      	b.n	800dcc0 <LCD_print_tank+0x1a30>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	7b1b      	ldrb	r3, [r3, #12]
 800dbe4:	3303      	adds	r3, #3
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d116      	bne.n	800dc1c <LCD_print_tank+0x198c>
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	7b5b      	ldrb	r3, [r3, #13]
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	6a3b      	ldr	r3, [r7, #32]
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d30f      	bcc.n	800dc1c <LCD_print_tank+0x198c>
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	7b5b      	ldrb	r3, [r3, #13]
 800dc00:	3342      	adds	r3, #66	@ 0x42
 800dc02:	461a      	mov	r2, r3
 800dc04:	6a3b      	ldr	r3, [r7, #32]
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d808      	bhi.n	800dc1c <LCD_print_tank+0x198c>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800dc0a:	f107 011c 	add.w	r1, r7, #28
 800dc0e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc12:	2202      	movs	r2, #2
 800dc14:	484a      	ldr	r0, [pc, #296]	@ (800dd40 <LCD_print_tank+0x1ab0>)
 800dc16:	f00a fd72 	bl	80186fe <HAL_SPI_Transmit>
 800dc1a:	e051      	b.n	800dcc0 <LCD_print_tank+0x1a30>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+43) && wiersz<=(ADRES->Y0_SET+66))))
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	7b1b      	ldrb	r3, [r3, #12]
 800dc20:	3304      	adds	r3, #4
 800dc22:	461a      	mov	r2, r3
 800dc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d31d      	bcc.n	800dc66 <LCD_print_tank+0x19d6>
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	7b1b      	ldrb	r3, [r3, #12]
 800dc2e:	331c      	adds	r3, #28
 800dc30:	461a      	mov	r2, r3
 800dc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d816      	bhi.n	800dc66 <LCD_print_tank+0x19d6>
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	7b5b      	ldrb	r3, [r3, #13]
 800dc3c:	332b      	adds	r3, #43	@ 0x2b
 800dc3e:	461a      	mov	r2, r3
 800dc40:	6a3b      	ldr	r3, [r7, #32]
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d30f      	bcc.n	800dc66 <LCD_print_tank+0x19d6>
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	7b5b      	ldrb	r3, [r3, #13]
 800dc4a:	3342      	adds	r3, #66	@ 0x42
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	6a3b      	ldr	r3, [r7, #32]
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d808      	bhi.n	800dc66 <LCD_print_tank+0x19d6>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800dc54:	f107 0114 	add.w	r1, r7, #20
 800dc58:	f04f 33ff 	mov.w	r3, #4294967295
 800dc5c:	2202      	movs	r2, #2
 800dc5e:	4838      	ldr	r0, [pc, #224]	@ (800dd40 <LCD_print_tank+0x1ab0>)
 800dc60:	f00a fd4d 	bl	80186fe <HAL_SPI_Transmit>
 800dc64:	e02c      	b.n	800dcc0 <LCD_print_tank+0x1a30>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+42))))
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	7b1b      	ldrb	r3, [r3, #12]
 800dc6a:	3304      	adds	r3, #4
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d31d      	bcc.n	800dcb0 <LCD_print_tank+0x1a20>
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	7b1b      	ldrb	r3, [r3, #12]
 800dc78:	331c      	adds	r3, #28
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d816      	bhi.n	800dcb0 <LCD_print_tank+0x1a20>
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	7b5b      	ldrb	r3, [r3, #13]
 800dc86:	3302      	adds	r3, #2
 800dc88:	461a      	mov	r2, r3
 800dc8a:	6a3b      	ldr	r3, [r7, #32]
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d30f      	bcc.n	800dcb0 <LCD_print_tank+0x1a20>
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	7b5b      	ldrb	r3, [r3, #13]
 800dc94:	332a      	adds	r3, #42	@ 0x2a
 800dc96:	461a      	mov	r2, r3
 800dc98:	6a3b      	ldr	r3, [r7, #32]
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d808      	bhi.n	800dcb0 <LCD_print_tank+0x1a20>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800dc9e:	f107 0118 	add.w	r1, r7, #24
 800dca2:	f04f 33ff 	mov.w	r3, #4294967295
 800dca6:	2202      	movs	r2, #2
 800dca8:	4825      	ldr	r0, [pc, #148]	@ (800dd40 <LCD_print_tank+0x1ab0>)
 800dcaa:	f00a fd28 	bl	80186fe <HAL_SPI_Transmit>
 800dcae:	e007      	b.n	800dcc0 <LCD_print_tank+0x1a30>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800dcb0:	f107 0110 	add.w	r1, r7, #16
 800dcb4:	f04f 33ff 	mov.w	r3, #4294967295
 800dcb8:	2202      	movs	r2, #2
 800dcba:	4821      	ldr	r0, [pc, #132]	@ (800dd40 <LCD_print_tank+0x1ab0>)
 800dcbc:	f00a fd1f 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800dcc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	7b9b      	ldrb	r3, [r3, #14]
 800dcca:	3301      	adds	r3, #1
 800dccc:	461a      	mov	r2, r3
 800dcce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	f4ff af2b 	bcc.w	800db2c <LCD_print_tank+0x189c>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800dcd6:	6a3b      	ldr	r3, [r7, #32]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	623b      	str	r3, [r7, #32]
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	7bdb      	ldrb	r3, [r3, #15]
 800dce0:	461a      	mov	r2, r3
 800dce2:	6a3b      	ldr	r3, [r7, #32]
 800dce4:	4293      	cmp	r3, r2
 800dce6:	f67f af1d 	bls.w	800db24 <LCD_print_tank+0x1894>
	else if(num>=1.1 && num<1.2)
 800dcea:	f002 bdb6 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=1.2 && num<1.3)
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7f2 fcf8 	bl	80006e4 <__aeabi_f2d>
 800dcf4:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800dcf8:	4b12      	ldr	r3, [pc, #72]	@ (800dd44 <LCD_print_tank+0x1ab4>)
 800dcfa:	f7f2 fdbf 	bl	800087c <__aeabi_dcmpge>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	f000 8102 	beq.w	800df0a <LCD_print_tank+0x1c7a>
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f7f2 fcec 	bl	80006e4 <__aeabi_f2d>
 800dd0c:	a30a      	add	r3, pc, #40	@ (adr r3, 800dd38 <LCD_print_tank+0x1aa8>)
 800dd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd12:	f7f2 fd9f 	bl	8000854 <__aeabi_dcmplt>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	f000 80f6 	beq.w	800df0a <LCD_print_tank+0x1c7a>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	7b5b      	ldrb	r3, [r3, #13]
 800dd22:	623b      	str	r3, [r7, #32]
 800dd24:	e0e8      	b.n	800def8 <LCD_print_tank+0x1c68>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	7b1b      	ldrb	r3, [r3, #12]
 800dd2a:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd2c:	e0d9      	b.n	800dee2 <LCD_print_tank+0x1c52>
 800dd2e:	bf00      	nop
 800dd30:	9999999a 	.word	0x9999999a
 800dd34:	3ff19999 	.word	0x3ff19999
 800dd38:	cccccccd 	.word	0xcccccccd
 800dd3c:	3ff4cccc 	.word	0x3ff4cccc
 800dd40:	200004a4 	.word	0x200004a4
 800dd44:	3ff33333 	.word	0x3ff33333
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	7b1b      	ldrb	r3, [r3, #12]
 800dd4c:	3303      	adds	r3, #3
 800dd4e:	461a      	mov	r2, r3
 800dd50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d316      	bcc.n	800dd84 <LCD_print_tank+0x1af4>
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	7b1b      	ldrb	r3, [r3, #12]
 800dd5a:	331d      	adds	r3, #29
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d80f      	bhi.n	800dd84 <LCD_print_tank+0x1af4>
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	7b5b      	ldrb	r3, [r3, #13]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	6a3b      	ldr	r3, [r7, #32]
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d108      	bne.n	800dd84 <LCD_print_tank+0x1af4>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800dd72:	f107 011c 	add.w	r1, r7, #28
 800dd76:	f04f 33ff 	mov.w	r3, #4294967295
 800dd7a:	2202      	movs	r2, #2
 800dd7c:	48a4      	ldr	r0, [pc, #656]	@ (800e010 <LCD_print_tank+0x1d80>)
 800dd7e:	f00a fcbe 	bl	80186fe <HAL_SPI_Transmit>
 800dd82:	e0ab      	b.n	800dedc <LCD_print_tank+0x1c4c>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	7b1b      	ldrb	r3, [r3, #12]
 800dd88:	3303      	adds	r3, #3
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d316      	bcc.n	800ddc0 <LCD_print_tank+0x1b30>
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	7b1b      	ldrb	r3, [r3, #12]
 800dd96:	331d      	adds	r3, #29
 800dd98:	461a      	mov	r2, r3
 800dd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d80f      	bhi.n	800ddc0 <LCD_print_tank+0x1b30>
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	7b5b      	ldrb	r3, [r3, #13]
 800dda4:	3342      	adds	r3, #66	@ 0x42
 800dda6:	461a      	mov	r2, r3
 800dda8:	6a3b      	ldr	r3, [r7, #32]
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d108      	bne.n	800ddc0 <LCD_print_tank+0x1b30>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800ddae:	f107 011c 	add.w	r1, r7, #28
 800ddb2:	f04f 33ff 	mov.w	r3, #4294967295
 800ddb6:	2202      	movs	r2, #2
 800ddb8:	4895      	ldr	r0, [pc, #596]	@ (800e010 <LCD_print_tank+0x1d80>)
 800ddba:	f00a fca0 	bl	80186fe <HAL_SPI_Transmit>
 800ddbe:	e08d      	b.n	800dedc <LCD_print_tank+0x1c4c>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	7b1b      	ldrb	r3, [r3, #12]
 800ddc4:	331d      	adds	r3, #29
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	d116      	bne.n	800ddfc <LCD_print_tank+0x1b6c>
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	7b5b      	ldrb	r3, [r3, #13]
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	6a3b      	ldr	r3, [r7, #32]
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d30f      	bcc.n	800ddfc <LCD_print_tank+0x1b6c>
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	7b5b      	ldrb	r3, [r3, #13]
 800dde0:	3342      	adds	r3, #66	@ 0x42
 800dde2:	461a      	mov	r2, r3
 800dde4:	6a3b      	ldr	r3, [r7, #32]
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d808      	bhi.n	800ddfc <LCD_print_tank+0x1b6c>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800ddea:	f107 011c 	add.w	r1, r7, #28
 800ddee:	f04f 33ff 	mov.w	r3, #4294967295
 800ddf2:	2202      	movs	r2, #2
 800ddf4:	4886      	ldr	r0, [pc, #536]	@ (800e010 <LCD_print_tank+0x1d80>)
 800ddf6:	f00a fc82 	bl	80186fe <HAL_SPI_Transmit>
 800ddfa:	e06f      	b.n	800dedc <LCD_print_tank+0x1c4c>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	7b1b      	ldrb	r3, [r3, #12]
 800de00:	3303      	adds	r3, #3
 800de02:	461a      	mov	r2, r3
 800de04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de06:	4293      	cmp	r3, r2
 800de08:	d116      	bne.n	800de38 <LCD_print_tank+0x1ba8>
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	7b5b      	ldrb	r3, [r3, #13]
 800de0e:	3301      	adds	r3, #1
 800de10:	461a      	mov	r2, r3
 800de12:	6a3b      	ldr	r3, [r7, #32]
 800de14:	4293      	cmp	r3, r2
 800de16:	d30f      	bcc.n	800de38 <LCD_print_tank+0x1ba8>
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	7b5b      	ldrb	r3, [r3, #13]
 800de1c:	3342      	adds	r3, #66	@ 0x42
 800de1e:	461a      	mov	r2, r3
 800de20:	6a3b      	ldr	r3, [r7, #32]
 800de22:	4293      	cmp	r3, r2
 800de24:	d808      	bhi.n	800de38 <LCD_print_tank+0x1ba8>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800de26:	f107 011c 	add.w	r1, r7, #28
 800de2a:	f04f 33ff 	mov.w	r3, #4294967295
 800de2e:	2202      	movs	r2, #2
 800de30:	4877      	ldr	r0, [pc, #476]	@ (800e010 <LCD_print_tank+0x1d80>)
 800de32:	f00a fc64 	bl	80186fe <HAL_SPI_Transmit>
 800de36:	e051      	b.n	800dedc <LCD_print_tank+0x1c4c>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+41) && wiersz<=(ADRES->Y0_SET+66))))
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	7b1b      	ldrb	r3, [r3, #12]
 800de3c:	3304      	adds	r3, #4
 800de3e:	461a      	mov	r2, r3
 800de40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de42:	4293      	cmp	r3, r2
 800de44:	d31d      	bcc.n	800de82 <LCD_print_tank+0x1bf2>
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	7b1b      	ldrb	r3, [r3, #12]
 800de4a:	331c      	adds	r3, #28
 800de4c:	461a      	mov	r2, r3
 800de4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de50:	4293      	cmp	r3, r2
 800de52:	d816      	bhi.n	800de82 <LCD_print_tank+0x1bf2>
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	7b5b      	ldrb	r3, [r3, #13]
 800de58:	3329      	adds	r3, #41	@ 0x29
 800de5a:	461a      	mov	r2, r3
 800de5c:	6a3b      	ldr	r3, [r7, #32]
 800de5e:	4293      	cmp	r3, r2
 800de60:	d30f      	bcc.n	800de82 <LCD_print_tank+0x1bf2>
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	7b5b      	ldrb	r3, [r3, #13]
 800de66:	3342      	adds	r3, #66	@ 0x42
 800de68:	461a      	mov	r2, r3
 800de6a:	6a3b      	ldr	r3, [r7, #32]
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d808      	bhi.n	800de82 <LCD_print_tank+0x1bf2>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800de70:	f107 0114 	add.w	r1, r7, #20
 800de74:	f04f 33ff 	mov.w	r3, #4294967295
 800de78:	2202      	movs	r2, #2
 800de7a:	4865      	ldr	r0, [pc, #404]	@ (800e010 <LCD_print_tank+0x1d80>)
 800de7c:	f00a fc3f 	bl	80186fe <HAL_SPI_Transmit>
 800de80:	e02c      	b.n	800dedc <LCD_print_tank+0x1c4c>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+40))))
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	7b1b      	ldrb	r3, [r3, #12]
 800de86:	3304      	adds	r3, #4
 800de88:	461a      	mov	r2, r3
 800de8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d31d      	bcc.n	800decc <LCD_print_tank+0x1c3c>
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	7b1b      	ldrb	r3, [r3, #12]
 800de94:	331c      	adds	r3, #28
 800de96:	461a      	mov	r2, r3
 800de98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d816      	bhi.n	800decc <LCD_print_tank+0x1c3c>
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	7b5b      	ldrb	r3, [r3, #13]
 800dea2:	3302      	adds	r3, #2
 800dea4:	461a      	mov	r2, r3
 800dea6:	6a3b      	ldr	r3, [r7, #32]
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d30f      	bcc.n	800decc <LCD_print_tank+0x1c3c>
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	7b5b      	ldrb	r3, [r3, #13]
 800deb0:	3328      	adds	r3, #40	@ 0x28
 800deb2:	461a      	mov	r2, r3
 800deb4:	6a3b      	ldr	r3, [r7, #32]
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d808      	bhi.n	800decc <LCD_print_tank+0x1c3c>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800deba:	f107 0118 	add.w	r1, r7, #24
 800debe:	f04f 33ff 	mov.w	r3, #4294967295
 800dec2:	2202      	movs	r2, #2
 800dec4:	4852      	ldr	r0, [pc, #328]	@ (800e010 <LCD_print_tank+0x1d80>)
 800dec6:	f00a fc1a 	bl	80186fe <HAL_SPI_Transmit>
 800deca:	e007      	b.n	800dedc <LCD_print_tank+0x1c4c>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800decc:	f107 0110 	add.w	r1, r7, #16
 800ded0:	f04f 33ff 	mov.w	r3, #4294967295
 800ded4:	2202      	movs	r2, #2
 800ded6:	484e      	ldr	r0, [pc, #312]	@ (800e010 <LCD_print_tank+0x1d80>)
 800ded8:	f00a fc11 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800dedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dede:	3301      	adds	r3, #1
 800dee0:	627b      	str	r3, [r7, #36]	@ 0x24
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	7b9b      	ldrb	r3, [r3, #14]
 800dee6:	3301      	adds	r3, #1
 800dee8:	461a      	mov	r2, r3
 800deea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deec:	4293      	cmp	r3, r2
 800deee:	f4ff af2b 	bcc.w	800dd48 <LCD_print_tank+0x1ab8>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800def2:	6a3b      	ldr	r3, [r7, #32]
 800def4:	3301      	adds	r3, #1
 800def6:	623b      	str	r3, [r7, #32]
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	7bdb      	ldrb	r3, [r3, #15]
 800defc:	461a      	mov	r2, r3
 800defe:	6a3b      	ldr	r3, [r7, #32]
 800df00:	4293      	cmp	r3, r2
 800df02:	f67f af10 	bls.w	800dd26 <LCD_print_tank+0x1a96>
	else if(num>=1.2 && num<1.3)
 800df06:	f002 bca8 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=1.3 && num<1.4)
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f7f2 fbea 	bl	80006e4 <__aeabi_f2d>
 800df10:	a33b      	add	r3, pc, #236	@ (adr r3, 800e000 <LCD_print_tank+0x1d70>)
 800df12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df16:	f7f2 fcb1 	bl	800087c <__aeabi_dcmpge>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	f000 8100 	beq.w	800e122 <LCD_print_tank+0x1e92>
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f7f2 fbde 	bl	80006e4 <__aeabi_f2d>
 800df28:	a337      	add	r3, pc, #220	@ (adr r3, 800e008 <LCD_print_tank+0x1d78>)
 800df2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2e:	f7f2 fc91 	bl	8000854 <__aeabi_dcmplt>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	f000 80f4 	beq.w	800e122 <LCD_print_tank+0x1e92>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	7b5b      	ldrb	r3, [r3, #13]
 800df3e:	623b      	str	r3, [r7, #32]
 800df40:	e0e6      	b.n	800e110 <LCD_print_tank+0x1e80>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	7b1b      	ldrb	r3, [r3, #12]
 800df46:	627b      	str	r3, [r7, #36]	@ 0x24
 800df48:	e0d7      	b.n	800e0fa <LCD_print_tank+0x1e6a>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	7b1b      	ldrb	r3, [r3, #12]
 800df4e:	3303      	adds	r3, #3
 800df50:	461a      	mov	r2, r3
 800df52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df54:	4293      	cmp	r3, r2
 800df56:	d316      	bcc.n	800df86 <LCD_print_tank+0x1cf6>
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	7b1b      	ldrb	r3, [r3, #12]
 800df5c:	331d      	adds	r3, #29
 800df5e:	461a      	mov	r2, r3
 800df60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df62:	4293      	cmp	r3, r2
 800df64:	d80f      	bhi.n	800df86 <LCD_print_tank+0x1cf6>
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	7b5b      	ldrb	r3, [r3, #13]
 800df6a:	3301      	adds	r3, #1
 800df6c:	461a      	mov	r2, r3
 800df6e:	6a3b      	ldr	r3, [r7, #32]
 800df70:	4293      	cmp	r3, r2
 800df72:	d108      	bne.n	800df86 <LCD_print_tank+0x1cf6>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800df74:	f107 011c 	add.w	r1, r7, #28
 800df78:	f04f 33ff 	mov.w	r3, #4294967295
 800df7c:	2202      	movs	r2, #2
 800df7e:	4824      	ldr	r0, [pc, #144]	@ (800e010 <LCD_print_tank+0x1d80>)
 800df80:	f00a fbbd 	bl	80186fe <HAL_SPI_Transmit>
 800df84:	e0b6      	b.n	800e0f4 <LCD_print_tank+0x1e64>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	7b1b      	ldrb	r3, [r3, #12]
 800df8a:	3303      	adds	r3, #3
 800df8c:	461a      	mov	r2, r3
 800df8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df90:	4293      	cmp	r3, r2
 800df92:	d316      	bcc.n	800dfc2 <LCD_print_tank+0x1d32>
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	7b1b      	ldrb	r3, [r3, #12]
 800df98:	331d      	adds	r3, #29
 800df9a:	461a      	mov	r2, r3
 800df9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d80f      	bhi.n	800dfc2 <LCD_print_tank+0x1d32>
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	7b5b      	ldrb	r3, [r3, #13]
 800dfa6:	3342      	adds	r3, #66	@ 0x42
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	6a3b      	ldr	r3, [r7, #32]
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d108      	bne.n	800dfc2 <LCD_print_tank+0x1d32>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800dfb0:	f107 011c 	add.w	r1, r7, #28
 800dfb4:	f04f 33ff 	mov.w	r3, #4294967295
 800dfb8:	2202      	movs	r2, #2
 800dfba:	4815      	ldr	r0, [pc, #84]	@ (800e010 <LCD_print_tank+0x1d80>)
 800dfbc:	f00a fb9f 	bl	80186fe <HAL_SPI_Transmit>
 800dfc0:	e098      	b.n	800e0f4 <LCD_print_tank+0x1e64>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800dfc2:	68bb      	ldr	r3, [r7, #8]
 800dfc4:	7b1b      	ldrb	r3, [r3, #12]
 800dfc6:	331d      	adds	r3, #29
 800dfc8:	461a      	mov	r2, r3
 800dfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d121      	bne.n	800e014 <LCD_print_tank+0x1d84>
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	7b5b      	ldrb	r3, [r3, #13]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	6a3b      	ldr	r3, [r7, #32]
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d31a      	bcc.n	800e014 <LCD_print_tank+0x1d84>
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	7b5b      	ldrb	r3, [r3, #13]
 800dfe2:	3342      	adds	r3, #66	@ 0x42
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	6a3b      	ldr	r3, [r7, #32]
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d813      	bhi.n	800e014 <LCD_print_tank+0x1d84>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800dfec:	f107 011c 	add.w	r1, r7, #28
 800dff0:	f04f 33ff 	mov.w	r3, #4294967295
 800dff4:	2202      	movs	r2, #2
 800dff6:	4806      	ldr	r0, [pc, #24]	@ (800e010 <LCD_print_tank+0x1d80>)
 800dff8:	f00a fb81 	bl	80186fe <HAL_SPI_Transmit>
 800dffc:	e07a      	b.n	800e0f4 <LCD_print_tank+0x1e64>
 800dffe:	bf00      	nop
 800e000:	cccccccd 	.word	0xcccccccd
 800e004:	3ff4cccc 	.word	0x3ff4cccc
 800e008:	66666666 	.word	0x66666666
 800e00c:	3ff66666 	.word	0x3ff66666
 800e010:	200004a4 	.word	0x200004a4
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	7b1b      	ldrb	r3, [r3, #12]
 800e018:	3303      	adds	r3, #3
 800e01a:	461a      	mov	r2, r3
 800e01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e01e:	4293      	cmp	r3, r2
 800e020:	d116      	bne.n	800e050 <LCD_print_tank+0x1dc0>
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	7b5b      	ldrb	r3, [r3, #13]
 800e026:	3301      	adds	r3, #1
 800e028:	461a      	mov	r2, r3
 800e02a:	6a3b      	ldr	r3, [r7, #32]
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d30f      	bcc.n	800e050 <LCD_print_tank+0x1dc0>
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	7b5b      	ldrb	r3, [r3, #13]
 800e034:	3342      	adds	r3, #66	@ 0x42
 800e036:	461a      	mov	r2, r3
 800e038:	6a3b      	ldr	r3, [r7, #32]
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d808      	bhi.n	800e050 <LCD_print_tank+0x1dc0>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e03e:	f107 011c 	add.w	r1, r7, #28
 800e042:	f04f 33ff 	mov.w	r3, #4294967295
 800e046:	2202      	movs	r2, #2
 800e048:	4895      	ldr	r0, [pc, #596]	@ (800e2a0 <LCD_print_tank+0x2010>)
 800e04a:	f00a fb58 	bl	80186fe <HAL_SPI_Transmit>
 800e04e:	e051      	b.n	800e0f4 <LCD_print_tank+0x1e64>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+39) && wiersz<=(ADRES->Y0_SET+66))))
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	7b1b      	ldrb	r3, [r3, #12]
 800e054:	3304      	adds	r3, #4
 800e056:	461a      	mov	r2, r3
 800e058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d31d      	bcc.n	800e09a <LCD_print_tank+0x1e0a>
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	7b1b      	ldrb	r3, [r3, #12]
 800e062:	331c      	adds	r3, #28
 800e064:	461a      	mov	r2, r3
 800e066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e068:	4293      	cmp	r3, r2
 800e06a:	d816      	bhi.n	800e09a <LCD_print_tank+0x1e0a>
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	7b5b      	ldrb	r3, [r3, #13]
 800e070:	3327      	adds	r3, #39	@ 0x27
 800e072:	461a      	mov	r2, r3
 800e074:	6a3b      	ldr	r3, [r7, #32]
 800e076:	4293      	cmp	r3, r2
 800e078:	d30f      	bcc.n	800e09a <LCD_print_tank+0x1e0a>
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	7b5b      	ldrb	r3, [r3, #13]
 800e07e:	3342      	adds	r3, #66	@ 0x42
 800e080:	461a      	mov	r2, r3
 800e082:	6a3b      	ldr	r3, [r7, #32]
 800e084:	4293      	cmp	r3, r2
 800e086:	d808      	bhi.n	800e09a <LCD_print_tank+0x1e0a>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800e088:	f107 0114 	add.w	r1, r7, #20
 800e08c:	f04f 33ff 	mov.w	r3, #4294967295
 800e090:	2202      	movs	r2, #2
 800e092:	4883      	ldr	r0, [pc, #524]	@ (800e2a0 <LCD_print_tank+0x2010>)
 800e094:	f00a fb33 	bl	80186fe <HAL_SPI_Transmit>
 800e098:	e02c      	b.n	800e0f4 <LCD_print_tank+0x1e64>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+38))))
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	7b1b      	ldrb	r3, [r3, #12]
 800e09e:	3304      	adds	r3, #4
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d31d      	bcc.n	800e0e4 <LCD_print_tank+0x1e54>
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	7b1b      	ldrb	r3, [r3, #12]
 800e0ac:	331c      	adds	r3, #28
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d816      	bhi.n	800e0e4 <LCD_print_tank+0x1e54>
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	7b5b      	ldrb	r3, [r3, #13]
 800e0ba:	3302      	adds	r3, #2
 800e0bc:	461a      	mov	r2, r3
 800e0be:	6a3b      	ldr	r3, [r7, #32]
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	d30f      	bcc.n	800e0e4 <LCD_print_tank+0x1e54>
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	7b5b      	ldrb	r3, [r3, #13]
 800e0c8:	3326      	adds	r3, #38	@ 0x26
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	6a3b      	ldr	r3, [r7, #32]
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d808      	bhi.n	800e0e4 <LCD_print_tank+0x1e54>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800e0d2:	f107 0118 	add.w	r1, r7, #24
 800e0d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e0da:	2202      	movs	r2, #2
 800e0dc:	4870      	ldr	r0, [pc, #448]	@ (800e2a0 <LCD_print_tank+0x2010>)
 800e0de:	f00a fb0e 	bl	80186fe <HAL_SPI_Transmit>
 800e0e2:	e007      	b.n	800e0f4 <LCD_print_tank+0x1e64>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800e0e4:	f107 0110 	add.w	r1, r7, #16
 800e0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e0ec:	2202      	movs	r2, #2
 800e0ee:	486c      	ldr	r0, [pc, #432]	@ (800e2a0 <LCD_print_tank+0x2010>)
 800e0f0:	f00a fb05 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800e0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	7b9b      	ldrb	r3, [r3, #14]
 800e0fe:	3301      	adds	r3, #1
 800e100:	461a      	mov	r2, r3
 800e102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e104:	4293      	cmp	r3, r2
 800e106:	f4ff af20 	bcc.w	800df4a <LCD_print_tank+0x1cba>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800e10a:	6a3b      	ldr	r3, [r7, #32]
 800e10c:	3301      	adds	r3, #1
 800e10e:	623b      	str	r3, [r7, #32]
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	7bdb      	ldrb	r3, [r3, #15]
 800e114:	461a      	mov	r2, r3
 800e116:	6a3b      	ldr	r3, [r7, #32]
 800e118:	4293      	cmp	r3, r2
 800e11a:	f67f af12 	bls.w	800df42 <LCD_print_tank+0x1cb2>
	else if(num>=1.3 && num<1.4)
 800e11e:	f002 bb9c 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=1.4 && num<1.5)
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f7f2 fade 	bl	80006e4 <__aeabi_f2d>
 800e128:	a35b      	add	r3, pc, #364	@ (adr r3, 800e298 <LCD_print_tank+0x2008>)
 800e12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12e:	f7f2 fba5 	bl	800087c <__aeabi_dcmpge>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	f000 80f9 	beq.w	800e32c <LCD_print_tank+0x209c>
 800e13a:	edd7 7a01 	vldr	s15, [r7, #4]
 800e13e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800e142:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e14a:	f140 80ef 	bpl.w	800e32c <LCD_print_tank+0x209c>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	7b5b      	ldrb	r3, [r3, #13]
 800e152:	623b      	str	r3, [r7, #32]
 800e154:	e0e1      	b.n	800e31a <LCD_print_tank+0x208a>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	7b1b      	ldrb	r3, [r3, #12]
 800e15a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e15c:	e0d2      	b.n	800e304 <LCD_print_tank+0x2074>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	7b1b      	ldrb	r3, [r3, #12]
 800e162:	3303      	adds	r3, #3
 800e164:	461a      	mov	r2, r3
 800e166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e168:	4293      	cmp	r3, r2
 800e16a:	d316      	bcc.n	800e19a <LCD_print_tank+0x1f0a>
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	7b1b      	ldrb	r3, [r3, #12]
 800e170:	331d      	adds	r3, #29
 800e172:	461a      	mov	r2, r3
 800e174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e176:	4293      	cmp	r3, r2
 800e178:	d80f      	bhi.n	800e19a <LCD_print_tank+0x1f0a>
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	7b5b      	ldrb	r3, [r3, #13]
 800e17e:	3301      	adds	r3, #1
 800e180:	461a      	mov	r2, r3
 800e182:	6a3b      	ldr	r3, [r7, #32]
 800e184:	4293      	cmp	r3, r2
 800e186:	d108      	bne.n	800e19a <LCD_print_tank+0x1f0a>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e188:	f107 011c 	add.w	r1, r7, #28
 800e18c:	f04f 33ff 	mov.w	r3, #4294967295
 800e190:	2202      	movs	r2, #2
 800e192:	4843      	ldr	r0, [pc, #268]	@ (800e2a0 <LCD_print_tank+0x2010>)
 800e194:	f00a fab3 	bl	80186fe <HAL_SPI_Transmit>
 800e198:	e0b1      	b.n	800e2fe <LCD_print_tank+0x206e>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	7b1b      	ldrb	r3, [r3, #12]
 800e19e:	3303      	adds	r3, #3
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d316      	bcc.n	800e1d6 <LCD_print_tank+0x1f46>
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	7b1b      	ldrb	r3, [r3, #12]
 800e1ac:	331d      	adds	r3, #29
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d80f      	bhi.n	800e1d6 <LCD_print_tank+0x1f46>
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	7b5b      	ldrb	r3, [r3, #13]
 800e1ba:	3342      	adds	r3, #66	@ 0x42
 800e1bc:	461a      	mov	r2, r3
 800e1be:	6a3b      	ldr	r3, [r7, #32]
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	d108      	bne.n	800e1d6 <LCD_print_tank+0x1f46>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e1c4:	f107 011c 	add.w	r1, r7, #28
 800e1c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1cc:	2202      	movs	r2, #2
 800e1ce:	4834      	ldr	r0, [pc, #208]	@ (800e2a0 <LCD_print_tank+0x2010>)
 800e1d0:	f00a fa95 	bl	80186fe <HAL_SPI_Transmit>
 800e1d4:	e093      	b.n	800e2fe <LCD_print_tank+0x206e>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	7b1b      	ldrb	r3, [r3, #12]
 800e1da:	331d      	adds	r3, #29
 800e1dc:	461a      	mov	r2, r3
 800e1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	d116      	bne.n	800e212 <LCD_print_tank+0x1f82>
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	7b5b      	ldrb	r3, [r3, #13]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	6a3b      	ldr	r3, [r7, #32]
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d30f      	bcc.n	800e212 <LCD_print_tank+0x1f82>
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	7b5b      	ldrb	r3, [r3, #13]
 800e1f6:	3342      	adds	r3, #66	@ 0x42
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	6a3b      	ldr	r3, [r7, #32]
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d808      	bhi.n	800e212 <LCD_print_tank+0x1f82>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e200:	f107 011c 	add.w	r1, r7, #28
 800e204:	f04f 33ff 	mov.w	r3, #4294967295
 800e208:	2202      	movs	r2, #2
 800e20a:	4825      	ldr	r0, [pc, #148]	@ (800e2a0 <LCD_print_tank+0x2010>)
 800e20c:	f00a fa77 	bl	80186fe <HAL_SPI_Transmit>
 800e210:	e075      	b.n	800e2fe <LCD_print_tank+0x206e>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	7b1b      	ldrb	r3, [r3, #12]
 800e216:	3303      	adds	r3, #3
 800e218:	461a      	mov	r2, r3
 800e21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d116      	bne.n	800e24e <LCD_print_tank+0x1fbe>
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	7b5b      	ldrb	r3, [r3, #13]
 800e224:	3301      	adds	r3, #1
 800e226:	461a      	mov	r2, r3
 800e228:	6a3b      	ldr	r3, [r7, #32]
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d30f      	bcc.n	800e24e <LCD_print_tank+0x1fbe>
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	7b5b      	ldrb	r3, [r3, #13]
 800e232:	3342      	adds	r3, #66	@ 0x42
 800e234:	461a      	mov	r2, r3
 800e236:	6a3b      	ldr	r3, [r7, #32]
 800e238:	4293      	cmp	r3, r2
 800e23a:	d808      	bhi.n	800e24e <LCD_print_tank+0x1fbe>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e23c:	f107 011c 	add.w	r1, r7, #28
 800e240:	f04f 33ff 	mov.w	r3, #4294967295
 800e244:	2202      	movs	r2, #2
 800e246:	4816      	ldr	r0, [pc, #88]	@ (800e2a0 <LCD_print_tank+0x2010>)
 800e248:	f00a fa59 	bl	80186fe <HAL_SPI_Transmit>
 800e24c:	e057      	b.n	800e2fe <LCD_print_tank+0x206e>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+37) && wiersz<=(ADRES->Y0_SET+66))))
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	7b1b      	ldrb	r3, [r3, #12]
 800e252:	3304      	adds	r3, #4
 800e254:	461a      	mov	r2, r3
 800e256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e258:	4293      	cmp	r3, r2
 800e25a:	d323      	bcc.n	800e2a4 <LCD_print_tank+0x2014>
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	7b1b      	ldrb	r3, [r3, #12]
 800e260:	331c      	adds	r3, #28
 800e262:	461a      	mov	r2, r3
 800e264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e266:	4293      	cmp	r3, r2
 800e268:	d81c      	bhi.n	800e2a4 <LCD_print_tank+0x2014>
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	7b5b      	ldrb	r3, [r3, #13]
 800e26e:	3325      	adds	r3, #37	@ 0x25
 800e270:	461a      	mov	r2, r3
 800e272:	6a3b      	ldr	r3, [r7, #32]
 800e274:	4293      	cmp	r3, r2
 800e276:	d315      	bcc.n	800e2a4 <LCD_print_tank+0x2014>
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	7b5b      	ldrb	r3, [r3, #13]
 800e27c:	3342      	adds	r3, #66	@ 0x42
 800e27e:	461a      	mov	r2, r3
 800e280:	6a3b      	ldr	r3, [r7, #32]
 800e282:	4293      	cmp	r3, r2
 800e284:	d80e      	bhi.n	800e2a4 <LCD_print_tank+0x2014>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800e286:	f107 0114 	add.w	r1, r7, #20
 800e28a:	f04f 33ff 	mov.w	r3, #4294967295
 800e28e:	2202      	movs	r2, #2
 800e290:	4803      	ldr	r0, [pc, #12]	@ (800e2a0 <LCD_print_tank+0x2010>)
 800e292:	f00a fa34 	bl	80186fe <HAL_SPI_Transmit>
 800e296:	e032      	b.n	800e2fe <LCD_print_tank+0x206e>
 800e298:	66666666 	.word	0x66666666
 800e29c:	3ff66666 	.word	0x3ff66666
 800e2a0:	200004a4 	.word	0x200004a4
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+36))))
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	7b1b      	ldrb	r3, [r3, #12]
 800e2a8:	3304      	adds	r3, #4
 800e2aa:	461a      	mov	r2, r3
 800e2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d31d      	bcc.n	800e2ee <LCD_print_tank+0x205e>
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	7b1b      	ldrb	r3, [r3, #12]
 800e2b6:	331c      	adds	r3, #28
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d816      	bhi.n	800e2ee <LCD_print_tank+0x205e>
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	7b5b      	ldrb	r3, [r3, #13]
 800e2c4:	3302      	adds	r3, #2
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	6a3b      	ldr	r3, [r7, #32]
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d30f      	bcc.n	800e2ee <LCD_print_tank+0x205e>
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	7b5b      	ldrb	r3, [r3, #13]
 800e2d2:	3324      	adds	r3, #36	@ 0x24
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	6a3b      	ldr	r3, [r7, #32]
 800e2d8:	4293      	cmp	r3, r2
 800e2da:	d808      	bhi.n	800e2ee <LCD_print_tank+0x205e>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800e2dc:	f107 0118 	add.w	r1, r7, #24
 800e2e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e2e4:	2202      	movs	r2, #2
 800e2e6:	48a6      	ldr	r0, [pc, #664]	@ (800e580 <LCD_print_tank+0x22f0>)
 800e2e8:	f00a fa09 	bl	80186fe <HAL_SPI_Transmit>
 800e2ec:	e007      	b.n	800e2fe <LCD_print_tank+0x206e>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800e2ee:	f107 0110 	add.w	r1, r7, #16
 800e2f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f6:	2202      	movs	r2, #2
 800e2f8:	48a1      	ldr	r0, [pc, #644]	@ (800e580 <LCD_print_tank+0x22f0>)
 800e2fa:	f00a fa00 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800e2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e300:	3301      	adds	r3, #1
 800e302:	627b      	str	r3, [r7, #36]	@ 0x24
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	7b9b      	ldrb	r3, [r3, #14]
 800e308:	3301      	adds	r3, #1
 800e30a:	461a      	mov	r2, r3
 800e30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e30e:	4293      	cmp	r3, r2
 800e310:	f4ff af25 	bcc.w	800e15e <LCD_print_tank+0x1ece>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800e314:	6a3b      	ldr	r3, [r7, #32]
 800e316:	3301      	adds	r3, #1
 800e318:	623b      	str	r3, [r7, #32]
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	7bdb      	ldrb	r3, [r3, #15]
 800e31e:	461a      	mov	r2, r3
 800e320:	6a3b      	ldr	r3, [r7, #32]
 800e322:	4293      	cmp	r3, r2
 800e324:	f67f af17 	bls.w	800e156 <LCD_print_tank+0x1ec6>
	else if(num>=1.4 && num<1.5)
 800e328:	f002 ba97 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=1.5 && num<1.6)
 800e32c:	edd7 7a01 	vldr	s15, [r7, #4]
 800e330:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800e334:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e33c:	f2c0 80f5 	blt.w	800e52a <LCD_print_tank+0x229a>
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f7f2 f9cf 	bl	80006e4 <__aeabi_f2d>
 800e346:	a38a      	add	r3, pc, #552	@ (adr r3, 800e570 <LCD_print_tank+0x22e0>)
 800e348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e34c:	f7f2 fa82 	bl	8000854 <__aeabi_dcmplt>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	f000 80e9 	beq.w	800e52a <LCD_print_tank+0x229a>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	7b5b      	ldrb	r3, [r3, #13]
 800e35c:	623b      	str	r3, [r7, #32]
 800e35e:	e0db      	b.n	800e518 <LCD_print_tank+0x2288>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	7b1b      	ldrb	r3, [r3, #12]
 800e364:	627b      	str	r3, [r7, #36]	@ 0x24
 800e366:	e0cc      	b.n	800e502 <LCD_print_tank+0x2272>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	7b1b      	ldrb	r3, [r3, #12]
 800e36c:	3303      	adds	r3, #3
 800e36e:	461a      	mov	r2, r3
 800e370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e372:	4293      	cmp	r3, r2
 800e374:	d316      	bcc.n	800e3a4 <LCD_print_tank+0x2114>
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	7b1b      	ldrb	r3, [r3, #12]
 800e37a:	331d      	adds	r3, #29
 800e37c:	461a      	mov	r2, r3
 800e37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e380:	4293      	cmp	r3, r2
 800e382:	d80f      	bhi.n	800e3a4 <LCD_print_tank+0x2114>
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	7b5b      	ldrb	r3, [r3, #13]
 800e388:	3301      	adds	r3, #1
 800e38a:	461a      	mov	r2, r3
 800e38c:	6a3b      	ldr	r3, [r7, #32]
 800e38e:	4293      	cmp	r3, r2
 800e390:	d108      	bne.n	800e3a4 <LCD_print_tank+0x2114>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e392:	f107 011c 	add.w	r1, r7, #28
 800e396:	f04f 33ff 	mov.w	r3, #4294967295
 800e39a:	2202      	movs	r2, #2
 800e39c:	4878      	ldr	r0, [pc, #480]	@ (800e580 <LCD_print_tank+0x22f0>)
 800e39e:	f00a f9ae 	bl	80186fe <HAL_SPI_Transmit>
 800e3a2:	e0ab      	b.n	800e4fc <LCD_print_tank+0x226c>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	7b1b      	ldrb	r3, [r3, #12]
 800e3a8:	3303      	adds	r3, #3
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d316      	bcc.n	800e3e0 <LCD_print_tank+0x2150>
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	7b1b      	ldrb	r3, [r3, #12]
 800e3b6:	331d      	adds	r3, #29
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d80f      	bhi.n	800e3e0 <LCD_print_tank+0x2150>
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	7b5b      	ldrb	r3, [r3, #13]
 800e3c4:	3342      	adds	r3, #66	@ 0x42
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	6a3b      	ldr	r3, [r7, #32]
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d108      	bne.n	800e3e0 <LCD_print_tank+0x2150>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e3ce:	f107 011c 	add.w	r1, r7, #28
 800e3d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e3d6:	2202      	movs	r2, #2
 800e3d8:	4869      	ldr	r0, [pc, #420]	@ (800e580 <LCD_print_tank+0x22f0>)
 800e3da:	f00a f990 	bl	80186fe <HAL_SPI_Transmit>
 800e3de:	e08d      	b.n	800e4fc <LCD_print_tank+0x226c>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	7b1b      	ldrb	r3, [r3, #12]
 800e3e4:	331d      	adds	r3, #29
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d116      	bne.n	800e41c <LCD_print_tank+0x218c>
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	7b5b      	ldrb	r3, [r3, #13]
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	6a3b      	ldr	r3, [r7, #32]
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d30f      	bcc.n	800e41c <LCD_print_tank+0x218c>
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	7b5b      	ldrb	r3, [r3, #13]
 800e400:	3342      	adds	r3, #66	@ 0x42
 800e402:	461a      	mov	r2, r3
 800e404:	6a3b      	ldr	r3, [r7, #32]
 800e406:	4293      	cmp	r3, r2
 800e408:	d808      	bhi.n	800e41c <LCD_print_tank+0x218c>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e40a:	f107 011c 	add.w	r1, r7, #28
 800e40e:	f04f 33ff 	mov.w	r3, #4294967295
 800e412:	2202      	movs	r2, #2
 800e414:	485a      	ldr	r0, [pc, #360]	@ (800e580 <LCD_print_tank+0x22f0>)
 800e416:	f00a f972 	bl	80186fe <HAL_SPI_Transmit>
 800e41a:	e06f      	b.n	800e4fc <LCD_print_tank+0x226c>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	7b1b      	ldrb	r3, [r3, #12]
 800e420:	3303      	adds	r3, #3
 800e422:	461a      	mov	r2, r3
 800e424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e426:	4293      	cmp	r3, r2
 800e428:	d116      	bne.n	800e458 <LCD_print_tank+0x21c8>
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	7b5b      	ldrb	r3, [r3, #13]
 800e42e:	3301      	adds	r3, #1
 800e430:	461a      	mov	r2, r3
 800e432:	6a3b      	ldr	r3, [r7, #32]
 800e434:	4293      	cmp	r3, r2
 800e436:	d30f      	bcc.n	800e458 <LCD_print_tank+0x21c8>
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	7b5b      	ldrb	r3, [r3, #13]
 800e43c:	3342      	adds	r3, #66	@ 0x42
 800e43e:	461a      	mov	r2, r3
 800e440:	6a3b      	ldr	r3, [r7, #32]
 800e442:	4293      	cmp	r3, r2
 800e444:	d808      	bhi.n	800e458 <LCD_print_tank+0x21c8>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e446:	f107 011c 	add.w	r1, r7, #28
 800e44a:	f04f 33ff 	mov.w	r3, #4294967295
 800e44e:	2202      	movs	r2, #2
 800e450:	484b      	ldr	r0, [pc, #300]	@ (800e580 <LCD_print_tank+0x22f0>)
 800e452:	f00a f954 	bl	80186fe <HAL_SPI_Transmit>
 800e456:	e051      	b.n	800e4fc <LCD_print_tank+0x226c>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+35) && wiersz<=(ADRES->Y0_SET+66))))
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	7b1b      	ldrb	r3, [r3, #12]
 800e45c:	3304      	adds	r3, #4
 800e45e:	461a      	mov	r2, r3
 800e460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e462:	4293      	cmp	r3, r2
 800e464:	d31d      	bcc.n	800e4a2 <LCD_print_tank+0x2212>
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	7b1b      	ldrb	r3, [r3, #12]
 800e46a:	331c      	adds	r3, #28
 800e46c:	461a      	mov	r2, r3
 800e46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e470:	4293      	cmp	r3, r2
 800e472:	d816      	bhi.n	800e4a2 <LCD_print_tank+0x2212>
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	7b5b      	ldrb	r3, [r3, #13]
 800e478:	3323      	adds	r3, #35	@ 0x23
 800e47a:	461a      	mov	r2, r3
 800e47c:	6a3b      	ldr	r3, [r7, #32]
 800e47e:	4293      	cmp	r3, r2
 800e480:	d30f      	bcc.n	800e4a2 <LCD_print_tank+0x2212>
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	7b5b      	ldrb	r3, [r3, #13]
 800e486:	3342      	adds	r3, #66	@ 0x42
 800e488:	461a      	mov	r2, r3
 800e48a:	6a3b      	ldr	r3, [r7, #32]
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d808      	bhi.n	800e4a2 <LCD_print_tank+0x2212>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800e490:	f107 0114 	add.w	r1, r7, #20
 800e494:	f04f 33ff 	mov.w	r3, #4294967295
 800e498:	2202      	movs	r2, #2
 800e49a:	4839      	ldr	r0, [pc, #228]	@ (800e580 <LCD_print_tank+0x22f0>)
 800e49c:	f00a f92f 	bl	80186fe <HAL_SPI_Transmit>
 800e4a0:	e02c      	b.n	800e4fc <LCD_print_tank+0x226c>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+34))))
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	7b1b      	ldrb	r3, [r3, #12]
 800e4a6:	3304      	adds	r3, #4
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d31d      	bcc.n	800e4ec <LCD_print_tank+0x225c>
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	7b1b      	ldrb	r3, [r3, #12]
 800e4b4:	331c      	adds	r3, #28
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d816      	bhi.n	800e4ec <LCD_print_tank+0x225c>
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	7b5b      	ldrb	r3, [r3, #13]
 800e4c2:	3302      	adds	r3, #2
 800e4c4:	461a      	mov	r2, r3
 800e4c6:	6a3b      	ldr	r3, [r7, #32]
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d30f      	bcc.n	800e4ec <LCD_print_tank+0x225c>
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	7b5b      	ldrb	r3, [r3, #13]
 800e4d0:	3322      	adds	r3, #34	@ 0x22
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	6a3b      	ldr	r3, [r7, #32]
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d808      	bhi.n	800e4ec <LCD_print_tank+0x225c>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800e4da:	f107 0118 	add.w	r1, r7, #24
 800e4de:	f04f 33ff 	mov.w	r3, #4294967295
 800e4e2:	2202      	movs	r2, #2
 800e4e4:	4826      	ldr	r0, [pc, #152]	@ (800e580 <LCD_print_tank+0x22f0>)
 800e4e6:	f00a f90a 	bl	80186fe <HAL_SPI_Transmit>
 800e4ea:	e007      	b.n	800e4fc <LCD_print_tank+0x226c>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800e4ec:	f107 0110 	add.w	r1, r7, #16
 800e4f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e4f4:	2202      	movs	r2, #2
 800e4f6:	4822      	ldr	r0, [pc, #136]	@ (800e580 <LCD_print_tank+0x22f0>)
 800e4f8:	f00a f901 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800e4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4fe:	3301      	adds	r3, #1
 800e500:	627b      	str	r3, [r7, #36]	@ 0x24
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	7b9b      	ldrb	r3, [r3, #14]
 800e506:	3301      	adds	r3, #1
 800e508:	461a      	mov	r2, r3
 800e50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e50c:	4293      	cmp	r3, r2
 800e50e:	f4ff af2b 	bcc.w	800e368 <LCD_print_tank+0x20d8>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800e512:	6a3b      	ldr	r3, [r7, #32]
 800e514:	3301      	adds	r3, #1
 800e516:	623b      	str	r3, [r7, #32]
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	7bdb      	ldrb	r3, [r3, #15]
 800e51c:	461a      	mov	r2, r3
 800e51e:	6a3b      	ldr	r3, [r7, #32]
 800e520:	4293      	cmp	r3, r2
 800e522:	f67f af1d 	bls.w	800e360 <LCD_print_tank+0x20d0>
	else if(num>=1.5 && num<1.6)
 800e526:	f002 b998 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=1.6 && num<1.7)
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f7f2 f8da 	bl	80006e4 <__aeabi_f2d>
 800e530:	a30f      	add	r3, pc, #60	@ (adr r3, 800e570 <LCD_print_tank+0x22e0>)
 800e532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e536:	f7f2 f9a1 	bl	800087c <__aeabi_dcmpge>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	f000 8102 	beq.w	800e746 <LCD_print_tank+0x24b6>
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f7f2 f8ce 	bl	80006e4 <__aeabi_f2d>
 800e548:	a30b      	add	r3, pc, #44	@ (adr r3, 800e578 <LCD_print_tank+0x22e8>)
 800e54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54e:	f7f2 f981 	bl	8000854 <__aeabi_dcmplt>
 800e552:	4603      	mov	r3, r0
 800e554:	2b00      	cmp	r3, #0
 800e556:	f000 80f6 	beq.w	800e746 <LCD_print_tank+0x24b6>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	7b5b      	ldrb	r3, [r3, #13]
 800e55e:	623b      	str	r3, [r7, #32]
 800e560:	e0e8      	b.n	800e734 <LCD_print_tank+0x24a4>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	7b1b      	ldrb	r3, [r3, #12]
 800e566:	627b      	str	r3, [r7, #36]	@ 0x24
 800e568:	e0d9      	b.n	800e71e <LCD_print_tank+0x248e>
 800e56a:	bf00      	nop
 800e56c:	f3af 8000 	nop.w
 800e570:	9999999a 	.word	0x9999999a
 800e574:	3ff99999 	.word	0x3ff99999
 800e578:	33333333 	.word	0x33333333
 800e57c:	3ffb3333 	.word	0x3ffb3333
 800e580:	200004a4 	.word	0x200004a4
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	7b1b      	ldrb	r3, [r3, #12]
 800e588:	3303      	adds	r3, #3
 800e58a:	461a      	mov	r2, r3
 800e58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e58e:	4293      	cmp	r3, r2
 800e590:	d316      	bcc.n	800e5c0 <LCD_print_tank+0x2330>
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	7b1b      	ldrb	r3, [r3, #12]
 800e596:	331d      	adds	r3, #29
 800e598:	461a      	mov	r2, r3
 800e59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e59c:	4293      	cmp	r3, r2
 800e59e:	d80f      	bhi.n	800e5c0 <LCD_print_tank+0x2330>
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	7b5b      	ldrb	r3, [r3, #13]
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	6a3b      	ldr	r3, [r7, #32]
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d108      	bne.n	800e5c0 <LCD_print_tank+0x2330>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e5ae:	f107 011c 	add.w	r1, r7, #28
 800e5b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e5b6:	2202      	movs	r2, #2
 800e5b8:	48a5      	ldr	r0, [pc, #660]	@ (800e850 <LCD_print_tank+0x25c0>)
 800e5ba:	f00a f8a0 	bl	80186fe <HAL_SPI_Transmit>
 800e5be:	e0ab      	b.n	800e718 <LCD_print_tank+0x2488>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	7b1b      	ldrb	r3, [r3, #12]
 800e5c4:	3303      	adds	r3, #3
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d316      	bcc.n	800e5fc <LCD_print_tank+0x236c>
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	7b1b      	ldrb	r3, [r3, #12]
 800e5d2:	331d      	adds	r3, #29
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	d80f      	bhi.n	800e5fc <LCD_print_tank+0x236c>
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	7b5b      	ldrb	r3, [r3, #13]
 800e5e0:	3342      	adds	r3, #66	@ 0x42
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	6a3b      	ldr	r3, [r7, #32]
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d108      	bne.n	800e5fc <LCD_print_tank+0x236c>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e5ea:	f107 011c 	add.w	r1, r7, #28
 800e5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e5f2:	2202      	movs	r2, #2
 800e5f4:	4896      	ldr	r0, [pc, #600]	@ (800e850 <LCD_print_tank+0x25c0>)
 800e5f6:	f00a f882 	bl	80186fe <HAL_SPI_Transmit>
 800e5fa:	e08d      	b.n	800e718 <LCD_print_tank+0x2488>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	7b1b      	ldrb	r3, [r3, #12]
 800e600:	331d      	adds	r3, #29
 800e602:	461a      	mov	r2, r3
 800e604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e606:	4293      	cmp	r3, r2
 800e608:	d116      	bne.n	800e638 <LCD_print_tank+0x23a8>
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	7b5b      	ldrb	r3, [r3, #13]
 800e60e:	3301      	adds	r3, #1
 800e610:	461a      	mov	r2, r3
 800e612:	6a3b      	ldr	r3, [r7, #32]
 800e614:	4293      	cmp	r3, r2
 800e616:	d30f      	bcc.n	800e638 <LCD_print_tank+0x23a8>
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	7b5b      	ldrb	r3, [r3, #13]
 800e61c:	3342      	adds	r3, #66	@ 0x42
 800e61e:	461a      	mov	r2, r3
 800e620:	6a3b      	ldr	r3, [r7, #32]
 800e622:	4293      	cmp	r3, r2
 800e624:	d808      	bhi.n	800e638 <LCD_print_tank+0x23a8>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e626:	f107 011c 	add.w	r1, r7, #28
 800e62a:	f04f 33ff 	mov.w	r3, #4294967295
 800e62e:	2202      	movs	r2, #2
 800e630:	4887      	ldr	r0, [pc, #540]	@ (800e850 <LCD_print_tank+0x25c0>)
 800e632:	f00a f864 	bl	80186fe <HAL_SPI_Transmit>
 800e636:	e06f      	b.n	800e718 <LCD_print_tank+0x2488>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	7b1b      	ldrb	r3, [r3, #12]
 800e63c:	3303      	adds	r3, #3
 800e63e:	461a      	mov	r2, r3
 800e640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e642:	4293      	cmp	r3, r2
 800e644:	d116      	bne.n	800e674 <LCD_print_tank+0x23e4>
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	7b5b      	ldrb	r3, [r3, #13]
 800e64a:	3301      	adds	r3, #1
 800e64c:	461a      	mov	r2, r3
 800e64e:	6a3b      	ldr	r3, [r7, #32]
 800e650:	4293      	cmp	r3, r2
 800e652:	d30f      	bcc.n	800e674 <LCD_print_tank+0x23e4>
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	7b5b      	ldrb	r3, [r3, #13]
 800e658:	3342      	adds	r3, #66	@ 0x42
 800e65a:	461a      	mov	r2, r3
 800e65c:	6a3b      	ldr	r3, [r7, #32]
 800e65e:	4293      	cmp	r3, r2
 800e660:	d808      	bhi.n	800e674 <LCD_print_tank+0x23e4>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e662:	f107 011c 	add.w	r1, r7, #28
 800e666:	f04f 33ff 	mov.w	r3, #4294967295
 800e66a:	2202      	movs	r2, #2
 800e66c:	4878      	ldr	r0, [pc, #480]	@ (800e850 <LCD_print_tank+0x25c0>)
 800e66e:	f00a f846 	bl	80186fe <HAL_SPI_Transmit>
 800e672:	e051      	b.n	800e718 <LCD_print_tank+0x2488>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+33) && wiersz<=(ADRES->Y0_SET+66))))
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	7b1b      	ldrb	r3, [r3, #12]
 800e678:	3304      	adds	r3, #4
 800e67a:	461a      	mov	r2, r3
 800e67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e67e:	4293      	cmp	r3, r2
 800e680:	d31d      	bcc.n	800e6be <LCD_print_tank+0x242e>
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	7b1b      	ldrb	r3, [r3, #12]
 800e686:	331c      	adds	r3, #28
 800e688:	461a      	mov	r2, r3
 800e68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d816      	bhi.n	800e6be <LCD_print_tank+0x242e>
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	7b5b      	ldrb	r3, [r3, #13]
 800e694:	3321      	adds	r3, #33	@ 0x21
 800e696:	461a      	mov	r2, r3
 800e698:	6a3b      	ldr	r3, [r7, #32]
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d30f      	bcc.n	800e6be <LCD_print_tank+0x242e>
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	7b5b      	ldrb	r3, [r3, #13]
 800e6a2:	3342      	adds	r3, #66	@ 0x42
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	6a3b      	ldr	r3, [r7, #32]
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d808      	bhi.n	800e6be <LCD_print_tank+0x242e>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800e6ac:	f107 0114 	add.w	r1, r7, #20
 800e6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6b4:	2202      	movs	r2, #2
 800e6b6:	4866      	ldr	r0, [pc, #408]	@ (800e850 <LCD_print_tank+0x25c0>)
 800e6b8:	f00a f821 	bl	80186fe <HAL_SPI_Transmit>
 800e6bc:	e02c      	b.n	800e718 <LCD_print_tank+0x2488>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+32))))
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	7b1b      	ldrb	r3, [r3, #12]
 800e6c2:	3304      	adds	r3, #4
 800e6c4:	461a      	mov	r2, r3
 800e6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d31d      	bcc.n	800e708 <LCD_print_tank+0x2478>
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	7b1b      	ldrb	r3, [r3, #12]
 800e6d0:	331c      	adds	r3, #28
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d816      	bhi.n	800e708 <LCD_print_tank+0x2478>
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	7b5b      	ldrb	r3, [r3, #13]
 800e6de:	3302      	adds	r3, #2
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	6a3b      	ldr	r3, [r7, #32]
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	d30f      	bcc.n	800e708 <LCD_print_tank+0x2478>
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	7b5b      	ldrb	r3, [r3, #13]
 800e6ec:	3320      	adds	r3, #32
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	6a3b      	ldr	r3, [r7, #32]
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d808      	bhi.n	800e708 <LCD_print_tank+0x2478>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800e6f6:	f107 0118 	add.w	r1, r7, #24
 800e6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e6fe:	2202      	movs	r2, #2
 800e700:	4853      	ldr	r0, [pc, #332]	@ (800e850 <LCD_print_tank+0x25c0>)
 800e702:	f009 fffc 	bl	80186fe <HAL_SPI_Transmit>
 800e706:	e007      	b.n	800e718 <LCD_print_tank+0x2488>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800e708:	f107 0110 	add.w	r1, r7, #16
 800e70c:	f04f 33ff 	mov.w	r3, #4294967295
 800e710:	2202      	movs	r2, #2
 800e712:	484f      	ldr	r0, [pc, #316]	@ (800e850 <LCD_print_tank+0x25c0>)
 800e714:	f009 fff3 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800e718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e71a:	3301      	adds	r3, #1
 800e71c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	7b9b      	ldrb	r3, [r3, #14]
 800e722:	3301      	adds	r3, #1
 800e724:	461a      	mov	r2, r3
 800e726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e728:	4293      	cmp	r3, r2
 800e72a:	f4ff af2b 	bcc.w	800e584 <LCD_print_tank+0x22f4>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800e72e:	6a3b      	ldr	r3, [r7, #32]
 800e730:	3301      	adds	r3, #1
 800e732:	623b      	str	r3, [r7, #32]
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	7bdb      	ldrb	r3, [r3, #15]
 800e738:	461a      	mov	r2, r3
 800e73a:	6a3b      	ldr	r3, [r7, #32]
 800e73c:	4293      	cmp	r3, r2
 800e73e:	f67f af10 	bls.w	800e562 <LCD_print_tank+0x22d2>
	else if(num>=1.6 && num<1.7)
 800e742:	f002 b88a 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=1.7 && num<1.8)
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f7f1 ffcc 	bl	80006e4 <__aeabi_f2d>
 800e74c:	a33c      	add	r3, pc, #240	@ (adr r3, 800e840 <LCD_print_tank+0x25b0>)
 800e74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e752:	f7f2 f893 	bl	800087c <__aeabi_dcmpge>
 800e756:	4603      	mov	r3, r0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	f000 8102 	beq.w	800e962 <LCD_print_tank+0x26d2>
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f7f1 ffc0 	bl	80006e4 <__aeabi_f2d>
 800e764:	a338      	add	r3, pc, #224	@ (adr r3, 800e848 <LCD_print_tank+0x25b8>)
 800e766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76a:	f7f2 f873 	bl	8000854 <__aeabi_dcmplt>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b00      	cmp	r3, #0
 800e772:	f000 80f6 	beq.w	800e962 <LCD_print_tank+0x26d2>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	7b5b      	ldrb	r3, [r3, #13]
 800e77a:	623b      	str	r3, [r7, #32]
 800e77c:	e0e8      	b.n	800e950 <LCD_print_tank+0x26c0>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	7b1b      	ldrb	r3, [r3, #12]
 800e782:	627b      	str	r3, [r7, #36]	@ 0x24
 800e784:	e0d9      	b.n	800e93a <LCD_print_tank+0x26aa>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	7b1b      	ldrb	r3, [r3, #12]
 800e78a:	3303      	adds	r3, #3
 800e78c:	461a      	mov	r2, r3
 800e78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e790:	4293      	cmp	r3, r2
 800e792:	d316      	bcc.n	800e7c2 <LCD_print_tank+0x2532>
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	7b1b      	ldrb	r3, [r3, #12]
 800e798:	331d      	adds	r3, #29
 800e79a:	461a      	mov	r2, r3
 800e79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d80f      	bhi.n	800e7c2 <LCD_print_tank+0x2532>
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	7b5b      	ldrb	r3, [r3, #13]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	461a      	mov	r2, r3
 800e7aa:	6a3b      	ldr	r3, [r7, #32]
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	d108      	bne.n	800e7c2 <LCD_print_tank+0x2532>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e7b0:	f107 011c 	add.w	r1, r7, #28
 800e7b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7b8:	2202      	movs	r2, #2
 800e7ba:	4825      	ldr	r0, [pc, #148]	@ (800e850 <LCD_print_tank+0x25c0>)
 800e7bc:	f009 ff9f 	bl	80186fe <HAL_SPI_Transmit>
 800e7c0:	e0b8      	b.n	800e934 <LCD_print_tank+0x26a4>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	7b1b      	ldrb	r3, [r3, #12]
 800e7c6:	3303      	adds	r3, #3
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d316      	bcc.n	800e7fe <LCD_print_tank+0x256e>
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	7b1b      	ldrb	r3, [r3, #12]
 800e7d4:	331d      	adds	r3, #29
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d80f      	bhi.n	800e7fe <LCD_print_tank+0x256e>
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	7b5b      	ldrb	r3, [r3, #13]
 800e7e2:	3342      	adds	r3, #66	@ 0x42
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	6a3b      	ldr	r3, [r7, #32]
 800e7e8:	4293      	cmp	r3, r2
 800e7ea:	d108      	bne.n	800e7fe <LCD_print_tank+0x256e>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e7ec:	f107 011c 	add.w	r1, r7, #28
 800e7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e7f4:	2202      	movs	r2, #2
 800e7f6:	4816      	ldr	r0, [pc, #88]	@ (800e850 <LCD_print_tank+0x25c0>)
 800e7f8:	f009 ff81 	bl	80186fe <HAL_SPI_Transmit>
 800e7fc:	e09a      	b.n	800e934 <LCD_print_tank+0x26a4>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	7b1b      	ldrb	r3, [r3, #12]
 800e802:	331d      	adds	r3, #29
 800e804:	461a      	mov	r2, r3
 800e806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e808:	4293      	cmp	r3, r2
 800e80a:	d123      	bne.n	800e854 <LCD_print_tank+0x25c4>
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	7b5b      	ldrb	r3, [r3, #13]
 800e810:	3301      	adds	r3, #1
 800e812:	461a      	mov	r2, r3
 800e814:	6a3b      	ldr	r3, [r7, #32]
 800e816:	4293      	cmp	r3, r2
 800e818:	d31c      	bcc.n	800e854 <LCD_print_tank+0x25c4>
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	7b5b      	ldrb	r3, [r3, #13]
 800e81e:	3342      	adds	r3, #66	@ 0x42
 800e820:	461a      	mov	r2, r3
 800e822:	6a3b      	ldr	r3, [r7, #32]
 800e824:	4293      	cmp	r3, r2
 800e826:	d815      	bhi.n	800e854 <LCD_print_tank+0x25c4>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e828:	f107 011c 	add.w	r1, r7, #28
 800e82c:	f04f 33ff 	mov.w	r3, #4294967295
 800e830:	2202      	movs	r2, #2
 800e832:	4807      	ldr	r0, [pc, #28]	@ (800e850 <LCD_print_tank+0x25c0>)
 800e834:	f009 ff63 	bl	80186fe <HAL_SPI_Transmit>
 800e838:	e07c      	b.n	800e934 <LCD_print_tank+0x26a4>
 800e83a:	bf00      	nop
 800e83c:	f3af 8000 	nop.w
 800e840:	33333333 	.word	0x33333333
 800e844:	3ffb3333 	.word	0x3ffb3333
 800e848:	cccccccd 	.word	0xcccccccd
 800e84c:	3ffccccc 	.word	0x3ffccccc
 800e850:	200004a4 	.word	0x200004a4
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	7b1b      	ldrb	r3, [r3, #12]
 800e858:	3303      	adds	r3, #3
 800e85a:	461a      	mov	r2, r3
 800e85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e85e:	4293      	cmp	r3, r2
 800e860:	d116      	bne.n	800e890 <LCD_print_tank+0x2600>
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	7b5b      	ldrb	r3, [r3, #13]
 800e866:	3301      	adds	r3, #1
 800e868:	461a      	mov	r2, r3
 800e86a:	6a3b      	ldr	r3, [r7, #32]
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d30f      	bcc.n	800e890 <LCD_print_tank+0x2600>
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	7b5b      	ldrb	r3, [r3, #13]
 800e874:	3342      	adds	r3, #66	@ 0x42
 800e876:	461a      	mov	r2, r3
 800e878:	6a3b      	ldr	r3, [r7, #32]
 800e87a:	4293      	cmp	r3, r2
 800e87c:	d808      	bhi.n	800e890 <LCD_print_tank+0x2600>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e87e:	f107 011c 	add.w	r1, r7, #28
 800e882:	f04f 33ff 	mov.w	r3, #4294967295
 800e886:	2202      	movs	r2, #2
 800e888:	4899      	ldr	r0, [pc, #612]	@ (800eaf0 <LCD_print_tank+0x2860>)
 800e88a:	f009 ff38 	bl	80186fe <HAL_SPI_Transmit>
 800e88e:	e051      	b.n	800e934 <LCD_print_tank+0x26a4>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+31) && wiersz<=(ADRES->Y0_SET+66))))
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	7b1b      	ldrb	r3, [r3, #12]
 800e894:	3304      	adds	r3, #4
 800e896:	461a      	mov	r2, r3
 800e898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d31d      	bcc.n	800e8da <LCD_print_tank+0x264a>
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	7b1b      	ldrb	r3, [r3, #12]
 800e8a2:	331c      	adds	r3, #28
 800e8a4:	461a      	mov	r2, r3
 800e8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	d816      	bhi.n	800e8da <LCD_print_tank+0x264a>
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	7b5b      	ldrb	r3, [r3, #13]
 800e8b0:	331f      	adds	r3, #31
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	6a3b      	ldr	r3, [r7, #32]
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d30f      	bcc.n	800e8da <LCD_print_tank+0x264a>
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	7b5b      	ldrb	r3, [r3, #13]
 800e8be:	3342      	adds	r3, #66	@ 0x42
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	6a3b      	ldr	r3, [r7, #32]
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d808      	bhi.n	800e8da <LCD_print_tank+0x264a>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800e8c8:	f107 0114 	add.w	r1, r7, #20
 800e8cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e8d0:	2202      	movs	r2, #2
 800e8d2:	4887      	ldr	r0, [pc, #540]	@ (800eaf0 <LCD_print_tank+0x2860>)
 800e8d4:	f009 ff13 	bl	80186fe <HAL_SPI_Transmit>
 800e8d8:	e02c      	b.n	800e934 <LCD_print_tank+0x26a4>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+30))))
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	7b1b      	ldrb	r3, [r3, #12]
 800e8de:	3304      	adds	r3, #4
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d31d      	bcc.n	800e924 <LCD_print_tank+0x2694>
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	7b1b      	ldrb	r3, [r3, #12]
 800e8ec:	331c      	adds	r3, #28
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d816      	bhi.n	800e924 <LCD_print_tank+0x2694>
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	7b5b      	ldrb	r3, [r3, #13]
 800e8fa:	3302      	adds	r3, #2
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	6a3b      	ldr	r3, [r7, #32]
 800e900:	4293      	cmp	r3, r2
 800e902:	d30f      	bcc.n	800e924 <LCD_print_tank+0x2694>
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	7b5b      	ldrb	r3, [r3, #13]
 800e908:	331e      	adds	r3, #30
 800e90a:	461a      	mov	r2, r3
 800e90c:	6a3b      	ldr	r3, [r7, #32]
 800e90e:	4293      	cmp	r3, r2
 800e910:	d808      	bhi.n	800e924 <LCD_print_tank+0x2694>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800e912:	f107 0118 	add.w	r1, r7, #24
 800e916:	f04f 33ff 	mov.w	r3, #4294967295
 800e91a:	2202      	movs	r2, #2
 800e91c:	4874      	ldr	r0, [pc, #464]	@ (800eaf0 <LCD_print_tank+0x2860>)
 800e91e:	f009 feee 	bl	80186fe <HAL_SPI_Transmit>
 800e922:	e007      	b.n	800e934 <LCD_print_tank+0x26a4>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800e924:	f107 0110 	add.w	r1, r7, #16
 800e928:	f04f 33ff 	mov.w	r3, #4294967295
 800e92c:	2202      	movs	r2, #2
 800e92e:	4870      	ldr	r0, [pc, #448]	@ (800eaf0 <LCD_print_tank+0x2860>)
 800e930:	f009 fee5 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800e934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e936:	3301      	adds	r3, #1
 800e938:	627b      	str	r3, [r7, #36]	@ 0x24
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	7b9b      	ldrb	r3, [r3, #14]
 800e93e:	3301      	adds	r3, #1
 800e940:	461a      	mov	r2, r3
 800e942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e944:	4293      	cmp	r3, r2
 800e946:	f4ff af1e 	bcc.w	800e786 <LCD_print_tank+0x24f6>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800e94a:	6a3b      	ldr	r3, [r7, #32]
 800e94c:	3301      	adds	r3, #1
 800e94e:	623b      	str	r3, [r7, #32]
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	7bdb      	ldrb	r3, [r3, #15]
 800e954:	461a      	mov	r2, r3
 800e956:	6a3b      	ldr	r3, [r7, #32]
 800e958:	4293      	cmp	r3, r2
 800e95a:	f67f af10 	bls.w	800e77e <LCD_print_tank+0x24ee>
	else if(num>=1.7 && num<1.8)
 800e95e:	f001 bf7c 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=1.8 && num<1.9)
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f7f1 febe 	bl	80006e4 <__aeabi_f2d>
 800e968:	a35d      	add	r3, pc, #372	@ (adr r3, 800eae0 <LCD_print_tank+0x2850>)
 800e96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e96e:	f7f1 ff85 	bl	800087c <__aeabi_dcmpge>
 800e972:	4603      	mov	r3, r0
 800e974:	2b00      	cmp	r3, #0
 800e976:	f000 8101 	beq.w	800eb7c <LCD_print_tank+0x28ec>
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f7f1 feb2 	bl	80006e4 <__aeabi_f2d>
 800e980:	a359      	add	r3, pc, #356	@ (adr r3, 800eae8 <LCD_print_tank+0x2858>)
 800e982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e986:	f7f1 ff65 	bl	8000854 <__aeabi_dcmplt>
 800e98a:	4603      	mov	r3, r0
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f000 80f5 	beq.w	800eb7c <LCD_print_tank+0x28ec>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	7b5b      	ldrb	r3, [r3, #13]
 800e996:	623b      	str	r3, [r7, #32]
 800e998:	e0e7      	b.n	800eb6a <LCD_print_tank+0x28da>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	7b1b      	ldrb	r3, [r3, #12]
 800e99e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9a0:	e0d8      	b.n	800eb54 <LCD_print_tank+0x28c4>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	7b1b      	ldrb	r3, [r3, #12]
 800e9a6:	3303      	adds	r3, #3
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	d316      	bcc.n	800e9de <LCD_print_tank+0x274e>
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	7b1b      	ldrb	r3, [r3, #12]
 800e9b4:	331d      	adds	r3, #29
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d80f      	bhi.n	800e9de <LCD_print_tank+0x274e>
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	7b5b      	ldrb	r3, [r3, #13]
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	6a3b      	ldr	r3, [r7, #32]
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d108      	bne.n	800e9de <LCD_print_tank+0x274e>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800e9cc:	f107 011c 	add.w	r1, r7, #28
 800e9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9d4:	2202      	movs	r2, #2
 800e9d6:	4846      	ldr	r0, [pc, #280]	@ (800eaf0 <LCD_print_tank+0x2860>)
 800e9d8:	f009 fe91 	bl	80186fe <HAL_SPI_Transmit>
 800e9dc:	e0b7      	b.n	800eb4e <LCD_print_tank+0x28be>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	7b1b      	ldrb	r3, [r3, #12]
 800e9e2:	3303      	adds	r3, #3
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d316      	bcc.n	800ea1a <LCD_print_tank+0x278a>
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	7b1b      	ldrb	r3, [r3, #12]
 800e9f0:	331d      	adds	r3, #29
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d80f      	bhi.n	800ea1a <LCD_print_tank+0x278a>
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	7b5b      	ldrb	r3, [r3, #13]
 800e9fe:	3342      	adds	r3, #66	@ 0x42
 800ea00:	461a      	mov	r2, r3
 800ea02:	6a3b      	ldr	r3, [r7, #32]
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d108      	bne.n	800ea1a <LCD_print_tank+0x278a>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800ea08:	f107 011c 	add.w	r1, r7, #28
 800ea0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea10:	2202      	movs	r2, #2
 800ea12:	4837      	ldr	r0, [pc, #220]	@ (800eaf0 <LCD_print_tank+0x2860>)
 800ea14:	f009 fe73 	bl	80186fe <HAL_SPI_Transmit>
 800ea18:	e099      	b.n	800eb4e <LCD_print_tank+0x28be>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	7b1b      	ldrb	r3, [r3, #12]
 800ea1e:	331d      	adds	r3, #29
 800ea20:	461a      	mov	r2, r3
 800ea22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d116      	bne.n	800ea56 <LCD_print_tank+0x27c6>
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	7b5b      	ldrb	r3, [r3, #13]
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	461a      	mov	r2, r3
 800ea30:	6a3b      	ldr	r3, [r7, #32]
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d30f      	bcc.n	800ea56 <LCD_print_tank+0x27c6>
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	7b5b      	ldrb	r3, [r3, #13]
 800ea3a:	3342      	adds	r3, #66	@ 0x42
 800ea3c:	461a      	mov	r2, r3
 800ea3e:	6a3b      	ldr	r3, [r7, #32]
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d808      	bhi.n	800ea56 <LCD_print_tank+0x27c6>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800ea44:	f107 011c 	add.w	r1, r7, #28
 800ea48:	f04f 33ff 	mov.w	r3, #4294967295
 800ea4c:	2202      	movs	r2, #2
 800ea4e:	4828      	ldr	r0, [pc, #160]	@ (800eaf0 <LCD_print_tank+0x2860>)
 800ea50:	f009 fe55 	bl	80186fe <HAL_SPI_Transmit>
 800ea54:	e07b      	b.n	800eb4e <LCD_print_tank+0x28be>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	7b1b      	ldrb	r3, [r3, #12]
 800ea5a:	3303      	adds	r3, #3
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d116      	bne.n	800ea92 <LCD_print_tank+0x2802>
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	7b5b      	ldrb	r3, [r3, #13]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	6a3b      	ldr	r3, [r7, #32]
 800ea6e:	4293      	cmp	r3, r2
 800ea70:	d30f      	bcc.n	800ea92 <LCD_print_tank+0x2802>
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	7b5b      	ldrb	r3, [r3, #13]
 800ea76:	3342      	adds	r3, #66	@ 0x42
 800ea78:	461a      	mov	r2, r3
 800ea7a:	6a3b      	ldr	r3, [r7, #32]
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d808      	bhi.n	800ea92 <LCD_print_tank+0x2802>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800ea80:	f107 011c 	add.w	r1, r7, #28
 800ea84:	f04f 33ff 	mov.w	r3, #4294967295
 800ea88:	2202      	movs	r2, #2
 800ea8a:	4819      	ldr	r0, [pc, #100]	@ (800eaf0 <LCD_print_tank+0x2860>)
 800ea8c:	f009 fe37 	bl	80186fe <HAL_SPI_Transmit>
 800ea90:	e05d      	b.n	800eb4e <LCD_print_tank+0x28be>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+29) && wiersz<=(ADRES->Y0_SET+66))))
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	7b1b      	ldrb	r3, [r3, #12]
 800ea96:	3304      	adds	r3, #4
 800ea98:	461a      	mov	r2, r3
 800ea9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d329      	bcc.n	800eaf4 <LCD_print_tank+0x2864>
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	7b1b      	ldrb	r3, [r3, #12]
 800eaa4:	331c      	adds	r3, #28
 800eaa6:	461a      	mov	r2, r3
 800eaa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d822      	bhi.n	800eaf4 <LCD_print_tank+0x2864>
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	7b5b      	ldrb	r3, [r3, #13]
 800eab2:	331d      	adds	r3, #29
 800eab4:	461a      	mov	r2, r3
 800eab6:	6a3b      	ldr	r3, [r7, #32]
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d31b      	bcc.n	800eaf4 <LCD_print_tank+0x2864>
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	7b5b      	ldrb	r3, [r3, #13]
 800eac0:	3342      	adds	r3, #66	@ 0x42
 800eac2:	461a      	mov	r2, r3
 800eac4:	6a3b      	ldr	r3, [r7, #32]
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d814      	bhi.n	800eaf4 <LCD_print_tank+0x2864>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800eaca:	f107 0114 	add.w	r1, r7, #20
 800eace:	f04f 33ff 	mov.w	r3, #4294967295
 800ead2:	2202      	movs	r2, #2
 800ead4:	4806      	ldr	r0, [pc, #24]	@ (800eaf0 <LCD_print_tank+0x2860>)
 800ead6:	f009 fe12 	bl	80186fe <HAL_SPI_Transmit>
 800eada:	e038      	b.n	800eb4e <LCD_print_tank+0x28be>
 800eadc:	f3af 8000 	nop.w
 800eae0:	cccccccd 	.word	0xcccccccd
 800eae4:	3ffccccc 	.word	0x3ffccccc
 800eae8:	66666666 	.word	0x66666666
 800eaec:	3ffe6666 	.word	0x3ffe6666
 800eaf0:	200004a4 	.word	0x200004a4
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+28))))
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	7b1b      	ldrb	r3, [r3, #12]
 800eaf8:	3304      	adds	r3, #4
 800eafa:	461a      	mov	r2, r3
 800eafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d31d      	bcc.n	800eb3e <LCD_print_tank+0x28ae>
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	7b1b      	ldrb	r3, [r3, #12]
 800eb06:	331c      	adds	r3, #28
 800eb08:	461a      	mov	r2, r3
 800eb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d816      	bhi.n	800eb3e <LCD_print_tank+0x28ae>
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	7b5b      	ldrb	r3, [r3, #13]
 800eb14:	3302      	adds	r3, #2
 800eb16:	461a      	mov	r2, r3
 800eb18:	6a3b      	ldr	r3, [r7, #32]
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d30f      	bcc.n	800eb3e <LCD_print_tank+0x28ae>
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	7b5b      	ldrb	r3, [r3, #13]
 800eb22:	331c      	adds	r3, #28
 800eb24:	461a      	mov	r2, r3
 800eb26:	6a3b      	ldr	r3, [r7, #32]
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d808      	bhi.n	800eb3e <LCD_print_tank+0x28ae>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800eb2c:	f107 0118 	add.w	r1, r7, #24
 800eb30:	f04f 33ff 	mov.w	r3, #4294967295
 800eb34:	2202      	movs	r2, #2
 800eb36:	48a4      	ldr	r0, [pc, #656]	@ (800edc8 <LCD_print_tank+0x2b38>)
 800eb38:	f009 fde1 	bl	80186fe <HAL_SPI_Transmit>
 800eb3c:	e007      	b.n	800eb4e <LCD_print_tank+0x28be>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800eb3e:	f107 0110 	add.w	r1, r7, #16
 800eb42:	f04f 33ff 	mov.w	r3, #4294967295
 800eb46:	2202      	movs	r2, #2
 800eb48:	489f      	ldr	r0, [pc, #636]	@ (800edc8 <LCD_print_tank+0x2b38>)
 800eb4a:	f009 fdd8 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800eb4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb50:	3301      	adds	r3, #1
 800eb52:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	7b9b      	ldrb	r3, [r3, #14]
 800eb58:	3301      	adds	r3, #1
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	f4ff af1f 	bcc.w	800e9a2 <LCD_print_tank+0x2712>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800eb64:	6a3b      	ldr	r3, [r7, #32]
 800eb66:	3301      	adds	r3, #1
 800eb68:	623b      	str	r3, [r7, #32]
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	7bdb      	ldrb	r3, [r3, #15]
 800eb6e:	461a      	mov	r2, r3
 800eb70:	6a3b      	ldr	r3, [r7, #32]
 800eb72:	4293      	cmp	r3, r2
 800eb74:	f67f af11 	bls.w	800e99a <LCD_print_tank+0x270a>
	else if(num>=1.8 && num<1.9)
 800eb78:	f001 be6f 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=1.9 && num<2.0)
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f7f1 fdb1 	bl	80006e4 <__aeabi_f2d>
 800eb82:	a38d      	add	r3, pc, #564	@ (adr r3, 800edb8 <LCD_print_tank+0x2b28>)
 800eb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb88:	f7f1 fe78 	bl	800087c <__aeabi_dcmpge>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	f000 80f3 	beq.w	800ed7a <LCD_print_tank+0x2aea>
 800eb94:	edd7 7a01 	vldr	s15, [r7, #4]
 800eb98:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800eb9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba4:	f140 80e9 	bpl.w	800ed7a <LCD_print_tank+0x2aea>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	7b5b      	ldrb	r3, [r3, #13]
 800ebac:	623b      	str	r3, [r7, #32]
 800ebae:	e0db      	b.n	800ed68 <LCD_print_tank+0x2ad8>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	7b1b      	ldrb	r3, [r3, #12]
 800ebb4:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebb6:	e0cc      	b.n	800ed52 <LCD_print_tank+0x2ac2>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	7b1b      	ldrb	r3, [r3, #12]
 800ebbc:	3303      	adds	r3, #3
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d316      	bcc.n	800ebf4 <LCD_print_tank+0x2964>
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	7b1b      	ldrb	r3, [r3, #12]
 800ebca:	331d      	adds	r3, #29
 800ebcc:	461a      	mov	r2, r3
 800ebce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d80f      	bhi.n	800ebf4 <LCD_print_tank+0x2964>
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	7b5b      	ldrb	r3, [r3, #13]
 800ebd8:	3301      	adds	r3, #1
 800ebda:	461a      	mov	r2, r3
 800ebdc:	6a3b      	ldr	r3, [r7, #32]
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d108      	bne.n	800ebf4 <LCD_print_tank+0x2964>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800ebe2:	f107 011c 	add.w	r1, r7, #28
 800ebe6:	f04f 33ff 	mov.w	r3, #4294967295
 800ebea:	2202      	movs	r2, #2
 800ebec:	4876      	ldr	r0, [pc, #472]	@ (800edc8 <LCD_print_tank+0x2b38>)
 800ebee:	f009 fd86 	bl	80186fe <HAL_SPI_Transmit>
 800ebf2:	e0ab      	b.n	800ed4c <LCD_print_tank+0x2abc>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	7b1b      	ldrb	r3, [r3, #12]
 800ebf8:	3303      	adds	r3, #3
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d316      	bcc.n	800ec30 <LCD_print_tank+0x29a0>
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	7b1b      	ldrb	r3, [r3, #12]
 800ec06:	331d      	adds	r3, #29
 800ec08:	461a      	mov	r2, r3
 800ec0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d80f      	bhi.n	800ec30 <LCD_print_tank+0x29a0>
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	7b5b      	ldrb	r3, [r3, #13]
 800ec14:	3342      	adds	r3, #66	@ 0x42
 800ec16:	461a      	mov	r2, r3
 800ec18:	6a3b      	ldr	r3, [r7, #32]
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d108      	bne.n	800ec30 <LCD_print_tank+0x29a0>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800ec1e:	f107 011c 	add.w	r1, r7, #28
 800ec22:	f04f 33ff 	mov.w	r3, #4294967295
 800ec26:	2202      	movs	r2, #2
 800ec28:	4867      	ldr	r0, [pc, #412]	@ (800edc8 <LCD_print_tank+0x2b38>)
 800ec2a:	f009 fd68 	bl	80186fe <HAL_SPI_Transmit>
 800ec2e:	e08d      	b.n	800ed4c <LCD_print_tank+0x2abc>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	7b1b      	ldrb	r3, [r3, #12]
 800ec34:	331d      	adds	r3, #29
 800ec36:	461a      	mov	r2, r3
 800ec38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	d116      	bne.n	800ec6c <LCD_print_tank+0x29dc>
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	7b5b      	ldrb	r3, [r3, #13]
 800ec42:	3301      	adds	r3, #1
 800ec44:	461a      	mov	r2, r3
 800ec46:	6a3b      	ldr	r3, [r7, #32]
 800ec48:	4293      	cmp	r3, r2
 800ec4a:	d30f      	bcc.n	800ec6c <LCD_print_tank+0x29dc>
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	7b5b      	ldrb	r3, [r3, #13]
 800ec50:	3342      	adds	r3, #66	@ 0x42
 800ec52:	461a      	mov	r2, r3
 800ec54:	6a3b      	ldr	r3, [r7, #32]
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d808      	bhi.n	800ec6c <LCD_print_tank+0x29dc>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800ec5a:	f107 011c 	add.w	r1, r7, #28
 800ec5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ec62:	2202      	movs	r2, #2
 800ec64:	4858      	ldr	r0, [pc, #352]	@ (800edc8 <LCD_print_tank+0x2b38>)
 800ec66:	f009 fd4a 	bl	80186fe <HAL_SPI_Transmit>
 800ec6a:	e06f      	b.n	800ed4c <LCD_print_tank+0x2abc>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	7b1b      	ldrb	r3, [r3, #12]
 800ec70:	3303      	adds	r3, #3
 800ec72:	461a      	mov	r2, r3
 800ec74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d116      	bne.n	800eca8 <LCD_print_tank+0x2a18>
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	7b5b      	ldrb	r3, [r3, #13]
 800ec7e:	3301      	adds	r3, #1
 800ec80:	461a      	mov	r2, r3
 800ec82:	6a3b      	ldr	r3, [r7, #32]
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d30f      	bcc.n	800eca8 <LCD_print_tank+0x2a18>
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	7b5b      	ldrb	r3, [r3, #13]
 800ec8c:	3342      	adds	r3, #66	@ 0x42
 800ec8e:	461a      	mov	r2, r3
 800ec90:	6a3b      	ldr	r3, [r7, #32]
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d808      	bhi.n	800eca8 <LCD_print_tank+0x2a18>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800ec96:	f107 011c 	add.w	r1, r7, #28
 800ec9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec9e:	2202      	movs	r2, #2
 800eca0:	4849      	ldr	r0, [pc, #292]	@ (800edc8 <LCD_print_tank+0x2b38>)
 800eca2:	f009 fd2c 	bl	80186fe <HAL_SPI_Transmit>
 800eca6:	e051      	b.n	800ed4c <LCD_print_tank+0x2abc>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+27) && wiersz<=(ADRES->Y0_SET+66))))
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	7b1b      	ldrb	r3, [r3, #12]
 800ecac:	3304      	adds	r3, #4
 800ecae:	461a      	mov	r2, r3
 800ecb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecb2:	4293      	cmp	r3, r2
 800ecb4:	d31d      	bcc.n	800ecf2 <LCD_print_tank+0x2a62>
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	7b1b      	ldrb	r3, [r3, #12]
 800ecba:	331c      	adds	r3, #28
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d816      	bhi.n	800ecf2 <LCD_print_tank+0x2a62>
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	7b5b      	ldrb	r3, [r3, #13]
 800ecc8:	331b      	adds	r3, #27
 800ecca:	461a      	mov	r2, r3
 800eccc:	6a3b      	ldr	r3, [r7, #32]
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d30f      	bcc.n	800ecf2 <LCD_print_tank+0x2a62>
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	7b5b      	ldrb	r3, [r3, #13]
 800ecd6:	3342      	adds	r3, #66	@ 0x42
 800ecd8:	461a      	mov	r2, r3
 800ecda:	6a3b      	ldr	r3, [r7, #32]
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	d808      	bhi.n	800ecf2 <LCD_print_tank+0x2a62>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800ece0:	f107 0114 	add.w	r1, r7, #20
 800ece4:	f04f 33ff 	mov.w	r3, #4294967295
 800ece8:	2202      	movs	r2, #2
 800ecea:	4837      	ldr	r0, [pc, #220]	@ (800edc8 <LCD_print_tank+0x2b38>)
 800ecec:	f009 fd07 	bl	80186fe <HAL_SPI_Transmit>
 800ecf0:	e02c      	b.n	800ed4c <LCD_print_tank+0x2abc>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+26))))
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	7b1b      	ldrb	r3, [r3, #12]
 800ecf6:	3304      	adds	r3, #4
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d31d      	bcc.n	800ed3c <LCD_print_tank+0x2aac>
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	7b1b      	ldrb	r3, [r3, #12]
 800ed04:	331c      	adds	r3, #28
 800ed06:	461a      	mov	r2, r3
 800ed08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d816      	bhi.n	800ed3c <LCD_print_tank+0x2aac>
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	7b5b      	ldrb	r3, [r3, #13]
 800ed12:	3302      	adds	r3, #2
 800ed14:	461a      	mov	r2, r3
 800ed16:	6a3b      	ldr	r3, [r7, #32]
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d30f      	bcc.n	800ed3c <LCD_print_tank+0x2aac>
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	7b5b      	ldrb	r3, [r3, #13]
 800ed20:	331a      	adds	r3, #26
 800ed22:	461a      	mov	r2, r3
 800ed24:	6a3b      	ldr	r3, [r7, #32]
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d808      	bhi.n	800ed3c <LCD_print_tank+0x2aac>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800ed2a:	f107 0118 	add.w	r1, r7, #24
 800ed2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ed32:	2202      	movs	r2, #2
 800ed34:	4824      	ldr	r0, [pc, #144]	@ (800edc8 <LCD_print_tank+0x2b38>)
 800ed36:	f009 fce2 	bl	80186fe <HAL_SPI_Transmit>
 800ed3a:	e007      	b.n	800ed4c <LCD_print_tank+0x2abc>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800ed3c:	f107 0110 	add.w	r1, r7, #16
 800ed40:	f04f 33ff 	mov.w	r3, #4294967295
 800ed44:	2202      	movs	r2, #2
 800ed46:	4820      	ldr	r0, [pc, #128]	@ (800edc8 <LCD_print_tank+0x2b38>)
 800ed48:	f009 fcd9 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800ed4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed4e:	3301      	adds	r3, #1
 800ed50:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	7b9b      	ldrb	r3, [r3, #14]
 800ed56:	3301      	adds	r3, #1
 800ed58:	461a      	mov	r2, r3
 800ed5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	f4ff af2b 	bcc.w	800ebb8 <LCD_print_tank+0x2928>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800ed62:	6a3b      	ldr	r3, [r7, #32]
 800ed64:	3301      	adds	r3, #1
 800ed66:	623b      	str	r3, [r7, #32]
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	7bdb      	ldrb	r3, [r3, #15]
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	6a3b      	ldr	r3, [r7, #32]
 800ed70:	4293      	cmp	r3, r2
 800ed72:	f67f af1d 	bls.w	800ebb0 <LCD_print_tank+0x2920>
	else if(num>=1.9 && num<2.0)
 800ed76:	f001 bd70 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=2.0 && num<2.1)
 800ed7a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ed7e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800ed82:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ed86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed8a:	f2c0 8100 	blt.w	800ef8e <LCD_print_tank+0x2cfe>
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f7f1 fca8 	bl	80006e4 <__aeabi_f2d>
 800ed94:	a30a      	add	r3, pc, #40	@ (adr r3, 800edc0 <LCD_print_tank+0x2b30>)
 800ed96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed9a:	f7f1 fd5b 	bl	8000854 <__aeabi_dcmplt>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f000 80f4 	beq.w	800ef8e <LCD_print_tank+0x2cfe>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	7b5b      	ldrb	r3, [r3, #13]
 800edaa:	623b      	str	r3, [r7, #32]
 800edac:	e0e6      	b.n	800ef7c <LCD_print_tank+0x2cec>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	7b1b      	ldrb	r3, [r3, #12]
 800edb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800edb4:	e0d7      	b.n	800ef66 <LCD_print_tank+0x2cd6>
 800edb6:	bf00      	nop
 800edb8:	66666666 	.word	0x66666666
 800edbc:	3ffe6666 	.word	0x3ffe6666
 800edc0:	cccccccd 	.word	0xcccccccd
 800edc4:	4000cccc 	.word	0x4000cccc
 800edc8:	200004a4 	.word	0x200004a4
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	7b1b      	ldrb	r3, [r3, #12]
 800edd0:	3303      	adds	r3, #3
 800edd2:	461a      	mov	r2, r3
 800edd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d316      	bcc.n	800ee08 <LCD_print_tank+0x2b78>
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	7b1b      	ldrb	r3, [r3, #12]
 800edde:	331d      	adds	r3, #29
 800ede0:	461a      	mov	r2, r3
 800ede2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d80f      	bhi.n	800ee08 <LCD_print_tank+0x2b78>
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	7b5b      	ldrb	r3, [r3, #13]
 800edec:	3301      	adds	r3, #1
 800edee:	461a      	mov	r2, r3
 800edf0:	6a3b      	ldr	r3, [r7, #32]
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d108      	bne.n	800ee08 <LCD_print_tank+0x2b78>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800edf6:	f107 011c 	add.w	r1, r7, #28
 800edfa:	f04f 33ff 	mov.w	r3, #4294967295
 800edfe:	2202      	movs	r2, #2
 800ee00:	48a5      	ldr	r0, [pc, #660]	@ (800f098 <LCD_print_tank+0x2e08>)
 800ee02:	f009 fc7c 	bl	80186fe <HAL_SPI_Transmit>
 800ee06:	e0ab      	b.n	800ef60 <LCD_print_tank+0x2cd0>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	7b1b      	ldrb	r3, [r3, #12]
 800ee0c:	3303      	adds	r3, #3
 800ee0e:	461a      	mov	r2, r3
 800ee10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d316      	bcc.n	800ee44 <LCD_print_tank+0x2bb4>
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	7b1b      	ldrb	r3, [r3, #12]
 800ee1a:	331d      	adds	r3, #29
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d80f      	bhi.n	800ee44 <LCD_print_tank+0x2bb4>
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	7b5b      	ldrb	r3, [r3, #13]
 800ee28:	3342      	adds	r3, #66	@ 0x42
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	6a3b      	ldr	r3, [r7, #32]
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d108      	bne.n	800ee44 <LCD_print_tank+0x2bb4>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800ee32:	f107 011c 	add.w	r1, r7, #28
 800ee36:	f04f 33ff 	mov.w	r3, #4294967295
 800ee3a:	2202      	movs	r2, #2
 800ee3c:	4896      	ldr	r0, [pc, #600]	@ (800f098 <LCD_print_tank+0x2e08>)
 800ee3e:	f009 fc5e 	bl	80186fe <HAL_SPI_Transmit>
 800ee42:	e08d      	b.n	800ef60 <LCD_print_tank+0x2cd0>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	7b1b      	ldrb	r3, [r3, #12]
 800ee48:	331d      	adds	r3, #29
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d116      	bne.n	800ee80 <LCD_print_tank+0x2bf0>
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	7b5b      	ldrb	r3, [r3, #13]
 800ee56:	3301      	adds	r3, #1
 800ee58:	461a      	mov	r2, r3
 800ee5a:	6a3b      	ldr	r3, [r7, #32]
 800ee5c:	4293      	cmp	r3, r2
 800ee5e:	d30f      	bcc.n	800ee80 <LCD_print_tank+0x2bf0>
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	7b5b      	ldrb	r3, [r3, #13]
 800ee64:	3342      	adds	r3, #66	@ 0x42
 800ee66:	461a      	mov	r2, r3
 800ee68:	6a3b      	ldr	r3, [r7, #32]
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	d808      	bhi.n	800ee80 <LCD_print_tank+0x2bf0>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800ee6e:	f107 011c 	add.w	r1, r7, #28
 800ee72:	f04f 33ff 	mov.w	r3, #4294967295
 800ee76:	2202      	movs	r2, #2
 800ee78:	4887      	ldr	r0, [pc, #540]	@ (800f098 <LCD_print_tank+0x2e08>)
 800ee7a:	f009 fc40 	bl	80186fe <HAL_SPI_Transmit>
 800ee7e:	e06f      	b.n	800ef60 <LCD_print_tank+0x2cd0>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	7b1b      	ldrb	r3, [r3, #12]
 800ee84:	3303      	adds	r3, #3
 800ee86:	461a      	mov	r2, r3
 800ee88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	d116      	bne.n	800eebc <LCD_print_tank+0x2c2c>
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	7b5b      	ldrb	r3, [r3, #13]
 800ee92:	3301      	adds	r3, #1
 800ee94:	461a      	mov	r2, r3
 800ee96:	6a3b      	ldr	r3, [r7, #32]
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d30f      	bcc.n	800eebc <LCD_print_tank+0x2c2c>
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	7b5b      	ldrb	r3, [r3, #13]
 800eea0:	3342      	adds	r3, #66	@ 0x42
 800eea2:	461a      	mov	r2, r3
 800eea4:	6a3b      	ldr	r3, [r7, #32]
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d808      	bhi.n	800eebc <LCD_print_tank+0x2c2c>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800eeaa:	f107 011c 	add.w	r1, r7, #28
 800eeae:	f04f 33ff 	mov.w	r3, #4294967295
 800eeb2:	2202      	movs	r2, #2
 800eeb4:	4878      	ldr	r0, [pc, #480]	@ (800f098 <LCD_print_tank+0x2e08>)
 800eeb6:	f009 fc22 	bl	80186fe <HAL_SPI_Transmit>
 800eeba:	e051      	b.n	800ef60 <LCD_print_tank+0x2cd0>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+25) && wiersz<=(ADRES->Y0_SET+66))))
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	7b1b      	ldrb	r3, [r3, #12]
 800eec0:	3304      	adds	r3, #4
 800eec2:	461a      	mov	r2, r3
 800eec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d31d      	bcc.n	800ef06 <LCD_print_tank+0x2c76>
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	7b1b      	ldrb	r3, [r3, #12]
 800eece:	331c      	adds	r3, #28
 800eed0:	461a      	mov	r2, r3
 800eed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d816      	bhi.n	800ef06 <LCD_print_tank+0x2c76>
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	7b5b      	ldrb	r3, [r3, #13]
 800eedc:	3319      	adds	r3, #25
 800eede:	461a      	mov	r2, r3
 800eee0:	6a3b      	ldr	r3, [r7, #32]
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d30f      	bcc.n	800ef06 <LCD_print_tank+0x2c76>
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	7b5b      	ldrb	r3, [r3, #13]
 800eeea:	3342      	adds	r3, #66	@ 0x42
 800eeec:	461a      	mov	r2, r3
 800eeee:	6a3b      	ldr	r3, [r7, #32]
 800eef0:	4293      	cmp	r3, r2
 800eef2:	d808      	bhi.n	800ef06 <LCD_print_tank+0x2c76>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800eef4:	f107 0114 	add.w	r1, r7, #20
 800eef8:	f04f 33ff 	mov.w	r3, #4294967295
 800eefc:	2202      	movs	r2, #2
 800eefe:	4866      	ldr	r0, [pc, #408]	@ (800f098 <LCD_print_tank+0x2e08>)
 800ef00:	f009 fbfd 	bl	80186fe <HAL_SPI_Transmit>
 800ef04:	e02c      	b.n	800ef60 <LCD_print_tank+0x2cd0>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+24))))
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	7b1b      	ldrb	r3, [r3, #12]
 800ef0a:	3304      	adds	r3, #4
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d31d      	bcc.n	800ef50 <LCD_print_tank+0x2cc0>
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	7b1b      	ldrb	r3, [r3, #12]
 800ef18:	331c      	adds	r3, #28
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d816      	bhi.n	800ef50 <LCD_print_tank+0x2cc0>
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	7b5b      	ldrb	r3, [r3, #13]
 800ef26:	3302      	adds	r3, #2
 800ef28:	461a      	mov	r2, r3
 800ef2a:	6a3b      	ldr	r3, [r7, #32]
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d30f      	bcc.n	800ef50 <LCD_print_tank+0x2cc0>
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	7b5b      	ldrb	r3, [r3, #13]
 800ef34:	3318      	adds	r3, #24
 800ef36:	461a      	mov	r2, r3
 800ef38:	6a3b      	ldr	r3, [r7, #32]
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d808      	bhi.n	800ef50 <LCD_print_tank+0x2cc0>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800ef3e:	f107 0118 	add.w	r1, r7, #24
 800ef42:	f04f 33ff 	mov.w	r3, #4294967295
 800ef46:	2202      	movs	r2, #2
 800ef48:	4853      	ldr	r0, [pc, #332]	@ (800f098 <LCD_print_tank+0x2e08>)
 800ef4a:	f009 fbd8 	bl	80186fe <HAL_SPI_Transmit>
 800ef4e:	e007      	b.n	800ef60 <LCD_print_tank+0x2cd0>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800ef50:	f107 0110 	add.w	r1, r7, #16
 800ef54:	f04f 33ff 	mov.w	r3, #4294967295
 800ef58:	2202      	movs	r2, #2
 800ef5a:	484f      	ldr	r0, [pc, #316]	@ (800f098 <LCD_print_tank+0x2e08>)
 800ef5c:	f009 fbcf 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800ef60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef62:	3301      	adds	r3, #1
 800ef64:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	7b9b      	ldrb	r3, [r3, #14]
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef70:	4293      	cmp	r3, r2
 800ef72:	f4ff af2b 	bcc.w	800edcc <LCD_print_tank+0x2b3c>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800ef76:	6a3b      	ldr	r3, [r7, #32]
 800ef78:	3301      	adds	r3, #1
 800ef7a:	623b      	str	r3, [r7, #32]
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	7bdb      	ldrb	r3, [r3, #15]
 800ef80:	461a      	mov	r2, r3
 800ef82:	6a3b      	ldr	r3, [r7, #32]
 800ef84:	4293      	cmp	r3, r2
 800ef86:	f67f af12 	bls.w	800edae <LCD_print_tank+0x2b1e>
	else if(num>=2.0 && num<2.1)
 800ef8a:	f001 bc66 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=2.1 && num<2.2)
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7f1 fba8 	bl	80006e4 <__aeabi_f2d>
 800ef94:	a33c      	add	r3, pc, #240	@ (adr r3, 800f088 <LCD_print_tank+0x2df8>)
 800ef96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9a:	f7f1 fc6f 	bl	800087c <__aeabi_dcmpge>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	f000 8102 	beq.w	800f1aa <LCD_print_tank+0x2f1a>
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f7f1 fb9c 	bl	80006e4 <__aeabi_f2d>
 800efac:	a338      	add	r3, pc, #224	@ (adr r3, 800f090 <LCD_print_tank+0x2e00>)
 800efae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb2:	f7f1 fc4f 	bl	8000854 <__aeabi_dcmplt>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	f000 80f6 	beq.w	800f1aa <LCD_print_tank+0x2f1a>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	7b5b      	ldrb	r3, [r3, #13]
 800efc2:	623b      	str	r3, [r7, #32]
 800efc4:	e0e8      	b.n	800f198 <LCD_print_tank+0x2f08>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	7b1b      	ldrb	r3, [r3, #12]
 800efca:	627b      	str	r3, [r7, #36]	@ 0x24
 800efcc:	e0d9      	b.n	800f182 <LCD_print_tank+0x2ef2>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	7b1b      	ldrb	r3, [r3, #12]
 800efd2:	3303      	adds	r3, #3
 800efd4:	461a      	mov	r2, r3
 800efd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efd8:	4293      	cmp	r3, r2
 800efda:	d316      	bcc.n	800f00a <LCD_print_tank+0x2d7a>
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	7b1b      	ldrb	r3, [r3, #12]
 800efe0:	331d      	adds	r3, #29
 800efe2:	461a      	mov	r2, r3
 800efe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efe6:	4293      	cmp	r3, r2
 800efe8:	d80f      	bhi.n	800f00a <LCD_print_tank+0x2d7a>
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	7b5b      	ldrb	r3, [r3, #13]
 800efee:	3301      	adds	r3, #1
 800eff0:	461a      	mov	r2, r3
 800eff2:	6a3b      	ldr	r3, [r7, #32]
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d108      	bne.n	800f00a <LCD_print_tank+0x2d7a>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800eff8:	f107 011c 	add.w	r1, r7, #28
 800effc:	f04f 33ff 	mov.w	r3, #4294967295
 800f000:	2202      	movs	r2, #2
 800f002:	4825      	ldr	r0, [pc, #148]	@ (800f098 <LCD_print_tank+0x2e08>)
 800f004:	f009 fb7b 	bl	80186fe <HAL_SPI_Transmit>
 800f008:	e0b8      	b.n	800f17c <LCD_print_tank+0x2eec>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	7b1b      	ldrb	r3, [r3, #12]
 800f00e:	3303      	adds	r3, #3
 800f010:	461a      	mov	r2, r3
 800f012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f014:	4293      	cmp	r3, r2
 800f016:	d316      	bcc.n	800f046 <LCD_print_tank+0x2db6>
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	7b1b      	ldrb	r3, [r3, #12]
 800f01c:	331d      	adds	r3, #29
 800f01e:	461a      	mov	r2, r3
 800f020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f022:	4293      	cmp	r3, r2
 800f024:	d80f      	bhi.n	800f046 <LCD_print_tank+0x2db6>
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	7b5b      	ldrb	r3, [r3, #13]
 800f02a:	3342      	adds	r3, #66	@ 0x42
 800f02c:	461a      	mov	r2, r3
 800f02e:	6a3b      	ldr	r3, [r7, #32]
 800f030:	4293      	cmp	r3, r2
 800f032:	d108      	bne.n	800f046 <LCD_print_tank+0x2db6>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f034:	f107 011c 	add.w	r1, r7, #28
 800f038:	f04f 33ff 	mov.w	r3, #4294967295
 800f03c:	2202      	movs	r2, #2
 800f03e:	4816      	ldr	r0, [pc, #88]	@ (800f098 <LCD_print_tank+0x2e08>)
 800f040:	f009 fb5d 	bl	80186fe <HAL_SPI_Transmit>
 800f044:	e09a      	b.n	800f17c <LCD_print_tank+0x2eec>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	7b1b      	ldrb	r3, [r3, #12]
 800f04a:	331d      	adds	r3, #29
 800f04c:	461a      	mov	r2, r3
 800f04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f050:	4293      	cmp	r3, r2
 800f052:	d123      	bne.n	800f09c <LCD_print_tank+0x2e0c>
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	7b5b      	ldrb	r3, [r3, #13]
 800f058:	3301      	adds	r3, #1
 800f05a:	461a      	mov	r2, r3
 800f05c:	6a3b      	ldr	r3, [r7, #32]
 800f05e:	4293      	cmp	r3, r2
 800f060:	d31c      	bcc.n	800f09c <LCD_print_tank+0x2e0c>
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	7b5b      	ldrb	r3, [r3, #13]
 800f066:	3342      	adds	r3, #66	@ 0x42
 800f068:	461a      	mov	r2, r3
 800f06a:	6a3b      	ldr	r3, [r7, #32]
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d815      	bhi.n	800f09c <LCD_print_tank+0x2e0c>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f070:	f107 011c 	add.w	r1, r7, #28
 800f074:	f04f 33ff 	mov.w	r3, #4294967295
 800f078:	2202      	movs	r2, #2
 800f07a:	4807      	ldr	r0, [pc, #28]	@ (800f098 <LCD_print_tank+0x2e08>)
 800f07c:	f009 fb3f 	bl	80186fe <HAL_SPI_Transmit>
 800f080:	e07c      	b.n	800f17c <LCD_print_tank+0x2eec>
 800f082:	bf00      	nop
 800f084:	f3af 8000 	nop.w
 800f088:	cccccccd 	.word	0xcccccccd
 800f08c:	4000cccc 	.word	0x4000cccc
 800f090:	9999999a 	.word	0x9999999a
 800f094:	40019999 	.word	0x40019999
 800f098:	200004a4 	.word	0x200004a4
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	7b1b      	ldrb	r3, [r3, #12]
 800f0a0:	3303      	adds	r3, #3
 800f0a2:	461a      	mov	r2, r3
 800f0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d116      	bne.n	800f0d8 <LCD_print_tank+0x2e48>
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	7b5b      	ldrb	r3, [r3, #13]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	6a3b      	ldr	r3, [r7, #32]
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d30f      	bcc.n	800f0d8 <LCD_print_tank+0x2e48>
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	7b5b      	ldrb	r3, [r3, #13]
 800f0bc:	3342      	adds	r3, #66	@ 0x42
 800f0be:	461a      	mov	r2, r3
 800f0c0:	6a3b      	ldr	r3, [r7, #32]
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d808      	bhi.n	800f0d8 <LCD_print_tank+0x2e48>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f0c6:	f107 011c 	add.w	r1, r7, #28
 800f0ca:	f04f 33ff 	mov.w	r3, #4294967295
 800f0ce:	2202      	movs	r2, #2
 800f0d0:	4899      	ldr	r0, [pc, #612]	@ (800f338 <LCD_print_tank+0x30a8>)
 800f0d2:	f009 fb14 	bl	80186fe <HAL_SPI_Transmit>
 800f0d6:	e051      	b.n	800f17c <LCD_print_tank+0x2eec>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+23) && wiersz<=(ADRES->Y0_SET+66))))
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	7b1b      	ldrb	r3, [r3, #12]
 800f0dc:	3304      	adds	r3, #4
 800f0de:	461a      	mov	r2, r3
 800f0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d31d      	bcc.n	800f122 <LCD_print_tank+0x2e92>
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	7b1b      	ldrb	r3, [r3, #12]
 800f0ea:	331c      	adds	r3, #28
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f0:	4293      	cmp	r3, r2
 800f0f2:	d816      	bhi.n	800f122 <LCD_print_tank+0x2e92>
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	7b5b      	ldrb	r3, [r3, #13]
 800f0f8:	3317      	adds	r3, #23
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	6a3b      	ldr	r3, [r7, #32]
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d30f      	bcc.n	800f122 <LCD_print_tank+0x2e92>
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	7b5b      	ldrb	r3, [r3, #13]
 800f106:	3342      	adds	r3, #66	@ 0x42
 800f108:	461a      	mov	r2, r3
 800f10a:	6a3b      	ldr	r3, [r7, #32]
 800f10c:	4293      	cmp	r3, r2
 800f10e:	d808      	bhi.n	800f122 <LCD_print_tank+0x2e92>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800f110:	f107 0114 	add.w	r1, r7, #20
 800f114:	f04f 33ff 	mov.w	r3, #4294967295
 800f118:	2202      	movs	r2, #2
 800f11a:	4887      	ldr	r0, [pc, #540]	@ (800f338 <LCD_print_tank+0x30a8>)
 800f11c:	f009 faef 	bl	80186fe <HAL_SPI_Transmit>
 800f120:	e02c      	b.n	800f17c <LCD_print_tank+0x2eec>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+22))))
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	7b1b      	ldrb	r3, [r3, #12]
 800f126:	3304      	adds	r3, #4
 800f128:	461a      	mov	r2, r3
 800f12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f12c:	4293      	cmp	r3, r2
 800f12e:	d31d      	bcc.n	800f16c <LCD_print_tank+0x2edc>
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	7b1b      	ldrb	r3, [r3, #12]
 800f134:	331c      	adds	r3, #28
 800f136:	461a      	mov	r2, r3
 800f138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f13a:	4293      	cmp	r3, r2
 800f13c:	d816      	bhi.n	800f16c <LCD_print_tank+0x2edc>
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	7b5b      	ldrb	r3, [r3, #13]
 800f142:	3302      	adds	r3, #2
 800f144:	461a      	mov	r2, r3
 800f146:	6a3b      	ldr	r3, [r7, #32]
 800f148:	4293      	cmp	r3, r2
 800f14a:	d30f      	bcc.n	800f16c <LCD_print_tank+0x2edc>
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	7b5b      	ldrb	r3, [r3, #13]
 800f150:	3316      	adds	r3, #22
 800f152:	461a      	mov	r2, r3
 800f154:	6a3b      	ldr	r3, [r7, #32]
 800f156:	4293      	cmp	r3, r2
 800f158:	d808      	bhi.n	800f16c <LCD_print_tank+0x2edc>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800f15a:	f107 0118 	add.w	r1, r7, #24
 800f15e:	f04f 33ff 	mov.w	r3, #4294967295
 800f162:	2202      	movs	r2, #2
 800f164:	4874      	ldr	r0, [pc, #464]	@ (800f338 <LCD_print_tank+0x30a8>)
 800f166:	f009 faca 	bl	80186fe <HAL_SPI_Transmit>
 800f16a:	e007      	b.n	800f17c <LCD_print_tank+0x2eec>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800f16c:	f107 0110 	add.w	r1, r7, #16
 800f170:	f04f 33ff 	mov.w	r3, #4294967295
 800f174:	2202      	movs	r2, #2
 800f176:	4870      	ldr	r0, [pc, #448]	@ (800f338 <LCD_print_tank+0x30a8>)
 800f178:	f009 fac1 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800f17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f17e:	3301      	adds	r3, #1
 800f180:	627b      	str	r3, [r7, #36]	@ 0x24
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	7b9b      	ldrb	r3, [r3, #14]
 800f186:	3301      	adds	r3, #1
 800f188:	461a      	mov	r2, r3
 800f18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f18c:	4293      	cmp	r3, r2
 800f18e:	f4ff af1e 	bcc.w	800efce <LCD_print_tank+0x2d3e>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800f192:	6a3b      	ldr	r3, [r7, #32]
 800f194:	3301      	adds	r3, #1
 800f196:	623b      	str	r3, [r7, #32]
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	7bdb      	ldrb	r3, [r3, #15]
 800f19c:	461a      	mov	r2, r3
 800f19e:	6a3b      	ldr	r3, [r7, #32]
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	f67f af10 	bls.w	800efc6 <LCD_print_tank+0x2d36>
	else if(num>=2.1 && num<2.2)
 800f1a6:	f001 bb58 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=2.2 && num<2.3)
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f7f1 fa9a 	bl	80006e4 <__aeabi_f2d>
 800f1b0:	a35d      	add	r3, pc, #372	@ (adr r3, 800f328 <LCD_print_tank+0x3098>)
 800f1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b6:	f7f1 fb61 	bl	800087c <__aeabi_dcmpge>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	f000 8101 	beq.w	800f3c4 <LCD_print_tank+0x3134>
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f7f1 fa8e 	bl	80006e4 <__aeabi_f2d>
 800f1c8:	a359      	add	r3, pc, #356	@ (adr r3, 800f330 <LCD_print_tank+0x30a0>)
 800f1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ce:	f7f1 fb41 	bl	8000854 <__aeabi_dcmplt>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	f000 80f5 	beq.w	800f3c4 <LCD_print_tank+0x3134>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	7b5b      	ldrb	r3, [r3, #13]
 800f1de:	623b      	str	r3, [r7, #32]
 800f1e0:	e0e7      	b.n	800f3b2 <LCD_print_tank+0x3122>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	7b1b      	ldrb	r3, [r3, #12]
 800f1e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1e8:	e0d8      	b.n	800f39c <LCD_print_tank+0x310c>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	7b1b      	ldrb	r3, [r3, #12]
 800f1ee:	3303      	adds	r3, #3
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f4:	4293      	cmp	r3, r2
 800f1f6:	d316      	bcc.n	800f226 <LCD_print_tank+0x2f96>
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	7b1b      	ldrb	r3, [r3, #12]
 800f1fc:	331d      	adds	r3, #29
 800f1fe:	461a      	mov	r2, r3
 800f200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f202:	4293      	cmp	r3, r2
 800f204:	d80f      	bhi.n	800f226 <LCD_print_tank+0x2f96>
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	7b5b      	ldrb	r3, [r3, #13]
 800f20a:	3301      	adds	r3, #1
 800f20c:	461a      	mov	r2, r3
 800f20e:	6a3b      	ldr	r3, [r7, #32]
 800f210:	4293      	cmp	r3, r2
 800f212:	d108      	bne.n	800f226 <LCD_print_tank+0x2f96>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f214:	f107 011c 	add.w	r1, r7, #28
 800f218:	f04f 33ff 	mov.w	r3, #4294967295
 800f21c:	2202      	movs	r2, #2
 800f21e:	4846      	ldr	r0, [pc, #280]	@ (800f338 <LCD_print_tank+0x30a8>)
 800f220:	f009 fa6d 	bl	80186fe <HAL_SPI_Transmit>
 800f224:	e0b7      	b.n	800f396 <LCD_print_tank+0x3106>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	7b1b      	ldrb	r3, [r3, #12]
 800f22a:	3303      	adds	r3, #3
 800f22c:	461a      	mov	r2, r3
 800f22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f230:	4293      	cmp	r3, r2
 800f232:	d316      	bcc.n	800f262 <LCD_print_tank+0x2fd2>
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	7b1b      	ldrb	r3, [r3, #12]
 800f238:	331d      	adds	r3, #29
 800f23a:	461a      	mov	r2, r3
 800f23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f23e:	4293      	cmp	r3, r2
 800f240:	d80f      	bhi.n	800f262 <LCD_print_tank+0x2fd2>
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	7b5b      	ldrb	r3, [r3, #13]
 800f246:	3342      	adds	r3, #66	@ 0x42
 800f248:	461a      	mov	r2, r3
 800f24a:	6a3b      	ldr	r3, [r7, #32]
 800f24c:	4293      	cmp	r3, r2
 800f24e:	d108      	bne.n	800f262 <LCD_print_tank+0x2fd2>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f250:	f107 011c 	add.w	r1, r7, #28
 800f254:	f04f 33ff 	mov.w	r3, #4294967295
 800f258:	2202      	movs	r2, #2
 800f25a:	4837      	ldr	r0, [pc, #220]	@ (800f338 <LCD_print_tank+0x30a8>)
 800f25c:	f009 fa4f 	bl	80186fe <HAL_SPI_Transmit>
 800f260:	e099      	b.n	800f396 <LCD_print_tank+0x3106>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	7b1b      	ldrb	r3, [r3, #12]
 800f266:	331d      	adds	r3, #29
 800f268:	461a      	mov	r2, r3
 800f26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f26c:	4293      	cmp	r3, r2
 800f26e:	d116      	bne.n	800f29e <LCD_print_tank+0x300e>
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	7b5b      	ldrb	r3, [r3, #13]
 800f274:	3301      	adds	r3, #1
 800f276:	461a      	mov	r2, r3
 800f278:	6a3b      	ldr	r3, [r7, #32]
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d30f      	bcc.n	800f29e <LCD_print_tank+0x300e>
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	7b5b      	ldrb	r3, [r3, #13]
 800f282:	3342      	adds	r3, #66	@ 0x42
 800f284:	461a      	mov	r2, r3
 800f286:	6a3b      	ldr	r3, [r7, #32]
 800f288:	4293      	cmp	r3, r2
 800f28a:	d808      	bhi.n	800f29e <LCD_print_tank+0x300e>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f28c:	f107 011c 	add.w	r1, r7, #28
 800f290:	f04f 33ff 	mov.w	r3, #4294967295
 800f294:	2202      	movs	r2, #2
 800f296:	4828      	ldr	r0, [pc, #160]	@ (800f338 <LCD_print_tank+0x30a8>)
 800f298:	f009 fa31 	bl	80186fe <HAL_SPI_Transmit>
 800f29c:	e07b      	b.n	800f396 <LCD_print_tank+0x3106>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	7b1b      	ldrb	r3, [r3, #12]
 800f2a2:	3303      	adds	r3, #3
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d116      	bne.n	800f2da <LCD_print_tank+0x304a>
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	7b5b      	ldrb	r3, [r3, #13]
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	6a3b      	ldr	r3, [r7, #32]
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d30f      	bcc.n	800f2da <LCD_print_tank+0x304a>
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	7b5b      	ldrb	r3, [r3, #13]
 800f2be:	3342      	adds	r3, #66	@ 0x42
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	6a3b      	ldr	r3, [r7, #32]
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	d808      	bhi.n	800f2da <LCD_print_tank+0x304a>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f2c8:	f107 011c 	add.w	r1, r7, #28
 800f2cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f2d0:	2202      	movs	r2, #2
 800f2d2:	4819      	ldr	r0, [pc, #100]	@ (800f338 <LCD_print_tank+0x30a8>)
 800f2d4:	f009 fa13 	bl	80186fe <HAL_SPI_Transmit>
 800f2d8:	e05d      	b.n	800f396 <LCD_print_tank+0x3106>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+21) && wiersz<=(ADRES->Y0_SET+66))))
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	7b1b      	ldrb	r3, [r3, #12]
 800f2de:	3304      	adds	r3, #4
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d329      	bcc.n	800f33c <LCD_print_tank+0x30ac>
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	7b1b      	ldrb	r3, [r3, #12]
 800f2ec:	331c      	adds	r3, #28
 800f2ee:	461a      	mov	r2, r3
 800f2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d822      	bhi.n	800f33c <LCD_print_tank+0x30ac>
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	7b5b      	ldrb	r3, [r3, #13]
 800f2fa:	3315      	adds	r3, #21
 800f2fc:	461a      	mov	r2, r3
 800f2fe:	6a3b      	ldr	r3, [r7, #32]
 800f300:	4293      	cmp	r3, r2
 800f302:	d31b      	bcc.n	800f33c <LCD_print_tank+0x30ac>
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	7b5b      	ldrb	r3, [r3, #13]
 800f308:	3342      	adds	r3, #66	@ 0x42
 800f30a:	461a      	mov	r2, r3
 800f30c:	6a3b      	ldr	r3, [r7, #32]
 800f30e:	4293      	cmp	r3, r2
 800f310:	d814      	bhi.n	800f33c <LCD_print_tank+0x30ac>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800f312:	f107 0114 	add.w	r1, r7, #20
 800f316:	f04f 33ff 	mov.w	r3, #4294967295
 800f31a:	2202      	movs	r2, #2
 800f31c:	4806      	ldr	r0, [pc, #24]	@ (800f338 <LCD_print_tank+0x30a8>)
 800f31e:	f009 f9ee 	bl	80186fe <HAL_SPI_Transmit>
 800f322:	e038      	b.n	800f396 <LCD_print_tank+0x3106>
 800f324:	f3af 8000 	nop.w
 800f328:	9999999a 	.word	0x9999999a
 800f32c:	40019999 	.word	0x40019999
 800f330:	66666666 	.word	0x66666666
 800f334:	40026666 	.word	0x40026666
 800f338:	200004a4 	.word	0x200004a4
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+20))))
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	7b1b      	ldrb	r3, [r3, #12]
 800f340:	3304      	adds	r3, #4
 800f342:	461a      	mov	r2, r3
 800f344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f346:	4293      	cmp	r3, r2
 800f348:	d31d      	bcc.n	800f386 <LCD_print_tank+0x30f6>
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	7b1b      	ldrb	r3, [r3, #12]
 800f34e:	331c      	adds	r3, #28
 800f350:	461a      	mov	r2, r3
 800f352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f354:	4293      	cmp	r3, r2
 800f356:	d816      	bhi.n	800f386 <LCD_print_tank+0x30f6>
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	7b5b      	ldrb	r3, [r3, #13]
 800f35c:	3302      	adds	r3, #2
 800f35e:	461a      	mov	r2, r3
 800f360:	6a3b      	ldr	r3, [r7, #32]
 800f362:	4293      	cmp	r3, r2
 800f364:	d30f      	bcc.n	800f386 <LCD_print_tank+0x30f6>
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	7b5b      	ldrb	r3, [r3, #13]
 800f36a:	3314      	adds	r3, #20
 800f36c:	461a      	mov	r2, r3
 800f36e:	6a3b      	ldr	r3, [r7, #32]
 800f370:	4293      	cmp	r3, r2
 800f372:	d808      	bhi.n	800f386 <LCD_print_tank+0x30f6>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800f374:	f107 0118 	add.w	r1, r7, #24
 800f378:	f04f 33ff 	mov.w	r3, #4294967295
 800f37c:	2202      	movs	r2, #2
 800f37e:	48a6      	ldr	r0, [pc, #664]	@ (800f618 <LCD_print_tank+0x3388>)
 800f380:	f009 f9bd 	bl	80186fe <HAL_SPI_Transmit>
 800f384:	e007      	b.n	800f396 <LCD_print_tank+0x3106>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800f386:	f107 0110 	add.w	r1, r7, #16
 800f38a:	f04f 33ff 	mov.w	r3, #4294967295
 800f38e:	2202      	movs	r2, #2
 800f390:	48a1      	ldr	r0, [pc, #644]	@ (800f618 <LCD_print_tank+0x3388>)
 800f392:	f009 f9b4 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800f396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f398:	3301      	adds	r3, #1
 800f39a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	7b9b      	ldrb	r3, [r3, #14]
 800f3a0:	3301      	adds	r3, #1
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	f4ff af1f 	bcc.w	800f1ea <LCD_print_tank+0x2f5a>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800f3ac:	6a3b      	ldr	r3, [r7, #32]
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	623b      	str	r3, [r7, #32]
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	7bdb      	ldrb	r3, [r3, #15]
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	6a3b      	ldr	r3, [r7, #32]
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	f67f af11 	bls.w	800f1e2 <LCD_print_tank+0x2f52>
	else if(num>=2.2 && num<2.3)
 800f3c0:	f001 ba4b 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=2.3 && num<2.4)
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f7f1 f98d 	bl	80006e4 <__aeabi_f2d>
 800f3ca:	a38f      	add	r3, pc, #572	@ (adr r3, 800f608 <LCD_print_tank+0x3378>)
 800f3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d0:	f7f1 fa54 	bl	800087c <__aeabi_dcmpge>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	f000 80f5 	beq.w	800f5c6 <LCD_print_tank+0x3336>
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f7f1 f981 	bl	80006e4 <__aeabi_f2d>
 800f3e2:	a38b      	add	r3, pc, #556	@ (adr r3, 800f610 <LCD_print_tank+0x3380>)
 800f3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e8:	f7f1 fa34 	bl	8000854 <__aeabi_dcmplt>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	f000 80e9 	beq.w	800f5c6 <LCD_print_tank+0x3336>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	7b5b      	ldrb	r3, [r3, #13]
 800f3f8:	623b      	str	r3, [r7, #32]
 800f3fa:	e0db      	b.n	800f5b4 <LCD_print_tank+0x3324>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	7b1b      	ldrb	r3, [r3, #12]
 800f400:	627b      	str	r3, [r7, #36]	@ 0x24
 800f402:	e0cc      	b.n	800f59e <LCD_print_tank+0x330e>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	7b1b      	ldrb	r3, [r3, #12]
 800f408:	3303      	adds	r3, #3
 800f40a:	461a      	mov	r2, r3
 800f40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f40e:	4293      	cmp	r3, r2
 800f410:	d316      	bcc.n	800f440 <LCD_print_tank+0x31b0>
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	7b1b      	ldrb	r3, [r3, #12]
 800f416:	331d      	adds	r3, #29
 800f418:	461a      	mov	r2, r3
 800f41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d80f      	bhi.n	800f440 <LCD_print_tank+0x31b0>
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	7b5b      	ldrb	r3, [r3, #13]
 800f424:	3301      	adds	r3, #1
 800f426:	461a      	mov	r2, r3
 800f428:	6a3b      	ldr	r3, [r7, #32]
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d108      	bne.n	800f440 <LCD_print_tank+0x31b0>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f42e:	f107 011c 	add.w	r1, r7, #28
 800f432:	f04f 33ff 	mov.w	r3, #4294967295
 800f436:	2202      	movs	r2, #2
 800f438:	4877      	ldr	r0, [pc, #476]	@ (800f618 <LCD_print_tank+0x3388>)
 800f43a:	f009 f960 	bl	80186fe <HAL_SPI_Transmit>
 800f43e:	e0ab      	b.n	800f598 <LCD_print_tank+0x3308>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	7b1b      	ldrb	r3, [r3, #12]
 800f444:	3303      	adds	r3, #3
 800f446:	461a      	mov	r2, r3
 800f448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d316      	bcc.n	800f47c <LCD_print_tank+0x31ec>
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	7b1b      	ldrb	r3, [r3, #12]
 800f452:	331d      	adds	r3, #29
 800f454:	461a      	mov	r2, r3
 800f456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f458:	4293      	cmp	r3, r2
 800f45a:	d80f      	bhi.n	800f47c <LCD_print_tank+0x31ec>
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	7b5b      	ldrb	r3, [r3, #13]
 800f460:	3342      	adds	r3, #66	@ 0x42
 800f462:	461a      	mov	r2, r3
 800f464:	6a3b      	ldr	r3, [r7, #32]
 800f466:	4293      	cmp	r3, r2
 800f468:	d108      	bne.n	800f47c <LCD_print_tank+0x31ec>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f46a:	f107 011c 	add.w	r1, r7, #28
 800f46e:	f04f 33ff 	mov.w	r3, #4294967295
 800f472:	2202      	movs	r2, #2
 800f474:	4868      	ldr	r0, [pc, #416]	@ (800f618 <LCD_print_tank+0x3388>)
 800f476:	f009 f942 	bl	80186fe <HAL_SPI_Transmit>
 800f47a:	e08d      	b.n	800f598 <LCD_print_tank+0x3308>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	7b1b      	ldrb	r3, [r3, #12]
 800f480:	331d      	adds	r3, #29
 800f482:	461a      	mov	r2, r3
 800f484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f486:	4293      	cmp	r3, r2
 800f488:	d116      	bne.n	800f4b8 <LCD_print_tank+0x3228>
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	7b5b      	ldrb	r3, [r3, #13]
 800f48e:	3301      	adds	r3, #1
 800f490:	461a      	mov	r2, r3
 800f492:	6a3b      	ldr	r3, [r7, #32]
 800f494:	4293      	cmp	r3, r2
 800f496:	d30f      	bcc.n	800f4b8 <LCD_print_tank+0x3228>
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	7b5b      	ldrb	r3, [r3, #13]
 800f49c:	3342      	adds	r3, #66	@ 0x42
 800f49e:	461a      	mov	r2, r3
 800f4a0:	6a3b      	ldr	r3, [r7, #32]
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	d808      	bhi.n	800f4b8 <LCD_print_tank+0x3228>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f4a6:	f107 011c 	add.w	r1, r7, #28
 800f4aa:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ae:	2202      	movs	r2, #2
 800f4b0:	4859      	ldr	r0, [pc, #356]	@ (800f618 <LCD_print_tank+0x3388>)
 800f4b2:	f009 f924 	bl	80186fe <HAL_SPI_Transmit>
 800f4b6:	e06f      	b.n	800f598 <LCD_print_tank+0x3308>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	7b1b      	ldrb	r3, [r3, #12]
 800f4bc:	3303      	adds	r3, #3
 800f4be:	461a      	mov	r2, r3
 800f4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d116      	bne.n	800f4f4 <LCD_print_tank+0x3264>
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	7b5b      	ldrb	r3, [r3, #13]
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	6a3b      	ldr	r3, [r7, #32]
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	d30f      	bcc.n	800f4f4 <LCD_print_tank+0x3264>
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	7b5b      	ldrb	r3, [r3, #13]
 800f4d8:	3342      	adds	r3, #66	@ 0x42
 800f4da:	461a      	mov	r2, r3
 800f4dc:	6a3b      	ldr	r3, [r7, #32]
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d808      	bhi.n	800f4f4 <LCD_print_tank+0x3264>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f4e2:	f107 011c 	add.w	r1, r7, #28
 800f4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ea:	2202      	movs	r2, #2
 800f4ec:	484a      	ldr	r0, [pc, #296]	@ (800f618 <LCD_print_tank+0x3388>)
 800f4ee:	f009 f906 	bl	80186fe <HAL_SPI_Transmit>
 800f4f2:	e051      	b.n	800f598 <LCD_print_tank+0x3308>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+19) && wiersz<=(ADRES->Y0_SET+66))))
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	7b1b      	ldrb	r3, [r3, #12]
 800f4f8:	3304      	adds	r3, #4
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d31d      	bcc.n	800f53e <LCD_print_tank+0x32ae>
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	7b1b      	ldrb	r3, [r3, #12]
 800f506:	331c      	adds	r3, #28
 800f508:	461a      	mov	r2, r3
 800f50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f50c:	4293      	cmp	r3, r2
 800f50e:	d816      	bhi.n	800f53e <LCD_print_tank+0x32ae>
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	7b5b      	ldrb	r3, [r3, #13]
 800f514:	3313      	adds	r3, #19
 800f516:	461a      	mov	r2, r3
 800f518:	6a3b      	ldr	r3, [r7, #32]
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d30f      	bcc.n	800f53e <LCD_print_tank+0x32ae>
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	7b5b      	ldrb	r3, [r3, #13]
 800f522:	3342      	adds	r3, #66	@ 0x42
 800f524:	461a      	mov	r2, r3
 800f526:	6a3b      	ldr	r3, [r7, #32]
 800f528:	4293      	cmp	r3, r2
 800f52a:	d808      	bhi.n	800f53e <LCD_print_tank+0x32ae>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800f52c:	f107 0114 	add.w	r1, r7, #20
 800f530:	f04f 33ff 	mov.w	r3, #4294967295
 800f534:	2202      	movs	r2, #2
 800f536:	4838      	ldr	r0, [pc, #224]	@ (800f618 <LCD_print_tank+0x3388>)
 800f538:	f009 f8e1 	bl	80186fe <HAL_SPI_Transmit>
 800f53c:	e02c      	b.n	800f598 <LCD_print_tank+0x3308>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+18))))
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	7b1b      	ldrb	r3, [r3, #12]
 800f542:	3304      	adds	r3, #4
 800f544:	461a      	mov	r2, r3
 800f546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f548:	4293      	cmp	r3, r2
 800f54a:	d31d      	bcc.n	800f588 <LCD_print_tank+0x32f8>
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	7b1b      	ldrb	r3, [r3, #12]
 800f550:	331c      	adds	r3, #28
 800f552:	461a      	mov	r2, r3
 800f554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f556:	4293      	cmp	r3, r2
 800f558:	d816      	bhi.n	800f588 <LCD_print_tank+0x32f8>
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	7b5b      	ldrb	r3, [r3, #13]
 800f55e:	3302      	adds	r3, #2
 800f560:	461a      	mov	r2, r3
 800f562:	6a3b      	ldr	r3, [r7, #32]
 800f564:	4293      	cmp	r3, r2
 800f566:	d30f      	bcc.n	800f588 <LCD_print_tank+0x32f8>
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	7b5b      	ldrb	r3, [r3, #13]
 800f56c:	3312      	adds	r3, #18
 800f56e:	461a      	mov	r2, r3
 800f570:	6a3b      	ldr	r3, [r7, #32]
 800f572:	4293      	cmp	r3, r2
 800f574:	d808      	bhi.n	800f588 <LCD_print_tank+0x32f8>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800f576:	f107 0118 	add.w	r1, r7, #24
 800f57a:	f04f 33ff 	mov.w	r3, #4294967295
 800f57e:	2202      	movs	r2, #2
 800f580:	4825      	ldr	r0, [pc, #148]	@ (800f618 <LCD_print_tank+0x3388>)
 800f582:	f009 f8bc 	bl	80186fe <HAL_SPI_Transmit>
 800f586:	e007      	b.n	800f598 <LCD_print_tank+0x3308>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800f588:	f107 0110 	add.w	r1, r7, #16
 800f58c:	f04f 33ff 	mov.w	r3, #4294967295
 800f590:	2202      	movs	r2, #2
 800f592:	4821      	ldr	r0, [pc, #132]	@ (800f618 <LCD_print_tank+0x3388>)
 800f594:	f009 f8b3 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800f598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f59a:	3301      	adds	r3, #1
 800f59c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	7b9b      	ldrb	r3, [r3, #14]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	f4ff af2b 	bcc.w	800f404 <LCD_print_tank+0x3174>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800f5ae:	6a3b      	ldr	r3, [r7, #32]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	623b      	str	r3, [r7, #32]
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	7bdb      	ldrb	r3, [r3, #15]
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	6a3b      	ldr	r3, [r7, #32]
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	f67f af1d 	bls.w	800f3fc <LCD_print_tank+0x316c>
	else if(num>=2.3 && num<2.4)
 800f5c2:	f001 b94a 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=2.4 && num<2.5)
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f7f1 f88c 	bl	80006e4 <__aeabi_f2d>
 800f5cc:	a310      	add	r3, pc, #64	@ (adr r3, 800f610 <LCD_print_tank+0x3380>)
 800f5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d2:	f7f1 f953 	bl	800087c <__aeabi_dcmpge>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	f000 8100 	beq.w	800f7de <LCD_print_tank+0x354e>
 800f5de:	edd7 7a01 	vldr	s15, [r7, #4]
 800f5e2:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 800f5e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ee:	f140 80f6 	bpl.w	800f7de <LCD_print_tank+0x354e>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	7b5b      	ldrb	r3, [r3, #13]
 800f5f6:	623b      	str	r3, [r7, #32]
 800f5f8:	e0e8      	b.n	800f7cc <LCD_print_tank+0x353c>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	7b1b      	ldrb	r3, [r3, #12]
 800f5fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800f600:	e0d9      	b.n	800f7b6 <LCD_print_tank+0x3526>
 800f602:	bf00      	nop
 800f604:	f3af 8000 	nop.w
 800f608:	66666666 	.word	0x66666666
 800f60c:	40026666 	.word	0x40026666
 800f610:	33333333 	.word	0x33333333
 800f614:	40033333 	.word	0x40033333
 800f618:	200004a4 	.word	0x200004a4
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	7b1b      	ldrb	r3, [r3, #12]
 800f620:	3303      	adds	r3, #3
 800f622:	461a      	mov	r2, r3
 800f624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f626:	4293      	cmp	r3, r2
 800f628:	d316      	bcc.n	800f658 <LCD_print_tank+0x33c8>
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	7b1b      	ldrb	r3, [r3, #12]
 800f62e:	331d      	adds	r3, #29
 800f630:	461a      	mov	r2, r3
 800f632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f634:	4293      	cmp	r3, r2
 800f636:	d80f      	bhi.n	800f658 <LCD_print_tank+0x33c8>
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	7b5b      	ldrb	r3, [r3, #13]
 800f63c:	3301      	adds	r3, #1
 800f63e:	461a      	mov	r2, r3
 800f640:	6a3b      	ldr	r3, [r7, #32]
 800f642:	4293      	cmp	r3, r2
 800f644:	d108      	bne.n	800f658 <LCD_print_tank+0x33c8>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f646:	f107 011c 	add.w	r1, r7, #28
 800f64a:	f04f 33ff 	mov.w	r3, #4294967295
 800f64e:	2202      	movs	r2, #2
 800f650:	48a1      	ldr	r0, [pc, #644]	@ (800f8d8 <LCD_print_tank+0x3648>)
 800f652:	f009 f854 	bl	80186fe <HAL_SPI_Transmit>
 800f656:	e0ab      	b.n	800f7b0 <LCD_print_tank+0x3520>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	7b1b      	ldrb	r3, [r3, #12]
 800f65c:	3303      	adds	r3, #3
 800f65e:	461a      	mov	r2, r3
 800f660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f662:	4293      	cmp	r3, r2
 800f664:	d316      	bcc.n	800f694 <LCD_print_tank+0x3404>
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	7b1b      	ldrb	r3, [r3, #12]
 800f66a:	331d      	adds	r3, #29
 800f66c:	461a      	mov	r2, r3
 800f66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f670:	4293      	cmp	r3, r2
 800f672:	d80f      	bhi.n	800f694 <LCD_print_tank+0x3404>
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	7b5b      	ldrb	r3, [r3, #13]
 800f678:	3342      	adds	r3, #66	@ 0x42
 800f67a:	461a      	mov	r2, r3
 800f67c:	6a3b      	ldr	r3, [r7, #32]
 800f67e:	4293      	cmp	r3, r2
 800f680:	d108      	bne.n	800f694 <LCD_print_tank+0x3404>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f682:	f107 011c 	add.w	r1, r7, #28
 800f686:	f04f 33ff 	mov.w	r3, #4294967295
 800f68a:	2202      	movs	r2, #2
 800f68c:	4892      	ldr	r0, [pc, #584]	@ (800f8d8 <LCD_print_tank+0x3648>)
 800f68e:	f009 f836 	bl	80186fe <HAL_SPI_Transmit>
 800f692:	e08d      	b.n	800f7b0 <LCD_print_tank+0x3520>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	7b1b      	ldrb	r3, [r3, #12]
 800f698:	331d      	adds	r3, #29
 800f69a:	461a      	mov	r2, r3
 800f69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d116      	bne.n	800f6d0 <LCD_print_tank+0x3440>
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	7b5b      	ldrb	r3, [r3, #13]
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	6a3b      	ldr	r3, [r7, #32]
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d30f      	bcc.n	800f6d0 <LCD_print_tank+0x3440>
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	7b5b      	ldrb	r3, [r3, #13]
 800f6b4:	3342      	adds	r3, #66	@ 0x42
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	6a3b      	ldr	r3, [r7, #32]
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d808      	bhi.n	800f6d0 <LCD_print_tank+0x3440>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f6be:	f107 011c 	add.w	r1, r7, #28
 800f6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f6c6:	2202      	movs	r2, #2
 800f6c8:	4883      	ldr	r0, [pc, #524]	@ (800f8d8 <LCD_print_tank+0x3648>)
 800f6ca:	f009 f818 	bl	80186fe <HAL_SPI_Transmit>
 800f6ce:	e06f      	b.n	800f7b0 <LCD_print_tank+0x3520>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	7b1b      	ldrb	r3, [r3, #12]
 800f6d4:	3303      	adds	r3, #3
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d116      	bne.n	800f70c <LCD_print_tank+0x347c>
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	7b5b      	ldrb	r3, [r3, #13]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	6a3b      	ldr	r3, [r7, #32]
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d30f      	bcc.n	800f70c <LCD_print_tank+0x347c>
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	7b5b      	ldrb	r3, [r3, #13]
 800f6f0:	3342      	adds	r3, #66	@ 0x42
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	6a3b      	ldr	r3, [r7, #32]
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d808      	bhi.n	800f70c <LCD_print_tank+0x347c>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f6fa:	f107 011c 	add.w	r1, r7, #28
 800f6fe:	f04f 33ff 	mov.w	r3, #4294967295
 800f702:	2202      	movs	r2, #2
 800f704:	4874      	ldr	r0, [pc, #464]	@ (800f8d8 <LCD_print_tank+0x3648>)
 800f706:	f008 fffa 	bl	80186fe <HAL_SPI_Transmit>
 800f70a:	e051      	b.n	800f7b0 <LCD_print_tank+0x3520>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+17) && wiersz<=(ADRES->Y0_SET+66))))
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	7b1b      	ldrb	r3, [r3, #12]
 800f710:	3304      	adds	r3, #4
 800f712:	461a      	mov	r2, r3
 800f714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f716:	4293      	cmp	r3, r2
 800f718:	d31d      	bcc.n	800f756 <LCD_print_tank+0x34c6>
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	7b1b      	ldrb	r3, [r3, #12]
 800f71e:	331c      	adds	r3, #28
 800f720:	461a      	mov	r2, r3
 800f722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f724:	4293      	cmp	r3, r2
 800f726:	d816      	bhi.n	800f756 <LCD_print_tank+0x34c6>
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	7b5b      	ldrb	r3, [r3, #13]
 800f72c:	3311      	adds	r3, #17
 800f72e:	461a      	mov	r2, r3
 800f730:	6a3b      	ldr	r3, [r7, #32]
 800f732:	4293      	cmp	r3, r2
 800f734:	d30f      	bcc.n	800f756 <LCD_print_tank+0x34c6>
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	7b5b      	ldrb	r3, [r3, #13]
 800f73a:	3342      	adds	r3, #66	@ 0x42
 800f73c:	461a      	mov	r2, r3
 800f73e:	6a3b      	ldr	r3, [r7, #32]
 800f740:	4293      	cmp	r3, r2
 800f742:	d808      	bhi.n	800f756 <LCD_print_tank+0x34c6>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800f744:	f107 0114 	add.w	r1, r7, #20
 800f748:	f04f 33ff 	mov.w	r3, #4294967295
 800f74c:	2202      	movs	r2, #2
 800f74e:	4862      	ldr	r0, [pc, #392]	@ (800f8d8 <LCD_print_tank+0x3648>)
 800f750:	f008 ffd5 	bl	80186fe <HAL_SPI_Transmit>
 800f754:	e02c      	b.n	800f7b0 <LCD_print_tank+0x3520>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+16))))
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	7b1b      	ldrb	r3, [r3, #12]
 800f75a:	3304      	adds	r3, #4
 800f75c:	461a      	mov	r2, r3
 800f75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f760:	4293      	cmp	r3, r2
 800f762:	d31d      	bcc.n	800f7a0 <LCD_print_tank+0x3510>
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	7b1b      	ldrb	r3, [r3, #12]
 800f768:	331c      	adds	r3, #28
 800f76a:	461a      	mov	r2, r3
 800f76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f76e:	4293      	cmp	r3, r2
 800f770:	d816      	bhi.n	800f7a0 <LCD_print_tank+0x3510>
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	7b5b      	ldrb	r3, [r3, #13]
 800f776:	3302      	adds	r3, #2
 800f778:	461a      	mov	r2, r3
 800f77a:	6a3b      	ldr	r3, [r7, #32]
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d30f      	bcc.n	800f7a0 <LCD_print_tank+0x3510>
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	7b5b      	ldrb	r3, [r3, #13]
 800f784:	3310      	adds	r3, #16
 800f786:	461a      	mov	r2, r3
 800f788:	6a3b      	ldr	r3, [r7, #32]
 800f78a:	4293      	cmp	r3, r2
 800f78c:	d808      	bhi.n	800f7a0 <LCD_print_tank+0x3510>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800f78e:	f107 0118 	add.w	r1, r7, #24
 800f792:	f04f 33ff 	mov.w	r3, #4294967295
 800f796:	2202      	movs	r2, #2
 800f798:	484f      	ldr	r0, [pc, #316]	@ (800f8d8 <LCD_print_tank+0x3648>)
 800f79a:	f008 ffb0 	bl	80186fe <HAL_SPI_Transmit>
 800f79e:	e007      	b.n	800f7b0 <LCD_print_tank+0x3520>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800f7a0:	f107 0110 	add.w	r1, r7, #16
 800f7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7a8:	2202      	movs	r2, #2
 800f7aa:	484b      	ldr	r0, [pc, #300]	@ (800f8d8 <LCD_print_tank+0x3648>)
 800f7ac:	f008 ffa7 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800f7b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	7b9b      	ldrb	r3, [r3, #14]
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	461a      	mov	r2, r3
 800f7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	f4ff af2b 	bcc.w	800f61c <LCD_print_tank+0x338c>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800f7c6:	6a3b      	ldr	r3, [r7, #32]
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	623b      	str	r3, [r7, #32]
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	7bdb      	ldrb	r3, [r3, #15]
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	6a3b      	ldr	r3, [r7, #32]
 800f7d4:	4293      	cmp	r3, r2
 800f7d6:	f67f af10 	bls.w	800f5fa <LCD_print_tank+0x336a>
	else if(num>=2.4 && num<2.5)
 800f7da:	f001 b83e 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=2.5 && num<2.6)
 800f7de:	edd7 7a01 	vldr	s15, [r7, #4]
 800f7e2:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 800f7e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ee:	f2c0 80fc 	blt.w	800f9ea <LCD_print_tank+0x375a>
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f7f0 ff76 	bl	80006e4 <__aeabi_f2d>
 800f7f8:	a335      	add	r3, pc, #212	@ (adr r3, 800f8d0 <LCD_print_tank+0x3640>)
 800f7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fe:	f7f1 f829 	bl	8000854 <__aeabi_dcmplt>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	f000 80f0 	beq.w	800f9ea <LCD_print_tank+0x375a>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	7b5b      	ldrb	r3, [r3, #13]
 800f80e:	623b      	str	r3, [r7, #32]
 800f810:	e0e2      	b.n	800f9d8 <LCD_print_tank+0x3748>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	7b1b      	ldrb	r3, [r3, #12]
 800f816:	627b      	str	r3, [r7, #36]	@ 0x24
 800f818:	e0d3      	b.n	800f9c2 <LCD_print_tank+0x3732>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	7b1b      	ldrb	r3, [r3, #12]
 800f81e:	3303      	adds	r3, #3
 800f820:	461a      	mov	r2, r3
 800f822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f824:	4293      	cmp	r3, r2
 800f826:	d316      	bcc.n	800f856 <LCD_print_tank+0x35c6>
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	7b1b      	ldrb	r3, [r3, #12]
 800f82c:	331d      	adds	r3, #29
 800f82e:	461a      	mov	r2, r3
 800f830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f832:	4293      	cmp	r3, r2
 800f834:	d80f      	bhi.n	800f856 <LCD_print_tank+0x35c6>
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	7b5b      	ldrb	r3, [r3, #13]
 800f83a:	3301      	adds	r3, #1
 800f83c:	461a      	mov	r2, r3
 800f83e:	6a3b      	ldr	r3, [r7, #32]
 800f840:	4293      	cmp	r3, r2
 800f842:	d108      	bne.n	800f856 <LCD_print_tank+0x35c6>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f844:	f107 011c 	add.w	r1, r7, #28
 800f848:	f04f 33ff 	mov.w	r3, #4294967295
 800f84c:	2202      	movs	r2, #2
 800f84e:	4822      	ldr	r0, [pc, #136]	@ (800f8d8 <LCD_print_tank+0x3648>)
 800f850:	f008 ff55 	bl	80186fe <HAL_SPI_Transmit>
 800f854:	e0b2      	b.n	800f9bc <LCD_print_tank+0x372c>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	7b1b      	ldrb	r3, [r3, #12]
 800f85a:	3303      	adds	r3, #3
 800f85c:	461a      	mov	r2, r3
 800f85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f860:	4293      	cmp	r3, r2
 800f862:	d316      	bcc.n	800f892 <LCD_print_tank+0x3602>
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	7b1b      	ldrb	r3, [r3, #12]
 800f868:	331d      	adds	r3, #29
 800f86a:	461a      	mov	r2, r3
 800f86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f86e:	4293      	cmp	r3, r2
 800f870:	d80f      	bhi.n	800f892 <LCD_print_tank+0x3602>
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	7b5b      	ldrb	r3, [r3, #13]
 800f876:	3342      	adds	r3, #66	@ 0x42
 800f878:	461a      	mov	r2, r3
 800f87a:	6a3b      	ldr	r3, [r7, #32]
 800f87c:	4293      	cmp	r3, r2
 800f87e:	d108      	bne.n	800f892 <LCD_print_tank+0x3602>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f880:	f107 011c 	add.w	r1, r7, #28
 800f884:	f04f 33ff 	mov.w	r3, #4294967295
 800f888:	2202      	movs	r2, #2
 800f88a:	4813      	ldr	r0, [pc, #76]	@ (800f8d8 <LCD_print_tank+0x3648>)
 800f88c:	f008 ff37 	bl	80186fe <HAL_SPI_Transmit>
 800f890:	e094      	b.n	800f9bc <LCD_print_tank+0x372c>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	7b1b      	ldrb	r3, [r3, #12]
 800f896:	331d      	adds	r3, #29
 800f898:	461a      	mov	r2, r3
 800f89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d11d      	bne.n	800f8dc <LCD_print_tank+0x364c>
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	7b5b      	ldrb	r3, [r3, #13]
 800f8a4:	3301      	adds	r3, #1
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	6a3b      	ldr	r3, [r7, #32]
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d316      	bcc.n	800f8dc <LCD_print_tank+0x364c>
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	7b5b      	ldrb	r3, [r3, #13]
 800f8b2:	3342      	adds	r3, #66	@ 0x42
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	6a3b      	ldr	r3, [r7, #32]
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d80f      	bhi.n	800f8dc <LCD_print_tank+0x364c>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f8bc:	f107 011c 	add.w	r1, r7, #28
 800f8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f8c4:	2202      	movs	r2, #2
 800f8c6:	4804      	ldr	r0, [pc, #16]	@ (800f8d8 <LCD_print_tank+0x3648>)
 800f8c8:	f008 ff19 	bl	80186fe <HAL_SPI_Transmit>
 800f8cc:	e076      	b.n	800f9bc <LCD_print_tank+0x372c>
 800f8ce:	bf00      	nop
 800f8d0:	cccccccd 	.word	0xcccccccd
 800f8d4:	4004cccc 	.word	0x4004cccc
 800f8d8:	200004a4 	.word	0x200004a4
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	7b1b      	ldrb	r3, [r3, #12]
 800f8e0:	3303      	adds	r3, #3
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d116      	bne.n	800f918 <LCD_print_tank+0x3688>
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	7b5b      	ldrb	r3, [r3, #13]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	6a3b      	ldr	r3, [r7, #32]
 800f8f4:	4293      	cmp	r3, r2
 800f8f6:	d30f      	bcc.n	800f918 <LCD_print_tank+0x3688>
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	7b5b      	ldrb	r3, [r3, #13]
 800f8fc:	3342      	adds	r3, #66	@ 0x42
 800f8fe:	461a      	mov	r2, r3
 800f900:	6a3b      	ldr	r3, [r7, #32]
 800f902:	4293      	cmp	r3, r2
 800f904:	d808      	bhi.n	800f918 <LCD_print_tank+0x3688>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800f906:	f107 011c 	add.w	r1, r7, #28
 800f90a:	f04f 33ff 	mov.w	r3, #4294967295
 800f90e:	2202      	movs	r2, #2
 800f910:	4899      	ldr	r0, [pc, #612]	@ (800fb78 <LCD_print_tank+0x38e8>)
 800f912:	f008 fef4 	bl	80186fe <HAL_SPI_Transmit>
 800f916:	e051      	b.n	800f9bc <LCD_print_tank+0x372c>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+15) && wiersz<=(ADRES->Y0_SET+66))))
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	7b1b      	ldrb	r3, [r3, #12]
 800f91c:	3304      	adds	r3, #4
 800f91e:	461a      	mov	r2, r3
 800f920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f922:	4293      	cmp	r3, r2
 800f924:	d31d      	bcc.n	800f962 <LCD_print_tank+0x36d2>
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	7b1b      	ldrb	r3, [r3, #12]
 800f92a:	331c      	adds	r3, #28
 800f92c:	461a      	mov	r2, r3
 800f92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f930:	4293      	cmp	r3, r2
 800f932:	d816      	bhi.n	800f962 <LCD_print_tank+0x36d2>
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	7b5b      	ldrb	r3, [r3, #13]
 800f938:	330f      	adds	r3, #15
 800f93a:	461a      	mov	r2, r3
 800f93c:	6a3b      	ldr	r3, [r7, #32]
 800f93e:	4293      	cmp	r3, r2
 800f940:	d30f      	bcc.n	800f962 <LCD_print_tank+0x36d2>
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	7b5b      	ldrb	r3, [r3, #13]
 800f946:	3342      	adds	r3, #66	@ 0x42
 800f948:	461a      	mov	r2, r3
 800f94a:	6a3b      	ldr	r3, [r7, #32]
 800f94c:	4293      	cmp	r3, r2
 800f94e:	d808      	bhi.n	800f962 <LCD_print_tank+0x36d2>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800f950:	f107 0114 	add.w	r1, r7, #20
 800f954:	f04f 33ff 	mov.w	r3, #4294967295
 800f958:	2202      	movs	r2, #2
 800f95a:	4887      	ldr	r0, [pc, #540]	@ (800fb78 <LCD_print_tank+0x38e8>)
 800f95c:	f008 fecf 	bl	80186fe <HAL_SPI_Transmit>
 800f960:	e02c      	b.n	800f9bc <LCD_print_tank+0x372c>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+14))))
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	7b1b      	ldrb	r3, [r3, #12]
 800f966:	3304      	adds	r3, #4
 800f968:	461a      	mov	r2, r3
 800f96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d31d      	bcc.n	800f9ac <LCD_print_tank+0x371c>
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	7b1b      	ldrb	r3, [r3, #12]
 800f974:	331c      	adds	r3, #28
 800f976:	461a      	mov	r2, r3
 800f978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f97a:	4293      	cmp	r3, r2
 800f97c:	d816      	bhi.n	800f9ac <LCD_print_tank+0x371c>
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	7b5b      	ldrb	r3, [r3, #13]
 800f982:	3302      	adds	r3, #2
 800f984:	461a      	mov	r2, r3
 800f986:	6a3b      	ldr	r3, [r7, #32]
 800f988:	4293      	cmp	r3, r2
 800f98a:	d30f      	bcc.n	800f9ac <LCD_print_tank+0x371c>
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	7b5b      	ldrb	r3, [r3, #13]
 800f990:	330e      	adds	r3, #14
 800f992:	461a      	mov	r2, r3
 800f994:	6a3b      	ldr	r3, [r7, #32]
 800f996:	4293      	cmp	r3, r2
 800f998:	d808      	bhi.n	800f9ac <LCD_print_tank+0x371c>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800f99a:	f107 0118 	add.w	r1, r7, #24
 800f99e:	f04f 33ff 	mov.w	r3, #4294967295
 800f9a2:	2202      	movs	r2, #2
 800f9a4:	4874      	ldr	r0, [pc, #464]	@ (800fb78 <LCD_print_tank+0x38e8>)
 800f9a6:	f008 feaa 	bl	80186fe <HAL_SPI_Transmit>
 800f9aa:	e007      	b.n	800f9bc <LCD_print_tank+0x372c>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800f9ac:	f107 0110 	add.w	r1, r7, #16
 800f9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f9b4:	2202      	movs	r2, #2
 800f9b6:	4870      	ldr	r0, [pc, #448]	@ (800fb78 <LCD_print_tank+0x38e8>)
 800f9b8:	f008 fea1 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800f9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9be:	3301      	adds	r3, #1
 800f9c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	7b9b      	ldrb	r3, [r3, #14]
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	f4ff af24 	bcc.w	800f81a <LCD_print_tank+0x358a>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800f9d2:	6a3b      	ldr	r3, [r7, #32]
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	623b      	str	r3, [r7, #32]
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	7bdb      	ldrb	r3, [r3, #15]
 800f9dc:	461a      	mov	r2, r3
 800f9de:	6a3b      	ldr	r3, [r7, #32]
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	f67f af16 	bls.w	800f812 <LCD_print_tank+0x3582>
	else if(num>=2.5 && num<2.6)
 800f9e6:	f000 bf38 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=2.6 && num<2.7)
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f7f0 fe7a 	bl	80006e4 <__aeabi_f2d>
 800f9f0:	a35d      	add	r3, pc, #372	@ (adr r3, 800fb68 <LCD_print_tank+0x38d8>)
 800f9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f6:	f7f0 ff41 	bl	800087c <__aeabi_dcmpge>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	f000 8101 	beq.w	800fc04 <LCD_print_tank+0x3974>
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f7f0 fe6e 	bl	80006e4 <__aeabi_f2d>
 800fa08:	a359      	add	r3, pc, #356	@ (adr r3, 800fb70 <LCD_print_tank+0x38e0>)
 800fa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0e:	f7f0 ff21 	bl	8000854 <__aeabi_dcmplt>
 800fa12:	4603      	mov	r3, r0
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	f000 80f5 	beq.w	800fc04 <LCD_print_tank+0x3974>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	7b5b      	ldrb	r3, [r3, #13]
 800fa1e:	623b      	str	r3, [r7, #32]
 800fa20:	e0e7      	b.n	800fbf2 <LCD_print_tank+0x3962>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	7b1b      	ldrb	r3, [r3, #12]
 800fa26:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa28:	e0d8      	b.n	800fbdc <LCD_print_tank+0x394c>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	7b1b      	ldrb	r3, [r3, #12]
 800fa2e:	3303      	adds	r3, #3
 800fa30:	461a      	mov	r2, r3
 800fa32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa34:	4293      	cmp	r3, r2
 800fa36:	d316      	bcc.n	800fa66 <LCD_print_tank+0x37d6>
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	7b1b      	ldrb	r3, [r3, #12]
 800fa3c:	331d      	adds	r3, #29
 800fa3e:	461a      	mov	r2, r3
 800fa40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d80f      	bhi.n	800fa66 <LCD_print_tank+0x37d6>
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	7b5b      	ldrb	r3, [r3, #13]
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	6a3b      	ldr	r3, [r7, #32]
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d108      	bne.n	800fa66 <LCD_print_tank+0x37d6>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800fa54:	f107 011c 	add.w	r1, r7, #28
 800fa58:	f04f 33ff 	mov.w	r3, #4294967295
 800fa5c:	2202      	movs	r2, #2
 800fa5e:	4846      	ldr	r0, [pc, #280]	@ (800fb78 <LCD_print_tank+0x38e8>)
 800fa60:	f008 fe4d 	bl	80186fe <HAL_SPI_Transmit>
 800fa64:	e0b7      	b.n	800fbd6 <LCD_print_tank+0x3946>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	7b1b      	ldrb	r3, [r3, #12]
 800fa6a:	3303      	adds	r3, #3
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa70:	4293      	cmp	r3, r2
 800fa72:	d316      	bcc.n	800faa2 <LCD_print_tank+0x3812>
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	7b1b      	ldrb	r3, [r3, #12]
 800fa78:	331d      	adds	r3, #29
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d80f      	bhi.n	800faa2 <LCD_print_tank+0x3812>
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	7b5b      	ldrb	r3, [r3, #13]
 800fa86:	3342      	adds	r3, #66	@ 0x42
 800fa88:	461a      	mov	r2, r3
 800fa8a:	6a3b      	ldr	r3, [r7, #32]
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d108      	bne.n	800faa2 <LCD_print_tank+0x3812>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800fa90:	f107 011c 	add.w	r1, r7, #28
 800fa94:	f04f 33ff 	mov.w	r3, #4294967295
 800fa98:	2202      	movs	r2, #2
 800fa9a:	4837      	ldr	r0, [pc, #220]	@ (800fb78 <LCD_print_tank+0x38e8>)
 800fa9c:	f008 fe2f 	bl	80186fe <HAL_SPI_Transmit>
 800faa0:	e099      	b.n	800fbd6 <LCD_print_tank+0x3946>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	7b1b      	ldrb	r3, [r3, #12]
 800faa6:	331d      	adds	r3, #29
 800faa8:	461a      	mov	r2, r3
 800faaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faac:	4293      	cmp	r3, r2
 800faae:	d116      	bne.n	800fade <LCD_print_tank+0x384e>
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	7b5b      	ldrb	r3, [r3, #13]
 800fab4:	3301      	adds	r3, #1
 800fab6:	461a      	mov	r2, r3
 800fab8:	6a3b      	ldr	r3, [r7, #32]
 800faba:	4293      	cmp	r3, r2
 800fabc:	d30f      	bcc.n	800fade <LCD_print_tank+0x384e>
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	7b5b      	ldrb	r3, [r3, #13]
 800fac2:	3342      	adds	r3, #66	@ 0x42
 800fac4:	461a      	mov	r2, r3
 800fac6:	6a3b      	ldr	r3, [r7, #32]
 800fac8:	4293      	cmp	r3, r2
 800faca:	d808      	bhi.n	800fade <LCD_print_tank+0x384e>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800facc:	f107 011c 	add.w	r1, r7, #28
 800fad0:	f04f 33ff 	mov.w	r3, #4294967295
 800fad4:	2202      	movs	r2, #2
 800fad6:	4828      	ldr	r0, [pc, #160]	@ (800fb78 <LCD_print_tank+0x38e8>)
 800fad8:	f008 fe11 	bl	80186fe <HAL_SPI_Transmit>
 800fadc:	e07b      	b.n	800fbd6 <LCD_print_tank+0x3946>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	7b1b      	ldrb	r3, [r3, #12]
 800fae2:	3303      	adds	r3, #3
 800fae4:	461a      	mov	r2, r3
 800fae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fae8:	4293      	cmp	r3, r2
 800faea:	d116      	bne.n	800fb1a <LCD_print_tank+0x388a>
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	7b5b      	ldrb	r3, [r3, #13]
 800faf0:	3301      	adds	r3, #1
 800faf2:	461a      	mov	r2, r3
 800faf4:	6a3b      	ldr	r3, [r7, #32]
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d30f      	bcc.n	800fb1a <LCD_print_tank+0x388a>
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	7b5b      	ldrb	r3, [r3, #13]
 800fafe:	3342      	adds	r3, #66	@ 0x42
 800fb00:	461a      	mov	r2, r3
 800fb02:	6a3b      	ldr	r3, [r7, #32]
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d808      	bhi.n	800fb1a <LCD_print_tank+0x388a>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800fb08:	f107 011c 	add.w	r1, r7, #28
 800fb0c:	f04f 33ff 	mov.w	r3, #4294967295
 800fb10:	2202      	movs	r2, #2
 800fb12:	4819      	ldr	r0, [pc, #100]	@ (800fb78 <LCD_print_tank+0x38e8>)
 800fb14:	f008 fdf3 	bl	80186fe <HAL_SPI_Transmit>
 800fb18:	e05d      	b.n	800fbd6 <LCD_print_tank+0x3946>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+15) && wiersz<=(ADRES->Y0_SET+66))))
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	7b1b      	ldrb	r3, [r3, #12]
 800fb1e:	3304      	adds	r3, #4
 800fb20:	461a      	mov	r2, r3
 800fb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d329      	bcc.n	800fb7c <LCD_print_tank+0x38ec>
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	7b1b      	ldrb	r3, [r3, #12]
 800fb2c:	331c      	adds	r3, #28
 800fb2e:	461a      	mov	r2, r3
 800fb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb32:	4293      	cmp	r3, r2
 800fb34:	d822      	bhi.n	800fb7c <LCD_print_tank+0x38ec>
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	7b5b      	ldrb	r3, [r3, #13]
 800fb3a:	330f      	adds	r3, #15
 800fb3c:	461a      	mov	r2, r3
 800fb3e:	6a3b      	ldr	r3, [r7, #32]
 800fb40:	4293      	cmp	r3, r2
 800fb42:	d31b      	bcc.n	800fb7c <LCD_print_tank+0x38ec>
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	7b5b      	ldrb	r3, [r3, #13]
 800fb48:	3342      	adds	r3, #66	@ 0x42
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	6a3b      	ldr	r3, [r7, #32]
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d814      	bhi.n	800fb7c <LCD_print_tank+0x38ec>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800fb52:	f107 0114 	add.w	r1, r7, #20
 800fb56:	f04f 33ff 	mov.w	r3, #4294967295
 800fb5a:	2202      	movs	r2, #2
 800fb5c:	4806      	ldr	r0, [pc, #24]	@ (800fb78 <LCD_print_tank+0x38e8>)
 800fb5e:	f008 fdce 	bl	80186fe <HAL_SPI_Transmit>
 800fb62:	e038      	b.n	800fbd6 <LCD_print_tank+0x3946>
 800fb64:	f3af 8000 	nop.w
 800fb68:	cccccccd 	.word	0xcccccccd
 800fb6c:	4004cccc 	.word	0x4004cccc
 800fb70:	9999999a 	.word	0x9999999a
 800fb74:	40059999 	.word	0x40059999
 800fb78:	200004a4 	.word	0x200004a4
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+14))))
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	7b1b      	ldrb	r3, [r3, #12]
 800fb80:	3304      	adds	r3, #4
 800fb82:	461a      	mov	r2, r3
 800fb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d31d      	bcc.n	800fbc6 <LCD_print_tank+0x3936>
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	7b1b      	ldrb	r3, [r3, #12]
 800fb8e:	331c      	adds	r3, #28
 800fb90:	461a      	mov	r2, r3
 800fb92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d816      	bhi.n	800fbc6 <LCD_print_tank+0x3936>
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	7b5b      	ldrb	r3, [r3, #13]
 800fb9c:	3302      	adds	r3, #2
 800fb9e:	461a      	mov	r2, r3
 800fba0:	6a3b      	ldr	r3, [r7, #32]
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d30f      	bcc.n	800fbc6 <LCD_print_tank+0x3936>
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	7b5b      	ldrb	r3, [r3, #13]
 800fbaa:	330e      	adds	r3, #14
 800fbac:	461a      	mov	r2, r3
 800fbae:	6a3b      	ldr	r3, [r7, #32]
 800fbb0:	4293      	cmp	r3, r2
 800fbb2:	d808      	bhi.n	800fbc6 <LCD_print_tank+0x3936>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800fbb4:	f107 0118 	add.w	r1, r7, #24
 800fbb8:	f04f 33ff 	mov.w	r3, #4294967295
 800fbbc:	2202      	movs	r2, #2
 800fbbe:	48a8      	ldr	r0, [pc, #672]	@ (800fe60 <LCD_print_tank+0x3bd0>)
 800fbc0:	f008 fd9d 	bl	80186fe <HAL_SPI_Transmit>
 800fbc4:	e007      	b.n	800fbd6 <LCD_print_tank+0x3946>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800fbc6:	f107 0110 	add.w	r1, r7, #16
 800fbca:	f04f 33ff 	mov.w	r3, #4294967295
 800fbce:	2202      	movs	r2, #2
 800fbd0:	48a3      	ldr	r0, [pc, #652]	@ (800fe60 <LCD_print_tank+0x3bd0>)
 800fbd2:	f008 fd94 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800fbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbd8:	3301      	adds	r3, #1
 800fbda:	627b      	str	r3, [r7, #36]	@ 0x24
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	7b9b      	ldrb	r3, [r3, #14]
 800fbe0:	3301      	adds	r3, #1
 800fbe2:	461a      	mov	r2, r3
 800fbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	f4ff af1f 	bcc.w	800fa2a <LCD_print_tank+0x379a>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800fbec:	6a3b      	ldr	r3, [r7, #32]
 800fbee:	3301      	adds	r3, #1
 800fbf0:	623b      	str	r3, [r7, #32]
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	7bdb      	ldrb	r3, [r3, #15]
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	6a3b      	ldr	r3, [r7, #32]
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	f67f af11 	bls.w	800fa22 <LCD_print_tank+0x3792>
	else if(num>=2.6 && num<2.7)
 800fc00:	f000 be2b 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=2.7 && num<2.8)
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f7f0 fd6d 	bl	80006e4 <__aeabi_f2d>
 800fc0a:	a38f      	add	r3, pc, #572	@ (adr r3, 800fe48 <LCD_print_tank+0x3bb8>)
 800fc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc10:	f7f0 fe34 	bl	800087c <__aeabi_dcmpge>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	f000 80f5 	beq.w	800fe06 <LCD_print_tank+0x3b76>
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f7f0 fd61 	bl	80006e4 <__aeabi_f2d>
 800fc22:	a38b      	add	r3, pc, #556	@ (adr r3, 800fe50 <LCD_print_tank+0x3bc0>)
 800fc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc28:	f7f0 fe14 	bl	8000854 <__aeabi_dcmplt>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	f000 80e9 	beq.w	800fe06 <LCD_print_tank+0x3b76>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	7b5b      	ldrb	r3, [r3, #13]
 800fc38:	623b      	str	r3, [r7, #32]
 800fc3a:	e0db      	b.n	800fdf4 <LCD_print_tank+0x3b64>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	7b1b      	ldrb	r3, [r3, #12]
 800fc40:	627b      	str	r3, [r7, #36]	@ 0x24
 800fc42:	e0cc      	b.n	800fdde <LCD_print_tank+0x3b4e>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	7b1b      	ldrb	r3, [r3, #12]
 800fc48:	3303      	adds	r3, #3
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	d316      	bcc.n	800fc80 <LCD_print_tank+0x39f0>
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	7b1b      	ldrb	r3, [r3, #12]
 800fc56:	331d      	adds	r3, #29
 800fc58:	461a      	mov	r2, r3
 800fc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	d80f      	bhi.n	800fc80 <LCD_print_tank+0x39f0>
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	7b5b      	ldrb	r3, [r3, #13]
 800fc64:	3301      	adds	r3, #1
 800fc66:	461a      	mov	r2, r3
 800fc68:	6a3b      	ldr	r3, [r7, #32]
 800fc6a:	4293      	cmp	r3, r2
 800fc6c:	d108      	bne.n	800fc80 <LCD_print_tank+0x39f0>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800fc6e:	f107 011c 	add.w	r1, r7, #28
 800fc72:	f04f 33ff 	mov.w	r3, #4294967295
 800fc76:	2202      	movs	r2, #2
 800fc78:	4879      	ldr	r0, [pc, #484]	@ (800fe60 <LCD_print_tank+0x3bd0>)
 800fc7a:	f008 fd40 	bl	80186fe <HAL_SPI_Transmit>
 800fc7e:	e0ab      	b.n	800fdd8 <LCD_print_tank+0x3b48>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	7b1b      	ldrb	r3, [r3, #12]
 800fc84:	3303      	adds	r3, #3
 800fc86:	461a      	mov	r2, r3
 800fc88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	d316      	bcc.n	800fcbc <LCD_print_tank+0x3a2c>
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	7b1b      	ldrb	r3, [r3, #12]
 800fc92:	331d      	adds	r3, #29
 800fc94:	461a      	mov	r2, r3
 800fc96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d80f      	bhi.n	800fcbc <LCD_print_tank+0x3a2c>
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	7b5b      	ldrb	r3, [r3, #13]
 800fca0:	3342      	adds	r3, #66	@ 0x42
 800fca2:	461a      	mov	r2, r3
 800fca4:	6a3b      	ldr	r3, [r7, #32]
 800fca6:	4293      	cmp	r3, r2
 800fca8:	d108      	bne.n	800fcbc <LCD_print_tank+0x3a2c>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800fcaa:	f107 011c 	add.w	r1, r7, #28
 800fcae:	f04f 33ff 	mov.w	r3, #4294967295
 800fcb2:	2202      	movs	r2, #2
 800fcb4:	486a      	ldr	r0, [pc, #424]	@ (800fe60 <LCD_print_tank+0x3bd0>)
 800fcb6:	f008 fd22 	bl	80186fe <HAL_SPI_Transmit>
 800fcba:	e08d      	b.n	800fdd8 <LCD_print_tank+0x3b48>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	7b1b      	ldrb	r3, [r3, #12]
 800fcc0:	331d      	adds	r3, #29
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	d116      	bne.n	800fcf8 <LCD_print_tank+0x3a68>
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	7b5b      	ldrb	r3, [r3, #13]
 800fcce:	3301      	adds	r3, #1
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	6a3b      	ldr	r3, [r7, #32]
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	d30f      	bcc.n	800fcf8 <LCD_print_tank+0x3a68>
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	7b5b      	ldrb	r3, [r3, #13]
 800fcdc:	3342      	adds	r3, #66	@ 0x42
 800fcde:	461a      	mov	r2, r3
 800fce0:	6a3b      	ldr	r3, [r7, #32]
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d808      	bhi.n	800fcf8 <LCD_print_tank+0x3a68>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800fce6:	f107 011c 	add.w	r1, r7, #28
 800fcea:	f04f 33ff 	mov.w	r3, #4294967295
 800fcee:	2202      	movs	r2, #2
 800fcf0:	485b      	ldr	r0, [pc, #364]	@ (800fe60 <LCD_print_tank+0x3bd0>)
 800fcf2:	f008 fd04 	bl	80186fe <HAL_SPI_Transmit>
 800fcf6:	e06f      	b.n	800fdd8 <LCD_print_tank+0x3b48>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	7b1b      	ldrb	r3, [r3, #12]
 800fcfc:	3303      	adds	r3, #3
 800fcfe:	461a      	mov	r2, r3
 800fd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d116      	bne.n	800fd34 <LCD_print_tank+0x3aa4>
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	7b5b      	ldrb	r3, [r3, #13]
 800fd0a:	3301      	adds	r3, #1
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	6a3b      	ldr	r3, [r7, #32]
 800fd10:	4293      	cmp	r3, r2
 800fd12:	d30f      	bcc.n	800fd34 <LCD_print_tank+0x3aa4>
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	7b5b      	ldrb	r3, [r3, #13]
 800fd18:	3342      	adds	r3, #66	@ 0x42
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	6a3b      	ldr	r3, [r7, #32]
 800fd1e:	4293      	cmp	r3, r2
 800fd20:	d808      	bhi.n	800fd34 <LCD_print_tank+0x3aa4>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800fd22:	f107 011c 	add.w	r1, r7, #28
 800fd26:	f04f 33ff 	mov.w	r3, #4294967295
 800fd2a:	2202      	movs	r2, #2
 800fd2c:	484c      	ldr	r0, [pc, #304]	@ (800fe60 <LCD_print_tank+0x3bd0>)
 800fd2e:	f008 fce6 	bl	80186fe <HAL_SPI_Transmit>
 800fd32:	e051      	b.n	800fdd8 <LCD_print_tank+0x3b48>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+13) && wiersz<=(ADRES->Y0_SET+66))))
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	7b1b      	ldrb	r3, [r3, #12]
 800fd38:	3304      	adds	r3, #4
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd3e:	4293      	cmp	r3, r2
 800fd40:	d31d      	bcc.n	800fd7e <LCD_print_tank+0x3aee>
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	7b1b      	ldrb	r3, [r3, #12]
 800fd46:	331c      	adds	r3, #28
 800fd48:	461a      	mov	r2, r3
 800fd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d816      	bhi.n	800fd7e <LCD_print_tank+0x3aee>
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	7b5b      	ldrb	r3, [r3, #13]
 800fd54:	330d      	adds	r3, #13
 800fd56:	461a      	mov	r2, r3
 800fd58:	6a3b      	ldr	r3, [r7, #32]
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d30f      	bcc.n	800fd7e <LCD_print_tank+0x3aee>
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	7b5b      	ldrb	r3, [r3, #13]
 800fd62:	3342      	adds	r3, #66	@ 0x42
 800fd64:	461a      	mov	r2, r3
 800fd66:	6a3b      	ldr	r3, [r7, #32]
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d808      	bhi.n	800fd7e <LCD_print_tank+0x3aee>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800fd6c:	f107 0114 	add.w	r1, r7, #20
 800fd70:	f04f 33ff 	mov.w	r3, #4294967295
 800fd74:	2202      	movs	r2, #2
 800fd76:	483a      	ldr	r0, [pc, #232]	@ (800fe60 <LCD_print_tank+0x3bd0>)
 800fd78:	f008 fcc1 	bl	80186fe <HAL_SPI_Transmit>
 800fd7c:	e02c      	b.n	800fdd8 <LCD_print_tank+0x3b48>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+12))))
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	7b1b      	ldrb	r3, [r3, #12]
 800fd82:	3304      	adds	r3, #4
 800fd84:	461a      	mov	r2, r3
 800fd86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd88:	4293      	cmp	r3, r2
 800fd8a:	d31d      	bcc.n	800fdc8 <LCD_print_tank+0x3b38>
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	7b1b      	ldrb	r3, [r3, #12]
 800fd90:	331c      	adds	r3, #28
 800fd92:	461a      	mov	r2, r3
 800fd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d816      	bhi.n	800fdc8 <LCD_print_tank+0x3b38>
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	7b5b      	ldrb	r3, [r3, #13]
 800fd9e:	3302      	adds	r3, #2
 800fda0:	461a      	mov	r2, r3
 800fda2:	6a3b      	ldr	r3, [r7, #32]
 800fda4:	4293      	cmp	r3, r2
 800fda6:	d30f      	bcc.n	800fdc8 <LCD_print_tank+0x3b38>
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	7b5b      	ldrb	r3, [r3, #13]
 800fdac:	330c      	adds	r3, #12
 800fdae:	461a      	mov	r2, r3
 800fdb0:	6a3b      	ldr	r3, [r7, #32]
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d808      	bhi.n	800fdc8 <LCD_print_tank+0x3b38>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800fdb6:	f107 0118 	add.w	r1, r7, #24
 800fdba:	f04f 33ff 	mov.w	r3, #4294967295
 800fdbe:	2202      	movs	r2, #2
 800fdc0:	4827      	ldr	r0, [pc, #156]	@ (800fe60 <LCD_print_tank+0x3bd0>)
 800fdc2:	f008 fc9c 	bl	80186fe <HAL_SPI_Transmit>
 800fdc6:	e007      	b.n	800fdd8 <LCD_print_tank+0x3b48>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800fdc8:	f107 0110 	add.w	r1, r7, #16
 800fdcc:	f04f 33ff 	mov.w	r3, #4294967295
 800fdd0:	2202      	movs	r2, #2
 800fdd2:	4823      	ldr	r0, [pc, #140]	@ (800fe60 <LCD_print_tank+0x3bd0>)
 800fdd4:	f008 fc93 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800fdd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdda:	3301      	adds	r3, #1
 800fddc:	627b      	str	r3, [r7, #36]	@ 0x24
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	7b9b      	ldrb	r3, [r3, #14]
 800fde2:	3301      	adds	r3, #1
 800fde4:	461a      	mov	r2, r3
 800fde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fde8:	4293      	cmp	r3, r2
 800fdea:	f4ff af2b 	bcc.w	800fc44 <LCD_print_tank+0x39b4>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800fdee:	6a3b      	ldr	r3, [r7, #32]
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	623b      	str	r3, [r7, #32]
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	7bdb      	ldrb	r3, [r3, #15]
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	6a3b      	ldr	r3, [r7, #32]
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	f67f af1d 	bls.w	800fc3c <LCD_print_tank+0x39ac>
	else if(num>=2.7 && num<2.8)
 800fe02:	f000 bd2a 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=2.8 && num<2.9)
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f7f0 fc6c 	bl	80006e4 <__aeabi_f2d>
 800fe0c:	a310      	add	r3, pc, #64	@ (adr r3, 800fe50 <LCD_print_tank+0x3bc0>)
 800fe0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe12:	f7f0 fd33 	bl	800087c <__aeabi_dcmpge>
 800fe16:	4603      	mov	r3, r0
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	f000 8104 	beq.w	8010026 <LCD_print_tank+0x3d96>
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f7f0 fc60 	bl	80006e4 <__aeabi_f2d>
 800fe24:	a30c      	add	r3, pc, #48	@ (adr r3, 800fe58 <LCD_print_tank+0x3bc8>)
 800fe26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2a:	f7f0 fd13 	bl	8000854 <__aeabi_dcmplt>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	f000 80f8 	beq.w	8010026 <LCD_print_tank+0x3d96>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	7b5b      	ldrb	r3, [r3, #13]
 800fe3a:	623b      	str	r3, [r7, #32]
 800fe3c:	e0ea      	b.n	8010014 <LCD_print_tank+0x3d84>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	7b1b      	ldrb	r3, [r3, #12]
 800fe42:	627b      	str	r3, [r7, #36]	@ 0x24
 800fe44:	e0db      	b.n	800fffe <LCD_print_tank+0x3d6e>
 800fe46:	bf00      	nop
 800fe48:	9999999a 	.word	0x9999999a
 800fe4c:	40059999 	.word	0x40059999
 800fe50:	66666666 	.word	0x66666666
 800fe54:	40066666 	.word	0x40066666
 800fe58:	33333333 	.word	0x33333333
 800fe5c:	40073333 	.word	0x40073333
 800fe60:	200004a4 	.word	0x200004a4
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	7b1b      	ldrb	r3, [r3, #12]
 800fe68:	3303      	adds	r3, #3
 800fe6a:	461a      	mov	r2, r3
 800fe6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	d316      	bcc.n	800fea0 <LCD_print_tank+0x3c10>
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	7b1b      	ldrb	r3, [r3, #12]
 800fe76:	331d      	adds	r3, #29
 800fe78:	461a      	mov	r2, r3
 800fe7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d80f      	bhi.n	800fea0 <LCD_print_tank+0x3c10>
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	7b5b      	ldrb	r3, [r3, #13]
 800fe84:	3301      	adds	r3, #1
 800fe86:	461a      	mov	r2, r3
 800fe88:	6a3b      	ldr	r3, [r7, #32]
 800fe8a:	4293      	cmp	r3, r2
 800fe8c:	d108      	bne.n	800fea0 <LCD_print_tank+0x3c10>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800fe8e:	f107 011c 	add.w	r1, r7, #28
 800fe92:	f04f 33ff 	mov.w	r3, #4294967295
 800fe96:	2202      	movs	r2, #2
 800fe98:	48a1      	ldr	r0, [pc, #644]	@ (8010120 <LCD_print_tank+0x3e90>)
 800fe9a:	f008 fc30 	bl	80186fe <HAL_SPI_Transmit>
 800fe9e:	e0ab      	b.n	800fff8 <LCD_print_tank+0x3d68>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	7b1b      	ldrb	r3, [r3, #12]
 800fea4:	3303      	adds	r3, #3
 800fea6:	461a      	mov	r2, r3
 800fea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feaa:	4293      	cmp	r3, r2
 800feac:	d316      	bcc.n	800fedc <LCD_print_tank+0x3c4c>
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	7b1b      	ldrb	r3, [r3, #12]
 800feb2:	331d      	adds	r3, #29
 800feb4:	461a      	mov	r2, r3
 800feb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feb8:	4293      	cmp	r3, r2
 800feba:	d80f      	bhi.n	800fedc <LCD_print_tank+0x3c4c>
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	7b5b      	ldrb	r3, [r3, #13]
 800fec0:	3342      	adds	r3, #66	@ 0x42
 800fec2:	461a      	mov	r2, r3
 800fec4:	6a3b      	ldr	r3, [r7, #32]
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d108      	bne.n	800fedc <LCD_print_tank+0x3c4c>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800feca:	f107 011c 	add.w	r1, r7, #28
 800fece:	f04f 33ff 	mov.w	r3, #4294967295
 800fed2:	2202      	movs	r2, #2
 800fed4:	4892      	ldr	r0, [pc, #584]	@ (8010120 <LCD_print_tank+0x3e90>)
 800fed6:	f008 fc12 	bl	80186fe <HAL_SPI_Transmit>
 800feda:	e08d      	b.n	800fff8 <LCD_print_tank+0x3d68>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	7b1b      	ldrb	r3, [r3, #12]
 800fee0:	331d      	adds	r3, #29
 800fee2:	461a      	mov	r2, r3
 800fee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d116      	bne.n	800ff18 <LCD_print_tank+0x3c88>
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	7b5b      	ldrb	r3, [r3, #13]
 800feee:	3301      	adds	r3, #1
 800fef0:	461a      	mov	r2, r3
 800fef2:	6a3b      	ldr	r3, [r7, #32]
 800fef4:	4293      	cmp	r3, r2
 800fef6:	d30f      	bcc.n	800ff18 <LCD_print_tank+0x3c88>
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	7b5b      	ldrb	r3, [r3, #13]
 800fefc:	3342      	adds	r3, #66	@ 0x42
 800fefe:	461a      	mov	r2, r3
 800ff00:	6a3b      	ldr	r3, [r7, #32]
 800ff02:	4293      	cmp	r3, r2
 800ff04:	d808      	bhi.n	800ff18 <LCD_print_tank+0x3c88>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800ff06:	f107 011c 	add.w	r1, r7, #28
 800ff0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ff0e:	2202      	movs	r2, #2
 800ff10:	4883      	ldr	r0, [pc, #524]	@ (8010120 <LCD_print_tank+0x3e90>)
 800ff12:	f008 fbf4 	bl	80186fe <HAL_SPI_Transmit>
 800ff16:	e06f      	b.n	800fff8 <LCD_print_tank+0x3d68>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	7b1b      	ldrb	r3, [r3, #12]
 800ff1c:	3303      	adds	r3, #3
 800ff1e:	461a      	mov	r2, r3
 800ff20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff22:	4293      	cmp	r3, r2
 800ff24:	d116      	bne.n	800ff54 <LCD_print_tank+0x3cc4>
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	7b5b      	ldrb	r3, [r3, #13]
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	6a3b      	ldr	r3, [r7, #32]
 800ff30:	4293      	cmp	r3, r2
 800ff32:	d30f      	bcc.n	800ff54 <LCD_print_tank+0x3cc4>
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	7b5b      	ldrb	r3, [r3, #13]
 800ff38:	3342      	adds	r3, #66	@ 0x42
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	6a3b      	ldr	r3, [r7, #32]
 800ff3e:	4293      	cmp	r3, r2
 800ff40:	d808      	bhi.n	800ff54 <LCD_print_tank+0x3cc4>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 800ff42:	f107 011c 	add.w	r1, r7, #28
 800ff46:	f04f 33ff 	mov.w	r3, #4294967295
 800ff4a:	2202      	movs	r2, #2
 800ff4c:	4874      	ldr	r0, [pc, #464]	@ (8010120 <LCD_print_tank+0x3e90>)
 800ff4e:	f008 fbd6 	bl	80186fe <HAL_SPI_Transmit>
 800ff52:	e051      	b.n	800fff8 <LCD_print_tank+0x3d68>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+11) && wiersz<=(ADRES->Y0_SET+66))))
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	7b1b      	ldrb	r3, [r3, #12]
 800ff58:	3304      	adds	r3, #4
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d31d      	bcc.n	800ff9e <LCD_print_tank+0x3d0e>
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	7b1b      	ldrb	r3, [r3, #12]
 800ff66:	331c      	adds	r3, #28
 800ff68:	461a      	mov	r2, r3
 800ff6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d816      	bhi.n	800ff9e <LCD_print_tank+0x3d0e>
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	7b5b      	ldrb	r3, [r3, #13]
 800ff74:	330b      	adds	r3, #11
 800ff76:	461a      	mov	r2, r3
 800ff78:	6a3b      	ldr	r3, [r7, #32]
 800ff7a:	4293      	cmp	r3, r2
 800ff7c:	d30f      	bcc.n	800ff9e <LCD_print_tank+0x3d0e>
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	7b5b      	ldrb	r3, [r3, #13]
 800ff82:	3342      	adds	r3, #66	@ 0x42
 800ff84:	461a      	mov	r2, r3
 800ff86:	6a3b      	ldr	r3, [r7, #32]
 800ff88:	4293      	cmp	r3, r2
 800ff8a:	d808      	bhi.n	800ff9e <LCD_print_tank+0x3d0e>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 800ff8c:	f107 0114 	add.w	r1, r7, #20
 800ff90:	f04f 33ff 	mov.w	r3, #4294967295
 800ff94:	2202      	movs	r2, #2
 800ff96:	4862      	ldr	r0, [pc, #392]	@ (8010120 <LCD_print_tank+0x3e90>)
 800ff98:	f008 fbb1 	bl	80186fe <HAL_SPI_Transmit>
 800ff9c:	e02c      	b.n	800fff8 <LCD_print_tank+0x3d68>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+10))))
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	7b1b      	ldrb	r3, [r3, #12]
 800ffa2:	3304      	adds	r3, #4
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d31d      	bcc.n	800ffe8 <LCD_print_tank+0x3d58>
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	7b1b      	ldrb	r3, [r3, #12]
 800ffb0:	331c      	adds	r3, #28
 800ffb2:	461a      	mov	r2, r3
 800ffb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffb6:	4293      	cmp	r3, r2
 800ffb8:	d816      	bhi.n	800ffe8 <LCD_print_tank+0x3d58>
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	7b5b      	ldrb	r3, [r3, #13]
 800ffbe:	3302      	adds	r3, #2
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	6a3b      	ldr	r3, [r7, #32]
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	d30f      	bcc.n	800ffe8 <LCD_print_tank+0x3d58>
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	7b5b      	ldrb	r3, [r3, #13]
 800ffcc:	330a      	adds	r3, #10
 800ffce:	461a      	mov	r2, r3
 800ffd0:	6a3b      	ldr	r3, [r7, #32]
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d808      	bhi.n	800ffe8 <LCD_print_tank+0x3d58>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 800ffd6:	f107 0118 	add.w	r1, r7, #24
 800ffda:	f04f 33ff 	mov.w	r3, #4294967295
 800ffde:	2202      	movs	r2, #2
 800ffe0:	484f      	ldr	r0, [pc, #316]	@ (8010120 <LCD_print_tank+0x3e90>)
 800ffe2:	f008 fb8c 	bl	80186fe <HAL_SPI_Transmit>
 800ffe6:	e007      	b.n	800fff8 <LCD_print_tank+0x3d68>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 800ffe8:	f107 0110 	add.w	r1, r7, #16
 800ffec:	f04f 33ff 	mov.w	r3, #4294967295
 800fff0:	2202      	movs	r2, #2
 800fff2:	484b      	ldr	r0, [pc, #300]	@ (8010120 <LCD_print_tank+0x3e90>)
 800fff4:	f008 fb83 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 800fff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fffa:	3301      	adds	r3, #1
 800fffc:	627b      	str	r3, [r7, #36]	@ 0x24
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	7b9b      	ldrb	r3, [r3, #14]
 8010002:	3301      	adds	r3, #1
 8010004:	461a      	mov	r2, r3
 8010006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010008:	4293      	cmp	r3, r2
 801000a:	f4ff af2b 	bcc.w	800fe64 <LCD_print_tank+0x3bd4>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 801000e:	6a3b      	ldr	r3, [r7, #32]
 8010010:	3301      	adds	r3, #1
 8010012:	623b      	str	r3, [r7, #32]
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	7bdb      	ldrb	r3, [r3, #15]
 8010018:	461a      	mov	r2, r3
 801001a:	6a3b      	ldr	r3, [r7, #32]
 801001c:	4293      	cmp	r3, r2
 801001e:	f67f af0e 	bls.w	800fe3e <LCD_print_tank+0x3bae>
	else if(num>=2.8 && num<2.9)
 8010022:	f000 bc1a 	b.w	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=2.9 && num<3.0)
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f7f0 fb5c 	bl	80006e4 <__aeabi_f2d>
 801002c:	a33a      	add	r3, pc, #232	@ (adr r3, 8010118 <LCD_print_tank+0x3e88>)
 801002e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010032:	f7f0 fc23 	bl	800087c <__aeabi_dcmpge>
 8010036:	4603      	mov	r3, r0
 8010038:	2b00      	cmp	r3, #0
 801003a:	f000 80f9 	beq.w	8010230 <LCD_print_tank+0x3fa0>
 801003e:	edd7 7a01 	vldr	s15, [r7, #4]
 8010042:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8010046:	eef4 7ac7 	vcmpe.f32	s15, s14
 801004a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801004e:	f140 80ef 	bpl.w	8010230 <LCD_print_tank+0x3fa0>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	7b5b      	ldrb	r3, [r3, #13]
 8010056:	623b      	str	r3, [r7, #32]
 8010058:	e0e2      	b.n	8010220 <LCD_print_tank+0x3f90>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	7b1b      	ldrb	r3, [r3, #12]
 801005e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010060:	e0d3      	b.n	801020a <LCD_print_tank+0x3f7a>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	7b1b      	ldrb	r3, [r3, #12]
 8010066:	3303      	adds	r3, #3
 8010068:	461a      	mov	r2, r3
 801006a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801006c:	4293      	cmp	r3, r2
 801006e:	d316      	bcc.n	801009e <LCD_print_tank+0x3e0e>
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	7b1b      	ldrb	r3, [r3, #12]
 8010074:	331d      	adds	r3, #29
 8010076:	461a      	mov	r2, r3
 8010078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801007a:	4293      	cmp	r3, r2
 801007c:	d80f      	bhi.n	801009e <LCD_print_tank+0x3e0e>
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	7b5b      	ldrb	r3, [r3, #13]
 8010082:	3301      	adds	r3, #1
 8010084:	461a      	mov	r2, r3
 8010086:	6a3b      	ldr	r3, [r7, #32]
 8010088:	4293      	cmp	r3, r2
 801008a:	d108      	bne.n	801009e <LCD_print_tank+0x3e0e>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 801008c:	f107 011c 	add.w	r1, r7, #28
 8010090:	f04f 33ff 	mov.w	r3, #4294967295
 8010094:	2202      	movs	r2, #2
 8010096:	4822      	ldr	r0, [pc, #136]	@ (8010120 <LCD_print_tank+0x3e90>)
 8010098:	f008 fb31 	bl	80186fe <HAL_SPI_Transmit>
 801009c:	e0b2      	b.n	8010204 <LCD_print_tank+0x3f74>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	7b1b      	ldrb	r3, [r3, #12]
 80100a2:	3303      	adds	r3, #3
 80100a4:	461a      	mov	r2, r3
 80100a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d316      	bcc.n	80100da <LCD_print_tank+0x3e4a>
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	7b1b      	ldrb	r3, [r3, #12]
 80100b0:	331d      	adds	r3, #29
 80100b2:	461a      	mov	r2, r3
 80100b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d80f      	bhi.n	80100da <LCD_print_tank+0x3e4a>
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	7b5b      	ldrb	r3, [r3, #13]
 80100be:	3342      	adds	r3, #66	@ 0x42
 80100c0:	461a      	mov	r2, r3
 80100c2:	6a3b      	ldr	r3, [r7, #32]
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d108      	bne.n	80100da <LCD_print_tank+0x3e4a>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80100c8:	f107 011c 	add.w	r1, r7, #28
 80100cc:	f04f 33ff 	mov.w	r3, #4294967295
 80100d0:	2202      	movs	r2, #2
 80100d2:	4813      	ldr	r0, [pc, #76]	@ (8010120 <LCD_print_tank+0x3e90>)
 80100d4:	f008 fb13 	bl	80186fe <HAL_SPI_Transmit>
 80100d8:	e094      	b.n	8010204 <LCD_print_tank+0x3f74>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	7b1b      	ldrb	r3, [r3, #12]
 80100de:	331d      	adds	r3, #29
 80100e0:	461a      	mov	r2, r3
 80100e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100e4:	4293      	cmp	r3, r2
 80100e6:	d11d      	bne.n	8010124 <LCD_print_tank+0x3e94>
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	7b5b      	ldrb	r3, [r3, #13]
 80100ec:	3301      	adds	r3, #1
 80100ee:	461a      	mov	r2, r3
 80100f0:	6a3b      	ldr	r3, [r7, #32]
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d316      	bcc.n	8010124 <LCD_print_tank+0x3e94>
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	7b5b      	ldrb	r3, [r3, #13]
 80100fa:	3342      	adds	r3, #66	@ 0x42
 80100fc:	461a      	mov	r2, r3
 80100fe:	6a3b      	ldr	r3, [r7, #32]
 8010100:	4293      	cmp	r3, r2
 8010102:	d80f      	bhi.n	8010124 <LCD_print_tank+0x3e94>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010104:	f107 011c 	add.w	r1, r7, #28
 8010108:	f04f 33ff 	mov.w	r3, #4294967295
 801010c:	2202      	movs	r2, #2
 801010e:	4804      	ldr	r0, [pc, #16]	@ (8010120 <LCD_print_tank+0x3e90>)
 8010110:	f008 faf5 	bl	80186fe <HAL_SPI_Transmit>
 8010114:	e076      	b.n	8010204 <LCD_print_tank+0x3f74>
 8010116:	bf00      	nop
 8010118:	33333333 	.word	0x33333333
 801011c:	40073333 	.word	0x40073333
 8010120:	200004a4 	.word	0x200004a4
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	7b1b      	ldrb	r3, [r3, #12]
 8010128:	3303      	adds	r3, #3
 801012a:	461a      	mov	r2, r3
 801012c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801012e:	4293      	cmp	r3, r2
 8010130:	d116      	bne.n	8010160 <LCD_print_tank+0x3ed0>
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	7b5b      	ldrb	r3, [r3, #13]
 8010136:	3301      	adds	r3, #1
 8010138:	461a      	mov	r2, r3
 801013a:	6a3b      	ldr	r3, [r7, #32]
 801013c:	4293      	cmp	r3, r2
 801013e:	d30f      	bcc.n	8010160 <LCD_print_tank+0x3ed0>
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	7b5b      	ldrb	r3, [r3, #13]
 8010144:	3342      	adds	r3, #66	@ 0x42
 8010146:	461a      	mov	r2, r3
 8010148:	6a3b      	ldr	r3, [r7, #32]
 801014a:	4293      	cmp	r3, r2
 801014c:	d808      	bhi.n	8010160 <LCD_print_tank+0x3ed0>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 801014e:	f107 011c 	add.w	r1, r7, #28
 8010152:	f04f 33ff 	mov.w	r3, #4294967295
 8010156:	2202      	movs	r2, #2
 8010158:	4895      	ldr	r0, [pc, #596]	@ (80103b0 <LCD_print_tank+0x4120>)
 801015a:	f008 fad0 	bl	80186fe <HAL_SPI_Transmit>
 801015e:	e051      	b.n	8010204 <LCD_print_tank+0x3f74>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+9) && wiersz<=(ADRES->Y0_SET+66))))
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	7b1b      	ldrb	r3, [r3, #12]
 8010164:	3304      	adds	r3, #4
 8010166:	461a      	mov	r2, r3
 8010168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801016a:	4293      	cmp	r3, r2
 801016c:	d31d      	bcc.n	80101aa <LCD_print_tank+0x3f1a>
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	7b1b      	ldrb	r3, [r3, #12]
 8010172:	331c      	adds	r3, #28
 8010174:	461a      	mov	r2, r3
 8010176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010178:	4293      	cmp	r3, r2
 801017a:	d816      	bhi.n	80101aa <LCD_print_tank+0x3f1a>
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	7b5b      	ldrb	r3, [r3, #13]
 8010180:	3309      	adds	r3, #9
 8010182:	461a      	mov	r2, r3
 8010184:	6a3b      	ldr	r3, [r7, #32]
 8010186:	4293      	cmp	r3, r2
 8010188:	d30f      	bcc.n	80101aa <LCD_print_tank+0x3f1a>
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	7b5b      	ldrb	r3, [r3, #13]
 801018e:	3342      	adds	r3, #66	@ 0x42
 8010190:	461a      	mov	r2, r3
 8010192:	6a3b      	ldr	r3, [r7, #32]
 8010194:	4293      	cmp	r3, r2
 8010196:	d808      	bhi.n	80101aa <LCD_print_tank+0x3f1a>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 8010198:	f107 0114 	add.w	r1, r7, #20
 801019c:	f04f 33ff 	mov.w	r3, #4294967295
 80101a0:	2202      	movs	r2, #2
 80101a2:	4883      	ldr	r0, [pc, #524]	@ (80103b0 <LCD_print_tank+0x4120>)
 80101a4:	f008 faab 	bl	80186fe <HAL_SPI_Transmit>
 80101a8:	e02c      	b.n	8010204 <LCD_print_tank+0x3f74>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+8))))
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	7b1b      	ldrb	r3, [r3, #12]
 80101ae:	3304      	adds	r3, #4
 80101b0:	461a      	mov	r2, r3
 80101b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101b4:	4293      	cmp	r3, r2
 80101b6:	d31d      	bcc.n	80101f4 <LCD_print_tank+0x3f64>
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	7b1b      	ldrb	r3, [r3, #12]
 80101bc:	331c      	adds	r3, #28
 80101be:	461a      	mov	r2, r3
 80101c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d816      	bhi.n	80101f4 <LCD_print_tank+0x3f64>
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	7b5b      	ldrb	r3, [r3, #13]
 80101ca:	3302      	adds	r3, #2
 80101cc:	461a      	mov	r2, r3
 80101ce:	6a3b      	ldr	r3, [r7, #32]
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d30f      	bcc.n	80101f4 <LCD_print_tank+0x3f64>
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	7b5b      	ldrb	r3, [r3, #13]
 80101d8:	3308      	adds	r3, #8
 80101da:	461a      	mov	r2, r3
 80101dc:	6a3b      	ldr	r3, [r7, #32]
 80101de:	4293      	cmp	r3, r2
 80101e0:	d808      	bhi.n	80101f4 <LCD_print_tank+0x3f64>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 80101e2:	f107 0118 	add.w	r1, r7, #24
 80101e6:	f04f 33ff 	mov.w	r3, #4294967295
 80101ea:	2202      	movs	r2, #2
 80101ec:	4870      	ldr	r0, [pc, #448]	@ (80103b0 <LCD_print_tank+0x4120>)
 80101ee:	f008 fa86 	bl	80186fe <HAL_SPI_Transmit>
 80101f2:	e007      	b.n	8010204 <LCD_print_tank+0x3f74>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 80101f4:	f107 0110 	add.w	r1, r7, #16
 80101f8:	f04f 33ff 	mov.w	r3, #4294967295
 80101fc:	2202      	movs	r2, #2
 80101fe:	486c      	ldr	r0, [pc, #432]	@ (80103b0 <LCD_print_tank+0x4120>)
 8010200:	f008 fa7d 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8010204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010206:	3301      	adds	r3, #1
 8010208:	627b      	str	r3, [r7, #36]	@ 0x24
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	7b9b      	ldrb	r3, [r3, #14]
 801020e:	3301      	adds	r3, #1
 8010210:	461a      	mov	r2, r3
 8010212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010214:	4293      	cmp	r3, r2
 8010216:	f4ff af24 	bcc.w	8010062 <LCD_print_tank+0x3dd2>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 801021a:	6a3b      	ldr	r3, [r7, #32]
 801021c:	3301      	adds	r3, #1
 801021e:	623b      	str	r3, [r7, #32]
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	7bdb      	ldrb	r3, [r3, #15]
 8010224:	461a      	mov	r2, r3
 8010226:	6a3b      	ldr	r3, [r7, #32]
 8010228:	4293      	cmp	r3, r2
 801022a:	f67f af16 	bls.w	801005a <LCD_print_tank+0x3dca>
	else if(num>=2.9 && num<3.0)
 801022e:	e314      	b.n	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=3.0 && num<3.1)
 8010230:	edd7 7a01 	vldr	s15, [r7, #4]
 8010234:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8010238:	eef4 7ac7 	vcmpe.f32	s15, s14
 801023c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010240:	f2c0 80fb 	blt.w	801043a <LCD_print_tank+0x41aa>
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f7f0 fa4d 	bl	80006e4 <__aeabi_f2d>
 801024a:	a357      	add	r3, pc, #348	@ (adr r3, 80103a8 <LCD_print_tank+0x4118>)
 801024c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010250:	f7f0 fb00 	bl	8000854 <__aeabi_dcmplt>
 8010254:	4603      	mov	r3, r0
 8010256:	2b00      	cmp	r3, #0
 8010258:	f000 80ef 	beq.w	801043a <LCD_print_tank+0x41aa>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	7b5b      	ldrb	r3, [r3, #13]
 8010260:	623b      	str	r3, [r7, #32]
 8010262:	e0e2      	b.n	801042a <LCD_print_tank+0x419a>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	7b1b      	ldrb	r3, [r3, #12]
 8010268:	627b      	str	r3, [r7, #36]	@ 0x24
 801026a:	e0d3      	b.n	8010414 <LCD_print_tank+0x4184>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	7b1b      	ldrb	r3, [r3, #12]
 8010270:	3303      	adds	r3, #3
 8010272:	461a      	mov	r2, r3
 8010274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010276:	4293      	cmp	r3, r2
 8010278:	d316      	bcc.n	80102a8 <LCD_print_tank+0x4018>
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	7b1b      	ldrb	r3, [r3, #12]
 801027e:	331d      	adds	r3, #29
 8010280:	461a      	mov	r2, r3
 8010282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010284:	4293      	cmp	r3, r2
 8010286:	d80f      	bhi.n	80102a8 <LCD_print_tank+0x4018>
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	7b5b      	ldrb	r3, [r3, #13]
 801028c:	3301      	adds	r3, #1
 801028e:	461a      	mov	r2, r3
 8010290:	6a3b      	ldr	r3, [r7, #32]
 8010292:	4293      	cmp	r3, r2
 8010294:	d108      	bne.n	80102a8 <LCD_print_tank+0x4018>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010296:	f107 011c 	add.w	r1, r7, #28
 801029a:	f04f 33ff 	mov.w	r3, #4294967295
 801029e:	2202      	movs	r2, #2
 80102a0:	4843      	ldr	r0, [pc, #268]	@ (80103b0 <LCD_print_tank+0x4120>)
 80102a2:	f008 fa2c 	bl	80186fe <HAL_SPI_Transmit>
 80102a6:	e0b2      	b.n	801040e <LCD_print_tank+0x417e>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	7b1b      	ldrb	r3, [r3, #12]
 80102ac:	3303      	adds	r3, #3
 80102ae:	461a      	mov	r2, r3
 80102b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d316      	bcc.n	80102e4 <LCD_print_tank+0x4054>
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	7b1b      	ldrb	r3, [r3, #12]
 80102ba:	331d      	adds	r3, #29
 80102bc:	461a      	mov	r2, r3
 80102be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d80f      	bhi.n	80102e4 <LCD_print_tank+0x4054>
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	7b5b      	ldrb	r3, [r3, #13]
 80102c8:	3342      	adds	r3, #66	@ 0x42
 80102ca:	461a      	mov	r2, r3
 80102cc:	6a3b      	ldr	r3, [r7, #32]
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d108      	bne.n	80102e4 <LCD_print_tank+0x4054>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80102d2:	f107 011c 	add.w	r1, r7, #28
 80102d6:	f04f 33ff 	mov.w	r3, #4294967295
 80102da:	2202      	movs	r2, #2
 80102dc:	4834      	ldr	r0, [pc, #208]	@ (80103b0 <LCD_print_tank+0x4120>)
 80102de:	f008 fa0e 	bl	80186fe <HAL_SPI_Transmit>
 80102e2:	e094      	b.n	801040e <LCD_print_tank+0x417e>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	7b1b      	ldrb	r3, [r3, #12]
 80102e8:	331d      	adds	r3, #29
 80102ea:	461a      	mov	r2, r3
 80102ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d116      	bne.n	8010320 <LCD_print_tank+0x4090>
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	7b5b      	ldrb	r3, [r3, #13]
 80102f6:	3301      	adds	r3, #1
 80102f8:	461a      	mov	r2, r3
 80102fa:	6a3b      	ldr	r3, [r7, #32]
 80102fc:	4293      	cmp	r3, r2
 80102fe:	d30f      	bcc.n	8010320 <LCD_print_tank+0x4090>
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	7b5b      	ldrb	r3, [r3, #13]
 8010304:	3342      	adds	r3, #66	@ 0x42
 8010306:	461a      	mov	r2, r3
 8010308:	6a3b      	ldr	r3, [r7, #32]
 801030a:	4293      	cmp	r3, r2
 801030c:	d808      	bhi.n	8010320 <LCD_print_tank+0x4090>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 801030e:	f107 011c 	add.w	r1, r7, #28
 8010312:	f04f 33ff 	mov.w	r3, #4294967295
 8010316:	2202      	movs	r2, #2
 8010318:	4825      	ldr	r0, [pc, #148]	@ (80103b0 <LCD_print_tank+0x4120>)
 801031a:	f008 f9f0 	bl	80186fe <HAL_SPI_Transmit>
 801031e:	e076      	b.n	801040e <LCD_print_tank+0x417e>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	7b1b      	ldrb	r3, [r3, #12]
 8010324:	3303      	adds	r3, #3
 8010326:	461a      	mov	r2, r3
 8010328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801032a:	4293      	cmp	r3, r2
 801032c:	d116      	bne.n	801035c <LCD_print_tank+0x40cc>
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	7b5b      	ldrb	r3, [r3, #13]
 8010332:	3301      	adds	r3, #1
 8010334:	461a      	mov	r2, r3
 8010336:	6a3b      	ldr	r3, [r7, #32]
 8010338:	4293      	cmp	r3, r2
 801033a:	d30f      	bcc.n	801035c <LCD_print_tank+0x40cc>
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	7b5b      	ldrb	r3, [r3, #13]
 8010340:	3342      	adds	r3, #66	@ 0x42
 8010342:	461a      	mov	r2, r3
 8010344:	6a3b      	ldr	r3, [r7, #32]
 8010346:	4293      	cmp	r3, r2
 8010348:	d808      	bhi.n	801035c <LCD_print_tank+0x40cc>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 801034a:	f107 011c 	add.w	r1, r7, #28
 801034e:	f04f 33ff 	mov.w	r3, #4294967295
 8010352:	2202      	movs	r2, #2
 8010354:	4816      	ldr	r0, [pc, #88]	@ (80103b0 <LCD_print_tank+0x4120>)
 8010356:	f008 f9d2 	bl	80186fe <HAL_SPI_Transmit>
 801035a:	e058      	b.n	801040e <LCD_print_tank+0x417e>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+7) && wiersz<=(ADRES->Y0_SET+66))))
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	7b1b      	ldrb	r3, [r3, #12]
 8010360:	3304      	adds	r3, #4
 8010362:	461a      	mov	r2, r3
 8010364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010366:	4293      	cmp	r3, r2
 8010368:	d324      	bcc.n	80103b4 <LCD_print_tank+0x4124>
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	7b1b      	ldrb	r3, [r3, #12]
 801036e:	331c      	adds	r3, #28
 8010370:	461a      	mov	r2, r3
 8010372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010374:	4293      	cmp	r3, r2
 8010376:	d81d      	bhi.n	80103b4 <LCD_print_tank+0x4124>
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	7b5b      	ldrb	r3, [r3, #13]
 801037c:	3307      	adds	r3, #7
 801037e:	461a      	mov	r2, r3
 8010380:	6a3b      	ldr	r3, [r7, #32]
 8010382:	4293      	cmp	r3, r2
 8010384:	d316      	bcc.n	80103b4 <LCD_print_tank+0x4124>
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	7b5b      	ldrb	r3, [r3, #13]
 801038a:	3342      	adds	r3, #66	@ 0x42
 801038c:	461a      	mov	r2, r3
 801038e:	6a3b      	ldr	r3, [r7, #32]
 8010390:	4293      	cmp	r3, r2
 8010392:	d80f      	bhi.n	80103b4 <LCD_print_tank+0x4124>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 8010394:	f107 0114 	add.w	r1, r7, #20
 8010398:	f04f 33ff 	mov.w	r3, #4294967295
 801039c:	2202      	movs	r2, #2
 801039e:	4804      	ldr	r0, [pc, #16]	@ (80103b0 <LCD_print_tank+0x4120>)
 80103a0:	f008 f9ad 	bl	80186fe <HAL_SPI_Transmit>
 80103a4:	e033      	b.n	801040e <LCD_print_tank+0x417e>
 80103a6:	bf00      	nop
 80103a8:	cccccccd 	.word	0xcccccccd
 80103ac:	4008cccc 	.word	0x4008cccc
 80103b0:	200004a4 	.word	0x200004a4
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+6))))
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	7b1b      	ldrb	r3, [r3, #12]
 80103b8:	3304      	adds	r3, #4
 80103ba:	461a      	mov	r2, r3
 80103bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103be:	4293      	cmp	r3, r2
 80103c0:	d31d      	bcc.n	80103fe <LCD_print_tank+0x416e>
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	7b1b      	ldrb	r3, [r3, #12]
 80103c6:	331c      	adds	r3, #28
 80103c8:	461a      	mov	r2, r3
 80103ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103cc:	4293      	cmp	r3, r2
 80103ce:	d816      	bhi.n	80103fe <LCD_print_tank+0x416e>
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	7b5b      	ldrb	r3, [r3, #13]
 80103d4:	3302      	adds	r3, #2
 80103d6:	461a      	mov	r2, r3
 80103d8:	6a3b      	ldr	r3, [r7, #32]
 80103da:	4293      	cmp	r3, r2
 80103dc:	d30f      	bcc.n	80103fe <LCD_print_tank+0x416e>
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	7b5b      	ldrb	r3, [r3, #13]
 80103e2:	3306      	adds	r3, #6
 80103e4:	461a      	mov	r2, r3
 80103e6:	6a3b      	ldr	r3, [r7, #32]
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d808      	bhi.n	80103fe <LCD_print_tank+0x416e>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 80103ec:	f107 0118 	add.w	r1, r7, #24
 80103f0:	f04f 33ff 	mov.w	r3, #4294967295
 80103f4:	2202      	movs	r2, #2
 80103f6:	48a8      	ldr	r0, [pc, #672]	@ (8010698 <LCD_print_tank+0x4408>)
 80103f8:	f008 f981 	bl	80186fe <HAL_SPI_Transmit>
 80103fc:	e007      	b.n	801040e <LCD_print_tank+0x417e>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 80103fe:	f107 0110 	add.w	r1, r7, #16
 8010402:	f04f 33ff 	mov.w	r3, #4294967295
 8010406:	2202      	movs	r2, #2
 8010408:	48a3      	ldr	r0, [pc, #652]	@ (8010698 <LCD_print_tank+0x4408>)
 801040a:	f008 f978 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 801040e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010410:	3301      	adds	r3, #1
 8010412:	627b      	str	r3, [r7, #36]	@ 0x24
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	7b9b      	ldrb	r3, [r3, #14]
 8010418:	3301      	adds	r3, #1
 801041a:	461a      	mov	r2, r3
 801041c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801041e:	4293      	cmp	r3, r2
 8010420:	f4ff af24 	bcc.w	801026c <LCD_print_tank+0x3fdc>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 8010424:	6a3b      	ldr	r3, [r7, #32]
 8010426:	3301      	adds	r3, #1
 8010428:	623b      	str	r3, [r7, #32]
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	7bdb      	ldrb	r3, [r3, #15]
 801042e:	461a      	mov	r2, r3
 8010430:	6a3b      	ldr	r3, [r7, #32]
 8010432:	4293      	cmp	r3, r2
 8010434:	f67f af16 	bls.w	8010264 <LCD_print_tank+0x3fd4>
	else if(num>=3.0 && num<3.1)
 8010438:	e20f      	b.n	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=3.1 && num<3.2)
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f7f0 f952 	bl	80006e4 <__aeabi_f2d>
 8010440:	a38f      	add	r3, pc, #572	@ (adr r3, 8010680 <LCD_print_tank+0x43f0>)
 8010442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010446:	f7f0 fa19 	bl	800087c <__aeabi_dcmpge>
 801044a:	4603      	mov	r3, r0
 801044c:	2b00      	cmp	r3, #0
 801044e:	f000 80f4 	beq.w	801063a <LCD_print_tank+0x43aa>
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	f7f0 f946 	bl	80006e4 <__aeabi_f2d>
 8010458:	a38b      	add	r3, pc, #556	@ (adr r3, 8010688 <LCD_print_tank+0x43f8>)
 801045a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801045e:	f7f0 f9f9 	bl	8000854 <__aeabi_dcmplt>
 8010462:	4603      	mov	r3, r0
 8010464:	2b00      	cmp	r3, #0
 8010466:	f000 80e8 	beq.w	801063a <LCD_print_tank+0x43aa>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	7b5b      	ldrb	r3, [r3, #13]
 801046e:	623b      	str	r3, [r7, #32]
 8010470:	e0db      	b.n	801062a <LCD_print_tank+0x439a>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	7b1b      	ldrb	r3, [r3, #12]
 8010476:	627b      	str	r3, [r7, #36]	@ 0x24
 8010478:	e0cc      	b.n	8010614 <LCD_print_tank+0x4384>
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	7b1b      	ldrb	r3, [r3, #12]
 801047e:	3303      	adds	r3, #3
 8010480:	461a      	mov	r2, r3
 8010482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010484:	4293      	cmp	r3, r2
 8010486:	d316      	bcc.n	80104b6 <LCD_print_tank+0x4226>
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	7b1b      	ldrb	r3, [r3, #12]
 801048c:	331d      	adds	r3, #29
 801048e:	461a      	mov	r2, r3
 8010490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010492:	4293      	cmp	r3, r2
 8010494:	d80f      	bhi.n	80104b6 <LCD_print_tank+0x4226>
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	7b5b      	ldrb	r3, [r3, #13]
 801049a:	3301      	adds	r3, #1
 801049c:	461a      	mov	r2, r3
 801049e:	6a3b      	ldr	r3, [r7, #32]
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d108      	bne.n	80104b6 <LCD_print_tank+0x4226>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80104a4:	f107 011c 	add.w	r1, r7, #28
 80104a8:	f04f 33ff 	mov.w	r3, #4294967295
 80104ac:	2202      	movs	r2, #2
 80104ae:	487a      	ldr	r0, [pc, #488]	@ (8010698 <LCD_print_tank+0x4408>)
 80104b0:	f008 f925 	bl	80186fe <HAL_SPI_Transmit>
 80104b4:	e0ab      	b.n	801060e <LCD_print_tank+0x437e>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	7b1b      	ldrb	r3, [r3, #12]
 80104ba:	3303      	adds	r3, #3
 80104bc:	461a      	mov	r2, r3
 80104be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104c0:	4293      	cmp	r3, r2
 80104c2:	d316      	bcc.n	80104f2 <LCD_print_tank+0x4262>
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	7b1b      	ldrb	r3, [r3, #12]
 80104c8:	331d      	adds	r3, #29
 80104ca:	461a      	mov	r2, r3
 80104cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d80f      	bhi.n	80104f2 <LCD_print_tank+0x4262>
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	7b5b      	ldrb	r3, [r3, #13]
 80104d6:	3342      	adds	r3, #66	@ 0x42
 80104d8:	461a      	mov	r2, r3
 80104da:	6a3b      	ldr	r3, [r7, #32]
 80104dc:	4293      	cmp	r3, r2
 80104de:	d108      	bne.n	80104f2 <LCD_print_tank+0x4262>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80104e0:	f107 011c 	add.w	r1, r7, #28
 80104e4:	f04f 33ff 	mov.w	r3, #4294967295
 80104e8:	2202      	movs	r2, #2
 80104ea:	486b      	ldr	r0, [pc, #428]	@ (8010698 <LCD_print_tank+0x4408>)
 80104ec:	f008 f907 	bl	80186fe <HAL_SPI_Transmit>
 80104f0:	e08d      	b.n	801060e <LCD_print_tank+0x437e>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	7b1b      	ldrb	r3, [r3, #12]
 80104f6:	331d      	adds	r3, #29
 80104f8:	461a      	mov	r2, r3
 80104fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104fc:	4293      	cmp	r3, r2
 80104fe:	d116      	bne.n	801052e <LCD_print_tank+0x429e>
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	7b5b      	ldrb	r3, [r3, #13]
 8010504:	3301      	adds	r3, #1
 8010506:	461a      	mov	r2, r3
 8010508:	6a3b      	ldr	r3, [r7, #32]
 801050a:	4293      	cmp	r3, r2
 801050c:	d30f      	bcc.n	801052e <LCD_print_tank+0x429e>
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	7b5b      	ldrb	r3, [r3, #13]
 8010512:	3342      	adds	r3, #66	@ 0x42
 8010514:	461a      	mov	r2, r3
 8010516:	6a3b      	ldr	r3, [r7, #32]
 8010518:	4293      	cmp	r3, r2
 801051a:	d808      	bhi.n	801052e <LCD_print_tank+0x429e>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 801051c:	f107 011c 	add.w	r1, r7, #28
 8010520:	f04f 33ff 	mov.w	r3, #4294967295
 8010524:	2202      	movs	r2, #2
 8010526:	485c      	ldr	r0, [pc, #368]	@ (8010698 <LCD_print_tank+0x4408>)
 8010528:	f008 f8e9 	bl	80186fe <HAL_SPI_Transmit>
 801052c:	e06f      	b.n	801060e <LCD_print_tank+0x437e>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	7b1b      	ldrb	r3, [r3, #12]
 8010532:	3303      	adds	r3, #3
 8010534:	461a      	mov	r2, r3
 8010536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010538:	4293      	cmp	r3, r2
 801053a:	d116      	bne.n	801056a <LCD_print_tank+0x42da>
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	7b5b      	ldrb	r3, [r3, #13]
 8010540:	3301      	adds	r3, #1
 8010542:	461a      	mov	r2, r3
 8010544:	6a3b      	ldr	r3, [r7, #32]
 8010546:	4293      	cmp	r3, r2
 8010548:	d30f      	bcc.n	801056a <LCD_print_tank+0x42da>
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	7b5b      	ldrb	r3, [r3, #13]
 801054e:	3342      	adds	r3, #66	@ 0x42
 8010550:	461a      	mov	r2, r3
 8010552:	6a3b      	ldr	r3, [r7, #32]
 8010554:	4293      	cmp	r3, r2
 8010556:	d808      	bhi.n	801056a <LCD_print_tank+0x42da>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010558:	f107 011c 	add.w	r1, r7, #28
 801055c:	f04f 33ff 	mov.w	r3, #4294967295
 8010560:	2202      	movs	r2, #2
 8010562:	484d      	ldr	r0, [pc, #308]	@ (8010698 <LCD_print_tank+0x4408>)
 8010564:	f008 f8cb 	bl	80186fe <HAL_SPI_Transmit>
 8010568:	e051      	b.n	801060e <LCD_print_tank+0x437e>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+66))))
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	7b1b      	ldrb	r3, [r3, #12]
 801056e:	3304      	adds	r3, #4
 8010570:	461a      	mov	r2, r3
 8010572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010574:	4293      	cmp	r3, r2
 8010576:	d31d      	bcc.n	80105b4 <LCD_print_tank+0x4324>
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	7b1b      	ldrb	r3, [r3, #12]
 801057c:	331c      	adds	r3, #28
 801057e:	461a      	mov	r2, r3
 8010580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010582:	4293      	cmp	r3, r2
 8010584:	d816      	bhi.n	80105b4 <LCD_print_tank+0x4324>
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	7b5b      	ldrb	r3, [r3, #13]
 801058a:	3305      	adds	r3, #5
 801058c:	461a      	mov	r2, r3
 801058e:	6a3b      	ldr	r3, [r7, #32]
 8010590:	4293      	cmp	r3, r2
 8010592:	d30f      	bcc.n	80105b4 <LCD_print_tank+0x4324>
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	7b5b      	ldrb	r3, [r3, #13]
 8010598:	3342      	adds	r3, #66	@ 0x42
 801059a:	461a      	mov	r2, r3
 801059c:	6a3b      	ldr	r3, [r7, #32]
 801059e:	4293      	cmp	r3, r2
 80105a0:	d808      	bhi.n	80105b4 <LCD_print_tank+0x4324>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 80105a2:	f107 0114 	add.w	r1, r7, #20
 80105a6:	f04f 33ff 	mov.w	r3, #4294967295
 80105aa:	2202      	movs	r2, #2
 80105ac:	483a      	ldr	r0, [pc, #232]	@ (8010698 <LCD_print_tank+0x4408>)
 80105ae:	f008 f8a6 	bl	80186fe <HAL_SPI_Transmit>
 80105b2:	e02c      	b.n	801060e <LCD_print_tank+0x437e>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+4))))
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	7b1b      	ldrb	r3, [r3, #12]
 80105b8:	3304      	adds	r3, #4
 80105ba:	461a      	mov	r2, r3
 80105bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105be:	4293      	cmp	r3, r2
 80105c0:	d31d      	bcc.n	80105fe <LCD_print_tank+0x436e>
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	7b1b      	ldrb	r3, [r3, #12]
 80105c6:	331c      	adds	r3, #28
 80105c8:	461a      	mov	r2, r3
 80105ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d816      	bhi.n	80105fe <LCD_print_tank+0x436e>
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	7b5b      	ldrb	r3, [r3, #13]
 80105d4:	3302      	adds	r3, #2
 80105d6:	461a      	mov	r2, r3
 80105d8:	6a3b      	ldr	r3, [r7, #32]
 80105da:	4293      	cmp	r3, r2
 80105dc:	d30f      	bcc.n	80105fe <LCD_print_tank+0x436e>
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	7b5b      	ldrb	r3, [r3, #13]
 80105e2:	3304      	adds	r3, #4
 80105e4:	461a      	mov	r2, r3
 80105e6:	6a3b      	ldr	r3, [r7, #32]
 80105e8:	4293      	cmp	r3, r2
 80105ea:	d808      	bhi.n	80105fe <LCD_print_tank+0x436e>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 80105ec:	f107 0118 	add.w	r1, r7, #24
 80105f0:	f04f 33ff 	mov.w	r3, #4294967295
 80105f4:	2202      	movs	r2, #2
 80105f6:	4828      	ldr	r0, [pc, #160]	@ (8010698 <LCD_print_tank+0x4408>)
 80105f8:	f008 f881 	bl	80186fe <HAL_SPI_Transmit>
 80105fc:	e007      	b.n	801060e <LCD_print_tank+0x437e>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 80105fe:	f107 0110 	add.w	r1, r7, #16
 8010602:	f04f 33ff 	mov.w	r3, #4294967295
 8010606:	2202      	movs	r2, #2
 8010608:	4823      	ldr	r0, [pc, #140]	@ (8010698 <LCD_print_tank+0x4408>)
 801060a:	f008 f878 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 801060e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010610:	3301      	adds	r3, #1
 8010612:	627b      	str	r3, [r7, #36]	@ 0x24
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	7b9b      	ldrb	r3, [r3, #14]
 8010618:	3301      	adds	r3, #1
 801061a:	461a      	mov	r2, r3
 801061c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801061e:	4293      	cmp	r3, r2
 8010620:	f4ff af2b 	bcc.w	801047a <LCD_print_tank+0x41ea>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 8010624:	6a3b      	ldr	r3, [r7, #32]
 8010626:	3301      	adds	r3, #1
 8010628:	623b      	str	r3, [r7, #32]
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	7bdb      	ldrb	r3, [r3, #15]
 801062e:	461a      	mov	r2, r3
 8010630:	6a3b      	ldr	r3, [r7, #32]
 8010632:	4293      	cmp	r3, r2
 8010634:	f67f af1d 	bls.w	8010472 <LCD_print_tank+0x41e2>
	else if(num>=3.1 && num<3.2)
 8010638:	e10f      	b.n	801085a <LCD_print_tank+0x45ca>
				}
			}
		}
	}
	else if(num>=3.2 && num<3.3)
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f7f0 f852 	bl	80006e4 <__aeabi_f2d>
 8010640:	a311      	add	r3, pc, #68	@ (adr r3, 8010688 <LCD_print_tank+0x43f8>)
 8010642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010646:	f7f0 f919 	bl	800087c <__aeabi_dcmpge>
 801064a:	4603      	mov	r3, r0
 801064c:	2b00      	cmp	r3, #0
 801064e:	f000 8104 	beq.w	801085a <LCD_print_tank+0x45ca>
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f7f0 f846 	bl	80006e4 <__aeabi_f2d>
 8010658:	a30d      	add	r3, pc, #52	@ (adr r3, 8010690 <LCD_print_tank+0x4400>)
 801065a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801065e:	f7f0 f8f9 	bl	8000854 <__aeabi_dcmplt>
 8010662:	4603      	mov	r3, r0
 8010664:	2b00      	cmp	r3, #0
 8010666:	f000 80f8 	beq.w	801085a <LCD_print_tank+0x45ca>
	{
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	7b5b      	ldrb	r3, [r3, #13]
 801066e:	623b      	str	r3, [r7, #32]
 8010670:	e0ec      	b.n	801084c <LCD_print_tank+0x45bc>
		{
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	7b1b      	ldrb	r3, [r3, #12]
 8010676:	627b      	str	r3, [r7, #36]	@ 0x24
 8010678:	e0dd      	b.n	8010836 <LCD_print_tank+0x45a6>
 801067a:	bf00      	nop
 801067c:	f3af 8000 	nop.w
 8010680:	cccccccd 	.word	0xcccccccd
 8010684:	4008cccc 	.word	0x4008cccc
 8010688:	9999999a 	.word	0x9999999a
 801068c:	40099999 	.word	0x40099999
 8010690:	66666666 	.word	0x66666666
 8010694:	400a6666 	.word	0x400a6666
 8010698:	200004a4 	.word	0x200004a4
			{
				if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+1)))
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	7b1b      	ldrb	r3, [r3, #12]
 80106a0:	3303      	adds	r3, #3
 80106a2:	461a      	mov	r2, r3
 80106a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a6:	4293      	cmp	r3, r2
 80106a8:	d316      	bcc.n	80106d8 <LCD_print_tank+0x4448>
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	7b1b      	ldrb	r3, [r3, #12]
 80106ae:	331d      	adds	r3, #29
 80106b0:	461a      	mov	r2, r3
 80106b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106b4:	4293      	cmp	r3, r2
 80106b6:	d80f      	bhi.n	80106d8 <LCD_print_tank+0x4448>
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	7b5b      	ldrb	r3, [r3, #13]
 80106bc:	3301      	adds	r3, #1
 80106be:	461a      	mov	r2, r3
 80106c0:	6a3b      	ldr	r3, [r7, #32]
 80106c2:	4293      	cmp	r3, r2
 80106c4:	d108      	bne.n	80106d8 <LCD_print_tank+0x4448>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80106c6:	f107 011c 	add.w	r1, r7, #28
 80106ca:	f04f 33ff 	mov.w	r3, #4294967295
 80106ce:	2202      	movs	r2, #2
 80106d0:	4865      	ldr	r0, [pc, #404]	@ (8010868 <LCD_print_tank+0x45d8>)
 80106d2:	f008 f814 	bl	80186fe <HAL_SPI_Transmit>
 80106d6:	e0ab      	b.n	8010830 <LCD_print_tank+0x45a0>
				}
				else if((kolumna>=(ADRES->X0_SET+3) && kolumna<=(ADRES->X0_SET+29)) && (wiersz==(ADRES->Y0_SET+66)))
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	7b1b      	ldrb	r3, [r3, #12]
 80106dc:	3303      	adds	r3, #3
 80106de:	461a      	mov	r2, r3
 80106e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106e2:	4293      	cmp	r3, r2
 80106e4:	d316      	bcc.n	8010714 <LCD_print_tank+0x4484>
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	7b1b      	ldrb	r3, [r3, #12]
 80106ea:	331d      	adds	r3, #29
 80106ec:	461a      	mov	r2, r3
 80106ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106f0:	4293      	cmp	r3, r2
 80106f2:	d80f      	bhi.n	8010714 <LCD_print_tank+0x4484>
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	7b5b      	ldrb	r3, [r3, #13]
 80106f8:	3342      	adds	r3, #66	@ 0x42
 80106fa:	461a      	mov	r2, r3
 80106fc:	6a3b      	ldr	r3, [r7, #32]
 80106fe:	4293      	cmp	r3, r2
 8010700:	d108      	bne.n	8010714 <LCD_print_tank+0x4484>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010702:	f107 011c 	add.w	r1, r7, #28
 8010706:	f04f 33ff 	mov.w	r3, #4294967295
 801070a:	2202      	movs	r2, #2
 801070c:	4856      	ldr	r0, [pc, #344]	@ (8010868 <LCD_print_tank+0x45d8>)
 801070e:	f007 fff6 	bl	80186fe <HAL_SPI_Transmit>
 8010712:	e08d      	b.n	8010830 <LCD_print_tank+0x45a0>
				}
				else if((kolumna==(ADRES->X0_SET+29)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	7b1b      	ldrb	r3, [r3, #12]
 8010718:	331d      	adds	r3, #29
 801071a:	461a      	mov	r2, r3
 801071c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801071e:	4293      	cmp	r3, r2
 8010720:	d116      	bne.n	8010750 <LCD_print_tank+0x44c0>
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	7b5b      	ldrb	r3, [r3, #13]
 8010726:	3301      	adds	r3, #1
 8010728:	461a      	mov	r2, r3
 801072a:	6a3b      	ldr	r3, [r7, #32]
 801072c:	4293      	cmp	r3, r2
 801072e:	d30f      	bcc.n	8010750 <LCD_print_tank+0x44c0>
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	7b5b      	ldrb	r3, [r3, #13]
 8010734:	3342      	adds	r3, #66	@ 0x42
 8010736:	461a      	mov	r2, r3
 8010738:	6a3b      	ldr	r3, [r7, #32]
 801073a:	4293      	cmp	r3, r2
 801073c:	d808      	bhi.n	8010750 <LCD_print_tank+0x44c0>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 801073e:	f107 011c 	add.w	r1, r7, #28
 8010742:	f04f 33ff 	mov.w	r3, #4294967295
 8010746:	2202      	movs	r2, #2
 8010748:	4847      	ldr	r0, [pc, #284]	@ (8010868 <LCD_print_tank+0x45d8>)
 801074a:	f007 ffd8 	bl	80186fe <HAL_SPI_Transmit>
 801074e:	e06f      	b.n	8010830 <LCD_print_tank+0x45a0>
				}
				else if((kolumna==(ADRES->X0_SET+3)) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+66))))
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	7b1b      	ldrb	r3, [r3, #12]
 8010754:	3303      	adds	r3, #3
 8010756:	461a      	mov	r2, r3
 8010758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801075a:	4293      	cmp	r3, r2
 801075c:	d116      	bne.n	801078c <LCD_print_tank+0x44fc>
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	7b5b      	ldrb	r3, [r3, #13]
 8010762:	3301      	adds	r3, #1
 8010764:	461a      	mov	r2, r3
 8010766:	6a3b      	ldr	r3, [r7, #32]
 8010768:	4293      	cmp	r3, r2
 801076a:	d30f      	bcc.n	801078c <LCD_print_tank+0x44fc>
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	7b5b      	ldrb	r3, [r3, #13]
 8010770:	3342      	adds	r3, #66	@ 0x42
 8010772:	461a      	mov	r2, r3
 8010774:	6a3b      	ldr	r3, [r7, #32]
 8010776:	4293      	cmp	r3, r2
 8010778:	d808      	bhi.n	801078c <LCD_print_tank+0x44fc>
				{
					HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 801077a:	f107 011c 	add.w	r1, r7, #28
 801077e:	f04f 33ff 	mov.w	r3, #4294967295
 8010782:	2202      	movs	r2, #2
 8010784:	4838      	ldr	r0, [pc, #224]	@ (8010868 <LCD_print_tank+0x45d8>)
 8010786:	f007 ffba 	bl	80186fe <HAL_SPI_Transmit>
 801078a:	e051      	b.n	8010830 <LCD_print_tank+0x45a0>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+66))))
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	7b1b      	ldrb	r3, [r3, #12]
 8010790:	3304      	adds	r3, #4
 8010792:	461a      	mov	r2, r3
 8010794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010796:	4293      	cmp	r3, r2
 8010798:	d31d      	bcc.n	80107d6 <LCD_print_tank+0x4546>
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	7b1b      	ldrb	r3, [r3, #12]
 801079e:	331c      	adds	r3, #28
 80107a0:	461a      	mov	r2, r3
 80107a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a4:	4293      	cmp	r3, r2
 80107a6:	d816      	bhi.n	80107d6 <LCD_print_tank+0x4546>
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	7b5b      	ldrb	r3, [r3, #13]
 80107ac:	3303      	adds	r3, #3
 80107ae:	461a      	mov	r2, r3
 80107b0:	6a3b      	ldr	r3, [r7, #32]
 80107b2:	4293      	cmp	r3, r2
 80107b4:	d30f      	bcc.n	80107d6 <LCD_print_tank+0x4546>
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	7b5b      	ldrb	r3, [r3, #13]
 80107ba:	3342      	adds	r3, #66	@ 0x42
 80107bc:	461a      	mov	r2, r3
 80107be:	6a3b      	ldr	r3, [r7, #32]
 80107c0:	4293      	cmp	r3, r2
 80107c2:	d808      	bhi.n	80107d6 <LCD_print_tank+0x4546>
				{
					HAL_SPI_Transmit(&hspi3, Mword3, 2, HAL_MAX_DELAY);
 80107c4:	f107 0114 	add.w	r1, r7, #20
 80107c8:	f04f 33ff 	mov.w	r3, #4294967295
 80107cc:	2202      	movs	r2, #2
 80107ce:	4826      	ldr	r0, [pc, #152]	@ (8010868 <LCD_print_tank+0x45d8>)
 80107d0:	f007 ff95 	bl	80186fe <HAL_SPI_Transmit>
 80107d4:	e02c      	b.n	8010830 <LCD_print_tank+0x45a0>
				}
				else if((kolumna>=(ADRES->X0_SET+4) && kolumna<=(ADRES->X0_SET+28)) && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+2))))
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	7b1b      	ldrb	r3, [r3, #12]
 80107da:	3304      	adds	r3, #4
 80107dc:	461a      	mov	r2, r3
 80107de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d31d      	bcc.n	8010820 <LCD_print_tank+0x4590>
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	7b1b      	ldrb	r3, [r3, #12]
 80107e8:	331c      	adds	r3, #28
 80107ea:	461a      	mov	r2, r3
 80107ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ee:	4293      	cmp	r3, r2
 80107f0:	d816      	bhi.n	8010820 <LCD_print_tank+0x4590>
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	7b5b      	ldrb	r3, [r3, #13]
 80107f6:	3302      	adds	r3, #2
 80107f8:	461a      	mov	r2, r3
 80107fa:	6a3b      	ldr	r3, [r7, #32]
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d30f      	bcc.n	8010820 <LCD_print_tank+0x4590>
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	7b5b      	ldrb	r3, [r3, #13]
 8010804:	3302      	adds	r3, #2
 8010806:	461a      	mov	r2, r3
 8010808:	6a3b      	ldr	r3, [r7, #32]
 801080a:	4293      	cmp	r3, r2
 801080c:	d808      	bhi.n	8010820 <LCD_print_tank+0x4590>
				{
					HAL_SPI_Transmit(&hspi3, Mword2, 2, HAL_MAX_DELAY);
 801080e:	f107 0118 	add.w	r1, r7, #24
 8010812:	f04f 33ff 	mov.w	r3, #4294967295
 8010816:	2202      	movs	r2, #2
 8010818:	4813      	ldr	r0, [pc, #76]	@ (8010868 <LCD_print_tank+0x45d8>)
 801081a:	f007 ff70 	bl	80186fe <HAL_SPI_Transmit>
 801081e:	e007      	b.n	8010830 <LCD_print_tank+0x45a0>
				}
				else
				{
					HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8010820:	f107 0110 	add.w	r1, r7, #16
 8010824:	f04f 33ff 	mov.w	r3, #4294967295
 8010828:	2202      	movs	r2, #2
 801082a:	480f      	ldr	r0, [pc, #60]	@ (8010868 <LCD_print_tank+0x45d8>)
 801082c:	f007 ff67 	bl	80186fe <HAL_SPI_Transmit>
			for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8010830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010832:	3301      	adds	r3, #1
 8010834:	627b      	str	r3, [r7, #36]	@ 0x24
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	7b9b      	ldrb	r3, [r3, #14]
 801083a:	3301      	adds	r3, #1
 801083c:	461a      	mov	r2, r3
 801083e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010840:	4293      	cmp	r3, r2
 8010842:	f4ff af2b 	bcc.w	801069c <LCD_print_tank+0x440c>
		for(wiersz=ADRES->Y0_SET;wiersz<=(ADRES->Y_END_SET);wiersz++)
 8010846:	6a3b      	ldr	r3, [r7, #32]
 8010848:	3301      	adds	r3, #1
 801084a:	623b      	str	r3, [r7, #32]
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	7bdb      	ldrb	r3, [r3, #15]
 8010850:	461a      	mov	r2, r3
 8010852:	6a3b      	ldr	r3, [r7, #32]
 8010854:	4293      	cmp	r3, r2
 8010856:	f67f af0c 	bls.w	8010672 <LCD_print_tank+0x43e2>
				}
			}
		}
	}
	CS_ON();
 801085a:	f7f0 fbe3 	bl	8001024 <CS_ON>
}
 801085e:	bf00      	nop
 8010860:	3728      	adds	r7, #40	@ 0x28
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	200004a4 	.word	0x200004a4

0801086c <LCD_printdioda>:



void LCD_printdioda(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES, bool on)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b086      	sub	sp, #24
 8010870:	af00      	add	r7, sp, #0
 8010872:	603b      	str	r3, [r7, #0]
 8010874:	4603      	mov	r3, r0
 8010876:	71fb      	strb	r3, [r7, #7]
 8010878:	460b      	mov	r3, r1
 801087a:	71bb      	strb	r3, [r7, #6]
 801087c:	4613      	mov	r3, r2
 801087e:	717b      	strb	r3, [r7, #5]
	unsigned int kolumna=0,wiersz=0;
 8010880:	2300      	movs	r3, #0
 8010882:	617b      	str	r3, [r7, #20]
 8010884:	2300      	movs	r3, #0
 8010886:	613b      	str	r3, [r7, #16]
	if(on)
 8010888:	f897 3020 	ldrb.w	r3, [r7, #32]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d034      	beq.n	80108fa <LCD_printdioda+0x8e>
	{
		ADRES->RM=0;
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	2200      	movs	r2, #0
 8010894:	741a      	strb	r2, [r3, #16]
		ADRES->GM=14;
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	220e      	movs	r2, #14
 801089a:	745a      	strb	r2, [r3, #17]
		ADRES->BM=0;
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	2200      	movs	r2, #0
 80108a0:	749a      	strb	r2, [r3, #18]
		ADRES->Mbyte=0x00;
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	2200      	movs	r2, #0
 80108a6:	74da      	strb	r2, [r3, #19]
		ADRES->Mbyte2=0x00;
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	2200      	movs	r2, #0
 80108ac:	751a      	strb	r2, [r3, #20]
		ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	7cda      	ldrb	r2, [r3, #19]
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	7c1b      	ldrb	r3, [r3, #16]
 80108b6:	4053      	eors	r3, r2
 80108b8:	b2db      	uxtb	r3, r3
 80108ba:	00db      	lsls	r3, r3, #3
 80108bc:	b25a      	sxtb	r2, r3
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	7c5b      	ldrb	r3, [r3, #17]
 80108c2:	b25b      	sxtb	r3, r3
 80108c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80108c8:	b25b      	sxtb	r3, r3
 80108ca:	4053      	eors	r3, r2
 80108cc:	b25b      	sxtb	r3, r3
 80108ce:	b2da      	uxtb	r2, r3
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	74da      	strb	r2, [r3, #19]
		ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	7d1b      	ldrb	r3, [r3, #20]
 80108d8:	461a      	mov	r2, r3
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	7c5b      	ldrb	r3, [r3, #17]
 80108de:	f003 0307 	and.w	r3, r3, #7
 80108e2:	4053      	eors	r3, r2
 80108e4:	015b      	lsls	r3, r3, #5
 80108e6:	b25a      	sxtb	r2, r3
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	7c9b      	ldrb	r3, [r3, #18]
 80108ec:	b25b      	sxtb	r3, r3
 80108ee:	4053      	eors	r3, r2
 80108f0:	b25b      	sxtb	r3, r3
 80108f2:	b2da      	uxtb	r2, r3
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	751a      	strb	r2, [r3, #20]
 80108f8:	e033      	b.n	8010962 <LCD_printdioda+0xf6>
	}
	else
	{
		ADRES->RM=17;
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	2211      	movs	r2, #17
 80108fe:	741a      	strb	r2, [r3, #16]
		ADRES->GM=0;
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	2200      	movs	r2, #0
 8010904:	745a      	strb	r2, [r3, #17]
		ADRES->BM=0;
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	2200      	movs	r2, #0
 801090a:	749a      	strb	r2, [r3, #18]
		ADRES->Mbyte=0x00;
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	2200      	movs	r2, #0
 8010910:	74da      	strb	r2, [r3, #19]
		ADRES->Mbyte2=0x00;
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	2200      	movs	r2, #0
 8010916:	751a      	strb	r2, [r3, #20]
		ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	7cda      	ldrb	r2, [r3, #19]
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	7c1b      	ldrb	r3, [r3, #16]
 8010920:	4053      	eors	r3, r2
 8010922:	b2db      	uxtb	r3, r3
 8010924:	00db      	lsls	r3, r3, #3
 8010926:	b25a      	sxtb	r2, r3
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	7c5b      	ldrb	r3, [r3, #17]
 801092c:	b25b      	sxtb	r3, r3
 801092e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010932:	b25b      	sxtb	r3, r3
 8010934:	4053      	eors	r3, r2
 8010936:	b25b      	sxtb	r3, r3
 8010938:	b2da      	uxtb	r2, r3
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	74da      	strb	r2, [r3, #19]
		ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	7d1b      	ldrb	r3, [r3, #20]
 8010942:	461a      	mov	r2, r3
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	7c5b      	ldrb	r3, [r3, #17]
 8010948:	f003 0307 	and.w	r3, r3, #7
 801094c:	4053      	eors	r3, r2
 801094e:	015b      	lsls	r3, r3, #5
 8010950:	b25a      	sxtb	r2, r3
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	7c9b      	ldrb	r3, [r3, #18]
 8010956:	b25b      	sxtb	r3, r3
 8010958:	4053      	eors	r3, r2
 801095a:	b25b      	sxtb	r3, r3
 801095c:	b2da      	uxtb	r2, r3
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	751a      	strb	r2, [r3, #20]
	}
	uint8_t Mword[]={ADRES->Mbyte,ADRES->Mbyte2};
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	7cdb      	ldrb	r3, [r3, #19]
 8010966:	733b      	strb	r3, [r7, #12]
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	7d1b      	ldrb	r3, [r3, #20]
 801096c:	737b      	strb	r3, [r7, #13]
	uint8_t fbyte=0x00;
 801096e:	2300      	movs	r3, #0
 8010970:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8010972:	2300      	movs	r3, #0
 8010974:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8010976:	7bfa      	ldrb	r2, [r7, #15]
 8010978:	79fb      	ldrb	r3, [r7, #7]
 801097a:	4053      	eors	r3, r2
 801097c:	b2db      	uxtb	r3, r3
 801097e:	00db      	lsls	r3, r3, #3
 8010980:	b25a      	sxtb	r2, r3
 8010982:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010986:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801098a:	b25b      	sxtb	r3, r3
 801098c:	4053      	eors	r3, r2
 801098e:	b25b      	sxtb	r3, r3
 8010990:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8010992:	7bba      	ldrb	r2, [r7, #14]
 8010994:	79bb      	ldrb	r3, [r7, #6]
 8010996:	f003 0307 	and.w	r3, r3, #7
 801099a:	4053      	eors	r3, r2
 801099c:	015b      	lsls	r3, r3, #5
 801099e:	b25a      	sxtb	r2, r3
 80109a0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80109a4:	4053      	eors	r3, r2
 80109a6:	b25b      	sxtb	r3, r3
 80109a8:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 80109aa:	7bfb      	ldrb	r3, [r7, #15]
 80109ac:	723b      	strb	r3, [r7, #8]
 80109ae:	7bbb      	ldrb	r3, [r7, #14]
 80109b0:	727b      	strb	r3, [r7, #9]
	DC_ON();
 80109b2:	f7f0 fb4d 	bl	8001050 <DC_ON>
	CS_OFF();
 80109b6:	f7f0 fb40 	bl	800103a <CS_OFF>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	7b5b      	ldrb	r3, [r3, #13]
 80109be:	613b      	str	r3, [r7, #16]
 80109c0:	e346      	b.n	8011050 <LCD_printdioda+0x7e4>
	{
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	7b1b      	ldrb	r3, [r3, #12]
 80109c6:	617b      	str	r3, [r7, #20]
 80109c8:	e337      	b.n	801103a <LCD_printdioda+0x7ce>
		{
			if(kolumna==(ADRES->X0_SET+2) && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+17))))
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	7b1b      	ldrb	r3, [r3, #12]
 80109ce:	3302      	adds	r3, #2
 80109d0:	461a      	mov	r2, r3
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	4293      	cmp	r3, r2
 80109d6:	d116      	bne.n	8010a06 <LCD_printdioda+0x19a>
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	7b5b      	ldrb	r3, [r3, #13]
 80109dc:	3305      	adds	r3, #5
 80109de:	461a      	mov	r2, r3
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	4293      	cmp	r3, r2
 80109e4:	d30f      	bcc.n	8010a06 <LCD_printdioda+0x19a>
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	7b5b      	ldrb	r3, [r3, #13]
 80109ea:	3311      	adds	r3, #17
 80109ec:	461a      	mov	r2, r3
 80109ee:	693b      	ldr	r3, [r7, #16]
 80109f0:	4293      	cmp	r3, r2
 80109f2:	d808      	bhi.n	8010a06 <LCD_printdioda+0x19a>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 80109f4:	f107 010c 	add.w	r1, r7, #12
 80109f8:	f04f 33ff 	mov.w	r3, #4294967295
 80109fc:	2202      	movs	r2, #2
 80109fe:	4897      	ldr	r0, [pc, #604]	@ (8010c5c <LCD_printdioda+0x3f0>)
 8010a00:	f007 fe7d 	bl	80186fe <HAL_SPI_Transmit>
 8010a04:	e316      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if(kolumna==(ADRES->X0_SET+20) && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+17))))
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	7b1b      	ldrb	r3, [r3, #12]
 8010a0a:	3314      	adds	r3, #20
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	697b      	ldr	r3, [r7, #20]
 8010a10:	4293      	cmp	r3, r2
 8010a12:	d116      	bne.n	8010a42 <LCD_printdioda+0x1d6>
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	7b5b      	ldrb	r3, [r3, #13]
 8010a18:	3305      	adds	r3, #5
 8010a1a:	461a      	mov	r2, r3
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	4293      	cmp	r3, r2
 8010a20:	d30f      	bcc.n	8010a42 <LCD_printdioda+0x1d6>
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	7b5b      	ldrb	r3, [r3, #13]
 8010a26:	3311      	adds	r3, #17
 8010a28:	461a      	mov	r2, r3
 8010a2a:	693b      	ldr	r3, [r7, #16]
 8010a2c:	4293      	cmp	r3, r2
 8010a2e:	d808      	bhi.n	8010a42 <LCD_printdioda+0x1d6>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010a30:	f107 010c 	add.w	r1, r7, #12
 8010a34:	f04f 33ff 	mov.w	r3, #4294967295
 8010a38:	2202      	movs	r2, #2
 8010a3a:	4888      	ldr	r0, [pc, #544]	@ (8010c5c <LCD_printdioda+0x3f0>)
 8010a3c:	f007 fe5f 	bl	80186fe <HAL_SPI_Transmit>
 8010a40:	e2f8      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna>=(ADRES->X0_SET+2) && kolumna<=(ADRES->X0_SET+20)) && wiersz==(ADRES->Y0_SET+17))
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	7b1b      	ldrb	r3, [r3, #12]
 8010a46:	3302      	adds	r3, #2
 8010a48:	461a      	mov	r2, r3
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d316      	bcc.n	8010a7e <LCD_printdioda+0x212>
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	7b1b      	ldrb	r3, [r3, #12]
 8010a54:	3314      	adds	r3, #20
 8010a56:	461a      	mov	r2, r3
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	4293      	cmp	r3, r2
 8010a5c:	d80f      	bhi.n	8010a7e <LCD_printdioda+0x212>
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	7b5b      	ldrb	r3, [r3, #13]
 8010a62:	3311      	adds	r3, #17
 8010a64:	461a      	mov	r2, r3
 8010a66:	693b      	ldr	r3, [r7, #16]
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	d108      	bne.n	8010a7e <LCD_printdioda+0x212>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010a6c:	f107 010c 	add.w	r1, r7, #12
 8010a70:	f04f 33ff 	mov.w	r3, #4294967295
 8010a74:	2202      	movs	r2, #2
 8010a76:	4879      	ldr	r0, [pc, #484]	@ (8010c5c <LCD_printdioda+0x3f0>)
 8010a78:	f007 fe41 	bl	80186fe <HAL_SPI_Transmit>
 8010a7c:	e2da      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna>=(ADRES->X0_SET+7) && kolumna<=(ADRES->X0_SET+15)) && wiersz==(ADRES->Y0_SET+0))
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	7b1b      	ldrb	r3, [r3, #12]
 8010a82:	3307      	adds	r3, #7
 8010a84:	461a      	mov	r2, r3
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d315      	bcc.n	8010ab8 <LCD_printdioda+0x24c>
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	7b1b      	ldrb	r3, [r3, #12]
 8010a90:	330f      	adds	r3, #15
 8010a92:	461a      	mov	r2, r3
 8010a94:	697b      	ldr	r3, [r7, #20]
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d80e      	bhi.n	8010ab8 <LCD_printdioda+0x24c>
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	7b5b      	ldrb	r3, [r3, #13]
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d108      	bne.n	8010ab8 <LCD_printdioda+0x24c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010aa6:	f107 010c 	add.w	r1, r7, #12
 8010aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8010aae:	2202      	movs	r2, #2
 8010ab0:	486a      	ldr	r0, [pc, #424]	@ (8010c5c <LCD_printdioda+0x3f0>)
 8010ab2:	f007 fe24 	bl	80186fe <HAL_SPI_Transmit>
 8010ab6:	e2bd      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+6) || kolumna==(ADRES->X0_SET+16)) && (wiersz==(ADRES->Y0_SET+1)))
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	7b1b      	ldrb	r3, [r3, #12]
 8010abc:	3306      	adds	r3, #6
 8010abe:	461a      	mov	r2, r3
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	4293      	cmp	r3, r2
 8010ac4:	d006      	beq.n	8010ad4 <LCD_printdioda+0x268>
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	7b1b      	ldrb	r3, [r3, #12]
 8010aca:	3310      	adds	r3, #16
 8010acc:	461a      	mov	r2, r3
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	d10f      	bne.n	8010af4 <LCD_printdioda+0x288>
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	7b5b      	ldrb	r3, [r3, #13]
 8010ad8:	3301      	adds	r3, #1
 8010ada:	461a      	mov	r2, r3
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d108      	bne.n	8010af4 <LCD_printdioda+0x288>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010ae2:	f107 010c 	add.w	r1, r7, #12
 8010ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8010aea:	2202      	movs	r2, #2
 8010aec:	485b      	ldr	r0, [pc, #364]	@ (8010c5c <LCD_printdioda+0x3f0>)
 8010aee:	f007 fe06 	bl	80186fe <HAL_SPI_Transmit>
 8010af2:	e29f      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+5) || kolumna==(ADRES->X0_SET+17)) && (wiersz==(ADRES->Y0_SET+2)))
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	7b1b      	ldrb	r3, [r3, #12]
 8010af8:	3305      	adds	r3, #5
 8010afa:	461a      	mov	r2, r3
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	4293      	cmp	r3, r2
 8010b00:	d006      	beq.n	8010b10 <LCD_printdioda+0x2a4>
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	7b1b      	ldrb	r3, [r3, #12]
 8010b06:	3311      	adds	r3, #17
 8010b08:	461a      	mov	r2, r3
 8010b0a:	697b      	ldr	r3, [r7, #20]
 8010b0c:	4293      	cmp	r3, r2
 8010b0e:	d10f      	bne.n	8010b30 <LCD_printdioda+0x2c4>
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	7b5b      	ldrb	r3, [r3, #13]
 8010b14:	3302      	adds	r3, #2
 8010b16:	461a      	mov	r2, r3
 8010b18:	693b      	ldr	r3, [r7, #16]
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	d108      	bne.n	8010b30 <LCD_printdioda+0x2c4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010b1e:	f107 010c 	add.w	r1, r7, #12
 8010b22:	f04f 33ff 	mov.w	r3, #4294967295
 8010b26:	2202      	movs	r2, #2
 8010b28:	484c      	ldr	r0, [pc, #304]	@ (8010c5c <LCD_printdioda+0x3f0>)
 8010b2a:	f007 fde8 	bl	80186fe <HAL_SPI_Transmit>
 8010b2e:	e281      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+4) || kolumna==(ADRES->X0_SET+18)) && (wiersz==(ADRES->Y0_SET+3)))
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	7b1b      	ldrb	r3, [r3, #12]
 8010b34:	3304      	adds	r3, #4
 8010b36:	461a      	mov	r2, r3
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d006      	beq.n	8010b4c <LCD_printdioda+0x2e0>
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	7b1b      	ldrb	r3, [r3, #12]
 8010b42:	3312      	adds	r3, #18
 8010b44:	461a      	mov	r2, r3
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	4293      	cmp	r3, r2
 8010b4a:	d10f      	bne.n	8010b6c <LCD_printdioda+0x300>
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	7b5b      	ldrb	r3, [r3, #13]
 8010b50:	3303      	adds	r3, #3
 8010b52:	461a      	mov	r2, r3
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	4293      	cmp	r3, r2
 8010b58:	d108      	bne.n	8010b6c <LCD_printdioda+0x300>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010b5a:	f107 010c 	add.w	r1, r7, #12
 8010b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b62:	2202      	movs	r2, #2
 8010b64:	483d      	ldr	r0, [pc, #244]	@ (8010c5c <LCD_printdioda+0x3f0>)
 8010b66:	f007 fdca 	bl	80186fe <HAL_SPI_Transmit>
 8010b6a:	e263      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+3) || kolumna==(ADRES->X0_SET+19)) && (wiersz==(ADRES->Y0_SET+4)))
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	7b1b      	ldrb	r3, [r3, #12]
 8010b70:	3303      	adds	r3, #3
 8010b72:	461a      	mov	r2, r3
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	4293      	cmp	r3, r2
 8010b78:	d006      	beq.n	8010b88 <LCD_printdioda+0x31c>
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	7b1b      	ldrb	r3, [r3, #12]
 8010b7e:	3313      	adds	r3, #19
 8010b80:	461a      	mov	r2, r3
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	4293      	cmp	r3, r2
 8010b86:	d10f      	bne.n	8010ba8 <LCD_printdioda+0x33c>
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	7b5b      	ldrb	r3, [r3, #13]
 8010b8c:	3304      	adds	r3, #4
 8010b8e:	461a      	mov	r2, r3
 8010b90:	693b      	ldr	r3, [r7, #16]
 8010b92:	4293      	cmp	r3, r2
 8010b94:	d108      	bne.n	8010ba8 <LCD_printdioda+0x33c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010b96:	f107 010c 	add.w	r1, r7, #12
 8010b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b9e:	2202      	movs	r2, #2
 8010ba0:	482e      	ldr	r0, [pc, #184]	@ (8010c5c <LCD_printdioda+0x3f0>)
 8010ba2:	f007 fdac 	bl	80186fe <HAL_SPI_Transmit>
 8010ba6:	e245      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+7)) && (wiersz>=(ADRES->Y0_SET+18) && wiersz<=(ADRES->Y0_SET+20)))
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	7b1b      	ldrb	r3, [r3, #12]
 8010bac:	3307      	adds	r3, #7
 8010bae:	461a      	mov	r2, r3
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	4293      	cmp	r3, r2
 8010bb4:	d116      	bne.n	8010be4 <LCD_printdioda+0x378>
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	7b5b      	ldrb	r3, [r3, #13]
 8010bba:	3312      	adds	r3, #18
 8010bbc:	461a      	mov	r2, r3
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d30f      	bcc.n	8010be4 <LCD_printdioda+0x378>
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	7b5b      	ldrb	r3, [r3, #13]
 8010bc8:	3314      	adds	r3, #20
 8010bca:	461a      	mov	r2, r3
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	d808      	bhi.n	8010be4 <LCD_printdioda+0x378>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010bd2:	f107 010c 	add.w	r1, r7, #12
 8010bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8010bda:	2202      	movs	r2, #2
 8010bdc:	481f      	ldr	r0, [pc, #124]	@ (8010c5c <LCD_printdioda+0x3f0>)
 8010bde:	f007 fd8e 	bl	80186fe <HAL_SPI_Transmit>
 8010be2:	e227      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+16)) && (wiersz>=(ADRES->Y0_SET+18) && wiersz<=(ADRES->Y0_SET+20)))
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	7b1b      	ldrb	r3, [r3, #12]
 8010be8:	3310      	adds	r3, #16
 8010bea:	461a      	mov	r2, r3
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	4293      	cmp	r3, r2
 8010bf0:	d116      	bne.n	8010c20 <LCD_printdioda+0x3b4>
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	7b5b      	ldrb	r3, [r3, #13]
 8010bf6:	3312      	adds	r3, #18
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	693b      	ldr	r3, [r7, #16]
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	d30f      	bcc.n	8010c20 <LCD_printdioda+0x3b4>
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	7b5b      	ldrb	r3, [r3, #13]
 8010c04:	3314      	adds	r3, #20
 8010c06:	461a      	mov	r2, r3
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	4293      	cmp	r3, r2
 8010c0c:	d808      	bhi.n	8010c20 <LCD_printdioda+0x3b4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010c0e:	f107 010c 	add.w	r1, r7, #12
 8010c12:	f04f 33ff 	mov.w	r3, #4294967295
 8010c16:	2202      	movs	r2, #2
 8010c18:	4810      	ldr	r0, [pc, #64]	@ (8010c5c <LCD_printdioda+0x3f0>)
 8010c1a:	f007 fd70 	bl	80186fe <HAL_SPI_Transmit>
 8010c1e:	e209      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+3))  && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+16))))
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	7b1b      	ldrb	r3, [r3, #12]
 8010c24:	3303      	adds	r3, #3
 8010c26:	461a      	mov	r2, r3
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	4293      	cmp	r3, r2
 8010c2c:	d118      	bne.n	8010c60 <LCD_printdioda+0x3f4>
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	7b5b      	ldrb	r3, [r3, #13]
 8010c32:	3305      	adds	r3, #5
 8010c34:	461a      	mov	r2, r3
 8010c36:	693b      	ldr	r3, [r7, #16]
 8010c38:	4293      	cmp	r3, r2
 8010c3a:	d311      	bcc.n	8010c60 <LCD_printdioda+0x3f4>
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	7b5b      	ldrb	r3, [r3, #13]
 8010c40:	3310      	adds	r3, #16
 8010c42:	461a      	mov	r2, r3
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	4293      	cmp	r3, r2
 8010c48:	d80a      	bhi.n	8010c60 <LCD_printdioda+0x3f4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010c4a:	f107 010c 	add.w	r1, r7, #12
 8010c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8010c52:	2202      	movs	r2, #2
 8010c54:	4801      	ldr	r0, [pc, #4]	@ (8010c5c <LCD_printdioda+0x3f0>)
 8010c56:	f007 fd52 	bl	80186fe <HAL_SPI_Transmit>
 8010c5a:	e1eb      	b.n	8011034 <LCD_printdioda+0x7c8>
 8010c5c:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+4))  && ((wiersz>=(ADRES->Y0_SET+4) && wiersz<=(ADRES->Y0_SET+16))))
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	7b1b      	ldrb	r3, [r3, #12]
 8010c64:	3304      	adds	r3, #4
 8010c66:	461a      	mov	r2, r3
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	d116      	bne.n	8010c9c <LCD_printdioda+0x430>
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	7b5b      	ldrb	r3, [r3, #13]
 8010c72:	3304      	adds	r3, #4
 8010c74:	461a      	mov	r2, r3
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	d30f      	bcc.n	8010c9c <LCD_printdioda+0x430>
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	7b5b      	ldrb	r3, [r3, #13]
 8010c80:	3310      	adds	r3, #16
 8010c82:	461a      	mov	r2, r3
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	4293      	cmp	r3, r2
 8010c88:	d808      	bhi.n	8010c9c <LCD_printdioda+0x430>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010c8a:	f107 010c 	add.w	r1, r7, #12
 8010c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8010c92:	2202      	movs	r2, #2
 8010c94:	4897      	ldr	r0, [pc, #604]	@ (8010ef4 <LCD_printdioda+0x688>)
 8010c96:	f007 fd32 	bl	80186fe <HAL_SPI_Transmit>
 8010c9a:	e1cb      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+5))  && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+16))))
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	7b1b      	ldrb	r3, [r3, #12]
 8010ca0:	3305      	adds	r3, #5
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d116      	bne.n	8010cd8 <LCD_printdioda+0x46c>
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	7b5b      	ldrb	r3, [r3, #13]
 8010cae:	3303      	adds	r3, #3
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	693b      	ldr	r3, [r7, #16]
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d30f      	bcc.n	8010cd8 <LCD_printdioda+0x46c>
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	7b5b      	ldrb	r3, [r3, #13]
 8010cbc:	3310      	adds	r3, #16
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	693b      	ldr	r3, [r7, #16]
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	d808      	bhi.n	8010cd8 <LCD_printdioda+0x46c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010cc6:	f107 010c 	add.w	r1, r7, #12
 8010cca:	f04f 33ff 	mov.w	r3, #4294967295
 8010cce:	2202      	movs	r2, #2
 8010cd0:	4888      	ldr	r0, [pc, #544]	@ (8010ef4 <LCD_printdioda+0x688>)
 8010cd2:	f007 fd14 	bl	80186fe <HAL_SPI_Transmit>
 8010cd6:	e1ad      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+6))  && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+16))))
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	7b1b      	ldrb	r3, [r3, #12]
 8010cdc:	3306      	adds	r3, #6
 8010cde:	461a      	mov	r2, r3
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	d116      	bne.n	8010d14 <LCD_printdioda+0x4a8>
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	7b5b      	ldrb	r3, [r3, #13]
 8010cea:	3302      	adds	r3, #2
 8010cec:	461a      	mov	r2, r3
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	4293      	cmp	r3, r2
 8010cf2:	d30f      	bcc.n	8010d14 <LCD_printdioda+0x4a8>
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	7b5b      	ldrb	r3, [r3, #13]
 8010cf8:	3310      	adds	r3, #16
 8010cfa:	461a      	mov	r2, r3
 8010cfc:	693b      	ldr	r3, [r7, #16]
 8010cfe:	4293      	cmp	r3, r2
 8010d00:	d808      	bhi.n	8010d14 <LCD_printdioda+0x4a8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010d02:	f107 010c 	add.w	r1, r7, #12
 8010d06:	f04f 33ff 	mov.w	r3, #4294967295
 8010d0a:	2202      	movs	r2, #2
 8010d0c:	4879      	ldr	r0, [pc, #484]	@ (8010ef4 <LCD_printdioda+0x688>)
 8010d0e:	f007 fcf6 	bl	80186fe <HAL_SPI_Transmit>
 8010d12:	e18f      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+7))  && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+16))))
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	7b1b      	ldrb	r3, [r3, #12]
 8010d18:	3307      	adds	r3, #7
 8010d1a:	461a      	mov	r2, r3
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d116      	bne.n	8010d50 <LCD_printdioda+0x4e4>
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	7b5b      	ldrb	r3, [r3, #13]
 8010d26:	3301      	adds	r3, #1
 8010d28:	461a      	mov	r2, r3
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	4293      	cmp	r3, r2
 8010d2e:	d30f      	bcc.n	8010d50 <LCD_printdioda+0x4e4>
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	7b5b      	ldrb	r3, [r3, #13]
 8010d34:	3310      	adds	r3, #16
 8010d36:	461a      	mov	r2, r3
 8010d38:	693b      	ldr	r3, [r7, #16]
 8010d3a:	4293      	cmp	r3, r2
 8010d3c:	d808      	bhi.n	8010d50 <LCD_printdioda+0x4e4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010d3e:	f107 010c 	add.w	r1, r7, #12
 8010d42:	f04f 33ff 	mov.w	r3, #4294967295
 8010d46:	2202      	movs	r2, #2
 8010d48:	486a      	ldr	r0, [pc, #424]	@ (8010ef4 <LCD_printdioda+0x688>)
 8010d4a:	f007 fcd8 	bl	80186fe <HAL_SPI_Transmit>
 8010d4e:	e171      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+8))  && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+16))))
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	7b1b      	ldrb	r3, [r3, #12]
 8010d54:	3308      	adds	r3, #8
 8010d56:	461a      	mov	r2, r3
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	4293      	cmp	r3, r2
 8010d5c:	d116      	bne.n	8010d8c <LCD_printdioda+0x520>
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	7b5b      	ldrb	r3, [r3, #13]
 8010d62:	3301      	adds	r3, #1
 8010d64:	461a      	mov	r2, r3
 8010d66:	693b      	ldr	r3, [r7, #16]
 8010d68:	4293      	cmp	r3, r2
 8010d6a:	d30f      	bcc.n	8010d8c <LCD_printdioda+0x520>
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	7b5b      	ldrb	r3, [r3, #13]
 8010d70:	3310      	adds	r3, #16
 8010d72:	461a      	mov	r2, r3
 8010d74:	693b      	ldr	r3, [r7, #16]
 8010d76:	4293      	cmp	r3, r2
 8010d78:	d808      	bhi.n	8010d8c <LCD_printdioda+0x520>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010d7a:	f107 010c 	add.w	r1, r7, #12
 8010d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8010d82:	2202      	movs	r2, #2
 8010d84:	485b      	ldr	r0, [pc, #364]	@ (8010ef4 <LCD_printdioda+0x688>)
 8010d86:	f007 fcba 	bl	80186fe <HAL_SPI_Transmit>
 8010d8a:	e153      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+9))  && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+16))))
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	7b1b      	ldrb	r3, [r3, #12]
 8010d90:	3309      	adds	r3, #9
 8010d92:	461a      	mov	r2, r3
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d116      	bne.n	8010dc8 <LCD_printdioda+0x55c>
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	7b5b      	ldrb	r3, [r3, #13]
 8010d9e:	3301      	adds	r3, #1
 8010da0:	461a      	mov	r2, r3
 8010da2:	693b      	ldr	r3, [r7, #16]
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d30f      	bcc.n	8010dc8 <LCD_printdioda+0x55c>
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	7b5b      	ldrb	r3, [r3, #13]
 8010dac:	3310      	adds	r3, #16
 8010dae:	461a      	mov	r2, r3
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d808      	bhi.n	8010dc8 <LCD_printdioda+0x55c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010db6:	f107 010c 	add.w	r1, r7, #12
 8010dba:	f04f 33ff 	mov.w	r3, #4294967295
 8010dbe:	2202      	movs	r2, #2
 8010dc0:	484c      	ldr	r0, [pc, #304]	@ (8010ef4 <LCD_printdioda+0x688>)
 8010dc2:	f007 fc9c 	bl	80186fe <HAL_SPI_Transmit>
 8010dc6:	e135      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+10))  && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+16))))
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	7b1b      	ldrb	r3, [r3, #12]
 8010dcc:	330a      	adds	r3, #10
 8010dce:	461a      	mov	r2, r3
 8010dd0:	697b      	ldr	r3, [r7, #20]
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	d116      	bne.n	8010e04 <LCD_printdioda+0x598>
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	7b5b      	ldrb	r3, [r3, #13]
 8010dda:	3301      	adds	r3, #1
 8010ddc:	461a      	mov	r2, r3
 8010dde:	693b      	ldr	r3, [r7, #16]
 8010de0:	4293      	cmp	r3, r2
 8010de2:	d30f      	bcc.n	8010e04 <LCD_printdioda+0x598>
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	7b5b      	ldrb	r3, [r3, #13]
 8010de8:	3310      	adds	r3, #16
 8010dea:	461a      	mov	r2, r3
 8010dec:	693b      	ldr	r3, [r7, #16]
 8010dee:	4293      	cmp	r3, r2
 8010df0:	d808      	bhi.n	8010e04 <LCD_printdioda+0x598>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010df2:	f107 010c 	add.w	r1, r7, #12
 8010df6:	f04f 33ff 	mov.w	r3, #4294967295
 8010dfa:	2202      	movs	r2, #2
 8010dfc:	483d      	ldr	r0, [pc, #244]	@ (8010ef4 <LCD_printdioda+0x688>)
 8010dfe:	f007 fc7e 	bl	80186fe <HAL_SPI_Transmit>
 8010e02:	e117      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+19))  && ((wiersz>=(ADRES->Y0_SET+5) && wiersz<=(ADRES->Y0_SET+16))))
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	7b1b      	ldrb	r3, [r3, #12]
 8010e08:	3313      	adds	r3, #19
 8010e0a:	461a      	mov	r2, r3
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	4293      	cmp	r3, r2
 8010e10:	d116      	bne.n	8010e40 <LCD_printdioda+0x5d4>
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	7b5b      	ldrb	r3, [r3, #13]
 8010e16:	3305      	adds	r3, #5
 8010e18:	461a      	mov	r2, r3
 8010e1a:	693b      	ldr	r3, [r7, #16]
 8010e1c:	4293      	cmp	r3, r2
 8010e1e:	d30f      	bcc.n	8010e40 <LCD_printdioda+0x5d4>
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	7b5b      	ldrb	r3, [r3, #13]
 8010e24:	3310      	adds	r3, #16
 8010e26:	461a      	mov	r2, r3
 8010e28:	693b      	ldr	r3, [r7, #16]
 8010e2a:	4293      	cmp	r3, r2
 8010e2c:	d808      	bhi.n	8010e40 <LCD_printdioda+0x5d4>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010e2e:	f107 010c 	add.w	r1, r7, #12
 8010e32:	f04f 33ff 	mov.w	r3, #4294967295
 8010e36:	2202      	movs	r2, #2
 8010e38:	482e      	ldr	r0, [pc, #184]	@ (8010ef4 <LCD_printdioda+0x688>)
 8010e3a:	f007 fc60 	bl	80186fe <HAL_SPI_Transmit>
 8010e3e:	e0f9      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+18))  && ((wiersz>=(ADRES->Y0_SET+4) && wiersz<=(ADRES->Y0_SET+16))))
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	7b1b      	ldrb	r3, [r3, #12]
 8010e44:	3312      	adds	r3, #18
 8010e46:	461a      	mov	r2, r3
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	d116      	bne.n	8010e7c <LCD_printdioda+0x610>
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	7b5b      	ldrb	r3, [r3, #13]
 8010e52:	3304      	adds	r3, #4
 8010e54:	461a      	mov	r2, r3
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	d30f      	bcc.n	8010e7c <LCD_printdioda+0x610>
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	7b5b      	ldrb	r3, [r3, #13]
 8010e60:	3310      	adds	r3, #16
 8010e62:	461a      	mov	r2, r3
 8010e64:	693b      	ldr	r3, [r7, #16]
 8010e66:	4293      	cmp	r3, r2
 8010e68:	d808      	bhi.n	8010e7c <LCD_printdioda+0x610>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010e6a:	f107 010c 	add.w	r1, r7, #12
 8010e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8010e72:	2202      	movs	r2, #2
 8010e74:	481f      	ldr	r0, [pc, #124]	@ (8010ef4 <LCD_printdioda+0x688>)
 8010e76:	f007 fc42 	bl	80186fe <HAL_SPI_Transmit>
 8010e7a:	e0db      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+17))  && ((wiersz>=(ADRES->Y0_SET+3) && wiersz<=(ADRES->Y0_SET+16))))
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	7b1b      	ldrb	r3, [r3, #12]
 8010e80:	3311      	adds	r3, #17
 8010e82:	461a      	mov	r2, r3
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	4293      	cmp	r3, r2
 8010e88:	d116      	bne.n	8010eb8 <LCD_printdioda+0x64c>
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	7b5b      	ldrb	r3, [r3, #13]
 8010e8e:	3303      	adds	r3, #3
 8010e90:	461a      	mov	r2, r3
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d30f      	bcc.n	8010eb8 <LCD_printdioda+0x64c>
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	7b5b      	ldrb	r3, [r3, #13]
 8010e9c:	3310      	adds	r3, #16
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	d808      	bhi.n	8010eb8 <LCD_printdioda+0x64c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010ea6:	f107 010c 	add.w	r1, r7, #12
 8010eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8010eae:	2202      	movs	r2, #2
 8010eb0:	4810      	ldr	r0, [pc, #64]	@ (8010ef4 <LCD_printdioda+0x688>)
 8010eb2:	f007 fc24 	bl	80186fe <HAL_SPI_Transmit>
 8010eb6:	e0bd      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+16))  && ((wiersz>=(ADRES->Y0_SET+2) && wiersz<=(ADRES->Y0_SET+16))))
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	7b1b      	ldrb	r3, [r3, #12]
 8010ebc:	3310      	adds	r3, #16
 8010ebe:	461a      	mov	r2, r3
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	4293      	cmp	r3, r2
 8010ec4:	d118      	bne.n	8010ef8 <LCD_printdioda+0x68c>
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	7b5b      	ldrb	r3, [r3, #13]
 8010eca:	3302      	adds	r3, #2
 8010ecc:	461a      	mov	r2, r3
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	d311      	bcc.n	8010ef8 <LCD_printdioda+0x68c>
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	7b5b      	ldrb	r3, [r3, #13]
 8010ed8:	3310      	adds	r3, #16
 8010eda:	461a      	mov	r2, r3
 8010edc:	693b      	ldr	r3, [r7, #16]
 8010ede:	4293      	cmp	r3, r2
 8010ee0:	d80a      	bhi.n	8010ef8 <LCD_printdioda+0x68c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010ee2:	f107 010c 	add.w	r1, r7, #12
 8010ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8010eea:	2202      	movs	r2, #2
 8010eec:	4801      	ldr	r0, [pc, #4]	@ (8010ef4 <LCD_printdioda+0x688>)
 8010eee:	f007 fc06 	bl	80186fe <HAL_SPI_Transmit>
 8010ef2:	e09f      	b.n	8011034 <LCD_printdioda+0x7c8>
 8010ef4:	200004a4 	.word	0x200004a4
			}
			else if((kolumna==(ADRES->X0_SET+15))  && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+16))))
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	7b1b      	ldrb	r3, [r3, #12]
 8010efc:	330f      	adds	r3, #15
 8010efe:	461a      	mov	r2, r3
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d116      	bne.n	8010f34 <LCD_printdioda+0x6c8>
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	7b5b      	ldrb	r3, [r3, #13]
 8010f0a:	3301      	adds	r3, #1
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	693b      	ldr	r3, [r7, #16]
 8010f10:	4293      	cmp	r3, r2
 8010f12:	d30f      	bcc.n	8010f34 <LCD_printdioda+0x6c8>
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	7b5b      	ldrb	r3, [r3, #13]
 8010f18:	3310      	adds	r3, #16
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	693b      	ldr	r3, [r7, #16]
 8010f1e:	4293      	cmp	r3, r2
 8010f20:	d808      	bhi.n	8010f34 <LCD_printdioda+0x6c8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010f22:	f107 010c 	add.w	r1, r7, #12
 8010f26:	f04f 33ff 	mov.w	r3, #4294967295
 8010f2a:	2202      	movs	r2, #2
 8010f2c:	484f      	ldr	r0, [pc, #316]	@ (801106c <LCD_printdioda+0x800>)
 8010f2e:	f007 fbe6 	bl	80186fe <HAL_SPI_Transmit>
 8010f32:	e07f      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+14))  && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+16))))
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	7b1b      	ldrb	r3, [r3, #12]
 8010f38:	330e      	adds	r3, #14
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	697b      	ldr	r3, [r7, #20]
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	d116      	bne.n	8010f70 <LCD_printdioda+0x704>
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	7b5b      	ldrb	r3, [r3, #13]
 8010f46:	3301      	adds	r3, #1
 8010f48:	461a      	mov	r2, r3
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	4293      	cmp	r3, r2
 8010f4e:	d30f      	bcc.n	8010f70 <LCD_printdioda+0x704>
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	7b5b      	ldrb	r3, [r3, #13]
 8010f54:	3310      	adds	r3, #16
 8010f56:	461a      	mov	r2, r3
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	d808      	bhi.n	8010f70 <LCD_printdioda+0x704>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010f5e:	f107 010c 	add.w	r1, r7, #12
 8010f62:	f04f 33ff 	mov.w	r3, #4294967295
 8010f66:	2202      	movs	r2, #2
 8010f68:	4840      	ldr	r0, [pc, #256]	@ (801106c <LCD_printdioda+0x800>)
 8010f6a:	f007 fbc8 	bl	80186fe <HAL_SPI_Transmit>
 8010f6e:	e061      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+13))  && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+16))))
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	7b1b      	ldrb	r3, [r3, #12]
 8010f74:	330d      	adds	r3, #13
 8010f76:	461a      	mov	r2, r3
 8010f78:	697b      	ldr	r3, [r7, #20]
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d116      	bne.n	8010fac <LCD_printdioda+0x740>
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	7b5b      	ldrb	r3, [r3, #13]
 8010f82:	3301      	adds	r3, #1
 8010f84:	461a      	mov	r2, r3
 8010f86:	693b      	ldr	r3, [r7, #16]
 8010f88:	4293      	cmp	r3, r2
 8010f8a:	d30f      	bcc.n	8010fac <LCD_printdioda+0x740>
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	7b5b      	ldrb	r3, [r3, #13]
 8010f90:	3310      	adds	r3, #16
 8010f92:	461a      	mov	r2, r3
 8010f94:	693b      	ldr	r3, [r7, #16]
 8010f96:	4293      	cmp	r3, r2
 8010f98:	d808      	bhi.n	8010fac <LCD_printdioda+0x740>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010f9a:	f107 010c 	add.w	r1, r7, #12
 8010f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8010fa2:	2202      	movs	r2, #2
 8010fa4:	4831      	ldr	r0, [pc, #196]	@ (801106c <LCD_printdioda+0x800>)
 8010fa6:	f007 fbaa 	bl	80186fe <HAL_SPI_Transmit>
 8010faa:	e043      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if((kolumna==(ADRES->X0_SET+12))  && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+16))))
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	7b1b      	ldrb	r3, [r3, #12]
 8010fb0:	330c      	adds	r3, #12
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d116      	bne.n	8010fe8 <LCD_printdioda+0x77c>
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	7b5b      	ldrb	r3, [r3, #13]
 8010fbe:	3301      	adds	r3, #1
 8010fc0:	461a      	mov	r2, r3
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	4293      	cmp	r3, r2
 8010fc6:	d30f      	bcc.n	8010fe8 <LCD_printdioda+0x77c>
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	7b5b      	ldrb	r3, [r3, #13]
 8010fcc:	3310      	adds	r3, #16
 8010fce:	461a      	mov	r2, r3
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	4293      	cmp	r3, r2
 8010fd4:	d808      	bhi.n	8010fe8 <LCD_printdioda+0x77c>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8010fd6:	f107 010c 	add.w	r1, r7, #12
 8010fda:	f04f 33ff 	mov.w	r3, #4294967295
 8010fde:	2202      	movs	r2, #2
 8010fe0:	4822      	ldr	r0, [pc, #136]	@ (801106c <LCD_printdioda+0x800>)
 8010fe2:	f007 fb8c 	bl	80186fe <HAL_SPI_Transmit>
 8010fe6:	e025      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else if(kolumna==(ADRES->X0_SET+11) && ((wiersz>=(ADRES->Y0_SET+1) && wiersz<=(ADRES->Y0_SET+16))))
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	7b1b      	ldrb	r3, [r3, #12]
 8010fec:	330b      	adds	r3, #11
 8010fee:	461a      	mov	r2, r3
 8010ff0:	697b      	ldr	r3, [r7, #20]
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	d116      	bne.n	8011024 <LCD_printdioda+0x7b8>
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	7b5b      	ldrb	r3, [r3, #13]
 8010ffa:	3301      	adds	r3, #1
 8010ffc:	461a      	mov	r2, r3
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	4293      	cmp	r3, r2
 8011002:	d30f      	bcc.n	8011024 <LCD_printdioda+0x7b8>
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	7b5b      	ldrb	r3, [r3, #13]
 8011008:	3310      	adds	r3, #16
 801100a:	461a      	mov	r2, r3
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	4293      	cmp	r3, r2
 8011010:	d808      	bhi.n	8011024 <LCD_printdioda+0x7b8>
			{
				HAL_SPI_Transmit(&hspi3, Mword, 2, HAL_MAX_DELAY);
 8011012:	f107 010c 	add.w	r1, r7, #12
 8011016:	f04f 33ff 	mov.w	r3, #4294967295
 801101a:	2202      	movs	r2, #2
 801101c:	4813      	ldr	r0, [pc, #76]	@ (801106c <LCD_printdioda+0x800>)
 801101e:	f007 fb6e 	bl	80186fe <HAL_SPI_Transmit>
 8011022:	e007      	b.n	8011034 <LCD_printdioda+0x7c8>
			}
			else
			{
				HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8011024:	f107 0108 	add.w	r1, r7, #8
 8011028:	f04f 33ff 	mov.w	r3, #4294967295
 801102c:	2202      	movs	r2, #2
 801102e:	480f      	ldr	r0, [pc, #60]	@ (801106c <LCD_printdioda+0x800>)
 8011030:	f007 fb65 	bl	80186fe <HAL_SPI_Transmit>
		for(kolumna=ADRES->X0_SET;kolumna<(ADRES->X_END_SET+1);kolumna++)
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	3301      	adds	r3, #1
 8011038:	617b      	str	r3, [r7, #20]
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	7b9b      	ldrb	r3, [r3, #14]
 801103e:	3301      	adds	r3, #1
 8011040:	461a      	mov	r2, r3
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	4293      	cmp	r3, r2
 8011046:	f4ff acc0 	bcc.w	80109ca <LCD_printdioda+0x15e>
	for(wiersz=ADRES->Y0_SET;wiersz<(ADRES->Y_END_SET);wiersz++)
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	3301      	adds	r3, #1
 801104e:	613b      	str	r3, [r7, #16]
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	7bdb      	ldrb	r3, [r3, #15]
 8011054:	461a      	mov	r2, r3
 8011056:	693b      	ldr	r3, [r7, #16]
 8011058:	4293      	cmp	r3, r2
 801105a:	f4ff acb2 	bcc.w	80109c2 <LCD_printdioda+0x156>
			}


		}
	}
	CS_ON();
 801105e:	f7ef ffe1 	bl	8001024 <CS_ON>
}
 8011062:	bf00      	nop
 8011064:	3718      	adds	r7, #24
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
 801106a:	bf00      	nop
 801106c:	200004a4 	.word	0x200004a4

08011070 <LCD_printMENU>:

void LCD_printMENU(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b086      	sub	sp, #24
 8011074:	af00      	add	r7, sp, #0
 8011076:	603b      	str	r3, [r7, #0]
 8011078:	4603      	mov	r3, r0
 801107a:	71fb      	strb	r3, [r7, #7]
 801107c:	460b      	mov	r3, r1
 801107e:	71bb      	strb	r3, [r7, #6]
 8011080:	4613      	mov	r3, r2
 8011082:	717b      	strb	r3, [r7, #5]
	ADRES->RM=0;
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	2200      	movs	r2, #0
 8011088:	741a      	strb	r2, [r3, #16]
	ADRES->GM=63;
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	223f      	movs	r2, #63	@ 0x3f
 801108e:	745a      	strb	r2, [r3, #17]
	ADRES->BM=31;
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	221f      	movs	r2, #31
 8011094:	749a      	strb	r2, [r3, #18]
	ADRES->Mbyte=0x00;
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	2200      	movs	r2, #0
 801109a:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=0x00;
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	2200      	movs	r2, #0
 80110a0:	751a      	strb	r2, [r3, #20]
	ADRES->Mbyte=((ADRES->Mbyte^ADRES->RM)<<3)^(ADRES->GM&0x38);
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	7cda      	ldrb	r2, [r3, #19]
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	7c1b      	ldrb	r3, [r3, #16]
 80110aa:	4053      	eors	r3, r2
 80110ac:	b2db      	uxtb	r3, r3
 80110ae:	00db      	lsls	r3, r3, #3
 80110b0:	b25a      	sxtb	r2, r3
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	7c5b      	ldrb	r3, [r3, #17]
 80110b6:	b25b      	sxtb	r3, r3
 80110b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80110bc:	b25b      	sxtb	r3, r3
 80110be:	4053      	eors	r3, r2
 80110c0:	b25b      	sxtb	r3, r3
 80110c2:	b2da      	uxtb	r2, r3
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	74da      	strb	r2, [r3, #19]
	ADRES->Mbyte2=((ADRES->Mbyte2^(ADRES->GM&0x07))<<5)^ADRES->BM;
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	7d1b      	ldrb	r3, [r3, #20]
 80110cc:	461a      	mov	r2, r3
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	7c5b      	ldrb	r3, [r3, #17]
 80110d2:	f003 0307 	and.w	r3, r3, #7
 80110d6:	4053      	eors	r3, r2
 80110d8:	015b      	lsls	r3, r3, #5
 80110da:	b25a      	sxtb	r2, r3
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	7c9b      	ldrb	r3, [r3, #18]
 80110e0:	b25b      	sxtb	r3, r3
 80110e2:	4053      	eors	r3, r2
 80110e4:	b25b      	sxtb	r3, r3
 80110e6:	b2da      	uxtb	r2, r3
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	751a      	strb	r2, [r3, #20]
	uint8_t fbyte=0x00;
 80110ec:	2300      	movs	r3, #0
 80110ee:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 80110f0:	2300      	movs	r3, #0
 80110f2:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 80110f4:	7bfa      	ldrb	r2, [r7, #15]
 80110f6:	79fb      	ldrb	r3, [r7, #7]
 80110f8:	4053      	eors	r3, r2
 80110fa:	b2db      	uxtb	r3, r3
 80110fc:	00db      	lsls	r3, r3, #3
 80110fe:	b25a      	sxtb	r2, r3
 8011100:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011104:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011108:	b25b      	sxtb	r3, r3
 801110a:	4053      	eors	r3, r2
 801110c:	b25b      	sxtb	r3, r3
 801110e:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8011110:	7bba      	ldrb	r2, [r7, #14]
 8011112:	79bb      	ldrb	r3, [r7, #6]
 8011114:	f003 0307 	and.w	r3, r3, #7
 8011118:	4053      	eors	r3, r2
 801111a:	015b      	lsls	r3, r3, #5
 801111c:	b25a      	sxtb	r2, r3
 801111e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8011122:	4053      	eors	r3, r2
 8011124:	b25b      	sxtb	r3, r3
 8011126:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8011128:	7bfb      	ldrb	r3, [r7, #15]
 801112a:	733b      	strb	r3, [r7, #12]
 801112c:	7bbb      	ldrb	r3, [r7, #14]
 801112e:	737b      	strb	r3, [r7, #13]
	//LCD_komenda(ADRES->DISPLAYOFF);
	// MENU
	ADRES->X0_SET=0x00;
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	2200      	movs	r2, #0
 8011134:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	7b1b      	ldrb	r3, [r3, #12]
 801113a:	330a      	adds	r3, #10
 801113c:	b2da      	uxtb	r2, r3
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=0x00;
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	2200      	movs	r2, #0
 8011146:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=ADRES->Y0_SET+15;
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	7b5b      	ldrb	r3, [r3, #13]
 801114c:	330f      	adds	r3, #15
 801114e:	b2da      	uxtb	r2, r3
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 8011154:	6838      	ldr	r0, [r7, #0]
 8011156:	f7f0 f80d 	bl	8001174 <LCD_set_adressing>
	LCD_printM(R,G,B,ADRES);
 801115a:	797a      	ldrb	r2, [r7, #5]
 801115c:	79b9      	ldrb	r1, [r7, #6]
 801115e:	79f8      	ldrb	r0, [r7, #7]
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	f7f0 f847 	bl	80011f4 <LCD_printM>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	7b1b      	ldrb	r3, [r3, #12]
 801116a:	330b      	adds	r3, #11
 801116c:	b2da      	uxtb	r2, r3
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	7b1b      	ldrb	r3, [r3, #12]
 8011176:	330a      	adds	r3, #10
 8011178:	b2da      	uxtb	r2, r3
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801117e:	6838      	ldr	r0, [r7, #0]
 8011180:	f7ef fff8 	bl	8001174 <LCD_set_adressing>
	LCD_printE(R,G,B,ADRES);
 8011184:	797a      	ldrb	r2, [r7, #5]
 8011186:	79b9      	ldrb	r1, [r7, #6]
 8011188:	79f8      	ldrb	r0, [r7, #7]
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	f7f0 f97a 	bl	8001484 <LCD_printE>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	7b1b      	ldrb	r3, [r3, #12]
 8011194:	330b      	adds	r3, #11
 8011196:	b2da      	uxtb	r2, r3
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	7b1b      	ldrb	r3, [r3, #12]
 80111a0:	330a      	adds	r3, #10
 80111a2:	b2da      	uxtb	r2, r3
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80111a8:	6838      	ldr	r0, [r7, #0]
 80111aa:	f7ef ffe3 	bl	8001174 <LCD_set_adressing>
	LCD_printN(R,G,B,ADRES);
 80111ae:	797a      	ldrb	r2, [r7, #5]
 80111b0:	79b9      	ldrb	r1, [r7, #6]
 80111b2:	79f8      	ldrb	r0, [r7, #7]
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	f7f0 fa77 	bl	80016a8 <LCD_printN>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	7b1b      	ldrb	r3, [r3, #12]
 80111be:	330b      	adds	r3, #11
 80111c0:	b2da      	uxtb	r2, r3
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	7b1b      	ldrb	r3, [r3, #12]
 80111ca:	330a      	adds	r3, #10
 80111cc:	b2da      	uxtb	r2, r3
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80111d2:	6838      	ldr	r0, [r7, #0]
 80111d4:	f7ef ffce 	bl	8001174 <LCD_set_adressing>
	LCD_printU(R,G,B,ADRES);
 80111d8:	797a      	ldrb	r2, [r7, #5]
 80111da:	79b9      	ldrb	r1, [r7, #6]
 80111dc:	79f8      	ldrb	r0, [r7, #7]
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	f7f0 fbda 	bl	8001998 <LCD_printU>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	7b1b      	ldrb	r3, [r3, #12]
 80111e8:	330b      	adds	r3, #11
 80111ea:	b2da      	uxtb	r2, r3
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	227f      	movs	r2, #127	@ 0x7f
 80111f4:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80111f6:	6838      	ldr	r0, [r7, #0]
 80111f8:	f7ef ffbc 	bl	8001174 <LCD_set_adressing>
	DC_ON();
 80111fc:	f7ef ff28 	bl	8001050 <DC_ON>
	CS_OFF();
 8011200:	f7ef ff1b 	bl	800103a <CS_OFF>
	for(int i=0;i<(((ADRES->X_END_SET)-(ADRES->X0_SET-1))*16);i++)
 8011204:	2300      	movs	r3, #0
 8011206:	617b      	str	r3, [r7, #20]
 8011208:	e00e      	b.n	8011228 <LCD_printMENU+0x1b8>
	{
		HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 801120a:	f107 010c 	add.w	r1, r7, #12
 801120e:	f04f 33ff 	mov.w	r3, #4294967295
 8011212:	2202      	movs	r2, #2
 8011214:	4803      	ldr	r0, [pc, #12]	@ (8011224 <LCD_printMENU+0x1b4>)
 8011216:	f007 fa72 	bl	80186fe <HAL_SPI_Transmit>
	for(int i=0;i<(((ADRES->X_END_SET)-(ADRES->X0_SET-1))*16);i++)
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	3301      	adds	r3, #1
 801121e:	617b      	str	r3, [r7, #20]
 8011220:	e002      	b.n	8011228 <LCD_printMENU+0x1b8>
 8011222:	bf00      	nop
 8011224:	200004a4 	.word	0x200004a4
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	7b9b      	ldrb	r3, [r3, #14]
 801122c:	461a      	mov	r2, r3
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	7b1b      	ldrb	r3, [r3, #12]
 8011232:	3b01      	subs	r3, #1
 8011234:	1ad3      	subs	r3, r2, r3
 8011236:	011b      	lsls	r3, r3, #4
 8011238:	697a      	ldr	r2, [r7, #20]
 801123a:	429a      	cmp	r2, r3
 801123c:	dbe5      	blt.n	801120a <LCD_printMENU+0x19a>
	}
	CS_ON();
 801123e:	f7ef fef1 	bl	8001024 <CS_ON>



	// 1. L - STAN DIOD
	ADRES->X0_SET=0x00;
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	2200      	movs	r2, #0
 8011246:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	7b1b      	ldrb	r3, [r3, #12]
 801124c:	3314      	adds	r3, #20
 801124e:	b2da      	uxtb	r2, r3
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=15;
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	220f      	movs	r2, #15
 8011258:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=ADRES->Y0_SET+15;
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	7b5b      	ldrb	r3, [r3, #13]
 801125e:	330f      	adds	r3, #15
 8011260:	b2da      	uxtb	r2, r3
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 8011266:	6838      	ldr	r0, [r7, #0]
 8011268:	f7ef ff84 	bl	8001174 <LCD_set_adressing>
	LCD_printD(R,G,B,ADRES);
 801126c:	797a      	ldrb	r2, [r7, #5]
 801126e:	79b9      	ldrb	r1, [r7, #6]
 8011270:	79f8      	ldrb	r0, [r7, #7]
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	f7f1 f904 	bl	8002480 <LCD_printD>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	7b1b      	ldrb	r3, [r3, #12]
 801127c:	330b      	adds	r3, #11
 801127e:	b2da      	uxtb	r2, r3
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+13;
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	7b1b      	ldrb	r3, [r3, #12]
 8011288:	330d      	adds	r3, #13
 801128a:	b2da      	uxtb	r2, r3
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011290:	6838      	ldr	r0, [r7, #0]
 8011292:	f7ef ff6f 	bl	8001174 <LCD_set_adressing>
	LCD_print_myslnik(R,G,B,ADRES);
 8011296:	797a      	ldrb	r2, [r7, #5]
 8011298:	79b9      	ldrb	r1, [r7, #6]
 801129a:	79f8      	ldrb	r0, [r7, #7]
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	f7f3 fe61 	bl	8004f64 <LCD_print_myslnik>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	7b1b      	ldrb	r3, [r3, #12]
 80112a6:	330b      	adds	r3, #11
 80112a8:	b2da      	uxtb	r2, r3
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	7b1b      	ldrb	r3, [r3, #12]
 80112b2:	330a      	adds	r3, #10
 80112b4:	b2da      	uxtb	r2, r3
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80112ba:	6838      	ldr	r0, [r7, #0]
 80112bc:	f7ef ff5a 	bl	8001174 <LCD_set_adressing>
	LCD_printS(R,G,B,ADRES);
 80112c0:	797a      	ldrb	r2, [r7, #5]
 80112c2:	79b9      	ldrb	r1, [r7, #6]
 80112c4:	79f8      	ldrb	r0, [r7, #7]
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	f7f2 fa4c 	bl	8003764 <LCD_printS>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	7b1b      	ldrb	r3, [r3, #12]
 80112d0:	330b      	adds	r3, #11
 80112d2:	b2da      	uxtb	r2, r3
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 80112d8:	683b      	ldr	r3, [r7, #0]
 80112da:	7b1b      	ldrb	r3, [r3, #12]
 80112dc:	330a      	adds	r3, #10
 80112de:	b2da      	uxtb	r2, r3
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80112e4:	6838      	ldr	r0, [r7, #0]
 80112e6:	f7ef ff45 	bl	8001174 <LCD_set_adressing>
	LCD_printT(R,G,B,ADRES);
 80112ea:	797a      	ldrb	r2, [r7, #5]
 80112ec:	79b9      	ldrb	r1, [r7, #6]
 80112ee:	79f8      	ldrb	r0, [r7, #7]
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	f7f2 fbf3 	bl	8003adc <LCD_printT>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	7b1b      	ldrb	r3, [r3, #12]
 80112fa:	330b      	adds	r3, #11
 80112fc:	b2da      	uxtb	r2, r3
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	7b1b      	ldrb	r3, [r3, #12]
 8011306:	330a      	adds	r3, #10
 8011308:	b2da      	uxtb	r2, r3
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801130e:	6838      	ldr	r0, [r7, #0]
 8011310:	f7ef ff30 	bl	8001174 <LCD_set_adressing>
	LCD_printA(R,G,B,ADRES);
 8011314:	797a      	ldrb	r2, [r7, #5]
 8011316:	79b9      	ldrb	r1, [r7, #6]
 8011318:	79f8      	ldrb	r0, [r7, #7]
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	f7f0 fc6c 	bl	8001bf8 <LCD_printA>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	7b1b      	ldrb	r3, [r3, #12]
 8011324:	330b      	adds	r3, #11
 8011326:	b2da      	uxtb	r2, r3
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	7b1b      	ldrb	r3, [r3, #12]
 8011330:	3314      	adds	r3, #20
 8011332:	b2da      	uxtb	r2, r3
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011338:	6838      	ldr	r0, [r7, #0]
 801133a:	f7ef ff1b 	bl	8001174 <LCD_set_adressing>
	LCD_printN(R,G,B,ADRES);
 801133e:	797a      	ldrb	r2, [r7, #5]
 8011340:	79b9      	ldrb	r1, [r7, #6]
 8011342:	79f8      	ldrb	r0, [r7, #7]
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	f7f0 f9af 	bl	80016a8 <LCD_printN>
	ADRES->X0_SET=ADRES->X0_SET+18;
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	7b1b      	ldrb	r3, [r3, #12]
 801134e:	3312      	adds	r3, #18
 8011350:	b2da      	uxtb	r2, r3
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+13;
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	7b1b      	ldrb	r3, [r3, #12]
 801135a:	330d      	adds	r3, #13
 801135c:	b2da      	uxtb	r2, r3
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011362:	6838      	ldr	r0, [r7, #0]
 8011364:	f7ef ff06 	bl	8001174 <LCD_set_adressing>
	LCD_printD(R,G,B,ADRES);
 8011368:	797a      	ldrb	r2, [r7, #5]
 801136a:	79b9      	ldrb	r1, [r7, #6]
 801136c:	79f8      	ldrb	r0, [r7, #7]
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	f7f1 f886 	bl	8002480 <LCD_printD>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	7b1b      	ldrb	r3, [r3, #12]
 8011378:	330b      	adds	r3, #11
 801137a:	b2da      	uxtb	r2, r3
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	7b1b      	ldrb	r3, [r3, #12]
 8011384:	330a      	adds	r3, #10
 8011386:	b2da      	uxtb	r2, r3
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801138c:	6838      	ldr	r0, [r7, #0]
 801138e:	f7ef fef1 	bl	8001174 <LCD_set_adressing>
	LCD_printI(R,G,B,ADRES);
 8011392:	797a      	ldrb	r2, [r7, #5]
 8011394:	79b9      	ldrb	r1, [r7, #6]
 8011396:	79f8      	ldrb	r0, [r7, #7]
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	f7f1 fb97 	bl	8002acc <LCD_printI>
	ADRES->X0_SET=ADRES->X0_SET+11;
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	7b1b      	ldrb	r3, [r3, #12]
 80113a2:	330b      	adds	r3, #11
 80113a4:	b2da      	uxtb	r2, r3
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;;
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	7b1b      	ldrb	r3, [r3, #12]
 80113ae:	330a      	adds	r3, #10
 80113b0:	b2da      	uxtb	r2, r3
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80113b6:	6838      	ldr	r0, [r7, #0]
 80113b8:	f7ef fedc 	bl	8001174 <LCD_set_adressing>
	LCD_printO(R,G,B,ADRES);
 80113bc:	797a      	ldrb	r2, [r7, #5]
 80113be:	79b9      	ldrb	r1, [r7, #6]
 80113c0:	79f8      	ldrb	r0, [r7, #7]
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	f7f2 f872 	bl	80034ac <LCD_printO>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	7b1b      	ldrb	r3, [r3, #12]
 80113cc:	330b      	adds	r3, #11
 80113ce:	b2da      	uxtb	r2, r3
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	227f      	movs	r2, #127	@ 0x7f
 80113d8:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80113da:	6838      	ldr	r0, [r7, #0]
 80113dc:	f7ef feca 	bl	8001174 <LCD_set_adressing>
	LCD_printD(R,G,B,ADRES);
 80113e0:	797a      	ldrb	r2, [r7, #5]
 80113e2:	79b9      	ldrb	r1, [r7, #6]
 80113e4:	79f8      	ldrb	r0, [r7, #7]
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	f7f1 f84a 	bl	8002480 <LCD_printD>



	// 2. A - STAN ADC1
	ADRES->X0_SET=0x00;
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	2200      	movs	r2, #0
 80113f0:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	7b1b      	ldrb	r3, [r3, #12]
 80113f6:	3314      	adds	r3, #20
 80113f8:	b2da      	uxtb	r2, r3
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=30;
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	221e      	movs	r2, #30
 8011402:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=ADRES->Y0_SET+15;
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	7b5b      	ldrb	r3, [r3, #13]
 8011408:	330f      	adds	r3, #15
 801140a:	b2da      	uxtb	r2, r3
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 8011410:	6838      	ldr	r0, [r7, #0]
 8011412:	f7ef feaf 	bl	8001174 <LCD_set_adressing>
	LCD_printA(R,G,B,ADRES);
 8011416:	797a      	ldrb	r2, [r7, #5]
 8011418:	79b9      	ldrb	r1, [r7, #6]
 801141a:	79f8      	ldrb	r0, [r7, #7]
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	f7f0 fbeb 	bl	8001bf8 <LCD_printA>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	7b1b      	ldrb	r3, [r3, #12]
 8011426:	330b      	adds	r3, #11
 8011428:	b2da      	uxtb	r2, r3
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+13;
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	7b1b      	ldrb	r3, [r3, #12]
 8011432:	330d      	adds	r3, #13
 8011434:	b2da      	uxtb	r2, r3
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801143a:	6838      	ldr	r0, [r7, #0]
 801143c:	f7ef fe9a 	bl	8001174 <LCD_set_adressing>
	LCD_print_myslnik(R,G,B,ADRES);
 8011440:	797a      	ldrb	r2, [r7, #5]
 8011442:	79b9      	ldrb	r1, [r7, #6]
 8011444:	79f8      	ldrb	r0, [r7, #7]
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	f7f3 fd8c 	bl	8004f64 <LCD_print_myslnik>
	ADRES->X0_SET=ADRES->X0_SET+11;
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	7b1b      	ldrb	r3, [r3, #12]
 8011450:	330b      	adds	r3, #11
 8011452:	b2da      	uxtb	r2, r3
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	7b1b      	ldrb	r3, [r3, #12]
 801145c:	330a      	adds	r3, #10
 801145e:	b2da      	uxtb	r2, r3
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011464:	6838      	ldr	r0, [r7, #0]
 8011466:	f7ef fe85 	bl	8001174 <LCD_set_adressing>
	LCD_printS(R,G,B,ADRES);
 801146a:	797a      	ldrb	r2, [r7, #5]
 801146c:	79b9      	ldrb	r1, [r7, #6]
 801146e:	79f8      	ldrb	r0, [r7, #7]
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	f7f2 f977 	bl	8003764 <LCD_printS>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	7b1b      	ldrb	r3, [r3, #12]
 801147a:	330b      	adds	r3, #11
 801147c:	b2da      	uxtb	r2, r3
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	7b1b      	ldrb	r3, [r3, #12]
 8011486:	330a      	adds	r3, #10
 8011488:	b2da      	uxtb	r2, r3
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801148e:	6838      	ldr	r0, [r7, #0]
 8011490:	f7ef fe70 	bl	8001174 <LCD_set_adressing>
	LCD_printT(R,G,B,ADRES);
 8011494:	797a      	ldrb	r2, [r7, #5]
 8011496:	79b9      	ldrb	r1, [r7, #6]
 8011498:	79f8      	ldrb	r0, [r7, #7]
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	f7f2 fb1e 	bl	8003adc <LCD_printT>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	7b1b      	ldrb	r3, [r3, #12]
 80114a4:	330b      	adds	r3, #11
 80114a6:	b2da      	uxtb	r2, r3
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	7b1b      	ldrb	r3, [r3, #12]
 80114b0:	330a      	adds	r3, #10
 80114b2:	b2da      	uxtb	r2, r3
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80114b8:	6838      	ldr	r0, [r7, #0]
 80114ba:	f7ef fe5b 	bl	8001174 <LCD_set_adressing>
	LCD_printA(R,G,B,ADRES);
 80114be:	797a      	ldrb	r2, [r7, #5]
 80114c0:	79b9      	ldrb	r1, [r7, #6]
 80114c2:	79f8      	ldrb	r0, [r7, #7]
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	f7f0 fb97 	bl	8001bf8 <LCD_printA>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	7b1b      	ldrb	r3, [r3, #12]
 80114ce:	330b      	adds	r3, #11
 80114d0:	b2da      	uxtb	r2, r3
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	7b1b      	ldrb	r3, [r3, #12]
 80114da:	3314      	adds	r3, #20
 80114dc:	b2da      	uxtb	r2, r3
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80114e2:	6838      	ldr	r0, [r7, #0]
 80114e4:	f7ef fe46 	bl	8001174 <LCD_set_adressing>
	LCD_printN(R,G,B,ADRES);
 80114e8:	797a      	ldrb	r2, [r7, #5]
 80114ea:	79b9      	ldrb	r1, [r7, #6]
 80114ec:	79f8      	ldrb	r0, [r7, #7]
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	f7f0 f8da 	bl	80016a8 <LCD_printN>
	ADRES->X0_SET=ADRES->X0_SET+18;
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	7b1b      	ldrb	r3, [r3, #12]
 80114f8:	3312      	adds	r3, #18
 80114fa:	b2da      	uxtb	r2, r3
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+13;
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	7b1b      	ldrb	r3, [r3, #12]
 8011504:	330d      	adds	r3, #13
 8011506:	b2da      	uxtb	r2, r3
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801150c:	6838      	ldr	r0, [r7, #0]
 801150e:	f7ef fe31 	bl	8001174 <LCD_set_adressing>
	LCD_printA(R,G,B,ADRES);
 8011512:	797a      	ldrb	r2, [r7, #5]
 8011514:	79b9      	ldrb	r1, [r7, #6]
 8011516:	79f8      	ldrb	r0, [r7, #7]
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	f7f0 fb6d 	bl	8001bf8 <LCD_printA>
	ADRES->X0_SET=ADRES->X0_SET+11;
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	7b1b      	ldrb	r3, [r3, #12]
 8011522:	330b      	adds	r3, #11
 8011524:	b2da      	uxtb	r2, r3
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	7b1b      	ldrb	r3, [r3, #12]
 801152e:	330a      	adds	r3, #10
 8011530:	b2da      	uxtb	r2, r3
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011536:	6838      	ldr	r0, [r7, #0]
 8011538:	f7ef fe1c 	bl	8001174 <LCD_set_adressing>
	LCD_printD(R,G,B,ADRES);
 801153c:	797a      	ldrb	r2, [r7, #5]
 801153e:	79b9      	ldrb	r1, [r7, #6]
 8011540:	79f8      	ldrb	r0, [r7, #7]
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	f7f0 ff9c 	bl	8002480 <LCD_printD>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	7b1b      	ldrb	r3, [r3, #12]
 801154c:	330b      	adds	r3, #11
 801154e:	b2da      	uxtb	r2, r3
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;;
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	7b1b      	ldrb	r3, [r3, #12]
 8011558:	330a      	adds	r3, #10
 801155a:	b2da      	uxtb	r2, r3
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011560:	6838      	ldr	r0, [r7, #0]
 8011562:	f7ef fe07 	bl	8001174 <LCD_set_adressing>
	LCD_printC(R,G,B,ADRES);
 8011566:	797a      	ldrb	r2, [r7, #5]
 8011568:	79b9      	ldrb	r1, [r7, #6]
 801156a:	79f8      	ldrb	r0, [r7, #7]
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	f7f0 fe31 	bl	80021d4 <LCD_printC>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	7b1b      	ldrb	r3, [r3, #12]
 8011576:	330b      	adds	r3, #11
 8011578:	b2da      	uxtb	r2, r3
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	227f      	movs	r2, #127	@ 0x7f
 8011582:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011584:	6838      	ldr	r0, [r7, #0]
 8011586:	f7ef fdf5 	bl	8001174 <LCD_set_adressing>
	LCD_print1(R,G,B,ADRES);
 801158a:	797a      	ldrb	r2, [r7, #5]
 801158c:	79b9      	ldrb	r1, [r7, #6]
 801158e:	79f8      	ldrb	r0, [r7, #7]
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	f7f2 fb95 	bl	8003cc0 <LCD_print1>




	// 3. B - STAN ADC2
	ADRES->X0_SET=0x00;
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	2200      	movs	r2, #0
 801159a:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	7b1b      	ldrb	r3, [r3, #12]
 80115a0:	3314      	adds	r3, #20
 80115a2:	b2da      	uxtb	r2, r3
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=45;
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	222d      	movs	r2, #45	@ 0x2d
 80115ac:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=ADRES->Y0_SET+15;
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	7b5b      	ldrb	r3, [r3, #13]
 80115b2:	330f      	adds	r3, #15
 80115b4:	b2da      	uxtb	r2, r3
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 80115ba:	6838      	ldr	r0, [r7, #0]
 80115bc:	f7ef fdda 	bl	8001174 <LCD_set_adressing>
	LCD_printB(R,G,B,ADRES);
 80115c0:	797a      	ldrb	r2, [r7, #5]
 80115c2:	79b9      	ldrb	r1, [r7, #6]
 80115c4:	79f8      	ldrb	r0, [r7, #7]
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	f7f0 fc8e 	bl	8001ee8 <LCD_printB>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	7b1b      	ldrb	r3, [r3, #12]
 80115d0:	330b      	adds	r3, #11
 80115d2:	b2da      	uxtb	r2, r3
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+13;
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	7b1b      	ldrb	r3, [r3, #12]
 80115dc:	330d      	adds	r3, #13
 80115de:	b2da      	uxtb	r2, r3
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80115e4:	6838      	ldr	r0, [r7, #0]
 80115e6:	f7ef fdc5 	bl	8001174 <LCD_set_adressing>
	LCD_print_myslnik(R,G,B,ADRES);
 80115ea:	797a      	ldrb	r2, [r7, #5]
 80115ec:	79b9      	ldrb	r1, [r7, #6]
 80115ee:	79f8      	ldrb	r0, [r7, #7]
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	f7f3 fcb7 	bl	8004f64 <LCD_print_myslnik>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	7b1b      	ldrb	r3, [r3, #12]
 80115fa:	330b      	adds	r3, #11
 80115fc:	b2da      	uxtb	r2, r3
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	7b1b      	ldrb	r3, [r3, #12]
 8011606:	330a      	adds	r3, #10
 8011608:	b2da      	uxtb	r2, r3
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801160e:	6838      	ldr	r0, [r7, #0]
 8011610:	f7ef fdb0 	bl	8001174 <LCD_set_adressing>
	LCD_printS(R,G,B,ADRES);
 8011614:	797a      	ldrb	r2, [r7, #5]
 8011616:	79b9      	ldrb	r1, [r7, #6]
 8011618:	79f8      	ldrb	r0, [r7, #7]
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	f7f2 f8a2 	bl	8003764 <LCD_printS>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	7b1b      	ldrb	r3, [r3, #12]
 8011624:	330b      	adds	r3, #11
 8011626:	b2da      	uxtb	r2, r3
 8011628:	683b      	ldr	r3, [r7, #0]
 801162a:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	7b1b      	ldrb	r3, [r3, #12]
 8011630:	330a      	adds	r3, #10
 8011632:	b2da      	uxtb	r2, r3
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011638:	6838      	ldr	r0, [r7, #0]
 801163a:	f7ef fd9b 	bl	8001174 <LCD_set_adressing>
	LCD_printT(R,G,B,ADRES);
 801163e:	797a      	ldrb	r2, [r7, #5]
 8011640:	79b9      	ldrb	r1, [r7, #6]
 8011642:	79f8      	ldrb	r0, [r7, #7]
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	f7f2 fa49 	bl	8003adc <LCD_printT>
	ADRES->X0_SET=ADRES->X0_SET+11;
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	7b1b      	ldrb	r3, [r3, #12]
 801164e:	330b      	adds	r3, #11
 8011650:	b2da      	uxtb	r2, r3
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	7b1b      	ldrb	r3, [r3, #12]
 801165a:	330a      	adds	r3, #10
 801165c:	b2da      	uxtb	r2, r3
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011662:	6838      	ldr	r0, [r7, #0]
 8011664:	f7ef fd86 	bl	8001174 <LCD_set_adressing>
	LCD_printA(R,G,B,ADRES);
 8011668:	797a      	ldrb	r2, [r7, #5]
 801166a:	79b9      	ldrb	r1, [r7, #6]
 801166c:	79f8      	ldrb	r0, [r7, #7]
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	f7f0 fac2 	bl	8001bf8 <LCD_printA>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	7b1b      	ldrb	r3, [r3, #12]
 8011678:	330b      	adds	r3, #11
 801167a:	b2da      	uxtb	r2, r3
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	7b1b      	ldrb	r3, [r3, #12]
 8011684:	3314      	adds	r3, #20
 8011686:	b2da      	uxtb	r2, r3
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801168c:	6838      	ldr	r0, [r7, #0]
 801168e:	f7ef fd71 	bl	8001174 <LCD_set_adressing>
	LCD_printN(R,G,B,ADRES);
 8011692:	797a      	ldrb	r2, [r7, #5]
 8011694:	79b9      	ldrb	r1, [r7, #6]
 8011696:	79f8      	ldrb	r0, [r7, #7]
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	f7f0 f805 	bl	80016a8 <LCD_printN>
	ADRES->X0_SET=ADRES->X0_SET+18;
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	7b1b      	ldrb	r3, [r3, #12]
 80116a2:	3312      	adds	r3, #18
 80116a4:	b2da      	uxtb	r2, r3
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+13;
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	7b1b      	ldrb	r3, [r3, #12]
 80116ae:	330d      	adds	r3, #13
 80116b0:	b2da      	uxtb	r2, r3
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80116b6:	6838      	ldr	r0, [r7, #0]
 80116b8:	f7ef fd5c 	bl	8001174 <LCD_set_adressing>
	LCD_printA(R,G,B,ADRES);
 80116bc:	797a      	ldrb	r2, [r7, #5]
 80116be:	79b9      	ldrb	r1, [r7, #6]
 80116c0:	79f8      	ldrb	r0, [r7, #7]
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	f7f0 fa98 	bl	8001bf8 <LCD_printA>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	7b1b      	ldrb	r3, [r3, #12]
 80116cc:	330b      	adds	r3, #11
 80116ce:	b2da      	uxtb	r2, r3
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	7b1b      	ldrb	r3, [r3, #12]
 80116d8:	330a      	adds	r3, #10
 80116da:	b2da      	uxtb	r2, r3
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80116e0:	6838      	ldr	r0, [r7, #0]
 80116e2:	f7ef fd47 	bl	8001174 <LCD_set_adressing>
	LCD_printD(R,G,B,ADRES);
 80116e6:	797a      	ldrb	r2, [r7, #5]
 80116e8:	79b9      	ldrb	r1, [r7, #6]
 80116ea:	79f8      	ldrb	r0, [r7, #7]
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	f7f0 fec7 	bl	8002480 <LCD_printD>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	7b1b      	ldrb	r3, [r3, #12]
 80116f6:	330b      	adds	r3, #11
 80116f8:	b2da      	uxtb	r2, r3
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;;
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	7b1b      	ldrb	r3, [r3, #12]
 8011702:	330a      	adds	r3, #10
 8011704:	b2da      	uxtb	r2, r3
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801170a:	6838      	ldr	r0, [r7, #0]
 801170c:	f7ef fd32 	bl	8001174 <LCD_set_adressing>
	LCD_printC(R,G,B,ADRES);
 8011710:	797a      	ldrb	r2, [r7, #5]
 8011712:	79b9      	ldrb	r1, [r7, #6]
 8011714:	79f8      	ldrb	r0, [r7, #7]
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	f7f0 fd5c 	bl	80021d4 <LCD_printC>
	ADRES->X0_SET=ADRES->X0_SET+11;
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	7b1b      	ldrb	r3, [r3, #12]
 8011720:	330b      	adds	r3, #11
 8011722:	b2da      	uxtb	r2, r3
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	227f      	movs	r2, #127	@ 0x7f
 801172c:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801172e:	6838      	ldr	r0, [r7, #0]
 8011730:	f7ef fd20 	bl	8001174 <LCD_set_adressing>
	LCD_print2(R,G,B,ADRES);
 8011734:	797a      	ldrb	r2, [r7, #5]
 8011736:	79b9      	ldrb	r1, [r7, #6]
 8011738:	79f8      	ldrb	r0, [r7, #7]
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	f7f2 fbdc 	bl	8003ef8 <LCD_print2>




	// 4. S - SEGMENT
	ADRES->X0_SET=0x00;
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	2200      	movs	r2, #0
 8011744:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	7b1b      	ldrb	r3, [r3, #12]
 801174a:	3314      	adds	r3, #20
 801174c:	b2da      	uxtb	r2, r3
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=60;
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	223c      	movs	r2, #60	@ 0x3c
 8011756:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=ADRES->Y0_SET+15;
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	7b5b      	ldrb	r3, [r3, #13]
 801175c:	330f      	adds	r3, #15
 801175e:	b2da      	uxtb	r2, r3
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 8011764:	6838      	ldr	r0, [r7, #0]
 8011766:	f7ef fd05 	bl	8001174 <LCD_set_adressing>
	LCD_printS(R,G,B,ADRES);
 801176a:	797a      	ldrb	r2, [r7, #5]
 801176c:	79b9      	ldrb	r1, [r7, #6]
 801176e:	79f8      	ldrb	r0, [r7, #7]
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	f7f1 fff7 	bl	8003764 <LCD_printS>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	7b1b      	ldrb	r3, [r3, #12]
 801177a:	330b      	adds	r3, #11
 801177c:	b2da      	uxtb	r2, r3
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+13;
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	7b1b      	ldrb	r3, [r3, #12]
 8011786:	330d      	adds	r3, #13
 8011788:	b2da      	uxtb	r2, r3
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801178e:	6838      	ldr	r0, [r7, #0]
 8011790:	f7ef fcf0 	bl	8001174 <LCD_set_adressing>
	LCD_print_myslnik(R,G,B,ADRES);
 8011794:	797a      	ldrb	r2, [r7, #5]
 8011796:	79b9      	ldrb	r1, [r7, #6]
 8011798:	79f8      	ldrb	r0, [r7, #7]
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	f7f3 fbe2 	bl	8004f64 <LCD_print_myslnik>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	7b1b      	ldrb	r3, [r3, #12]
 80117a4:	330b      	adds	r3, #11
 80117a6:	b2da      	uxtb	r2, r3
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	7b1b      	ldrb	r3, [r3, #12]
 80117b0:	330a      	adds	r3, #10
 80117b2:	b2da      	uxtb	r2, r3
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80117b8:	6838      	ldr	r0, [r7, #0]
 80117ba:	f7ef fcdb 	bl	8001174 <LCD_set_adressing>
	LCD_printS(R,G,B,ADRES);
 80117be:	797a      	ldrb	r2, [r7, #5]
 80117c0:	79b9      	ldrb	r1, [r7, #6]
 80117c2:	79f8      	ldrb	r0, [r7, #7]
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	f7f1 ffcd 	bl	8003764 <LCD_printS>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	7b1b      	ldrb	r3, [r3, #12]
 80117ce:	330b      	adds	r3, #11
 80117d0:	b2da      	uxtb	r2, r3
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	7b1b      	ldrb	r3, [r3, #12]
 80117da:	330a      	adds	r3, #10
 80117dc:	b2da      	uxtb	r2, r3
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80117e2:	6838      	ldr	r0, [r7, #0]
 80117e4:	f7ef fcc6 	bl	8001174 <LCD_set_adressing>
	LCD_printE(R,G,B,ADRES);
 80117e8:	797a      	ldrb	r2, [r7, #5]
 80117ea:	79b9      	ldrb	r1, [r7, #6]
 80117ec:	79f8      	ldrb	r0, [r7, #7]
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	f7ef fe48 	bl	8001484 <LCD_printE>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	7b1b      	ldrb	r3, [r3, #12]
 80117f8:	330b      	adds	r3, #11
 80117fa:	b2da      	uxtb	r2, r3
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	7b1b      	ldrb	r3, [r3, #12]
 8011804:	330a      	adds	r3, #10
 8011806:	b2da      	uxtb	r2, r3
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801180c:	6838      	ldr	r0, [r7, #0]
 801180e:	f7ef fcb1 	bl	8001174 <LCD_set_adressing>
	LCD_printG(R,G,B,ADRES);
 8011812:	797a      	ldrb	r2, [r7, #5]
 8011814:	79b9      	ldrb	r1, [r7, #6]
 8011816:	79f8      	ldrb	r0, [r7, #7]
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	f7f0 ffeb 	bl	80027f4 <LCD_printG>
	ADRES->X0_SET=ADRES->X0_SET+11;
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	7b1b      	ldrb	r3, [r3, #12]
 8011822:	330b      	adds	r3, #11
 8011824:	b2da      	uxtb	r2, r3
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	7b1b      	ldrb	r3, [r3, #12]
 801182e:	330a      	adds	r3, #10
 8011830:	b2da      	uxtb	r2, r3
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011836:	6838      	ldr	r0, [r7, #0]
 8011838:	f7ef fc9c 	bl	8001174 <LCD_set_adressing>
	LCD_printM(R,G,B,ADRES);
 801183c:	797a      	ldrb	r2, [r7, #5]
 801183e:	79b9      	ldrb	r1, [r7, #6]
 8011840:	79f8      	ldrb	r0, [r7, #7]
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	f7ef fcd6 	bl	80011f4 <LCD_printM>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	7b1b      	ldrb	r3, [r3, #12]
 801184c:	330b      	adds	r3, #11
 801184e:	b2da      	uxtb	r2, r3
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	7b1b      	ldrb	r3, [r3, #12]
 8011858:	330a      	adds	r3, #10
 801185a:	b2da      	uxtb	r2, r3
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011860:	6838      	ldr	r0, [r7, #0]
 8011862:	f7ef fc87 	bl	8001174 <LCD_set_adressing>
	LCD_printE(R,G,B,ADRES);
 8011866:	797a      	ldrb	r2, [r7, #5]
 8011868:	79b9      	ldrb	r1, [r7, #6]
 801186a:	79f8      	ldrb	r0, [r7, #7]
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	f7ef fe09 	bl	8001484 <LCD_printE>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	7b1b      	ldrb	r3, [r3, #12]
 8011876:	330b      	adds	r3, #11
 8011878:	b2da      	uxtb	r2, r3
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	7b1b      	ldrb	r3, [r3, #12]
 8011882:	330a      	adds	r3, #10
 8011884:	b2da      	uxtb	r2, r3
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801188a:	6838      	ldr	r0, [r7, #0]
 801188c:	f7ef fc72 	bl	8001174 <LCD_set_adressing>
	LCD_printN(R,G,B,ADRES);
 8011890:	797a      	ldrb	r2, [r7, #5]
 8011892:	79b9      	ldrb	r1, [r7, #6]
 8011894:	79f8      	ldrb	r0, [r7, #7]
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	f7ef ff06 	bl	80016a8 <LCD_printN>
	ADRES->X0_SET=ADRES->X0_SET+11;
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	7b1b      	ldrb	r3, [r3, #12]
 80118a0:	330b      	adds	r3, #11
 80118a2:	b2da      	uxtb	r2, r3
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	227f      	movs	r2, #127	@ 0x7f
 80118ac:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80118ae:	6838      	ldr	r0, [r7, #0]
 80118b0:	f7ef fc60 	bl	8001174 <LCD_set_adressing>
	LCD_printT(R,G,B,ADRES);
 80118b4:	797a      	ldrb	r2, [r7, #5]
 80118b6:	79b9      	ldrb	r1, [r7, #6]
 80118b8:	79f8      	ldrb	r0, [r7, #7]
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	f7f2 f90e 	bl	8003adc <LCD_printT>



	// 5. L - LINIJKA
	ADRES->X0_SET=0x00;
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	2200      	movs	r2, #0
 80118c4:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	7b1b      	ldrb	r3, [r3, #12]
 80118ca:	3314      	adds	r3, #20
 80118cc:	b2da      	uxtb	r2, r3
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=75;
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	224b      	movs	r2, #75	@ 0x4b
 80118d6:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=ADRES->Y0_SET+15;
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	7b5b      	ldrb	r3, [r3, #13]
 80118dc:	330f      	adds	r3, #15
 80118de:	b2da      	uxtb	r2, r3
 80118e0:	683b      	ldr	r3, [r7, #0]
 80118e2:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 80118e4:	6838      	ldr	r0, [r7, #0]
 80118e6:	f7ef fc45 	bl	8001174 <LCD_set_adressing>
	LCD_printL(R,G,B,ADRES);
 80118ea:	797a      	ldrb	r2, [r7, #5]
 80118ec:	79b9      	ldrb	r1, [r7, #6]
 80118ee:	79f8      	ldrb	r0, [r7, #7]
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	f7f1 fcc9 	bl	8003288 <LCD_printL>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	7b1b      	ldrb	r3, [r3, #12]
 80118fa:	330b      	adds	r3, #11
 80118fc:	b2da      	uxtb	r2, r3
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+13;
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	7b1b      	ldrb	r3, [r3, #12]
 8011906:	330d      	adds	r3, #13
 8011908:	b2da      	uxtb	r2, r3
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801190e:	6838      	ldr	r0, [r7, #0]
 8011910:	f7ef fc30 	bl	8001174 <LCD_set_adressing>
	LCD_print_myslnik(R,G,B,ADRES);
 8011914:	797a      	ldrb	r2, [r7, #5]
 8011916:	79b9      	ldrb	r1, [r7, #6]
 8011918:	79f8      	ldrb	r0, [r7, #7]
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	f7f3 fb22 	bl	8004f64 <LCD_print_myslnik>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	7b1b      	ldrb	r3, [r3, #12]
 8011924:	330b      	adds	r3, #11
 8011926:	b2da      	uxtb	r2, r3
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	7b1b      	ldrb	r3, [r3, #12]
 8011930:	330a      	adds	r3, #10
 8011932:	b2da      	uxtb	r2, r3
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011938:	6838      	ldr	r0, [r7, #0]
 801193a:	f7ef fc1b 	bl	8001174 <LCD_set_adressing>
	LCD_printL(R,G,B,ADRES);
 801193e:	797a      	ldrb	r2, [r7, #5]
 8011940:	79b9      	ldrb	r1, [r7, #6]
 8011942:	79f8      	ldrb	r0, [r7, #7]
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	f7f1 fc9f 	bl	8003288 <LCD_printL>
	ADRES->X0_SET=ADRES->X0_SET+11;
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	7b1b      	ldrb	r3, [r3, #12]
 801194e:	330b      	adds	r3, #11
 8011950:	b2da      	uxtb	r2, r3
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	7b1b      	ldrb	r3, [r3, #12]
 801195a:	330a      	adds	r3, #10
 801195c:	b2da      	uxtb	r2, r3
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011962:	6838      	ldr	r0, [r7, #0]
 8011964:	f7ef fc06 	bl	8001174 <LCD_set_adressing>
	LCD_printI(R,G,B,ADRES);
 8011968:	797a      	ldrb	r2, [r7, #5]
 801196a:	79b9      	ldrb	r1, [r7, #6]
 801196c:	79f8      	ldrb	r0, [r7, #7]
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	f7f1 f8ac 	bl	8002acc <LCD_printI>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8011974:	683b      	ldr	r3, [r7, #0]
 8011976:	7b1b      	ldrb	r3, [r3, #12]
 8011978:	330b      	adds	r3, #11
 801197a:	b2da      	uxtb	r2, r3
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	7b1b      	ldrb	r3, [r3, #12]
 8011984:	330a      	adds	r3, #10
 8011986:	b2da      	uxtb	r2, r3
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801198c:	6838      	ldr	r0, [r7, #0]
 801198e:	f7ef fbf1 	bl	8001174 <LCD_set_adressing>
	LCD_printN(R,G,B,ADRES);
 8011992:	797a      	ldrb	r2, [r7, #5]
 8011994:	79b9      	ldrb	r1, [r7, #6]
 8011996:	79f8      	ldrb	r0, [r7, #7]
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	f7ef fe85 	bl	80016a8 <LCD_printN>
	ADRES->X0_SET=ADRES->X0_SET+11;
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	7b1b      	ldrb	r3, [r3, #12]
 80119a2:	330b      	adds	r3, #11
 80119a4:	b2da      	uxtb	r2, r3
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	7b1b      	ldrb	r3, [r3, #12]
 80119ae:	330a      	adds	r3, #10
 80119b0:	b2da      	uxtb	r2, r3
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80119b6:	6838      	ldr	r0, [r7, #0]
 80119b8:	f7ef fbdc 	bl	8001174 <LCD_set_adressing>
	LCD_printI(R,G,B,ADRES);
 80119bc:	797a      	ldrb	r2, [r7, #5]
 80119be:	79b9      	ldrb	r1, [r7, #6]
 80119c0:	79f8      	ldrb	r0, [r7, #7]
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	f7f1 f882 	bl	8002acc <LCD_printI>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	7b1b      	ldrb	r3, [r3, #12]
 80119cc:	330b      	adds	r3, #11
 80119ce:	b2da      	uxtb	r2, r3
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	7b1b      	ldrb	r3, [r3, #12]
 80119d8:	330a      	adds	r3, #10
 80119da:	b2da      	uxtb	r2, r3
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80119e0:	6838      	ldr	r0, [r7, #0]
 80119e2:	f7ef fbc7 	bl	8001174 <LCD_set_adressing>
	LCD_printJ(R,G,B,ADRES);
 80119e6:	797a      	ldrb	r2, [r7, #5]
 80119e8:	79b9      	ldrb	r1, [r7, #6]
 80119ea:	79f8      	ldrb	r0, [r7, #7]
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	f7f1 f95f 	bl	8002cb0 <LCD_printJ>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	7b1b      	ldrb	r3, [r3, #12]
 80119f6:	330b      	adds	r3, #11
 80119f8:	b2da      	uxtb	r2, r3
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	7b1b      	ldrb	r3, [r3, #12]
 8011a02:	330a      	adds	r3, #10
 8011a04:	b2da      	uxtb	r2, r3
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011a0a:	6838      	ldr	r0, [r7, #0]
 8011a0c:	f7ef fbb2 	bl	8001174 <LCD_set_adressing>
	LCD_printK(R,G,B,ADRES);
 8011a10:	797a      	ldrb	r2, [r7, #5]
 8011a12:	79b9      	ldrb	r1, [r7, #6]
 8011a14:	79f8      	ldrb	r0, [r7, #7]
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	f7f1 fa72 	bl	8002f00 <LCD_printK>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	7b1b      	ldrb	r3, [r3, #12]
 8011a20:	330b      	adds	r3, #11
 8011a22:	b2da      	uxtb	r2, r3
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	227f      	movs	r2, #127	@ 0x7f
 8011a2c:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011a2e:	6838      	ldr	r0, [r7, #0]
 8011a30:	f7ef fba0 	bl	8001174 <LCD_set_adressing>
	LCD_printA(R,G,B,ADRES);
 8011a34:	797a      	ldrb	r2, [r7, #5]
 8011a36:	79b9      	ldrb	r1, [r7, #6]
 8011a38:	79f8      	ldrb	r0, [r7, #7]
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	f7f0 f8dc 	bl	8001bf8 <LCD_printA>
	ADRES->Y0_SET=90;
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	225a      	movs	r2, #90	@ 0x5a
 8011a44:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=159;
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	229f      	movs	r2, #159	@ 0x9f
 8011a4a:	73da      	strb	r2, [r3, #15]
	ADRES->X0_SET=0;
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	2200      	movs	r2, #0
 8011a50:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	227f      	movs	r2, #127	@ 0x7f
 8011a56:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011a58:	6838      	ldr	r0, [r7, #0]
 8011a5a:	f7ef fb8b 	bl	8001174 <LCD_set_adressing>
	DC_ON();
 8011a5e:	f7ef faf7 	bl	8001050 <DC_ON>
	CS_OFF();
 8011a62:	f7ef faea 	bl	800103a <CS_OFF>
	for(uint32_t i=0;i<((159-90)*127);i++)
 8011a66:	2300      	movs	r3, #0
 8011a68:	613b      	str	r3, [r7, #16]
 8011a6a:	e00a      	b.n	8011a82 <LCD_printMENU+0xa12>
	{
		HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8011a6c:	f107 010c 	add.w	r1, r7, #12
 8011a70:	f04f 33ff 	mov.w	r3, #4294967295
 8011a74:	2202      	movs	r2, #2
 8011a76:	4808      	ldr	r0, [pc, #32]	@ (8011a98 <LCD_printMENU+0xa28>)
 8011a78:	f006 fe41 	bl	80186fe <HAL_SPI_Transmit>
	for(uint32_t i=0;i<((159-90)*127);i++)
 8011a7c:	693b      	ldr	r3, [r7, #16]
 8011a7e:	3301      	adds	r3, #1
 8011a80:	613b      	str	r3, [r7, #16]
 8011a82:	693b      	ldr	r3, [r7, #16]
 8011a84:	f242 223a 	movw	r2, #8762	@ 0x223a
 8011a88:	4293      	cmp	r3, r2
 8011a8a:	d9ef      	bls.n	8011a6c <LCD_printMENU+0x9fc>
	}
	CS_ON();
 8011a8c:	f7ef faca 	bl	8001024 <CS_ON>
	//LCD_komenda(ADRES->DISPLAYON);
}
 8011a90:	bf00      	nop
 8011a92:	3718      	adds	r7, #24
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}
 8011a98:	200004a4 	.word	0x200004a4

08011a9c <LCD_print_tryb_diody>:

void LCD_print_tryb_diody(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b086      	sub	sp, #24
 8011aa0:	af02      	add	r7, sp, #8
 8011aa2:	603b      	str	r3, [r7, #0]
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	71fb      	strb	r3, [r7, #7]
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	71bb      	strb	r3, [r7, #6]
 8011aac:	4613      	mov	r3, r2
 8011aae:	717b      	strb	r3, [r7, #5]
	uint8_t fbyte=0x00;
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8011ab8:	7bfa      	ldrb	r2, [r7, #15]
 8011aba:	79fb      	ldrb	r3, [r7, #7]
 8011abc:	4053      	eors	r3, r2
 8011abe:	b2db      	uxtb	r3, r3
 8011ac0:	00db      	lsls	r3, r3, #3
 8011ac2:	b25a      	sxtb	r2, r3
 8011ac4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011ac8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011acc:	b25b      	sxtb	r3, r3
 8011ace:	4053      	eors	r3, r2
 8011ad0:	b25b      	sxtb	r3, r3
 8011ad2:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8011ad4:	7bba      	ldrb	r2, [r7, #14]
 8011ad6:	79bb      	ldrb	r3, [r7, #6]
 8011ad8:	f003 0307 	and.w	r3, r3, #7
 8011adc:	4053      	eors	r3, r2
 8011ade:	015b      	lsls	r3, r3, #5
 8011ae0:	b25a      	sxtb	r2, r3
 8011ae2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8011ae6:	4053      	eors	r3, r2
 8011ae8:	b25b      	sxtb	r3, r3
 8011aea:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8011aec:	7bfb      	ldrb	r3, [r7, #15]
 8011aee:	733b      	strb	r3, [r7, #12]
 8011af0:	7bbb      	ldrb	r3, [r7, #14]
 8011af2:	737b      	strb	r3, [r7, #13]

	// 1 dioda
	ADRES->X0_SET=0x00;
 8011af4:	683b      	ldr	r3, [r7, #0]
 8011af6:	2200      	movs	r2, #0
 8011af8:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	7b1b      	ldrb	r3, [r3, #12]
 8011afe:	3314      	adds	r3, #20
 8011b00:	b2da      	uxtb	r2, r3
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=0x00;
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	2200      	movs	r2, #0
 8011b0a:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=ADRES->Y0_SET+25;
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	7b5b      	ldrb	r3, [r3, #13]
 8011b10:	3319      	adds	r3, #25
 8011b12:	b2da      	uxtb	r2, r3
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 8011b18:	6838      	ldr	r0, [r7, #0]
 8011b1a:	f7ef fb2b 	bl	8001174 <LCD_set_adressing>
	LCD_print1(1,1,1,ADRES);
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	2201      	movs	r2, #1
 8011b22:	2101      	movs	r1, #1
 8011b24:	2001      	movs	r0, #1
 8011b26:	f7f2 f8cb 	bl	8003cc0 <LCD_print1>
	ADRES->X0_SET=ADRES->X0_SET+21;
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	7b1b      	ldrb	r3, [r3, #12]
 8011b2e:	3315      	adds	r3, #21
 8011b30:	b2da      	uxtb	r2, r3
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	227f      	movs	r2, #127	@ 0x7f
 8011b3a:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011b3c:	6838      	ldr	r0, [r7, #0]
 8011b3e:	f7ef fb19 	bl	8001174 <LCD_set_adressing>
	if(HAL_GPIO_ReadPin(GPIOC, Czerwony_1_Pin)==SET)
 8011b42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011b46:	48ab      	ldr	r0, [pc, #684]	@ (8011df4 <LCD_print_tryb_diody+0x358>)
 8011b48:	f005 f9e6 	bl	8016f18 <HAL_GPIO_ReadPin>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b01      	cmp	r3, #1
 8011b50:	d108      	bne.n	8011b64 <LCD_print_tryb_diody+0xc8>
	{
		LCD_printdioda(1,1,1,ADRES,TRUE);
 8011b52:	2301      	movs	r3, #1
 8011b54:	9300      	str	r3, [sp, #0]
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	2201      	movs	r2, #1
 8011b5a:	2101      	movs	r1, #1
 8011b5c:	2001      	movs	r0, #1
 8011b5e:	f7fe fe85 	bl	801086c <LCD_printdioda>
 8011b62:	e007      	b.n	8011b74 <LCD_print_tryb_diody+0xd8>
	}
	else
	{
		LCD_printdioda(1,1,1,ADRES,FALSE);
 8011b64:	2300      	movs	r3, #0
 8011b66:	9300      	str	r3, [sp, #0]
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	2201      	movs	r2, #1
 8011b6c:	2101      	movs	r1, #1
 8011b6e:	2001      	movs	r0, #1
 8011b70:	f7fe fe7c 	bl	801086c <LCD_printdioda>
	}

	// 2 dioda
	ADRES->X0_SET=0x00;
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	2200      	movs	r2, #0
 8011b78:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	7b1b      	ldrb	r3, [r3, #12]
 8011b7e:	3314      	adds	r3, #20
 8011b80:	b2da      	uxtb	r2, r3
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=25;
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	2219      	movs	r2, #25
 8011b8a:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=ADRES->Y0_SET+25;
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	7b5b      	ldrb	r3, [r3, #13]
 8011b90:	3319      	adds	r3, #25
 8011b92:	b2da      	uxtb	r2, r3
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 8011b98:	6838      	ldr	r0, [r7, #0]
 8011b9a:	f7ef faeb 	bl	8001174 <LCD_set_adressing>
	LCD_print2(1,1,1,ADRES);
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	2201      	movs	r2, #1
 8011ba2:	2101      	movs	r1, #1
 8011ba4:	2001      	movs	r0, #1
 8011ba6:	f7f2 f9a7 	bl	8003ef8 <LCD_print2>
	ADRES->X0_SET=ADRES->X0_SET+21;
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	7b1b      	ldrb	r3, [r3, #12]
 8011bae:	3315      	adds	r3, #21
 8011bb0:	b2da      	uxtb	r2, r3
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	227f      	movs	r2, #127	@ 0x7f
 8011bba:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011bbc:	6838      	ldr	r0, [r7, #0]
 8011bbe:	f7ef fad9 	bl	8001174 <LCD_set_adressing>
	if(HAL_GPIO_ReadPin(GPIOC, Zolty_1_Pin)==SET)
 8011bc2:	2140      	movs	r1, #64	@ 0x40
 8011bc4:	488b      	ldr	r0, [pc, #556]	@ (8011df4 <LCD_print_tryb_diody+0x358>)
 8011bc6:	f005 f9a7 	bl	8016f18 <HAL_GPIO_ReadPin>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	2b01      	cmp	r3, #1
 8011bce:	d108      	bne.n	8011be2 <LCD_print_tryb_diody+0x146>
	{
		LCD_printdioda(1,1,1,ADRES,TRUE);
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	9300      	str	r3, [sp, #0]
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	2201      	movs	r2, #1
 8011bd8:	2101      	movs	r1, #1
 8011bda:	2001      	movs	r0, #1
 8011bdc:	f7fe fe46 	bl	801086c <LCD_printdioda>
 8011be0:	e007      	b.n	8011bf2 <LCD_print_tryb_diody+0x156>
	}
	else
	{
		LCD_printdioda(1,1,1,ADRES,FALSE);
 8011be2:	2300      	movs	r3, #0
 8011be4:	9300      	str	r3, [sp, #0]
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	2201      	movs	r2, #1
 8011bea:	2101      	movs	r1, #1
 8011bec:	2001      	movs	r0, #1
 8011bee:	f7fe fe3d 	bl	801086c <LCD_printdioda>
	}

	// 3 dioda
	ADRES->X0_SET=0x00;
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	7b1b      	ldrb	r3, [r3, #12]
 8011bfc:	3314      	adds	r3, #20
 8011bfe:	b2da      	uxtb	r2, r3
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=50;
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	2232      	movs	r2, #50	@ 0x32
 8011c08:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=ADRES->Y0_SET+25;
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	7b5b      	ldrb	r3, [r3, #13]
 8011c0e:	3319      	adds	r3, #25
 8011c10:	b2da      	uxtb	r2, r3
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 8011c16:	6838      	ldr	r0, [r7, #0]
 8011c18:	f7ef faac 	bl	8001174 <LCD_set_adressing>
	LCD_print3(1,1,1,ADRES);
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	2201      	movs	r2, #1
 8011c20:	2101      	movs	r1, #1
 8011c22:	2001      	movs	r0, #1
 8011c24:	f7f2 fb0a 	bl	800423c <LCD_print3>
	ADRES->X0_SET=ADRES->X0_SET+21;
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	7b1b      	ldrb	r3, [r3, #12]
 8011c2c:	3315      	adds	r3, #21
 8011c2e:	b2da      	uxtb	r2, r3
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	227f      	movs	r2, #127	@ 0x7f
 8011c38:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011c3a:	6838      	ldr	r0, [r7, #0]
 8011c3c:	f7ef fa9a 	bl	8001174 <LCD_set_adressing>
	if(HAL_GPIO_ReadPin(GPIOC, Zielony_1_Pin)==SET)
 8011c40:	2120      	movs	r1, #32
 8011c42:	486c      	ldr	r0, [pc, #432]	@ (8011df4 <LCD_print_tryb_diody+0x358>)
 8011c44:	f005 f968 	bl	8016f18 <HAL_GPIO_ReadPin>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	2b01      	cmp	r3, #1
 8011c4c:	d108      	bne.n	8011c60 <LCD_print_tryb_diody+0x1c4>
	{
		LCD_printdioda(1,1,1,ADRES,TRUE);
 8011c4e:	2301      	movs	r3, #1
 8011c50:	9300      	str	r3, [sp, #0]
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	2201      	movs	r2, #1
 8011c56:	2101      	movs	r1, #1
 8011c58:	2001      	movs	r0, #1
 8011c5a:	f7fe fe07 	bl	801086c <LCD_printdioda>
 8011c5e:	e007      	b.n	8011c70 <LCD_print_tryb_diody+0x1d4>
	}
	else
	{
		LCD_printdioda(1,1,1,ADRES,FALSE);
 8011c60:	2300      	movs	r3, #0
 8011c62:	9300      	str	r3, [sp, #0]
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	2201      	movs	r2, #1
 8011c68:	2101      	movs	r1, #1
 8011c6a:	2001      	movs	r0, #1
 8011c6c:	f7fe fdfe 	bl	801086c <LCD_printdioda>
	}

	// 4 dioda
	ADRES->X0_SET=0x00;
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	2200      	movs	r2, #0
 8011c74:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	7b1b      	ldrb	r3, [r3, #12]
 8011c7a:	3314      	adds	r3, #20
 8011c7c:	b2da      	uxtb	r2, r3
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=75;
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	224b      	movs	r2, #75	@ 0x4b
 8011c86:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=ADRES->Y0_SET+25;
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	7b5b      	ldrb	r3, [r3, #13]
 8011c8c:	3319      	adds	r3, #25
 8011c8e:	b2da      	uxtb	r2, r3
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 8011c94:	6838      	ldr	r0, [r7, #0]
 8011c96:	f7ef fa6d 	bl	8001174 <LCD_set_adressing>
	LCD_print4(1,1,1,ADRES);
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	2201      	movs	r2, #1
 8011c9e:	2101      	movs	r1, #1
 8011ca0:	2001      	movs	r0, #1
 8011ca2:	f7f2 fc43 	bl	800452c <LCD_print4>
	ADRES->X0_SET=ADRES->X0_SET+21;
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	7b1b      	ldrb	r3, [r3, #12]
 8011caa:	3315      	adds	r3, #21
 8011cac:	b2da      	uxtb	r2, r3
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	227f      	movs	r2, #127	@ 0x7f
 8011cb6:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011cb8:	6838      	ldr	r0, [r7, #0]
 8011cba:	f7ef fa5b 	bl	8001174 <LCD_set_adressing>
	if(HAL_GPIO_ReadPin(GPIOC, Czerwony_2_Pin)==SET)
 8011cbe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011cc2:	484c      	ldr	r0, [pc, #304]	@ (8011df4 <LCD_print_tryb_diody+0x358>)
 8011cc4:	f005 f928 	bl	8016f18 <HAL_GPIO_ReadPin>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	d108      	bne.n	8011ce0 <LCD_print_tryb_diody+0x244>
	{
		LCD_printdioda(1,1,1,ADRES,TRUE);
 8011cce:	2301      	movs	r3, #1
 8011cd0:	9300      	str	r3, [sp, #0]
 8011cd2:	683b      	ldr	r3, [r7, #0]
 8011cd4:	2201      	movs	r2, #1
 8011cd6:	2101      	movs	r1, #1
 8011cd8:	2001      	movs	r0, #1
 8011cda:	f7fe fdc7 	bl	801086c <LCD_printdioda>
 8011cde:	e007      	b.n	8011cf0 <LCD_print_tryb_diody+0x254>
	}
	else
	{
		LCD_printdioda(1,1,1,ADRES,FALSE);
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	9300      	str	r3, [sp, #0]
 8011ce4:	683b      	ldr	r3, [r7, #0]
 8011ce6:	2201      	movs	r2, #1
 8011ce8:	2101      	movs	r1, #1
 8011cea:	2001      	movs	r0, #1
 8011cec:	f7fe fdbe 	bl	801086c <LCD_printdioda>
	}

	// 5 dioda
	ADRES->X0_SET=0x00;
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	7b1b      	ldrb	r3, [r3, #12]
 8011cfa:	3314      	adds	r3, #20
 8011cfc:	b2da      	uxtb	r2, r3
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=100;
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	2264      	movs	r2, #100	@ 0x64
 8011d06:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=ADRES->Y0_SET+25;
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	7b5b      	ldrb	r3, [r3, #13]
 8011d0c:	3319      	adds	r3, #25
 8011d0e:	b2da      	uxtb	r2, r3
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 8011d14:	6838      	ldr	r0, [r7, #0]
 8011d16:	f7ef fa2d 	bl	8001174 <LCD_set_adressing>
	LCD_print5(1,1,1,ADRES);
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	2201      	movs	r2, #1
 8011d1e:	2101      	movs	r1, #1
 8011d20:	2001      	movs	r0, #1
 8011d22:	f7f2 fd6b 	bl	80047fc <LCD_print5>
	ADRES->X0_SET=ADRES->X0_SET+21;
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	7b1b      	ldrb	r3, [r3, #12]
 8011d2a:	3315      	adds	r3, #21
 8011d2c:	b2da      	uxtb	r2, r3
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	227f      	movs	r2, #127	@ 0x7f
 8011d36:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011d38:	6838      	ldr	r0, [r7, #0]
 8011d3a:	f7ef fa1b 	bl	8001174 <LCD_set_adressing>
	if(HAL_GPIO_ReadPin(GPIOB, Zolty_2_Pin)==SET)
 8011d3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011d42:	482d      	ldr	r0, [pc, #180]	@ (8011df8 <LCD_print_tryb_diody+0x35c>)
 8011d44:	f005 f8e8 	bl	8016f18 <HAL_GPIO_ReadPin>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	2b01      	cmp	r3, #1
 8011d4c:	d108      	bne.n	8011d60 <LCD_print_tryb_diody+0x2c4>
	{
		LCD_printdioda(1,1,1,ADRES,TRUE);
 8011d4e:	2301      	movs	r3, #1
 8011d50:	9300      	str	r3, [sp, #0]
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	2201      	movs	r2, #1
 8011d56:	2101      	movs	r1, #1
 8011d58:	2001      	movs	r0, #1
 8011d5a:	f7fe fd87 	bl	801086c <LCD_printdioda>
 8011d5e:	e007      	b.n	8011d70 <LCD_print_tryb_diody+0x2d4>
	}
	else
	{
		LCD_printdioda(1,1,1,ADRES,FALSE);
 8011d60:	2300      	movs	r3, #0
 8011d62:	9300      	str	r3, [sp, #0]
 8011d64:	683b      	ldr	r3, [r7, #0]
 8011d66:	2201      	movs	r2, #1
 8011d68:	2101      	movs	r1, #1
 8011d6a:	2001      	movs	r0, #1
 8011d6c:	f7fe fd7e 	bl	801086c <LCD_printdioda>
	}

	// 6 dioda
	ADRES->X0_SET=0x00;
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	2200      	movs	r2, #0
 8011d74:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	7b1b      	ldrb	r3, [r3, #12]
 8011d7a:	3314      	adds	r3, #20
 8011d7c:	b2da      	uxtb	r2, r3
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=125;
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	227d      	movs	r2, #125	@ 0x7d
 8011d86:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=159;
 8011d88:	683b      	ldr	r3, [r7, #0]
 8011d8a:	229f      	movs	r2, #159	@ 0x9f
 8011d8c:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 8011d8e:	6838      	ldr	r0, [r7, #0]
 8011d90:	f7ef f9f0 	bl	8001174 <LCD_set_adressing>
	LCD_print6(1,1,1,ADRES);
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	2201      	movs	r2, #1
 8011d98:	2101      	movs	r1, #1
 8011d9a:	2001      	movs	r0, #1
 8011d9c:	f7f2 fe7c 	bl	8004a98 <LCD_print6>
	ADRES->X0_SET=ADRES->X0_SET+21;
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	7b1b      	ldrb	r3, [r3, #12]
 8011da4:	3315      	adds	r3, #21
 8011da6:	b2da      	uxtb	r2, r3
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	227f      	movs	r2, #127	@ 0x7f
 8011db0:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8011db2:	6838      	ldr	r0, [r7, #0]
 8011db4:	f7ef f9de 	bl	8001174 <LCD_set_adressing>
	if(HAL_GPIO_ReadPin(GPIOB, Zielony_2_Pin)==SET)
 8011db8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011dbc:	480e      	ldr	r0, [pc, #56]	@ (8011df8 <LCD_print_tryb_diody+0x35c>)
 8011dbe:	f005 f8ab 	bl	8016f18 <HAL_GPIO_ReadPin>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	d108      	bne.n	8011dda <LCD_print_tryb_diody+0x33e>
	{
		LCD_printdioda(1,1,1,ADRES,TRUE);
 8011dc8:	2301      	movs	r3, #1
 8011dca:	9300      	str	r3, [sp, #0]
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	2201      	movs	r2, #1
 8011dd0:	2101      	movs	r1, #1
 8011dd2:	2001      	movs	r0, #1
 8011dd4:	f7fe fd4a 	bl	801086c <LCD_printdioda>
	}
	else
	{
		LCD_printdioda(1,1,1,ADRES,FALSE);
	}
}
 8011dd8:	e007      	b.n	8011dea <LCD_print_tryb_diody+0x34e>
		LCD_printdioda(1,1,1,ADRES,FALSE);
 8011dda:	2300      	movs	r3, #0
 8011ddc:	9300      	str	r3, [sp, #0]
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	2201      	movs	r2, #1
 8011de2:	2101      	movs	r1, #1
 8011de4:	2001      	movs	r0, #1
 8011de6:	f7fe fd41 	bl	801086c <LCD_printdioda>
}
 8011dea:	bf00      	nop
 8011dec:	3710      	adds	r7, #16
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
 8011df2:	bf00      	nop
 8011df4:	48000800 	.word	0x48000800
 8011df8:	48000400 	.word	0x48000400

08011dfc <LCD_print_tryb_adc_numbers>:

void LCD_print_tryb_adc_numbers(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES, unsigned int num_1, unsigned int num2, bool ADC)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b086      	sub	sp, #24
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	603b      	str	r3, [r7, #0]
 8011e04:	4603      	mov	r3, r0
 8011e06:	71fb      	strb	r3, [r7, #7]
 8011e08:	460b      	mov	r3, r1
 8011e0a:	71bb      	strb	r3, [r7, #6]
 8011e0c:	4613      	mov	r3, r2
 8011e0e:	717b      	strb	r3, [r7, #5]
	uint8_t fbyte=0x00;
 8011e10:	2300      	movs	r3, #0
 8011e12:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 8011e14:	2300      	movs	r3, #0
 8011e16:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 8011e18:	7bfa      	ldrb	r2, [r7, #15]
 8011e1a:	79fb      	ldrb	r3, [r7, #7]
 8011e1c:	4053      	eors	r3, r2
 8011e1e:	b2db      	uxtb	r3, r3
 8011e20:	00db      	lsls	r3, r3, #3
 8011e22:	b25a      	sxtb	r2, r3
 8011e24:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011e28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011e2c:	b25b      	sxtb	r3, r3
 8011e2e:	4053      	eors	r3, r2
 8011e30:	b25b      	sxtb	r3, r3
 8011e32:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8011e34:	7bba      	ldrb	r2, [r7, #14]
 8011e36:	79bb      	ldrb	r3, [r7, #6]
 8011e38:	f003 0307 	and.w	r3, r3, #7
 8011e3c:	4053      	eors	r3, r2
 8011e3e:	015b      	lsls	r3, r3, #5
 8011e40:	b25a      	sxtb	r2, r3
 8011e42:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8011e46:	4053      	eors	r3, r2
 8011e48:	b25b      	sxtb	r3, r3
 8011e4a:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8011e4c:	7bfb      	ldrb	r3, [r7, #15]
 8011e4e:	733b      	strb	r3, [r7, #12]
 8011e50:	7bbb      	ldrb	r3, [r7, #14]
 8011e52:	737b      	strb	r3, [r7, #13]
	// 1 dioda
	if(ADC)
 8011e54:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	f000 8192 	beq.w	8012182 <LCD_print_tryb_adc_numbers+0x386>
	{
		ADRES->X0_SET=0x00;
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	2200      	movs	r2, #0
 8011e62:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+40;
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	7b1b      	ldrb	r3, [r3, #12]
 8011e68:	3328      	adds	r3, #40	@ 0x28
 8011e6a:	b2da      	uxtb	r2, r3
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	739a      	strb	r2, [r3, #14]
		ADRES->Y0_SET=0x00;
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	2200      	movs	r2, #0
 8011e74:	735a      	strb	r2, [r3, #13]
		ADRES->Y_END_SET=ADRES->Y0_SET+60;
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	7b5b      	ldrb	r3, [r3, #13]
 8011e7a:	333c      	adds	r3, #60	@ 0x3c
 8011e7c:	b2da      	uxtb	r2, r3
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	73da      	strb	r2, [r3, #15]
		LCD_set_adressing(ADRES);
 8011e82:	6838      	ldr	r0, [r7, #0]
 8011e84:	f7ef f976 	bl	8001174 <LCD_set_adressing>
		switch(num_1)
 8011e88:	6a3b      	ldr	r3, [r7, #32]
 8011e8a:	2b03      	cmp	r3, #3
 8011e8c:	d826      	bhi.n	8011edc <LCD_print_tryb_adc_numbers+0xe0>
 8011e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8011e94 <LCD_print_tryb_adc_numbers+0x98>)
 8011e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e94:	08011ea5 	.word	0x08011ea5
 8011e98:	08011eb3 	.word	0x08011eb3
 8011e9c:	08011ec1 	.word	0x08011ec1
 8011ea0:	08011ecf 	.word	0x08011ecf
		{
		case 0: 	LCD_print0H(1,1,1,ADRES);
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	2201      	movs	r2, #1
 8011ea8:	2101      	movs	r1, #1
 8011eaa:	2001      	movs	r0, #1
 8011eac:	f7f7 fd0e 	bl	80098cc <LCD_print0H>
					break;
 8011eb0:	e015      	b.n	8011ede <LCD_print_tryb_adc_numbers+0xe2>
		case 1: 	LCD_print1H(1,1,1,ADRES);
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	2201      	movs	r2, #1
 8011eb6:	2101      	movs	r1, #1
 8011eb8:	2001      	movs	r0, #1
 8011eba:	f7f3 fe99 	bl	8005bf0 <LCD_print1H>
					break;
 8011ebe:	e00e      	b.n	8011ede <LCD_print_tryb_adc_numbers+0xe2>
		case 2: 	LCD_print2H(1,1,1,ADRES);
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	2201      	movs	r2, #1
 8011ec4:	2101      	movs	r1, #1
 8011ec6:	2001      	movs	r0, #1
 8011ec8:	f7f4 fa58 	bl	800637c <LCD_print2H>
					break;
 8011ecc:	e007      	b.n	8011ede <LCD_print_tryb_adc_numbers+0xe2>
		case 3: 	LCD_print3H(1,1,1,ADRES);
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	2201      	movs	r2, #1
 8011ed2:	2101      	movs	r1, #1
 8011ed4:	2001      	movs	r0, #1
 8011ed6:	f7f4 ffd3 	bl	8006e80 <LCD_print3H>
					break;
 8011eda:	e000      	b.n	8011ede <LCD_print_tryb_adc_numbers+0xe2>
		default:	 break;
 8011edc:	bf00      	nop
		}

		ADRES->X0_SET=ADRES->X_END_SET;
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	7b9a      	ldrb	r2, [r3, #14]
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+15;
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	7b1b      	ldrb	r3, [r3, #12]
 8011eea:	330f      	adds	r3, #15
 8011eec:	b2da      	uxtb	r2, r3
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 8011ef2:	6838      	ldr	r0, [r7, #0]
 8011ef4:	f7ef f93e 	bl	8001174 <LCD_set_adressing>
		LCD_print_dot(1,1,1,ADRES);
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	2201      	movs	r2, #1
 8011efc:	2101      	movs	r1, #1
 8011efe:	2001      	movs	r0, #1
 8011f00:	f7f2 ff72 	bl	8004de8 <LCD_print_dot>
		ADRES->X0_SET=ADRES->X_END_SET;
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	7b9a      	ldrb	r2, [r3, #14]
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=127;
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	227f      	movs	r2, #127	@ 0x7f
 8011f10:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 8011f12:	6838      	ldr	r0, [r7, #0]
 8011f14:	f7ef f92e 	bl	8001174 <LCD_set_adressing>
		switch(num2)
 8011f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f1a:	2b09      	cmp	r3, #9
 8011f1c:	d85c      	bhi.n	8011fd8 <LCD_print_tryb_adc_numbers+0x1dc>
 8011f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8011f24 <LCD_print_tryb_adc_numbers+0x128>)
 8011f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f24:	08011f4d 	.word	0x08011f4d
 8011f28:	08011f5b 	.word	0x08011f5b
 8011f2c:	08011f69 	.word	0x08011f69
 8011f30:	08011f77 	.word	0x08011f77
 8011f34:	08011f85 	.word	0x08011f85
 8011f38:	08011f93 	.word	0x08011f93
 8011f3c:	08011fa1 	.word	0x08011fa1
 8011f40:	08011faf 	.word	0x08011faf
 8011f44:	08011fbd 	.word	0x08011fbd
 8011f48:	08011fcb 	.word	0x08011fcb
		{
		case 0: 	LCD_print0H(1,1,1,ADRES);
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	2201      	movs	r2, #1
 8011f50:	2101      	movs	r1, #1
 8011f52:	2001      	movs	r0, #1
 8011f54:	f7f7 fcba 	bl	80098cc <LCD_print0H>
					break;
 8011f58:	e03f      	b.n	8011fda <LCD_print_tryb_adc_numbers+0x1de>
		case 1: 	LCD_print1H(1,1,1,ADRES);
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	2201      	movs	r2, #1
 8011f5e:	2101      	movs	r1, #1
 8011f60:	2001      	movs	r0, #1
 8011f62:	f7f3 fe45 	bl	8005bf0 <LCD_print1H>
					break;
 8011f66:	e038      	b.n	8011fda <LCD_print_tryb_adc_numbers+0x1de>
		case 2: 	LCD_print2H(1,1,1,ADRES);
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	2101      	movs	r1, #1
 8011f6e:	2001      	movs	r0, #1
 8011f70:	f7f4 fa04 	bl	800637c <LCD_print2H>
					break;
 8011f74:	e031      	b.n	8011fda <LCD_print_tryb_adc_numbers+0x1de>
		case 3: 	LCD_print3H(1,1,1,ADRES);
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	2201      	movs	r2, #1
 8011f7a:	2101      	movs	r1, #1
 8011f7c:	2001      	movs	r0, #1
 8011f7e:	f7f4 ff7f 	bl	8006e80 <LCD_print3H>
					break;
 8011f82:	e02a      	b.n	8011fda <LCD_print_tryb_adc_numbers+0x1de>
		case 4: 	LCD_print4H(1,1,1,ADRES);
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	2201      	movs	r2, #1
 8011f88:	2101      	movs	r1, #1
 8011f8a:	2001      	movs	r0, #1
 8011f8c:	f7f5 fc20 	bl	80077d0 <LCD_print4H>
					break;
 8011f90:	e023      	b.n	8011fda <LCD_print_tryb_adc_numbers+0x1de>
		case 5: 	LCD_print5H(1,1,1,ADRES);
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	2201      	movs	r2, #1
 8011f96:	2101      	movs	r1, #1
 8011f98:	2001      	movs	r0, #1
 8011f9a:	f7f6 f80b 	bl	8007fb4 <LCD_print5H>
					break;
 8011f9e:	e01c      	b.n	8011fda <LCD_print_tryb_adc_numbers+0x1de>
		case 6: 	LCD_print6H(1,1,1,ADRES);
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	2101      	movs	r1, #1
 8011fa6:	2001      	movs	r0, #1
 8011fa8:	f7f6 fb32 	bl	8008610 <LCD_print6H>
					break;
 8011fac:	e015      	b.n	8011fda <LCD_print_tryb_adc_numbers+0x1de>
		case 7: 	LCD_print7H(1,1,1,ADRES);
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	2201      	movs	r2, #1
 8011fb2:	2101      	movs	r1, #1
 8011fb4:	2001      	movs	r0, #1
 8011fb6:	f7f7 f839 	bl	800902c <LCD_print7H>
					break;
 8011fba:	e00e      	b.n	8011fda <LCD_print_tryb_adc_numbers+0x1de>
		case 8: 	LCD_print8H(1,1,1,ADRES);
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	2201      	movs	r2, #1
 8011fc0:	2101      	movs	r1, #1
 8011fc2:	2001      	movs	r0, #1
 8011fc4:	f7f3 f852 	bl	800506c <LCD_print8H>
					break;
 8011fc8:	e007      	b.n	8011fda <LCD_print_tryb_adc_numbers+0x1de>
		case 9: 	LCD_print9H(1,1,1,ADRES);
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	2201      	movs	r2, #1
 8011fce:	2101      	movs	r1, #1
 8011fd0:	2001      	movs	r0, #1
 8011fd2:	f7f8 f8ab 	bl	800a12c <LCD_print9H>
					break;
 8011fd6:	e000      	b.n	8011fda <LCD_print_tryb_adc_numbers+0x1de>
		default:	 break;
 8011fd8:	bf00      	nop
		}


		ADRES->X0_SET=0x00;
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	2200      	movs	r2, #0
 8011fde:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+11;
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	7b1b      	ldrb	r3, [r3, #12]
 8011fe4:	330b      	adds	r3, #11
 8011fe6:	b2da      	uxtb	r2, r3
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	739a      	strb	r2, [r3, #14]
		ADRES->Y0_SET=60;
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	223c      	movs	r2, #60	@ 0x3c
 8011ff0:	735a      	strb	r2, [r3, #13]
		ADRES->Y_END_SET=ADRES->Y0_SET+20;
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	7b5b      	ldrb	r3, [r3, #13]
 8011ff6:	3314      	adds	r3, #20
 8011ff8:	b2da      	uxtb	r2, r3
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	73da      	strb	r2, [r3, #15]
		LCD_set_adressing(ADRES);
 8011ffe:	6838      	ldr	r0, [r7, #0]
 8012000:	f7ef f8b8 	bl	8001174 <LCD_set_adressing>
		LCD_printS(1,1,1,ADRES);
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	2201      	movs	r2, #1
 8012008:	2101      	movs	r1, #1
 801200a:	2001      	movs	r0, #1
 801200c:	f7f1 fbaa 	bl	8003764 <LCD_printS>
		ADRES->X0_SET=ADRES->X0_SET+11;
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	7b1b      	ldrb	r3, [r3, #12]
 8012014:	330b      	adds	r3, #11
 8012016:	b2da      	uxtb	r2, r3
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+10;
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	7b1b      	ldrb	r3, [r3, #12]
 8012020:	330a      	adds	r3, #10
 8012022:	b2da      	uxtb	r2, r3
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 8012028:	6838      	ldr	r0, [r7, #0]
 801202a:	f7ef f8a3 	bl	8001174 <LCD_set_adressing>
		LCD_printT(1,1,1,ADRES);
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	2201      	movs	r2, #1
 8012032:	2101      	movs	r1, #1
 8012034:	2001      	movs	r0, #1
 8012036:	f7f1 fd51 	bl	8003adc <LCD_printT>
		ADRES->X0_SET=ADRES->X0_SET+11;
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	7b1b      	ldrb	r3, [r3, #12]
 801203e:	330b      	adds	r3, #11
 8012040:	b2da      	uxtb	r2, r3
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+10;
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	7b1b      	ldrb	r3, [r3, #12]
 801204a:	330a      	adds	r3, #10
 801204c:	b2da      	uxtb	r2, r3
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 8012052:	6838      	ldr	r0, [r7, #0]
 8012054:	f7ef f88e 	bl	8001174 <LCD_set_adressing>
		LCD_printA(1,1,1,ADRES);
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	2201      	movs	r2, #1
 801205c:	2101      	movs	r1, #1
 801205e:	2001      	movs	r0, #1
 8012060:	f7ef fdca 	bl	8001bf8 <LCD_printA>
		ADRES->X0_SET=ADRES->X0_SET+11;
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	7b1b      	ldrb	r3, [r3, #12]
 8012068:	330b      	adds	r3, #11
 801206a:	b2da      	uxtb	r2, r3
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+20;
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	7b1b      	ldrb	r3, [r3, #12]
 8012074:	3314      	adds	r3, #20
 8012076:	b2da      	uxtb	r2, r3
 8012078:	683b      	ldr	r3, [r7, #0]
 801207a:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 801207c:	6838      	ldr	r0, [r7, #0]
 801207e:	f7ef f879 	bl	8001174 <LCD_set_adressing>
		LCD_printN(1,1,1,ADRES);
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	2201      	movs	r2, #1
 8012086:	2101      	movs	r1, #1
 8012088:	2001      	movs	r0, #1
 801208a:	f7ef fb0d 	bl	80016a8 <LCD_printN>
		ADRES->X0_SET=ADRES->X0_SET+18;
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	7b1b      	ldrb	r3, [r3, #12]
 8012092:	3312      	adds	r3, #18
 8012094:	b2da      	uxtb	r2, r3
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+13;
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	7b1b      	ldrb	r3, [r3, #12]
 801209e:	330d      	adds	r3, #13
 80120a0:	b2da      	uxtb	r2, r3
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 80120a6:	6838      	ldr	r0, [r7, #0]
 80120a8:	f7ef f864 	bl	8001174 <LCD_set_adressing>
		LCD_printA(1,1,1,ADRES);
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	2201      	movs	r2, #1
 80120b0:	2101      	movs	r1, #1
 80120b2:	2001      	movs	r0, #1
 80120b4:	f7ef fda0 	bl	8001bf8 <LCD_printA>
		ADRES->X0_SET=ADRES->X0_SET+11;
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	7b1b      	ldrb	r3, [r3, #12]
 80120bc:	330b      	adds	r3, #11
 80120be:	b2da      	uxtb	r2, r3
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+10;
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	7b1b      	ldrb	r3, [r3, #12]
 80120c8:	330a      	adds	r3, #10
 80120ca:	b2da      	uxtb	r2, r3
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 80120d0:	6838      	ldr	r0, [r7, #0]
 80120d2:	f7ef f84f 	bl	8001174 <LCD_set_adressing>
		LCD_printD(1,1,1,ADRES);
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	2201      	movs	r2, #1
 80120da:	2101      	movs	r1, #1
 80120dc:	2001      	movs	r0, #1
 80120de:	f7f0 f9cf 	bl	8002480 <LCD_printD>
		ADRES->X0_SET=ADRES->X0_SET+11;
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	7b1b      	ldrb	r3, [r3, #12]
 80120e6:	330b      	adds	r3, #11
 80120e8:	b2da      	uxtb	r2, r3
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+10;;
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	7b1b      	ldrb	r3, [r3, #12]
 80120f2:	330a      	adds	r3, #10
 80120f4:	b2da      	uxtb	r2, r3
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 80120fa:	6838      	ldr	r0, [r7, #0]
 80120fc:	f7ef f83a 	bl	8001174 <LCD_set_adressing>
		LCD_printC(1,1,1,ADRES);
 8012100:	683b      	ldr	r3, [r7, #0]
 8012102:	2201      	movs	r2, #1
 8012104:	2101      	movs	r1, #1
 8012106:	2001      	movs	r0, #1
 8012108:	f7f0 f864 	bl	80021d4 <LCD_printC>
		ADRES->X0_SET=ADRES->X0_SET+11;
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	7b1b      	ldrb	r3, [r3, #12]
 8012110:	330b      	adds	r3, #11
 8012112:	b2da      	uxtb	r2, r3
 8012114:	683b      	ldr	r3, [r7, #0]
 8012116:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=127;
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	227f      	movs	r2, #127	@ 0x7f
 801211c:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 801211e:	6838      	ldr	r0, [r7, #0]
 8012120:	f7ef f828 	bl	8001174 <LCD_set_adressing>
		LCD_print1(1,1,1,ADRES);
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	2201      	movs	r2, #1
 8012128:	2101      	movs	r1, #1
 801212a:	2001      	movs	r0, #1
 801212c:	f7f1 fdc8 	bl	8003cc0 <LCD_print1>
		ADRES->X0_SET=0;
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	2200      	movs	r2, #0
 8012134:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=127;
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	227f      	movs	r2, #127	@ 0x7f
 801213a:	739a      	strb	r2, [r3, #14]
		ADRES->Y0_SET=80;
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	2250      	movs	r2, #80	@ 0x50
 8012140:	735a      	strb	r2, [r3, #13]
		ADRES->Y_END_SET=159;
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	229f      	movs	r2, #159	@ 0x9f
 8012146:	73da      	strb	r2, [r3, #15]
		LCD_set_adressing(ADRES);
 8012148:	6838      	ldr	r0, [r7, #0]
 801214a:	f7ef f813 	bl	8001174 <LCD_set_adressing>
		DC_ON();
 801214e:	f7ee ff7f 	bl	8001050 <DC_ON>
		CS_OFF();
 8012152:	f7ee ff72 	bl	800103a <CS_OFF>
		for(uint32_t i=0;i<((159-60)*127);i++)
 8012156:	2300      	movs	r3, #0
 8012158:	617b      	str	r3, [r7, #20]
 801215a:	e00a      	b.n	8012172 <LCD_print_tryb_adc_numbers+0x376>
		{
			HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 801215c:	f107 010c 	add.w	r1, r7, #12
 8012160:	f04f 33ff 	mov.w	r3, #4294967295
 8012164:	2202      	movs	r2, #2
 8012166:	4865      	ldr	r0, [pc, #404]	@ (80122fc <LCD_print_tryb_adc_numbers+0x500>)
 8012168:	f006 fac9 	bl	80186fe <HAL_SPI_Transmit>
		for(uint32_t i=0;i<((159-60)*127);i++)
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	3301      	adds	r3, #1
 8012170:	617b      	str	r3, [r7, #20]
 8012172:	697b      	ldr	r3, [r7, #20]
 8012174:	f243 121c 	movw	r2, #12572	@ 0x311c
 8012178:	4293      	cmp	r3, r2
 801217a:	d9ef      	bls.n	801215c <LCD_print_tryb_adc_numbers+0x360>
		}
		CS_ON();
 801217c:	f7ee ff52 	bl	8001024 <CS_ON>
			HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
		}
		CS_ON();
	}

}
 8012180:	e192      	b.n	80124a8 <LCD_print_tryb_adc_numbers+0x6ac>
		ADRES->X0_SET=0x00;
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	2200      	movs	r2, #0
 8012186:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+40;
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	7b1b      	ldrb	r3, [r3, #12]
 801218c:	3328      	adds	r3, #40	@ 0x28
 801218e:	b2da      	uxtb	r2, r3
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	739a      	strb	r2, [r3, #14]
		ADRES->Y0_SET=0x00;
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	2200      	movs	r2, #0
 8012198:	735a      	strb	r2, [r3, #13]
		ADRES->Y_END_SET=ADRES->Y0_SET+60;
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	7b5b      	ldrb	r3, [r3, #13]
 801219e:	333c      	adds	r3, #60	@ 0x3c
 80121a0:	b2da      	uxtb	r2, r3
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	73da      	strb	r2, [r3, #15]
		LCD_set_adressing(ADRES);
 80121a6:	6838      	ldr	r0, [r7, #0]
 80121a8:	f7ee ffe4 	bl	8001174 <LCD_set_adressing>
		switch(num_1)
 80121ac:	6a3b      	ldr	r3, [r7, #32]
 80121ae:	2b03      	cmp	r3, #3
 80121b0:	d826      	bhi.n	8012200 <LCD_print_tryb_adc_numbers+0x404>
 80121b2:	a201      	add	r2, pc, #4	@ (adr r2, 80121b8 <LCD_print_tryb_adc_numbers+0x3bc>)
 80121b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121b8:	080121c9 	.word	0x080121c9
 80121bc:	080121d7 	.word	0x080121d7
 80121c0:	080121e5 	.word	0x080121e5
 80121c4:	080121f3 	.word	0x080121f3
		case 0: 	LCD_print0H(1,1,1,ADRES);
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	2201      	movs	r2, #1
 80121cc:	2101      	movs	r1, #1
 80121ce:	2001      	movs	r0, #1
 80121d0:	f7f7 fb7c 	bl	80098cc <LCD_print0H>
					break;
 80121d4:	e015      	b.n	8012202 <LCD_print_tryb_adc_numbers+0x406>
		case 1: 	LCD_print1H(1,1,1,ADRES);
 80121d6:	683b      	ldr	r3, [r7, #0]
 80121d8:	2201      	movs	r2, #1
 80121da:	2101      	movs	r1, #1
 80121dc:	2001      	movs	r0, #1
 80121de:	f7f3 fd07 	bl	8005bf0 <LCD_print1H>
					break;
 80121e2:	e00e      	b.n	8012202 <LCD_print_tryb_adc_numbers+0x406>
		case 2: 	LCD_print2H(1,1,1,ADRES);
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	2201      	movs	r2, #1
 80121e8:	2101      	movs	r1, #1
 80121ea:	2001      	movs	r0, #1
 80121ec:	f7f4 f8c6 	bl	800637c <LCD_print2H>
					break;
 80121f0:	e007      	b.n	8012202 <LCD_print_tryb_adc_numbers+0x406>
		case 3: 	LCD_print3H(1,1,1,ADRES);
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	2201      	movs	r2, #1
 80121f6:	2101      	movs	r1, #1
 80121f8:	2001      	movs	r0, #1
 80121fa:	f7f4 fe41 	bl	8006e80 <LCD_print3H>
					break;
 80121fe:	e000      	b.n	8012202 <LCD_print_tryb_adc_numbers+0x406>
		default:	 break;
 8012200:	bf00      	nop
		ADRES->X0_SET=ADRES->X_END_SET;
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	7b9a      	ldrb	r2, [r3, #14]
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+15;
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	7b1b      	ldrb	r3, [r3, #12]
 801220e:	330f      	adds	r3, #15
 8012210:	b2da      	uxtb	r2, r3
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 8012216:	6838      	ldr	r0, [r7, #0]
 8012218:	f7ee ffac 	bl	8001174 <LCD_set_adressing>
		LCD_print_dot(1,1,1,ADRES);
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	2201      	movs	r2, #1
 8012220:	2101      	movs	r1, #1
 8012222:	2001      	movs	r0, #1
 8012224:	f7f2 fde0 	bl	8004de8 <LCD_print_dot>
		ADRES->X0_SET=ADRES->X_END_SET;
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	7b9a      	ldrb	r2, [r3, #14]
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=127;
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	227f      	movs	r2, #127	@ 0x7f
 8012234:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 8012236:	6838      	ldr	r0, [r7, #0]
 8012238:	f7ee ff9c 	bl	8001174 <LCD_set_adressing>
		switch(num2)
 801223c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801223e:	2b09      	cmp	r3, #9
 8012240:	d85e      	bhi.n	8012300 <LCD_print_tryb_adc_numbers+0x504>
 8012242:	a201      	add	r2, pc, #4	@ (adr r2, 8012248 <LCD_print_tryb_adc_numbers+0x44c>)
 8012244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012248:	08012271 	.word	0x08012271
 801224c:	0801227f 	.word	0x0801227f
 8012250:	0801228d 	.word	0x0801228d
 8012254:	0801229b 	.word	0x0801229b
 8012258:	080122a9 	.word	0x080122a9
 801225c:	080122b7 	.word	0x080122b7
 8012260:	080122c5 	.word	0x080122c5
 8012264:	080122d3 	.word	0x080122d3
 8012268:	080122e1 	.word	0x080122e1
 801226c:	080122ef 	.word	0x080122ef
		case 0: 	LCD_print0H(1,1,1,ADRES);
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	2201      	movs	r2, #1
 8012274:	2101      	movs	r1, #1
 8012276:	2001      	movs	r0, #1
 8012278:	f7f7 fb28 	bl	80098cc <LCD_print0H>
					break;
 801227c:	e041      	b.n	8012302 <LCD_print_tryb_adc_numbers+0x506>
		case 1: 	LCD_print1H(1,1,1,ADRES);
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	2201      	movs	r2, #1
 8012282:	2101      	movs	r1, #1
 8012284:	2001      	movs	r0, #1
 8012286:	f7f3 fcb3 	bl	8005bf0 <LCD_print1H>
					break;
 801228a:	e03a      	b.n	8012302 <LCD_print_tryb_adc_numbers+0x506>
		case 2: 	LCD_print2H(1,1,1,ADRES);
 801228c:	683b      	ldr	r3, [r7, #0]
 801228e:	2201      	movs	r2, #1
 8012290:	2101      	movs	r1, #1
 8012292:	2001      	movs	r0, #1
 8012294:	f7f4 f872 	bl	800637c <LCD_print2H>
					break;
 8012298:	e033      	b.n	8012302 <LCD_print_tryb_adc_numbers+0x506>
		case 3: 	LCD_print3H(1,1,1,ADRES);
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	2201      	movs	r2, #1
 801229e:	2101      	movs	r1, #1
 80122a0:	2001      	movs	r0, #1
 80122a2:	f7f4 fded 	bl	8006e80 <LCD_print3H>
					break;
 80122a6:	e02c      	b.n	8012302 <LCD_print_tryb_adc_numbers+0x506>
		case 4: 	LCD_print4H(1,1,1,ADRES);
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	2201      	movs	r2, #1
 80122ac:	2101      	movs	r1, #1
 80122ae:	2001      	movs	r0, #1
 80122b0:	f7f5 fa8e 	bl	80077d0 <LCD_print4H>
					break;
 80122b4:	e025      	b.n	8012302 <LCD_print_tryb_adc_numbers+0x506>
		case 5: 	LCD_print5H(1,1,1,ADRES);
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	2201      	movs	r2, #1
 80122ba:	2101      	movs	r1, #1
 80122bc:	2001      	movs	r0, #1
 80122be:	f7f5 fe79 	bl	8007fb4 <LCD_print5H>
					break;
 80122c2:	e01e      	b.n	8012302 <LCD_print_tryb_adc_numbers+0x506>
		case 6: 	LCD_print6H(1,1,1,ADRES);
 80122c4:	683b      	ldr	r3, [r7, #0]
 80122c6:	2201      	movs	r2, #1
 80122c8:	2101      	movs	r1, #1
 80122ca:	2001      	movs	r0, #1
 80122cc:	f7f6 f9a0 	bl	8008610 <LCD_print6H>
					break;
 80122d0:	e017      	b.n	8012302 <LCD_print_tryb_adc_numbers+0x506>
		case 7: 	LCD_print7H(1,1,1,ADRES);
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	2201      	movs	r2, #1
 80122d6:	2101      	movs	r1, #1
 80122d8:	2001      	movs	r0, #1
 80122da:	f7f6 fea7 	bl	800902c <LCD_print7H>
					break;
 80122de:	e010      	b.n	8012302 <LCD_print_tryb_adc_numbers+0x506>
		case 8: 	LCD_print8H(1,1,1,ADRES);
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	2201      	movs	r2, #1
 80122e4:	2101      	movs	r1, #1
 80122e6:	2001      	movs	r0, #1
 80122e8:	f7f2 fec0 	bl	800506c <LCD_print8H>
					break;
 80122ec:	e009      	b.n	8012302 <LCD_print_tryb_adc_numbers+0x506>
		case 9: 	LCD_print9H(1,1,1,ADRES);
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	2201      	movs	r2, #1
 80122f2:	2101      	movs	r1, #1
 80122f4:	2001      	movs	r0, #1
 80122f6:	f7f7 ff19 	bl	800a12c <LCD_print9H>
					break;
 80122fa:	e002      	b.n	8012302 <LCD_print_tryb_adc_numbers+0x506>
 80122fc:	200004a4 	.word	0x200004a4
		default:	 break;
 8012300:	bf00      	nop
		ADRES->X0_SET=0x00;
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	2200      	movs	r2, #0
 8012306:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+11;
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	7b1b      	ldrb	r3, [r3, #12]
 801230c:	330b      	adds	r3, #11
 801230e:	b2da      	uxtb	r2, r3
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	739a      	strb	r2, [r3, #14]
		ADRES->Y0_SET=60;
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	223c      	movs	r2, #60	@ 0x3c
 8012318:	735a      	strb	r2, [r3, #13]
		ADRES->Y_END_SET=ADRES->Y0_SET+20;
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	7b5b      	ldrb	r3, [r3, #13]
 801231e:	3314      	adds	r3, #20
 8012320:	b2da      	uxtb	r2, r3
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	73da      	strb	r2, [r3, #15]
		LCD_set_adressing(ADRES);
 8012326:	6838      	ldr	r0, [r7, #0]
 8012328:	f7ee ff24 	bl	8001174 <LCD_set_adressing>
		LCD_printS(1,1,1,ADRES);
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	2201      	movs	r2, #1
 8012330:	2101      	movs	r1, #1
 8012332:	2001      	movs	r0, #1
 8012334:	f7f1 fa16 	bl	8003764 <LCD_printS>
		ADRES->X0_SET=ADRES->X0_SET+11;
 8012338:	683b      	ldr	r3, [r7, #0]
 801233a:	7b1b      	ldrb	r3, [r3, #12]
 801233c:	330b      	adds	r3, #11
 801233e:	b2da      	uxtb	r2, r3
 8012340:	683b      	ldr	r3, [r7, #0]
 8012342:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+10;
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	7b1b      	ldrb	r3, [r3, #12]
 8012348:	330a      	adds	r3, #10
 801234a:	b2da      	uxtb	r2, r3
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 8012350:	6838      	ldr	r0, [r7, #0]
 8012352:	f7ee ff0f 	bl	8001174 <LCD_set_adressing>
		LCD_printT(1,1,1,ADRES);
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	2201      	movs	r2, #1
 801235a:	2101      	movs	r1, #1
 801235c:	2001      	movs	r0, #1
 801235e:	f7f1 fbbd 	bl	8003adc <LCD_printT>
		ADRES->X0_SET=ADRES->X0_SET+11;
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	7b1b      	ldrb	r3, [r3, #12]
 8012366:	330b      	adds	r3, #11
 8012368:	b2da      	uxtb	r2, r3
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+10;
 801236e:	683b      	ldr	r3, [r7, #0]
 8012370:	7b1b      	ldrb	r3, [r3, #12]
 8012372:	330a      	adds	r3, #10
 8012374:	b2da      	uxtb	r2, r3
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 801237a:	6838      	ldr	r0, [r7, #0]
 801237c:	f7ee fefa 	bl	8001174 <LCD_set_adressing>
		LCD_printA(1,1,1,ADRES);
 8012380:	683b      	ldr	r3, [r7, #0]
 8012382:	2201      	movs	r2, #1
 8012384:	2101      	movs	r1, #1
 8012386:	2001      	movs	r0, #1
 8012388:	f7ef fc36 	bl	8001bf8 <LCD_printA>
		ADRES->X0_SET=ADRES->X0_SET+11;
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	7b1b      	ldrb	r3, [r3, #12]
 8012390:	330b      	adds	r3, #11
 8012392:	b2da      	uxtb	r2, r3
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+20;
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	7b1b      	ldrb	r3, [r3, #12]
 801239c:	3314      	adds	r3, #20
 801239e:	b2da      	uxtb	r2, r3
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 80123a4:	6838      	ldr	r0, [r7, #0]
 80123a6:	f7ee fee5 	bl	8001174 <LCD_set_adressing>
		LCD_printN(1,1,1,ADRES);
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	2201      	movs	r2, #1
 80123ae:	2101      	movs	r1, #1
 80123b0:	2001      	movs	r0, #1
 80123b2:	f7ef f979 	bl	80016a8 <LCD_printN>
		ADRES->X0_SET=ADRES->X0_SET+18;
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	7b1b      	ldrb	r3, [r3, #12]
 80123ba:	3312      	adds	r3, #18
 80123bc:	b2da      	uxtb	r2, r3
 80123be:	683b      	ldr	r3, [r7, #0]
 80123c0:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+13;
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	7b1b      	ldrb	r3, [r3, #12]
 80123c6:	330d      	adds	r3, #13
 80123c8:	b2da      	uxtb	r2, r3
 80123ca:	683b      	ldr	r3, [r7, #0]
 80123cc:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 80123ce:	6838      	ldr	r0, [r7, #0]
 80123d0:	f7ee fed0 	bl	8001174 <LCD_set_adressing>
		LCD_printA(1,1,1,ADRES);
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	2201      	movs	r2, #1
 80123d8:	2101      	movs	r1, #1
 80123da:	2001      	movs	r0, #1
 80123dc:	f7ef fc0c 	bl	8001bf8 <LCD_printA>
		ADRES->X0_SET=ADRES->X0_SET+11;
 80123e0:	683b      	ldr	r3, [r7, #0]
 80123e2:	7b1b      	ldrb	r3, [r3, #12]
 80123e4:	330b      	adds	r3, #11
 80123e6:	b2da      	uxtb	r2, r3
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+10;
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	7b1b      	ldrb	r3, [r3, #12]
 80123f0:	330a      	adds	r3, #10
 80123f2:	b2da      	uxtb	r2, r3
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 80123f8:	6838      	ldr	r0, [r7, #0]
 80123fa:	f7ee febb 	bl	8001174 <LCD_set_adressing>
		LCD_printD(1,1,1,ADRES);
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	2201      	movs	r2, #1
 8012402:	2101      	movs	r1, #1
 8012404:	2001      	movs	r0, #1
 8012406:	f7f0 f83b 	bl	8002480 <LCD_printD>
		ADRES->X0_SET=ADRES->X0_SET+11;
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	7b1b      	ldrb	r3, [r3, #12]
 801240e:	330b      	adds	r3, #11
 8012410:	b2da      	uxtb	r2, r3
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=ADRES->X0_SET+10;;
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	7b1b      	ldrb	r3, [r3, #12]
 801241a:	330a      	adds	r3, #10
 801241c:	b2da      	uxtb	r2, r3
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 8012422:	6838      	ldr	r0, [r7, #0]
 8012424:	f7ee fea6 	bl	8001174 <LCD_set_adressing>
		LCD_printC(1,1,1,ADRES);
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	2201      	movs	r2, #1
 801242c:	2101      	movs	r1, #1
 801242e:	2001      	movs	r0, #1
 8012430:	f7ef fed0 	bl	80021d4 <LCD_printC>
		ADRES->X0_SET=ADRES->X0_SET+11;
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	7b1b      	ldrb	r3, [r3, #12]
 8012438:	330b      	adds	r3, #11
 801243a:	b2da      	uxtb	r2, r3
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=127;
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	227f      	movs	r2, #127	@ 0x7f
 8012444:	739a      	strb	r2, [r3, #14]
		LCD_set_adressing(ADRES);
 8012446:	6838      	ldr	r0, [r7, #0]
 8012448:	f7ee fe94 	bl	8001174 <LCD_set_adressing>
		LCD_print2(1,1,1,ADRES);
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	2201      	movs	r2, #1
 8012450:	2101      	movs	r1, #1
 8012452:	2001      	movs	r0, #1
 8012454:	f7f1 fd50 	bl	8003ef8 <LCD_print2>
		ADRES->X0_SET=0;
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	2200      	movs	r2, #0
 801245c:	731a      	strb	r2, [r3, #12]
		ADRES->X_END_SET=127;
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	227f      	movs	r2, #127	@ 0x7f
 8012462:	739a      	strb	r2, [r3, #14]
		ADRES->Y0_SET=80;
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	2250      	movs	r2, #80	@ 0x50
 8012468:	735a      	strb	r2, [r3, #13]
		ADRES->Y_END_SET=159;
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	229f      	movs	r2, #159	@ 0x9f
 801246e:	73da      	strb	r2, [r3, #15]
		LCD_set_adressing(ADRES);
 8012470:	6838      	ldr	r0, [r7, #0]
 8012472:	f7ee fe7f 	bl	8001174 <LCD_set_adressing>
		DC_ON();
 8012476:	f7ee fdeb 	bl	8001050 <DC_ON>
		CS_OFF();
 801247a:	f7ee fdde 	bl	800103a <CS_OFF>
		for(uint32_t i=0;i<((159-60)*127);i++)
 801247e:	2300      	movs	r3, #0
 8012480:	613b      	str	r3, [r7, #16]
 8012482:	e00a      	b.n	801249a <LCD_print_tryb_adc_numbers+0x69e>
			HAL_SPI_Transmit(&hspi3, word, 2, HAL_MAX_DELAY);
 8012484:	f107 010c 	add.w	r1, r7, #12
 8012488:	f04f 33ff 	mov.w	r3, #4294967295
 801248c:	2202      	movs	r2, #2
 801248e:	4808      	ldr	r0, [pc, #32]	@ (80124b0 <LCD_print_tryb_adc_numbers+0x6b4>)
 8012490:	f006 f935 	bl	80186fe <HAL_SPI_Transmit>
		for(uint32_t i=0;i<((159-60)*127);i++)
 8012494:	693b      	ldr	r3, [r7, #16]
 8012496:	3301      	adds	r3, #1
 8012498:	613b      	str	r3, [r7, #16]
 801249a:	693b      	ldr	r3, [r7, #16]
 801249c:	f243 121c 	movw	r2, #12572	@ 0x311c
 80124a0:	4293      	cmp	r3, r2
 80124a2:	d9ef      	bls.n	8012484 <LCD_print_tryb_adc_numbers+0x688>
		CS_ON();
 80124a4:	f7ee fdbe 	bl	8001024 <CS_ON>
}
 80124a8:	bf00      	nop
 80124aa:	3718      	adds	r7, #24
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}
 80124b0:	200004a4 	.word	0x200004a4

080124b4 <LCD_print_tryb_segment>:


void LCD_print_tryb_segment(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES,unsigned int *num)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b086      	sub	sp, #24
 80124b8:	af02      	add	r7, sp, #8
 80124ba:	603b      	str	r3, [r7, #0]
 80124bc:	4603      	mov	r3, r0
 80124be:	71fb      	strb	r3, [r7, #7]
 80124c0:	460b      	mov	r3, r1
 80124c2:	71bb      	strb	r3, [r7, #6]
 80124c4:	4613      	mov	r3, r2
 80124c6:	717b      	strb	r3, [r7, #5]
	uint8_t fbyte=0x00;
 80124c8:	2300      	movs	r3, #0
 80124ca:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 80124cc:	2300      	movs	r3, #0
 80124ce:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 80124d0:	7bfa      	ldrb	r2, [r7, #15]
 80124d2:	79fb      	ldrb	r3, [r7, #7]
 80124d4:	4053      	eors	r3, r2
 80124d6:	b2db      	uxtb	r3, r3
 80124d8:	00db      	lsls	r3, r3, #3
 80124da:	b25a      	sxtb	r2, r3
 80124dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80124e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80124e4:	b25b      	sxtb	r3, r3
 80124e6:	4053      	eors	r3, r2
 80124e8:	b25b      	sxtb	r3, r3
 80124ea:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 80124ec:	7bba      	ldrb	r2, [r7, #14]
 80124ee:	79bb      	ldrb	r3, [r7, #6]
 80124f0:	f003 0307 	and.w	r3, r3, #7
 80124f4:	4053      	eors	r3, r2
 80124f6:	015b      	lsls	r3, r3, #5
 80124f8:	b25a      	sxtb	r2, r3
 80124fa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80124fe:	4053      	eors	r3, r2
 8012500:	b25b      	sxtb	r3, r3
 8012502:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8012504:	7bfb      	ldrb	r3, [r7, #15]
 8012506:	733b      	strb	r3, [r7, #12]
 8012508:	7bbb      	ldrb	r3, [r7, #14]
 801250a:	737b      	strb	r3, [r7, #13]
	// 1 segment
	ADRES->X0_SET=0x00;
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	2200      	movs	r2, #0
 8012510:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+40;
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	7b1b      	ldrb	r3, [r3, #12]
 8012516:	3328      	adds	r3, #40	@ 0x28
 8012518:	b2da      	uxtb	r2, r3
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=0x00;
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	2200      	movs	r2, #0
 8012522:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=ADRES->Y0_SET+60;
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	7b5b      	ldrb	r3, [r3, #13]
 8012528:	333c      	adds	r3, #60	@ 0x3c
 801252a:	b2da      	uxtb	r2, r3
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 8012530:	6838      	ldr	r0, [r7, #0]
 8012532:	f7ee fe1f 	bl	8001174 <LCD_set_adressing>
	LCD_print_segment(1, 1, 1, ADRES, *num);
 8012536:	69bb      	ldr	r3, [r7, #24]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	9300      	str	r3, [sp, #0]
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	2201      	movs	r2, #1
 8012540:	2101      	movs	r1, #1
 8012542:	2001      	movs	r0, #1
 8012544:	f7f8 fa2c 	bl	800a9a0 <LCD_print_segment>
	ADRES->X0_SET=ADRES->X_END_SET;
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	7b9a      	ldrb	r2, [r3, #14]
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+15;
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	7b1b      	ldrb	r3, [r3, #12]
 8012554:	330f      	adds	r3, #15
 8012556:	b2da      	uxtb	r2, r3
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801255c:	6838      	ldr	r0, [r7, #0]
 801255e:	f7ee fe09 	bl	8001174 <LCD_set_adressing>
	LCD_print_dot(1,1,1,ADRES);
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	2201      	movs	r2, #1
 8012566:	2101      	movs	r1, #1
 8012568:	2001      	movs	r0, #1
 801256a:	f7f2 fc3d 	bl	8004de8 <LCD_print_dot>
	ADRES->X0_SET=ADRES->X_END_SET;
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	7b9a      	ldrb	r2, [r3, #14]
 8012572:	683b      	ldr	r3, [r7, #0]
 8012574:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	227f      	movs	r2, #127	@ 0x7f
 801257a:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801257c:	6838      	ldr	r0, [r7, #0]
 801257e:	f7ee fdf9 	bl	8001174 <LCD_set_adressing>
	LCD_print_segment(1, 1, 1, ADRES,*(num+1));
 8012582:	69bb      	ldr	r3, [r7, #24]
 8012584:	3304      	adds	r3, #4
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	9300      	str	r3, [sp, #0]
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	2201      	movs	r2, #1
 801258e:	2101      	movs	r1, #1
 8012590:	2001      	movs	r0, #1
 8012592:	f7f8 fa05 	bl	800a9a0 <LCD_print_segment>
	ADRES->X0_SET=0x00;
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	2200      	movs	r2, #0
 801259a:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+11;
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	7b1b      	ldrb	r3, [r3, #12]
 80125a0:	330b      	adds	r3, #11
 80125a2:	b2da      	uxtb	r2, r3
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=60;
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	223c      	movs	r2, #60	@ 0x3c
 80125ac:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=ADRES->Y0_SET+20;
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	7b5b      	ldrb	r3, [r3, #13]
 80125b2:	3314      	adds	r3, #20
 80125b4:	b2da      	uxtb	r2, r3
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 80125ba:	6838      	ldr	r0, [r7, #0]
 80125bc:	f7ee fdda 	bl	8001174 <LCD_set_adressing>
	LCD_printS(1,1,1,ADRES);
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	2201      	movs	r2, #1
 80125c4:	2101      	movs	r1, #1
 80125c6:	2001      	movs	r0, #1
 80125c8:	f7f1 f8cc 	bl	8003764 <LCD_printS>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	7b1b      	ldrb	r3, [r3, #12]
 80125d0:	330b      	adds	r3, #11
 80125d2:	b2da      	uxtb	r2, r3
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	7b1b      	ldrb	r3, [r3, #12]
 80125dc:	330a      	adds	r3, #10
 80125de:	b2da      	uxtb	r2, r3
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80125e4:	6838      	ldr	r0, [r7, #0]
 80125e6:	f7ee fdc5 	bl	8001174 <LCD_set_adressing>
	LCD_printT(1,1,1,ADRES);
 80125ea:	683b      	ldr	r3, [r7, #0]
 80125ec:	2201      	movs	r2, #1
 80125ee:	2101      	movs	r1, #1
 80125f0:	2001      	movs	r0, #1
 80125f2:	f7f1 fa73 	bl	8003adc <LCD_printT>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	7b1b      	ldrb	r3, [r3, #12]
 80125fa:	330b      	adds	r3, #11
 80125fc:	b2da      	uxtb	r2, r3
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 8012602:	683b      	ldr	r3, [r7, #0]
 8012604:	7b1b      	ldrb	r3, [r3, #12]
 8012606:	330a      	adds	r3, #10
 8012608:	b2da      	uxtb	r2, r3
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801260e:	6838      	ldr	r0, [r7, #0]
 8012610:	f7ee fdb0 	bl	8001174 <LCD_set_adressing>
	LCD_printA(1,1,1,ADRES);
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	2201      	movs	r2, #1
 8012618:	2101      	movs	r1, #1
 801261a:	2001      	movs	r0, #1
 801261c:	f7ef faec 	bl	8001bf8 <LCD_printA>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	7b1b      	ldrb	r3, [r3, #12]
 8012624:	330b      	adds	r3, #11
 8012626:	b2da      	uxtb	r2, r3
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	7b1b      	ldrb	r3, [r3, #12]
 8012630:	3314      	adds	r3, #20
 8012632:	b2da      	uxtb	r2, r3
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8012638:	6838      	ldr	r0, [r7, #0]
 801263a:	f7ee fd9b 	bl	8001174 <LCD_set_adressing>
	LCD_printN(1,1,1,ADRES);
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	2201      	movs	r2, #1
 8012642:	2101      	movs	r1, #1
 8012644:	2001      	movs	r0, #1
 8012646:	f7ef f82f 	bl	80016a8 <LCD_printN>
	ADRES->X0_SET=ADRES->X0_SET+18;
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	7b1b      	ldrb	r3, [r3, #12]
 801264e:	3312      	adds	r3, #18
 8012650:	b2da      	uxtb	r2, r3
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+13;
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	7b1b      	ldrb	r3, [r3, #12]
 801265a:	330d      	adds	r3, #13
 801265c:	b2da      	uxtb	r2, r3
 801265e:	683b      	ldr	r3, [r7, #0]
 8012660:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8012662:	6838      	ldr	r0, [r7, #0]
 8012664:	f7ee fd86 	bl	8001174 <LCD_set_adressing>
	LCD_printA(1,1,1,ADRES);
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	2201      	movs	r2, #1
 801266c:	2101      	movs	r1, #1
 801266e:	2001      	movs	r0, #1
 8012670:	f7ef fac2 	bl	8001bf8 <LCD_printA>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8012674:	683b      	ldr	r3, [r7, #0]
 8012676:	7b1b      	ldrb	r3, [r3, #12]
 8012678:	330b      	adds	r3, #11
 801267a:	b2da      	uxtb	r2, r3
 801267c:	683b      	ldr	r3, [r7, #0]
 801267e:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	7b1b      	ldrb	r3, [r3, #12]
 8012684:	330a      	adds	r3, #10
 8012686:	b2da      	uxtb	r2, r3
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801268c:	6838      	ldr	r0, [r7, #0]
 801268e:	f7ee fd71 	bl	8001174 <LCD_set_adressing>
	LCD_printD(1,1,1,ADRES);
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	2201      	movs	r2, #1
 8012696:	2101      	movs	r1, #1
 8012698:	2001      	movs	r0, #1
 801269a:	f7ef fef1 	bl	8002480 <LCD_printD>
	ADRES->X0_SET=ADRES->X0_SET+11;
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	7b1b      	ldrb	r3, [r3, #12]
 80126a2:	330b      	adds	r3, #11
 80126a4:	b2da      	uxtb	r2, r3
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;;
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	7b1b      	ldrb	r3, [r3, #12]
 80126ae:	330a      	adds	r3, #10
 80126b0:	b2da      	uxtb	r2, r3
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80126b6:	6838      	ldr	r0, [r7, #0]
 80126b8:	f7ee fd5c 	bl	8001174 <LCD_set_adressing>
	LCD_printC(1,1,1,ADRES);
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	2201      	movs	r2, #1
 80126c0:	2101      	movs	r1, #1
 80126c2:	2001      	movs	r0, #1
 80126c4:	f7ef fd86 	bl	80021d4 <LCD_printC>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	7b1b      	ldrb	r3, [r3, #12]
 80126cc:	330b      	adds	r3, #11
 80126ce:	b2da      	uxtb	r2, r3
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	227f      	movs	r2, #127	@ 0x7f
 80126d8:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80126da:	6838      	ldr	r0, [r7, #0]
 80126dc:	f7ee fd4a 	bl	8001174 <LCD_set_adressing>
	LCD_print1(1,1,1,ADRES);
 80126e0:	683b      	ldr	r3, [r7, #0]
 80126e2:	2201      	movs	r2, #1
 80126e4:	2101      	movs	r1, #1
 80126e6:	2001      	movs	r0, #1
 80126e8:	f7f1 faea 	bl	8003cc0 <LCD_print1>




	// 2 segment
	ADRES->X0_SET=0x00;
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	2200      	movs	r2, #0
 80126f0:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+40;
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	7b1b      	ldrb	r3, [r3, #12]
 80126f6:	3328      	adds	r3, #40	@ 0x28
 80126f8:	b2da      	uxtb	r2, r3
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=80;
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	2250      	movs	r2, #80	@ 0x50
 8012702:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=ADRES->Y0_SET+60;
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	7b5b      	ldrb	r3, [r3, #13]
 8012708:	333c      	adds	r3, #60	@ 0x3c
 801270a:	b2da      	uxtb	r2, r3
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 8012710:	6838      	ldr	r0, [r7, #0]
 8012712:	f7ee fd2f 	bl	8001174 <LCD_set_adressing>
	LCD_print_segment(1, 1, 1, ADRES, *(num+2));
 8012716:	69bb      	ldr	r3, [r7, #24]
 8012718:	3308      	adds	r3, #8
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	9300      	str	r3, [sp, #0]
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	2201      	movs	r2, #1
 8012722:	2101      	movs	r1, #1
 8012724:	2001      	movs	r0, #1
 8012726:	f7f8 f93b 	bl	800a9a0 <LCD_print_segment>
	ADRES->X0_SET=ADRES->X_END_SET;
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	7b9a      	ldrb	r2, [r3, #14]
 801272e:	683b      	ldr	r3, [r7, #0]
 8012730:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+15;
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	7b1b      	ldrb	r3, [r3, #12]
 8012736:	330f      	adds	r3, #15
 8012738:	b2da      	uxtb	r2, r3
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801273e:	6838      	ldr	r0, [r7, #0]
 8012740:	f7ee fd18 	bl	8001174 <LCD_set_adressing>
	LCD_print_dot(1,1,1,ADRES);
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	2201      	movs	r2, #1
 8012748:	2101      	movs	r1, #1
 801274a:	2001      	movs	r0, #1
 801274c:	f7f2 fb4c 	bl	8004de8 <LCD_print_dot>
	ADRES->X0_SET=ADRES->X_END_SET;
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	7b9a      	ldrb	r2, [r3, #14]
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	227f      	movs	r2, #127	@ 0x7f
 801275c:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801275e:	6838      	ldr	r0, [r7, #0]
 8012760:	f7ee fd08 	bl	8001174 <LCD_set_adressing>
	LCD_print_segment(1, 1, 1, ADRES, *(num+3));
 8012764:	69bb      	ldr	r3, [r7, #24]
 8012766:	330c      	adds	r3, #12
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	9300      	str	r3, [sp, #0]
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	2201      	movs	r2, #1
 8012770:	2101      	movs	r1, #1
 8012772:	2001      	movs	r0, #1
 8012774:	f7f8 f914 	bl	800a9a0 <LCD_print_segment>
	ADRES->X0_SET=0x00;
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	2200      	movs	r2, #0
 801277c:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+11;
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	7b1b      	ldrb	r3, [r3, #12]
 8012782:	330b      	adds	r3, #11
 8012784:	b2da      	uxtb	r2, r3
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=140;
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	228c      	movs	r2, #140	@ 0x8c
 801278e:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=159;
 8012790:	683b      	ldr	r3, [r7, #0]
 8012792:	229f      	movs	r2, #159	@ 0x9f
 8012794:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 8012796:	6838      	ldr	r0, [r7, #0]
 8012798:	f7ee fcec 	bl	8001174 <LCD_set_adressing>
	LCD_printS(1,1,1,ADRES);
 801279c:	683b      	ldr	r3, [r7, #0]
 801279e:	2201      	movs	r2, #1
 80127a0:	2101      	movs	r1, #1
 80127a2:	2001      	movs	r0, #1
 80127a4:	f7f0 ffde 	bl	8003764 <LCD_printS>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	7b1b      	ldrb	r3, [r3, #12]
 80127ac:	330b      	adds	r3, #11
 80127ae:	b2da      	uxtb	r2, r3
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	7b1b      	ldrb	r3, [r3, #12]
 80127b8:	330a      	adds	r3, #10
 80127ba:	b2da      	uxtb	r2, r3
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80127c0:	6838      	ldr	r0, [r7, #0]
 80127c2:	f7ee fcd7 	bl	8001174 <LCD_set_adressing>
	LCD_printT(1,1,1,ADRES);
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	2201      	movs	r2, #1
 80127ca:	2101      	movs	r1, #1
 80127cc:	2001      	movs	r0, #1
 80127ce:	f7f1 f985 	bl	8003adc <LCD_printT>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	7b1b      	ldrb	r3, [r3, #12]
 80127d6:	330b      	adds	r3, #11
 80127d8:	b2da      	uxtb	r2, r3
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	7b1b      	ldrb	r3, [r3, #12]
 80127e2:	330a      	adds	r3, #10
 80127e4:	b2da      	uxtb	r2, r3
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80127ea:	6838      	ldr	r0, [r7, #0]
 80127ec:	f7ee fcc2 	bl	8001174 <LCD_set_adressing>
	LCD_printA(1,1,1,ADRES);
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	2201      	movs	r2, #1
 80127f4:	2101      	movs	r1, #1
 80127f6:	2001      	movs	r0, #1
 80127f8:	f7ef f9fe 	bl	8001bf8 <LCD_printA>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	7b1b      	ldrb	r3, [r3, #12]
 8012800:	330b      	adds	r3, #11
 8012802:	b2da      	uxtb	r2, r3
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	7b1b      	ldrb	r3, [r3, #12]
 801280c:	3314      	adds	r3, #20
 801280e:	b2da      	uxtb	r2, r3
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8012814:	6838      	ldr	r0, [r7, #0]
 8012816:	f7ee fcad 	bl	8001174 <LCD_set_adressing>
	LCD_printN(1,1,1,ADRES);
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	2201      	movs	r2, #1
 801281e:	2101      	movs	r1, #1
 8012820:	2001      	movs	r0, #1
 8012822:	f7ee ff41 	bl	80016a8 <LCD_printN>
	ADRES->X0_SET=ADRES->X0_SET+18;
 8012826:	683b      	ldr	r3, [r7, #0]
 8012828:	7b1b      	ldrb	r3, [r3, #12]
 801282a:	3312      	adds	r3, #18
 801282c:	b2da      	uxtb	r2, r3
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+13;
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	7b1b      	ldrb	r3, [r3, #12]
 8012836:	330d      	adds	r3, #13
 8012838:	b2da      	uxtb	r2, r3
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 801283e:	6838      	ldr	r0, [r7, #0]
 8012840:	f7ee fc98 	bl	8001174 <LCD_set_adressing>
	LCD_printA(1,1,1,ADRES);
 8012844:	683b      	ldr	r3, [r7, #0]
 8012846:	2201      	movs	r2, #1
 8012848:	2101      	movs	r1, #1
 801284a:	2001      	movs	r0, #1
 801284c:	f7ef f9d4 	bl	8001bf8 <LCD_printA>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	7b1b      	ldrb	r3, [r3, #12]
 8012854:	330b      	adds	r3, #11
 8012856:	b2da      	uxtb	r2, r3
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	7b1b      	ldrb	r3, [r3, #12]
 8012860:	330a      	adds	r3, #10
 8012862:	b2da      	uxtb	r2, r3
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8012868:	6838      	ldr	r0, [r7, #0]
 801286a:	f7ee fc83 	bl	8001174 <LCD_set_adressing>
	LCD_printD(1,1,1,ADRES);
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	2201      	movs	r2, #1
 8012872:	2101      	movs	r1, #1
 8012874:	2001      	movs	r0, #1
 8012876:	f7ef fe03 	bl	8002480 <LCD_printD>
	ADRES->X0_SET=ADRES->X0_SET+11;
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	7b1b      	ldrb	r3, [r3, #12]
 801287e:	330b      	adds	r3, #11
 8012880:	b2da      	uxtb	r2, r3
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;;
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	7b1b      	ldrb	r3, [r3, #12]
 801288a:	330a      	adds	r3, #10
 801288c:	b2da      	uxtb	r2, r3
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8012892:	6838      	ldr	r0, [r7, #0]
 8012894:	f7ee fc6e 	bl	8001174 <LCD_set_adressing>
	LCD_printC(1,1,1,ADRES);
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	2201      	movs	r2, #1
 801289c:	2101      	movs	r1, #1
 801289e:	2001      	movs	r0, #1
 80128a0:	f7ef fc98 	bl	80021d4 <LCD_printC>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	7b1b      	ldrb	r3, [r3, #12]
 80128a8:	330b      	adds	r3, #11
 80128aa:	b2da      	uxtb	r2, r3
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	227f      	movs	r2, #127	@ 0x7f
 80128b4:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80128b6:	6838      	ldr	r0, [r7, #0]
 80128b8:	f7ee fc5c 	bl	8001174 <LCD_set_adressing>
	LCD_print2(1,1,1,ADRES);
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	2201      	movs	r2, #1
 80128c0:	2101      	movs	r1, #1
 80128c2:	2001      	movs	r0, #1
 80128c4:	f7f1 fb18 	bl	8003ef8 <LCD_print2>


}
 80128c8:	bf00      	nop
 80128ca:	3710      	adds	r7, #16
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}

080128d0 <LCD_print_tryb_tank>:

void LCD_print_tryb_tank(uint8_t R, uint8_t G, uint8_t B,adres_t *ADRES,float *num)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b084      	sub	sp, #16
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	603b      	str	r3, [r7, #0]
 80128d8:	4603      	mov	r3, r0
 80128da:	71fb      	strb	r3, [r7, #7]
 80128dc:	460b      	mov	r3, r1
 80128de:	71bb      	strb	r3, [r7, #6]
 80128e0:	4613      	mov	r3, r2
 80128e2:	717b      	strb	r3, [r7, #5]
	uint8_t fbyte=0x00;
 80128e4:	2300      	movs	r3, #0
 80128e6:	73fb      	strb	r3, [r7, #15]
	uint8_t sbyte=0x00;
 80128e8:	2300      	movs	r3, #0
 80128ea:	73bb      	strb	r3, [r7, #14]
	fbyte=((fbyte^R)<<3)^(G&0x38);
 80128ec:	7bfa      	ldrb	r2, [r7, #15]
 80128ee:	79fb      	ldrb	r3, [r7, #7]
 80128f0:	4053      	eors	r3, r2
 80128f2:	b2db      	uxtb	r3, r3
 80128f4:	00db      	lsls	r3, r3, #3
 80128f6:	b25a      	sxtb	r2, r3
 80128f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80128fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012900:	b25b      	sxtb	r3, r3
 8012902:	4053      	eors	r3, r2
 8012904:	b25b      	sxtb	r3, r3
 8012906:	73fb      	strb	r3, [r7, #15]
	sbyte=((sbyte^(G&0x07))<<5)^B;
 8012908:	7bba      	ldrb	r2, [r7, #14]
 801290a:	79bb      	ldrb	r3, [r7, #6]
 801290c:	f003 0307 	and.w	r3, r3, #7
 8012910:	4053      	eors	r3, r2
 8012912:	015b      	lsls	r3, r3, #5
 8012914:	b25a      	sxtb	r2, r3
 8012916:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801291a:	4053      	eors	r3, r2
 801291c:	b25b      	sxtb	r3, r3
 801291e:	73bb      	strb	r3, [r7, #14]
	uint8_t word[]={fbyte,sbyte};
 8012920:	7bfb      	ldrb	r3, [r7, #15]
 8012922:	733b      	strb	r3, [r7, #12]
 8012924:	7bbb      	ldrb	r3, [r7, #14]
 8012926:	737b      	strb	r3, [r7, #13]
	// 1 segment
	ADRES->X0_SET=0x00;
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	2200      	movs	r2, #0
 801292c:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	7b1b      	ldrb	r3, [r3, #12]
 8012932:	3314      	adds	r3, #20
 8012934:	b2da      	uxtb	r2, r3
 8012936:	683b      	ldr	r3, [r7, #0]
 8012938:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=0x00;
 801293a:	683b      	ldr	r3, [r7, #0]
 801293c:	2200      	movs	r2, #0
 801293e:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=ADRES->Y0_SET+25;
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	7b5b      	ldrb	r3, [r3, #13]
 8012944:	3319      	adds	r3, #25
 8012946:	b2da      	uxtb	r2, r3
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 801294c:	6838      	ldr	r0, [r7, #0]
 801294e:	f7ee fc11 	bl	8001174 <LCD_set_adressing>
	LCD_printA(R,G,B,ADRES);
 8012952:	797a      	ldrb	r2, [r7, #5]
 8012954:	79b9      	ldrb	r1, [r7, #6]
 8012956:	79f8      	ldrb	r0, [r7, #7]
 8012958:	683b      	ldr	r3, [r7, #0]
 801295a:	f7ef f94d 	bl	8001bf8 <LCD_printA>
	ADRES->X0_SET=ADRES->X0_SET+11;
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	7b1b      	ldrb	r3, [r3, #12]
 8012962:	330b      	adds	r3, #11
 8012964:	b2da      	uxtb	r2, r3
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 801296a:	683b      	ldr	r3, [r7, #0]
 801296c:	7b1b      	ldrb	r3, [r3, #12]
 801296e:	330a      	adds	r3, #10
 8012970:	b2da      	uxtb	r2, r3
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8012976:	6838      	ldr	r0, [r7, #0]
 8012978:	f7ee fbfc 	bl	8001174 <LCD_set_adressing>
	LCD_printD(R,G,B,ADRES);
 801297c:	797a      	ldrb	r2, [r7, #5]
 801297e:	79b9      	ldrb	r1, [r7, #6]
 8012980:	79f8      	ldrb	r0, [r7, #7]
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	f7ef fd7c 	bl	8002480 <LCD_printD>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	7b1b      	ldrb	r3, [r3, #12]
 801298c:	330b      	adds	r3, #11
 801298e:	b2da      	uxtb	r2, r3
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	7b1b      	ldrb	r3, [r3, #12]
 8012998:	330a      	adds	r3, #10
 801299a:	b2da      	uxtb	r2, r3
 801299c:	683b      	ldr	r3, [r7, #0]
 801299e:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80129a0:	6838      	ldr	r0, [r7, #0]
 80129a2:	f7ee fbe7 	bl	8001174 <LCD_set_adressing>
	LCD_printC(R,G,B,ADRES);
 80129a6:	797a      	ldrb	r2, [r7, #5]
 80129a8:	79b9      	ldrb	r1, [r7, #6]
 80129aa:	79f8      	ldrb	r0, [r7, #7]
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	f7ef fc11 	bl	80021d4 <LCD_printC>
	ADRES->X0_SET=ADRES->X0_SET+11;
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	7b1b      	ldrb	r3, [r3, #12]
 80129b6:	330b      	adds	r3, #11
 80129b8:	b2da      	uxtb	r2, r3
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+20;
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	7b1b      	ldrb	r3, [r3, #12]
 80129c2:	3314      	adds	r3, #20
 80129c4:	b2da      	uxtb	r2, r3
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80129ca:	6838      	ldr	r0, [r7, #0]
 80129cc:	f7ee fbd2 	bl	8001174 <LCD_set_adressing>
	LCD_print1(R,G,B,ADRES);
 80129d0:	797a      	ldrb	r2, [r7, #5]
 80129d2:	79b9      	ldrb	r1, [r7, #6]
 80129d4:	79f8      	ldrb	r0, [r7, #7]
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	f7f1 f972 	bl	8003cc0 <LCD_print1>
	ADRES->X0_SET=ADRES->X0_SET+20;
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	7b1b      	ldrb	r3, [r3, #12]
 80129e0:	3314      	adds	r3, #20
 80129e2:	b2da      	uxtb	r2, r3
 80129e4:	683b      	ldr	r3, [r7, #0]
 80129e6:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	7b1b      	ldrb	r3, [r3, #12]
 80129ec:	330a      	adds	r3, #10
 80129ee:	b2da      	uxtb	r2, r3
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 80129f4:	6838      	ldr	r0, [r7, #0]
 80129f6:	f7ee fbbd 	bl	8001174 <LCD_set_adressing>
	LCD_printA(R,G,B,ADRES);
 80129fa:	797a      	ldrb	r2, [r7, #5]
 80129fc:	79b9      	ldrb	r1, [r7, #6]
 80129fe:	79f8      	ldrb	r0, [r7, #7]
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	f7ef f8f9 	bl	8001bf8 <LCD_printA>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8012a06:	683b      	ldr	r3, [r7, #0]
 8012a08:	7b1b      	ldrb	r3, [r3, #12]
 8012a0a:	330b      	adds	r3, #11
 8012a0c:	b2da      	uxtb	r2, r3
 8012a0e:	683b      	ldr	r3, [r7, #0]
 8012a10:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	7b1b      	ldrb	r3, [r3, #12]
 8012a16:	330a      	adds	r3, #10
 8012a18:	b2da      	uxtb	r2, r3
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8012a1e:	6838      	ldr	r0, [r7, #0]
 8012a20:	f7ee fba8 	bl	8001174 <LCD_set_adressing>
	LCD_printD(R,G,B,ADRES);
 8012a24:	797a      	ldrb	r2, [r7, #5]
 8012a26:	79b9      	ldrb	r1, [r7, #6]
 8012a28:	79f8      	ldrb	r0, [r7, #7]
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	f7ef fd28 	bl	8002480 <LCD_printD>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	7b1b      	ldrb	r3, [r3, #12]
 8012a34:	330b      	adds	r3, #11
 8012a36:	b2da      	uxtb	r2, r3
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+10;
 8012a3c:	683b      	ldr	r3, [r7, #0]
 8012a3e:	7b1b      	ldrb	r3, [r3, #12]
 8012a40:	330a      	adds	r3, #10
 8012a42:	b2da      	uxtb	r2, r3
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8012a48:	6838      	ldr	r0, [r7, #0]
 8012a4a:	f7ee fb93 	bl	8001174 <LCD_set_adressing>
	LCD_printC(R,G,B,ADRES);
 8012a4e:	797a      	ldrb	r2, [r7, #5]
 8012a50:	79b9      	ldrb	r1, [r7, #6]
 8012a52:	79f8      	ldrb	r0, [r7, #7]
 8012a54:	683b      	ldr	r3, [r7, #0]
 8012a56:	f7ef fbbd 	bl	80021d4 <LCD_printC>
	ADRES->X0_SET=ADRES->X0_SET+11;
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	7b1b      	ldrb	r3, [r3, #12]
 8012a5e:	330b      	adds	r3, #11
 8012a60:	b2da      	uxtb	r2, r3
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	227f      	movs	r2, #127	@ 0x7f
 8012a6a:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8012a6c:	6838      	ldr	r0, [r7, #0]
 8012a6e:	f7ee fb81 	bl	8001174 <LCD_set_adressing>
	LCD_print2(R,G,B,ADRES);
 8012a72:	797a      	ldrb	r2, [r7, #5]
 8012a74:	79b9      	ldrb	r1, [r7, #6]
 8012a76:	79f8      	ldrb	r0, [r7, #7]
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	f7f1 fa3d 	bl	8003ef8 <LCD_print2>


	// 2 segment
	ADRES->X0_SET=0x00;
 8012a7e:	683b      	ldr	r3, [r7, #0]
 8012a80:	2200      	movs	r2, #0
 8012a82:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=ADRES->X0_SET+50;
 8012a84:	683b      	ldr	r3, [r7, #0]
 8012a86:	7b1b      	ldrb	r3, [r3, #12]
 8012a88:	3332      	adds	r3, #50	@ 0x32
 8012a8a:	b2da      	uxtb	r2, r3
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	739a      	strb	r2, [r3, #14]
	ADRES->Y0_SET=25;
 8012a90:	683b      	ldr	r3, [r7, #0]
 8012a92:	2219      	movs	r2, #25
 8012a94:	735a      	strb	r2, [r3, #13]
	ADRES->Y_END_SET=159;
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	229f      	movs	r2, #159	@ 0x9f
 8012a9a:	73da      	strb	r2, [r3, #15]
	LCD_set_adressing(ADRES);
 8012a9c:	6838      	ldr	r0, [r7, #0]
 8012a9e:	f7ee fb69 	bl	8001174 <LCD_set_adressing>
	LCD_print_tank(1, 1, 1, ADRES, *num);
 8012aa2:	69bb      	ldr	r3, [r7, #24]
 8012aa4:	edd3 7a00 	vldr	s15, [r3]
 8012aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	2201      	movs	r2, #1
 8012ab0:	2101      	movs	r1, #1
 8012ab2:	2001      	movs	r0, #1
 8012ab4:	f7f9 fbec 	bl	800c290 <LCD_print_tank>
	ADRES->X0_SET=ADRES->X0_SET+51;
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	7b1b      	ldrb	r3, [r3, #12]
 8012abc:	3333      	adds	r3, #51	@ 0x33
 8012abe:	b2da      	uxtb	r2, r3
 8012ac0:	683b      	ldr	r3, [r7, #0]
 8012ac2:	731a      	strb	r2, [r3, #12]
	ADRES->X_END_SET=127;
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	227f      	movs	r2, #127	@ 0x7f
 8012ac8:	739a      	strb	r2, [r3, #14]
	LCD_set_adressing(ADRES);
 8012aca:	6838      	ldr	r0, [r7, #0]
 8012acc:	f7ee fb52 	bl	8001174 <LCD_set_adressing>
	LCD_print_tank(1, 1, 1, ADRES, *(num+1));
 8012ad0:	69bb      	ldr	r3, [r7, #24]
 8012ad2:	3304      	adds	r3, #4
 8012ad4:	edd3 7a00 	vldr	s15, [r3]
 8012ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	2201      	movs	r2, #1
 8012ae0:	2101      	movs	r1, #1
 8012ae2:	2001      	movs	r0, #1
 8012ae4:	f7f9 fbd4 	bl	800c290 <LCD_print_tank>

}
 8012ae8:	bf00      	nop
 8012aea:	3710      	adds	r7, #16
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}

08012af0 <UART_decision>:




void UART_decision(unsigned char c, adres_t *ADRES, unsigned int *num)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b084      	sub	sp, #16
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	4603      	mov	r3, r0
 8012af8:	60b9      	str	r1, [r7, #8]
 8012afa:	607a      	str	r2, [r7, #4]
 8012afc:	73fb      	strb	r3, [r7, #15]
	  switch(c)
 8012afe:	7bfb      	ldrb	r3, [r7, #15]
 8012b00:	3b31      	subs	r3, #49	@ 0x31
 8012b02:	2b22      	cmp	r3, #34	@ 0x22
 8012b04:	f200 81f8 	bhi.w	8012ef8 <UART_decision+0x408>
 8012b08:	a201      	add	r2, pc, #4	@ (adr r2, 8012b10 <UART_decision+0x20>)
 8012b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b0e:	bf00      	nop
 8012b10:	08012b9d 	.word	0x08012b9d
 8012b14:	08012bdb 	.word	0x08012bdb
 8012b18:	08012c17 	.word	0x08012c17
 8012b1c:	08012c53 	.word	0x08012c53
 8012b20:	08012c91 	.word	0x08012c91
 8012b24:	08012ccf 	.word	0x08012ccf
 8012b28:	08012ef9 	.word	0x08012ef9
 8012b2c:	08012ef9 	.word	0x08012ef9
 8012b30:	08012ef9 	.word	0x08012ef9
 8012b34:	08012ef9 	.word	0x08012ef9
 8012b38:	08012ef9 	.word	0x08012ef9
 8012b3c:	08012ef9 	.word	0x08012ef9
 8012b40:	08012ef9 	.word	0x08012ef9
 8012b44:	08012ef9 	.word	0x08012ef9
 8012b48:	08012ef9 	.word	0x08012ef9
 8012b4c:	08012ef9 	.word	0x08012ef9
 8012b50:	08012d0d 	.word	0x08012d0d
 8012b54:	08012d45 	.word	0x08012d45
 8012b58:	08012ef9 	.word	0x08012ef9
 8012b5c:	08012d7d 	.word	0x08012d7d
 8012b60:	08012ef9 	.word	0x08012ef9
 8012b64:	08012ef9 	.word	0x08012ef9
 8012b68:	08012ef9 	.word	0x08012ef9
 8012b6c:	08012ef9 	.word	0x08012ef9
 8012b70:	08012ef9 	.word	0x08012ef9
 8012b74:	08012ef9 	.word	0x08012ef9
 8012b78:	08012ef9 	.word	0x08012ef9
 8012b7c:	08012dab 	.word	0x08012dab
 8012b80:	08012de3 	.word	0x08012de3
 8012b84:	08012ef9 	.word	0x08012ef9
 8012b88:	08012ef9 	.word	0x08012ef9
 8012b8c:	08012ef9 	.word	0x08012ef9
 8012b90:	08012ef9 	.word	0x08012ef9
 8012b94:	08012e2b 	.word	0x08012e2b
 8012b98:	08012ec1 	.word	0x08012ec1
	  {
		  case 49:if(HAL_GPIO_ReadPin(GPIOC, Czerwony_1_Pin)==RESET)
 8012b9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012ba0:	48b0      	ldr	r0, [pc, #704]	@ (8012e64 <UART_decision+0x374>)
 8012ba2:	f004 f9b9 	bl	8016f18 <HAL_GPIO_ReadPin>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d109      	bne.n	8012bc0 <UART_decision+0xd0>
		  	  	  {
			  	  	  HAL_UART_Transmit_IT(&huart2, &led1_on[bufRxIndex], 1);
 8012bac:	4bae      	ldr	r3, [pc, #696]	@ (8012e68 <UART_decision+0x378>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	4aae      	ldr	r2, [pc, #696]	@ (8012e6c <UART_decision+0x37c>)
 8012bb2:	4413      	add	r3, r2
 8012bb4:	2201      	movs	r2, #1
 8012bb6:	4619      	mov	r1, r3
 8012bb8:	48ad      	ldr	r0, [pc, #692]	@ (8012e70 <UART_decision+0x380>)
 8012bba:	f006 f953 	bl	8018e64 <HAL_UART_Transmit_IT>
 8012bbe:	e008      	b.n	8012bd2 <UART_decision+0xe2>
		  	  	  }
				  else
				  {
					  HAL_UART_Transmit_IT(&huart2, &led1_off[bufRxIndex], 1);
 8012bc0:	4ba9      	ldr	r3, [pc, #676]	@ (8012e68 <UART_decision+0x378>)
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	4aab      	ldr	r2, [pc, #684]	@ (8012e74 <UART_decision+0x384>)
 8012bc6:	4413      	add	r3, r2
 8012bc8:	2201      	movs	r2, #1
 8012bca:	4619      	mov	r1, r3
 8012bcc:	48a8      	ldr	r0, [pc, #672]	@ (8012e70 <UART_decision+0x380>)
 8012bce:	f006 f949 	bl	8018e64 <HAL_UART_Transmit_IT>
				  }
				  tryb=1;
 8012bd2:	4ba9      	ldr	r3, [pc, #676]	@ (8012e78 <UART_decision+0x388>)
 8012bd4:	2201      	movs	r2, #1
 8012bd6:	601a      	str	r2, [r3, #0]
				  break;
 8012bd8:	e1aa      	b.n	8012f30 <UART_decision+0x440>
		  case 50:if(HAL_GPIO_ReadPin(GPIOC, Zolty_1_Pin)==RESET)
 8012bda:	2140      	movs	r1, #64	@ 0x40
 8012bdc:	48a1      	ldr	r0, [pc, #644]	@ (8012e64 <UART_decision+0x374>)
 8012bde:	f004 f99b 	bl	8016f18 <HAL_GPIO_ReadPin>
 8012be2:	4603      	mov	r3, r0
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d109      	bne.n	8012bfc <UART_decision+0x10c>
				  {
					  HAL_UART_Transmit_IT(&huart2, &led2_on[bufRxIndex], 1);
 8012be8:	4b9f      	ldr	r3, [pc, #636]	@ (8012e68 <UART_decision+0x378>)
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	4aa3      	ldr	r2, [pc, #652]	@ (8012e7c <UART_decision+0x38c>)
 8012bee:	4413      	add	r3, r2
 8012bf0:	2201      	movs	r2, #1
 8012bf2:	4619      	mov	r1, r3
 8012bf4:	489e      	ldr	r0, [pc, #632]	@ (8012e70 <UART_decision+0x380>)
 8012bf6:	f006 f935 	bl	8018e64 <HAL_UART_Transmit_IT>
 8012bfa:	e008      	b.n	8012c0e <UART_decision+0x11e>
				  }
				  else
				  {
					  HAL_UART_Transmit_IT(&huart2, &led2_off[bufRxIndex], 1);
 8012bfc:	4b9a      	ldr	r3, [pc, #616]	@ (8012e68 <UART_decision+0x378>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	4a9f      	ldr	r2, [pc, #636]	@ (8012e80 <UART_decision+0x390>)
 8012c02:	4413      	add	r3, r2
 8012c04:	2201      	movs	r2, #1
 8012c06:	4619      	mov	r1, r3
 8012c08:	4899      	ldr	r0, [pc, #612]	@ (8012e70 <UART_decision+0x380>)
 8012c0a:	f006 f92b 	bl	8018e64 <HAL_UART_Transmit_IT>
				  }
		  	  	  tryb=2;
 8012c0e:	4b9a      	ldr	r3, [pc, #616]	@ (8012e78 <UART_decision+0x388>)
 8012c10:	2202      	movs	r2, #2
 8012c12:	601a      	str	r2, [r3, #0]
				  break;
 8012c14:	e18c      	b.n	8012f30 <UART_decision+0x440>
		  case 51:if(HAL_GPIO_ReadPin(GPIOC, Zielony_1_Pin)==RESET)
 8012c16:	2120      	movs	r1, #32
 8012c18:	4892      	ldr	r0, [pc, #584]	@ (8012e64 <UART_decision+0x374>)
 8012c1a:	f004 f97d 	bl	8016f18 <HAL_GPIO_ReadPin>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d109      	bne.n	8012c38 <UART_decision+0x148>
				  {
					  HAL_UART_Transmit_IT(&huart2, &led3_on[bufRxIndex], 1);
 8012c24:	4b90      	ldr	r3, [pc, #576]	@ (8012e68 <UART_decision+0x378>)
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	4a96      	ldr	r2, [pc, #600]	@ (8012e84 <UART_decision+0x394>)
 8012c2a:	4413      	add	r3, r2
 8012c2c:	2201      	movs	r2, #1
 8012c2e:	4619      	mov	r1, r3
 8012c30:	488f      	ldr	r0, [pc, #572]	@ (8012e70 <UART_decision+0x380>)
 8012c32:	f006 f917 	bl	8018e64 <HAL_UART_Transmit_IT>
 8012c36:	e008      	b.n	8012c4a <UART_decision+0x15a>
				  }
				  else
				  {
					  HAL_UART_Transmit_IT(&huart2, &led3_off[bufRxIndex], 1);
 8012c38:	4b8b      	ldr	r3, [pc, #556]	@ (8012e68 <UART_decision+0x378>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	4a92      	ldr	r2, [pc, #584]	@ (8012e88 <UART_decision+0x398>)
 8012c3e:	4413      	add	r3, r2
 8012c40:	2201      	movs	r2, #1
 8012c42:	4619      	mov	r1, r3
 8012c44:	488a      	ldr	r0, [pc, #552]	@ (8012e70 <UART_decision+0x380>)
 8012c46:	f006 f90d 	bl	8018e64 <HAL_UART_Transmit_IT>
				  }
		  	  	  tryb=3;
 8012c4a:	4b8b      	ldr	r3, [pc, #556]	@ (8012e78 <UART_decision+0x388>)
 8012c4c:	2203      	movs	r2, #3
 8012c4e:	601a      	str	r2, [r3, #0]
				  break;
 8012c50:	e16e      	b.n	8012f30 <UART_decision+0x440>
		  case 52:if(HAL_GPIO_ReadPin(GPIOC, Czerwony_2_Pin)==RESET)
 8012c52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012c56:	4883      	ldr	r0, [pc, #524]	@ (8012e64 <UART_decision+0x374>)
 8012c58:	f004 f95e 	bl	8016f18 <HAL_GPIO_ReadPin>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d109      	bne.n	8012c76 <UART_decision+0x186>
				  {
					  HAL_UART_Transmit_IT(&huart2, &led1_on[bufRxIndex], 1);
 8012c62:	4b81      	ldr	r3, [pc, #516]	@ (8012e68 <UART_decision+0x378>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	4a81      	ldr	r2, [pc, #516]	@ (8012e6c <UART_decision+0x37c>)
 8012c68:	4413      	add	r3, r2
 8012c6a:	2201      	movs	r2, #1
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	4880      	ldr	r0, [pc, #512]	@ (8012e70 <UART_decision+0x380>)
 8012c70:	f006 f8f8 	bl	8018e64 <HAL_UART_Transmit_IT>
 8012c74:	e008      	b.n	8012c88 <UART_decision+0x198>
				  }
				  else
				  {
					  HAL_UART_Transmit_IT(&huart2, &led1_off[bufRxIndex], 1);
 8012c76:	4b7c      	ldr	r3, [pc, #496]	@ (8012e68 <UART_decision+0x378>)
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	4a7e      	ldr	r2, [pc, #504]	@ (8012e74 <UART_decision+0x384>)
 8012c7c:	4413      	add	r3, r2
 8012c7e:	2201      	movs	r2, #1
 8012c80:	4619      	mov	r1, r3
 8012c82:	487b      	ldr	r0, [pc, #492]	@ (8012e70 <UART_decision+0x380>)
 8012c84:	f006 f8ee 	bl	8018e64 <HAL_UART_Transmit_IT>
				  }
				  tryb=1;
 8012c88:	4b7b      	ldr	r3, [pc, #492]	@ (8012e78 <UART_decision+0x388>)
 8012c8a:	2201      	movs	r2, #1
 8012c8c:	601a      	str	r2, [r3, #0]
				  break;
 8012c8e:	e14f      	b.n	8012f30 <UART_decision+0x440>
		  case 53:if(HAL_GPIO_ReadPin(GPIOB, Zolty_2_Pin)==RESET)
 8012c90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012c94:	487d      	ldr	r0, [pc, #500]	@ (8012e8c <UART_decision+0x39c>)
 8012c96:	f004 f93f 	bl	8016f18 <HAL_GPIO_ReadPin>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d109      	bne.n	8012cb4 <UART_decision+0x1c4>
				  {
					  HAL_UART_Transmit_IT(&huart2, &led2_on[bufRxIndex], 1);
 8012ca0:	4b71      	ldr	r3, [pc, #452]	@ (8012e68 <UART_decision+0x378>)
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	4a75      	ldr	r2, [pc, #468]	@ (8012e7c <UART_decision+0x38c>)
 8012ca6:	4413      	add	r3, r2
 8012ca8:	2201      	movs	r2, #1
 8012caa:	4619      	mov	r1, r3
 8012cac:	4870      	ldr	r0, [pc, #448]	@ (8012e70 <UART_decision+0x380>)
 8012cae:	f006 f8d9 	bl	8018e64 <HAL_UART_Transmit_IT>
 8012cb2:	e008      	b.n	8012cc6 <UART_decision+0x1d6>
				  }
				  else
				  {
					  HAL_UART_Transmit_IT(&huart2, &led2_off[bufRxIndex], 1);
 8012cb4:	4b6c      	ldr	r3, [pc, #432]	@ (8012e68 <UART_decision+0x378>)
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	4a71      	ldr	r2, [pc, #452]	@ (8012e80 <UART_decision+0x390>)
 8012cba:	4413      	add	r3, r2
 8012cbc:	2201      	movs	r2, #1
 8012cbe:	4619      	mov	r1, r3
 8012cc0:	486b      	ldr	r0, [pc, #428]	@ (8012e70 <UART_decision+0x380>)
 8012cc2:	f006 f8cf 	bl	8018e64 <HAL_UART_Transmit_IT>
				  }
				  tryb=2;
 8012cc6:	4b6c      	ldr	r3, [pc, #432]	@ (8012e78 <UART_decision+0x388>)
 8012cc8:	2202      	movs	r2, #2
 8012cca:	601a      	str	r2, [r3, #0]
				  break;
 8012ccc:	e130      	b.n	8012f30 <UART_decision+0x440>
		  case 54:if(HAL_GPIO_ReadPin(GPIOB, Zielony_2_Pin)==RESET)
 8012cce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012cd2:	486e      	ldr	r0, [pc, #440]	@ (8012e8c <UART_decision+0x39c>)
 8012cd4:	f004 f920 	bl	8016f18 <HAL_GPIO_ReadPin>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d109      	bne.n	8012cf2 <UART_decision+0x202>
				  {
					  HAL_UART_Transmit_IT(&huart2, &led3_on[bufRxIndex], 1);
 8012cde:	4b62      	ldr	r3, [pc, #392]	@ (8012e68 <UART_decision+0x378>)
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	4a68      	ldr	r2, [pc, #416]	@ (8012e84 <UART_decision+0x394>)
 8012ce4:	4413      	add	r3, r2
 8012ce6:	2201      	movs	r2, #1
 8012ce8:	4619      	mov	r1, r3
 8012cea:	4861      	ldr	r0, [pc, #388]	@ (8012e70 <UART_decision+0x380>)
 8012cec:	f006 f8ba 	bl	8018e64 <HAL_UART_Transmit_IT>
 8012cf0:	e008      	b.n	8012d04 <UART_decision+0x214>
				  }
				  else
				  {
					  HAL_UART_Transmit_IT(&huart2, &led3_off[bufRxIndex], 1);
 8012cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8012e68 <UART_decision+0x378>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	4a64      	ldr	r2, [pc, #400]	@ (8012e88 <UART_decision+0x398>)
 8012cf8:	4413      	add	r3, r2
 8012cfa:	2201      	movs	r2, #1
 8012cfc:	4619      	mov	r1, r3
 8012cfe:	485c      	ldr	r0, [pc, #368]	@ (8012e70 <UART_decision+0x380>)
 8012d00:	f006 f8b0 	bl	8018e64 <HAL_UART_Transmit_IT>
				  }
				  tryb=3;
 8012d04:	4b5c      	ldr	r3, [pc, #368]	@ (8012e78 <UART_decision+0x388>)
 8012d06:	2203      	movs	r2, #3
 8012d08:	601a      	str	r2, [r3, #0]
				  break;
 8012d0a:	e111      	b.n	8012f30 <UART_decision+0x440>
		  case 65:allsegment(FALSE); // A
 8012d0c:	2000      	movs	r0, #0
 8012d0e:	f000 ff79 	bl	8013c04 <allsegment>
		  	  	  aDC1_wyslano=FALSE;
 8012d12:	4b5f      	ldr	r3, [pc, #380]	@ (8012e90 <UART_decision+0x3a0>)
 8012d14:	2200      	movs	r2, #0
 8012d16:	701a      	strb	r2, [r3, #0]
		  	  	  aDC1=TRUE;
 8012d18:	4b5e      	ldr	r3, [pc, #376]	@ (8012e94 <UART_decision+0x3a4>)
 8012d1a:	2201      	movs	r2, #1
 8012d1c:	701a      	strb	r2, [r3, #0]
		  	  	  aDC2=FALSE;
 8012d1e:	4b5e      	ldr	r3, [pc, #376]	@ (8012e98 <UART_decision+0x3a8>)
 8012d20:	2200      	movs	r2, #0
 8012d22:	701a      	strb	r2, [r3, #0]
		  	  	  lineON=FALSE;
 8012d24:	4b5d      	ldr	r3, [pc, #372]	@ (8012e9c <UART_decision+0x3ac>)
 8012d26:	2200      	movs	r2, #0
 8012d28:	701a      	strb	r2, [r3, #0]
		  	  	  tryb=5;
 8012d2a:	4b53      	ldr	r3, [pc, #332]	@ (8012e78 <UART_decision+0x388>)
 8012d2c:	2205      	movs	r2, #5
 8012d2e:	601a      	str	r2, [r3, #0]
		  	  	  HAL_UART_Transmit_IT(&huart2, &dadc[bufRxIndex], 1);
 8012d30:	4b4d      	ldr	r3, [pc, #308]	@ (8012e68 <UART_decision+0x378>)
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	4a5a      	ldr	r2, [pc, #360]	@ (8012ea0 <UART_decision+0x3b0>)
 8012d36:	4413      	add	r3, r2
 8012d38:	2201      	movs	r2, #1
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	484c      	ldr	r0, [pc, #304]	@ (8012e70 <UART_decision+0x380>)
 8012d3e:	f006 f891 	bl	8018e64 <HAL_UART_Transmit_IT>
		  	  	  break;
 8012d42:	e0f5      	b.n	8012f30 <UART_decision+0x440>
		  case 66:allsegment(FALSE); // B
 8012d44:	2000      	movs	r0, #0
 8012d46:	f000 ff5d 	bl	8013c04 <allsegment>
		  	  	  aDC1_wyslano=FALSE;
 8012d4a:	4b51      	ldr	r3, [pc, #324]	@ (8012e90 <UART_decision+0x3a0>)
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	701a      	strb	r2, [r3, #0]
				  aDC1=FALSE;
 8012d50:	4b50      	ldr	r3, [pc, #320]	@ (8012e94 <UART_decision+0x3a4>)
 8012d52:	2200      	movs	r2, #0
 8012d54:	701a      	strb	r2, [r3, #0]
				  aDC2=TRUE;
 8012d56:	4b50      	ldr	r3, [pc, #320]	@ (8012e98 <UART_decision+0x3a8>)
 8012d58:	2201      	movs	r2, #1
 8012d5a:	701a      	strb	r2, [r3, #0]
				  lineON=FALSE;
 8012d5c:	4b4f      	ldr	r3, [pc, #316]	@ (8012e9c <UART_decision+0x3ac>)
 8012d5e:	2200      	movs	r2, #0
 8012d60:	701a      	strb	r2, [r3, #0]
				  tryb=5;
 8012d62:	4b45      	ldr	r3, [pc, #276]	@ (8012e78 <UART_decision+0x388>)
 8012d64:	2205      	movs	r2, #5
 8012d66:	601a      	str	r2, [r3, #0]
				  HAL_UART_Transmit_IT(&huart2, &dadc[bufRxIndex], 1);
 8012d68:	4b3f      	ldr	r3, [pc, #252]	@ (8012e68 <UART_decision+0x378>)
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	4a4c      	ldr	r2, [pc, #304]	@ (8012ea0 <UART_decision+0x3b0>)
 8012d6e:	4413      	add	r3, r2
 8012d70:	2201      	movs	r2, #1
 8012d72:	4619      	mov	r1, r3
 8012d74:	483e      	ldr	r0, [pc, #248]	@ (8012e70 <UART_decision+0x380>)
 8012d76:	f006 f875 	bl	8018e64 <HAL_UART_Transmit_IT>
				  break;
 8012d7a:	e0d9      	b.n	8012f30 <UART_decision+0x440>
		  case 68:allsegment(FALSE); //D
 8012d7c:	2000      	movs	r0, #0
 8012d7e:	f000 ff41 	bl	8013c04 <allsegment>
		  	  	  LCD_print_tryb_diody(1,1,1,ADRES);
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	2201      	movs	r2, #1
 8012d86:	2101      	movs	r1, #1
 8012d88:	2001      	movs	r0, #1
 8012d8a:	f7fe fe87 	bl	8011a9c <LCD_print_tryb_diody>
		  	  	  odebrano=FALSE;
 8012d8e:	4b45      	ldr	r3, [pc, #276]	@ (8012ea4 <UART_decision+0x3b4>)
 8012d90:	2200      	movs	r2, #0
 8012d92:	701a      	strb	r2, [r3, #0]
		  	  	  bufRxIndex=0;
 8012d94:	4b34      	ldr	r3, [pc, #208]	@ (8012e68 <UART_decision+0x378>)
 8012d96:	2200      	movs	r2, #0
 8012d98:	601a      	str	r2, [r3, #0]
		  	  	  HAL_UART_Transmit(&huart2, &diody, sizeof(diody)-1, HAL_MAX_DELAY);
 8012d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8012d9e:	2221      	movs	r2, #33	@ 0x21
 8012da0:	4941      	ldr	r1, [pc, #260]	@ (8012ea8 <UART_decision+0x3b8>)
 8012da2:	4833      	ldr	r0, [pc, #204]	@ (8012e70 <UART_decision+0x380>)
 8012da4:	f005 ffd4 	bl	8018d50 <HAL_UART_Transmit>
		  	  	  break;
 8012da8:	e0c2      	b.n	8012f30 <UART_decision+0x440>
		  case 76:allsegment(FALSE); // L
 8012daa:	2000      	movs	r0, #0
 8012dac:	f000 ff2a 	bl	8013c04 <allsegment>
				  aDC1=FALSE;
 8012db0:	4b38      	ldr	r3, [pc, #224]	@ (8012e94 <UART_decision+0x3a4>)
 8012db2:	2200      	movs	r2, #0
 8012db4:	701a      	strb	r2, [r3, #0]
				  aDC2=FALSE;
 8012db6:	4b38      	ldr	r3, [pc, #224]	@ (8012e98 <UART_decision+0x3a8>)
 8012db8:	2200      	movs	r2, #0
 8012dba:	701a      	strb	r2, [r3, #0]
				  aDC1_wyslano=FALSE;
 8012dbc:	4b34      	ldr	r3, [pc, #208]	@ (8012e90 <UART_decision+0x3a0>)
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	701a      	strb	r2, [r3, #0]
				  lineON=TRUE;
 8012dc2:	4b36      	ldr	r3, [pc, #216]	@ (8012e9c <UART_decision+0x3ac>)
 8012dc4:	2201      	movs	r2, #1
 8012dc6:	701a      	strb	r2, [r3, #0]
				  tryb=6;
 8012dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8012e78 <UART_decision+0x388>)
 8012dca:	2206      	movs	r2, #6
 8012dcc:	601a      	str	r2, [r3, #0]
				  HAL_UART_Transmit_IT(&huart2, &line[bufRxIndex], 1);
 8012dce:	4b26      	ldr	r3, [pc, #152]	@ (8012e68 <UART_decision+0x378>)
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	4a36      	ldr	r2, [pc, #216]	@ (8012eac <UART_decision+0x3bc>)
 8012dd4:	4413      	add	r3, r2
 8012dd6:	2201      	movs	r2, #1
 8012dd8:	4619      	mov	r1, r3
 8012dda:	4825      	ldr	r0, [pc, #148]	@ (8012e70 <UART_decision+0x380>)
 8012ddc:	f006 f842 	bl	8018e64 <HAL_UART_Transmit_IT>
				  break;
 8012de0:	e0a6      	b.n	8012f30 <UART_decision+0x440>
		  case 77:odebrano=FALSE; // M
 8012de2:	4b30      	ldr	r3, [pc, #192]	@ (8012ea4 <UART_decision+0x3b4>)
 8012de4:	2200      	movs	r2, #0
 8012de6:	701a      	strb	r2, [r3, #0]
		  	  	  bufRxIndex=0;
 8012de8:	4b1f      	ldr	r3, [pc, #124]	@ (8012e68 <UART_decision+0x378>)
 8012dea:	2200      	movs	r2, #0
 8012dec:	601a      	str	r2, [r3, #0]
		  	  	  aDC1_wyslano=FALSE;
 8012dee:	4b28      	ldr	r3, [pc, #160]	@ (8012e90 <UART_decision+0x3a0>)
 8012df0:	2200      	movs	r2, #0
 8012df2:	701a      	strb	r2, [r3, #0]
		  	  	  tryb=0;
 8012df4:	4b20      	ldr	r3, [pc, #128]	@ (8012e78 <UART_decision+0x388>)
 8012df6:	2200      	movs	r2, #0
 8012df8:	601a      	str	r2, [r3, #0]
		  	  	  LCD_printMENU(1,1,1,ADRES);
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	2201      	movs	r2, #1
 8012dfe:	2101      	movs	r1, #1
 8012e00:	2001      	movs	r0, #1
 8012e02:	f7fe f935 	bl	8011070 <LCD_printMENU>
		  	  	  HAL_UART_Transmit(&huart2, &powitanie, sizeof(powitanie)-1, HAL_MAX_DELAY);
 8012e06:	f04f 33ff 	mov.w	r3, #4294967295
 8012e0a:	f240 221e 	movw	r2, #542	@ 0x21e
 8012e0e:	4928      	ldr	r1, [pc, #160]	@ (8012eb0 <UART_decision+0x3c0>)
 8012e10:	4817      	ldr	r0, [pc, #92]	@ (8012e70 <UART_decision+0x380>)
 8012e12:	f005 ff9d 	bl	8018d50 <HAL_UART_Transmit>
		  	  	  HAL_UART_Receive_IT(&huart2, &buforRx[bufRxIndex], 1);
 8012e16:	4b14      	ldr	r3, [pc, #80]	@ (8012e68 <UART_decision+0x378>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	4a26      	ldr	r2, [pc, #152]	@ (8012eb4 <UART_decision+0x3c4>)
 8012e1c:	4413      	add	r3, r2
 8012e1e:	2201      	movs	r2, #1
 8012e20:	4619      	mov	r1, r3
 8012e22:	4813      	ldr	r0, [pc, #76]	@ (8012e70 <UART_decision+0x380>)
 8012e24:	f006 f87c 	bl	8018f20 <HAL_UART_Receive_IT>
		  	  	  break;
 8012e28:	e082      	b.n	8012f30 <UART_decision+0x440>
		  case 82: 						// R
			  	  HAL_GPIO_WritePin(GPIOC, Czerwony_1_Pin | Zolty_1_Pin | Zielony_1_Pin | Czerwony_2_Pin, RESET);
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	f44f 7158 	mov.w	r1, #864	@ 0x360
 8012e30:	480c      	ldr	r0, [pc, #48]	@ (8012e64 <UART_decision+0x374>)
 8012e32:	f004 f889 	bl	8016f48 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, Zolty_2_Pin | Zielony_2_Pin, RESET);
 8012e36:	2200      	movs	r2, #0
 8012e38:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8012e3c:	4813      	ldr	r0, [pc, #76]	@ (8012e8c <UART_decision+0x39c>)
 8012e3e:	f004 f883 	bl	8016f48 <HAL_GPIO_WritePin>
				  tryb=4;
 8012e42:	4b0d      	ldr	r3, [pc, #52]	@ (8012e78 <UART_decision+0x388>)
 8012e44:	2204      	movs	r2, #4
 8012e46:	601a      	str	r2, [r3, #0]
				  dSTATE=0x00;
 8012e48:	4b1b      	ldr	r3, [pc, #108]	@ (8012eb8 <UART_decision+0x3c8>)
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit_IT(&huart2, &all_off[bufRxIndex], 1);
 8012e4e:	4b06      	ldr	r3, [pc, #24]	@ (8012e68 <UART_decision+0x378>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	4a1a      	ldr	r2, [pc, #104]	@ (8012ebc <UART_decision+0x3cc>)
 8012e54:	4413      	add	r3, r2
 8012e56:	2201      	movs	r2, #1
 8012e58:	4619      	mov	r1, r3
 8012e5a:	4805      	ldr	r0, [pc, #20]	@ (8012e70 <UART_decision+0x380>)
 8012e5c:	f006 f802 	bl	8018e64 <HAL_UART_Transmit_IT>
				  break;
 8012e60:	e066      	b.n	8012f30 <UART_decision+0x440>
 8012e62:	bf00      	nop
 8012e64:	48000800 	.word	0x48000800
 8012e68:	20000480 	.word	0x20000480
 8012e6c:	20000024 	.word	0x20000024
 8012e70:	20000508 	.word	0x20000508
 8012e74:	2000006c 	.word	0x2000006c
 8012e78:	20000488 	.word	0x20000488
 8012e7c:	2000003c 	.word	0x2000003c
 8012e80:	20000084 	.word	0x20000084
 8012e84:	20000054 	.word	0x20000054
 8012e88:	2000009c 	.word	0x2000009c
 8012e8c:	48000400 	.word	0x48000400
 8012e90:	2000047c 	.word	0x2000047c
 8012e94:	2000047a 	.word	0x2000047a
 8012e98:	2000047b 	.word	0x2000047b
 8012e9c:	20000479 	.word	0x20000479
 8012ea0:	2000010c 	.word	0x2000010c
 8012ea4:	20000478 	.word	0x20000478
 8012ea8:	20000000 	.word	0x20000000
 8012eac:	200000e8 	.word	0x200000e8
 8012eb0:	20000164 	.word	0x20000164
 8012eb4:	20000490 	.word	0x20000490
 8012eb8:	2000047d 	.word	0x2000047d
 8012ebc:	200000b4 	.word	0x200000b4
		  case 83:allsegment(FALSE); // S
 8012ec0:	2000      	movs	r0, #0
 8012ec2:	f000 fe9f 	bl	8013c04 <allsegment>
			  	  tryb=7;
 8012ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8012f38 <UART_decision+0x448>)
 8012ec8:	2207      	movs	r2, #7
 8012eca:	601a      	str	r2, [r3, #0]
				  aDC1_wyslano=FALSE;
 8012ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8012f3c <UART_decision+0x44c>)
 8012ece:	2200      	movs	r2, #0
 8012ed0:	701a      	strb	r2, [r3, #0]
				  aDC1=FALSE;
 8012ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8012f40 <UART_decision+0x450>)
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	701a      	strb	r2, [r3, #0]
				  aDC2=FALSE;
 8012ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8012f44 <UART_decision+0x454>)
 8012eda:	2200      	movs	r2, #0
 8012edc:	701a      	strb	r2, [r3, #0]
				  lineON=FALSE;
 8012ede:	4b1a      	ldr	r3, [pc, #104]	@ (8012f48 <UART_decision+0x458>)
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	701a      	strb	r2, [r3, #0]
		  	  	  HAL_UART_Transmit_IT(&huart2, &tsegment[bufRxIndex], 1);
 8012ee4:	4b19      	ldr	r3, [pc, #100]	@ (8012f4c <UART_decision+0x45c>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	4a19      	ldr	r2, [pc, #100]	@ (8012f50 <UART_decision+0x460>)
 8012eea:	4413      	add	r3, r2
 8012eec:	2201      	movs	r2, #1
 8012eee:	4619      	mov	r1, r3
 8012ef0:	4818      	ldr	r0, [pc, #96]	@ (8012f54 <UART_decision+0x464>)
 8012ef2:	f005 ffb7 	bl	8018e64 <HAL_UART_Transmit_IT>
		  	  	  break;
 8012ef6:	e01b      	b.n	8012f30 <UART_decision+0x440>
		  default:HAL_GPIO_WritePin(GPIOC, Czerwony_1_Pin | Zolty_1_Pin | Zielony_1_Pin | Czerwony_2_Pin, RESET);
 8012ef8:	2200      	movs	r2, #0
 8012efa:	f44f 7158 	mov.w	r1, #864	@ 0x360
 8012efe:	4816      	ldr	r0, [pc, #88]	@ (8012f58 <UART_decision+0x468>)
 8012f00:	f004 f822 	bl	8016f48 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, Zolty_2_Pin | Zielony_2_Pin, RESET);
 8012f04:	2200      	movs	r2, #0
 8012f06:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8012f0a:	4814      	ldr	r0, [pc, #80]	@ (8012f5c <UART_decision+0x46c>)
 8012f0c:	f004 f81c 	bl	8016f48 <HAL_GPIO_WritePin>
				  tryb=0;
 8012f10:	4b09      	ldr	r3, [pc, #36]	@ (8012f38 <UART_decision+0x448>)
 8012f12:	2200      	movs	r2, #0
 8012f14:	601a      	str	r2, [r3, #0]
				  dSTATE=0x00;
 8012f16:	4b12      	ldr	r3, [pc, #72]	@ (8012f60 <UART_decision+0x470>)
 8012f18:	2200      	movs	r2, #0
 8012f1a:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit_IT(&huart2, &led[bufRxIndex], 1);
 8012f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8012f4c <UART_decision+0x45c>)
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	4a10      	ldr	r2, [pc, #64]	@ (8012f64 <UART_decision+0x474>)
 8012f22:	4413      	add	r3, r2
 8012f24:	2201      	movs	r2, #1
 8012f26:	4619      	mov	r1, r3
 8012f28:	480a      	ldr	r0, [pc, #40]	@ (8012f54 <UART_decision+0x464>)
 8012f2a:	f005 ff9b 	bl	8018e64 <HAL_UART_Transmit_IT>
				  break;
 8012f2e:	bf00      	nop
	  }
}
 8012f30:	bf00      	nop
 8012f32:	3710      	adds	r7, #16
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}
 8012f38:	20000488 	.word	0x20000488
 8012f3c:	2000047c 	.word	0x2000047c
 8012f40:	2000047a 	.word	0x2000047a
 8012f44:	2000047b 	.word	0x2000047b
 8012f48:	20000479 	.word	0x20000479
 8012f4c:	20000480 	.word	0x20000480
 8012f50:	200000d0 	.word	0x200000d0
 8012f54:	20000508 	.word	0x20000508
 8012f58:	48000800 	.word	0x48000800
 8012f5c:	48000400 	.word	0x48000400
 8012f60:	2000047d 	.word	0x2000047d
 8012f64:	20000138 	.word	0x20000138

08012f68 <UART_transmit>:

void UART_transmit(unsigned int n)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b082      	sub	sp, #8
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
	switch(n)
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	3b01      	subs	r3, #1
 8012f74:	2b06      	cmp	r3, #6
 8012f76:	f200 822d 	bhi.w	80133d4 <UART_transmit+0x46c>
 8012f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8012f80 <UART_transmit+0x18>)
 8012f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f80:	08012f9d 	.word	0x08012f9d
 8012f84:	080130a1 	.word	0x080130a1
 8012f88:	080131a1 	.word	0x080131a1
 8012f8c:	080132d5 	.word	0x080132d5
 8012f90:	08013315 	.word	0x08013315
 8012f94:	08013359 	.word	0x08013359
 8012f98:	08013397 	.word	0x08013397
	{
	case 1: if(led1_on[bufRxIndex]==0x00 || led1_off[bufRxIndex]==0x00)
 8012f9c:	4b9b      	ldr	r3, [pc, #620]	@ (801320c <UART_transmit+0x2a4>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	4a9b      	ldr	r2, [pc, #620]	@ (8013210 <UART_transmit+0x2a8>)
 8012fa2:	5cd3      	ldrb	r3, [r2, r3]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d005      	beq.n	8012fb4 <UART_transmit+0x4c>
 8012fa8:	4b98      	ldr	r3, [pc, #608]	@ (801320c <UART_transmit+0x2a4>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	4a99      	ldr	r2, [pc, #612]	@ (8013214 <UART_transmit+0x2ac>)
 8012fae:	5cd3      	ldrb	r3, [r2, r3]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d109      	bne.n	8012fc8 <UART_transmit+0x60>
			{
				led1_on[bufRxIndex]=0x0A;
 8012fb4:	4b95      	ldr	r3, [pc, #596]	@ (801320c <UART_transmit+0x2a4>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	4a95      	ldr	r2, [pc, #596]	@ (8013210 <UART_transmit+0x2a8>)
 8012fba:	210a      	movs	r1, #10
 8012fbc:	54d1      	strb	r1, [r2, r3]
				led1_off[bufRxIndex]=0x0A;
 8012fbe:	4b93      	ldr	r3, [pc, #588]	@ (801320c <UART_transmit+0x2a4>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	4a94      	ldr	r2, [pc, #592]	@ (8013214 <UART_transmit+0x2ac>)
 8012fc4:	210a      	movs	r1, #10
 8012fc6:	54d1      	strb	r1, [r2, r3]
			}
			if(bufRxIndex==(sizeof(led1_on)/sizeof(char)) || bufRxIndex==(sizeof(led1_off)/sizeof(char)))
 8012fc8:	4b90      	ldr	r3, [pc, #576]	@ (801320c <UART_transmit+0x2a4>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	2b18      	cmp	r3, #24
 8012fce:	d004      	beq.n	8012fda <UART_transmit+0x72>
 8012fd0:	4b8e      	ldr	r3, [pc, #568]	@ (801320c <UART_transmit+0x2a4>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	2b18      	cmp	r3, #24
 8012fd6:	f040 821c 	bne.w	8013412 <UART_transmit+0x4aa>
			{
				if(buforRx[0]==49)
 8012fda:	4b8f      	ldr	r3, [pc, #572]	@ (8013218 <UART_transmit+0x2b0>)
 8012fdc:	781b      	ldrb	r3, [r3, #0]
 8012fde:	2b31      	cmp	r3, #49	@ 0x31
 8012fe0:	d127      	bne.n	8013032 <UART_transmit+0xca>
				{
					if((dSTATE&0x01)==0x00)
 8012fe2:	4b8e      	ldr	r3, [pc, #568]	@ (801321c <UART_transmit+0x2b4>)
 8012fe4:	781b      	ldrb	r3, [r3, #0]
 8012fe6:	f003 0301 	and.w	r3, r3, #1
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d10d      	bne.n	801300a <UART_transmit+0xa2>
					{
						HAL_GPIO_WritePin(GPIOC, Czerwony_1_Pin, SET);
 8012fee:	2201      	movs	r2, #1
 8012ff0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012ff4:	488a      	ldr	r0, [pc, #552]	@ (8013220 <UART_transmit+0x2b8>)
 8012ff6:	f003 ffa7 	bl	8016f48 <HAL_GPIO_WritePin>
						dSTATE=dSTATE^0x01;
 8012ffa:	4b88      	ldr	r3, [pc, #544]	@ (801321c <UART_transmit+0x2b4>)
 8012ffc:	781b      	ldrb	r3, [r3, #0]
 8012ffe:	f083 0301 	eor.w	r3, r3, #1
 8013002:	b2da      	uxtb	r2, r3
 8013004:	4b85      	ldr	r3, [pc, #532]	@ (801321c <UART_transmit+0x2b4>)
 8013006:	701a      	strb	r2, [r3, #0]
 8013008:	e03a      	b.n	8013080 <UART_transmit+0x118>
					}
					else if((dSTATE&0x01)==0x01)
 801300a:	4b84      	ldr	r3, [pc, #528]	@ (801321c <UART_transmit+0x2b4>)
 801300c:	781b      	ldrb	r3, [r3, #0]
 801300e:	f003 0301 	and.w	r3, r3, #1
 8013012:	2b00      	cmp	r3, #0
 8013014:	d034      	beq.n	8013080 <UART_transmit+0x118>
					{
						HAL_GPIO_WritePin(GPIOC, Czerwony_1_Pin, RESET);
 8013016:	2200      	movs	r2, #0
 8013018:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801301c:	4880      	ldr	r0, [pc, #512]	@ (8013220 <UART_transmit+0x2b8>)
 801301e:	f003 ff93 	bl	8016f48 <HAL_GPIO_WritePin>
						dSTATE=dSTATE^0x01;
 8013022:	4b7e      	ldr	r3, [pc, #504]	@ (801321c <UART_transmit+0x2b4>)
 8013024:	781b      	ldrb	r3, [r3, #0]
 8013026:	f083 0301 	eor.w	r3, r3, #1
 801302a:	b2da      	uxtb	r2, r3
 801302c:	4b7b      	ldr	r3, [pc, #492]	@ (801321c <UART_transmit+0x2b4>)
 801302e:	701a      	strb	r2, [r3, #0]
 8013030:	e026      	b.n	8013080 <UART_transmit+0x118>
					}
				}
				else
				{
					if((dSTATE&0x08)==0x00)
 8013032:	4b7a      	ldr	r3, [pc, #488]	@ (801321c <UART_transmit+0x2b4>)
 8013034:	781b      	ldrb	r3, [r3, #0]
 8013036:	f003 0308 	and.w	r3, r3, #8
 801303a:	2b00      	cmp	r3, #0
 801303c:	d10d      	bne.n	801305a <UART_transmit+0xf2>
					{
						HAL_GPIO_WritePin(GPIOC, Czerwony_2_Pin, SET);
 801303e:	2201      	movs	r2, #1
 8013040:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8013044:	4876      	ldr	r0, [pc, #472]	@ (8013220 <UART_transmit+0x2b8>)
 8013046:	f003 ff7f 	bl	8016f48 <HAL_GPIO_WritePin>
						dSTATE=dSTATE^0x08;
 801304a:	4b74      	ldr	r3, [pc, #464]	@ (801321c <UART_transmit+0x2b4>)
 801304c:	781b      	ldrb	r3, [r3, #0]
 801304e:	f083 0308 	eor.w	r3, r3, #8
 8013052:	b2da      	uxtb	r2, r3
 8013054:	4b71      	ldr	r3, [pc, #452]	@ (801321c <UART_transmit+0x2b4>)
 8013056:	701a      	strb	r2, [r3, #0]
 8013058:	e012      	b.n	8013080 <UART_transmit+0x118>
					}
					else if((dSTATE&0x08)==0x08)
 801305a:	4b70      	ldr	r3, [pc, #448]	@ (801321c <UART_transmit+0x2b4>)
 801305c:	781b      	ldrb	r3, [r3, #0]
 801305e:	f003 0308 	and.w	r3, r3, #8
 8013062:	2b00      	cmp	r3, #0
 8013064:	d00c      	beq.n	8013080 <UART_transmit+0x118>
					{
					    HAL_GPIO_WritePin(GPIOC, Czerwony_2_Pin, RESET);
 8013066:	2200      	movs	r2, #0
 8013068:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801306c:	486c      	ldr	r0, [pc, #432]	@ (8013220 <UART_transmit+0x2b8>)
 801306e:	f003 ff6b 	bl	8016f48 <HAL_GPIO_WritePin>
					    dSTATE=dSTATE^0x08;
 8013072:	4b6a      	ldr	r3, [pc, #424]	@ (801321c <UART_transmit+0x2b4>)
 8013074:	781b      	ldrb	r3, [r3, #0]
 8013076:	f083 0308 	eor.w	r3, r3, #8
 801307a:	b2da      	uxtb	r2, r3
 801307c:	4b67      	ldr	r3, [pc, #412]	@ (801321c <UART_transmit+0x2b4>)
 801307e:	701a      	strb	r2, [r3, #0]
					}
				}
			bufRxIndex=0;
 8013080:	4b62      	ldr	r3, [pc, #392]	@ (801320c <UART_transmit+0x2a4>)
 8013082:	2200      	movs	r2, #0
 8013084:	601a      	str	r2, [r3, #0]
			odebrano=FALSE;
 8013086:	4b67      	ldr	r3, [pc, #412]	@ (8013224 <UART_transmit+0x2bc>)
 8013088:	2200      	movs	r2, #0
 801308a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &buforRx[bufRxIndex], 1);
 801308c:	4b5f      	ldr	r3, [pc, #380]	@ (801320c <UART_transmit+0x2a4>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	4a61      	ldr	r2, [pc, #388]	@ (8013218 <UART_transmit+0x2b0>)
 8013092:	4413      	add	r3, r2
 8013094:	2201      	movs	r2, #1
 8013096:	4619      	mov	r1, r3
 8013098:	4863      	ldr	r0, [pc, #396]	@ (8013228 <UART_transmit+0x2c0>)
 801309a:	f005 ff41 	bl	8018f20 <HAL_UART_Receive_IT>
			}
			break;
 801309e:	e1b8      	b.n	8013412 <UART_transmit+0x4aa>
	case 2: if(led2_on[bufRxIndex]==0x00 || led2_off[bufRxIndex]==0x00)
 80130a0:	4b5a      	ldr	r3, [pc, #360]	@ (801320c <UART_transmit+0x2a4>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	4a61      	ldr	r2, [pc, #388]	@ (801322c <UART_transmit+0x2c4>)
 80130a6:	5cd3      	ldrb	r3, [r2, r3]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d005      	beq.n	80130b8 <UART_transmit+0x150>
 80130ac:	4b57      	ldr	r3, [pc, #348]	@ (801320c <UART_transmit+0x2a4>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	4a5f      	ldr	r2, [pc, #380]	@ (8013230 <UART_transmit+0x2c8>)
 80130b2:	5cd3      	ldrb	r3, [r2, r3]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d109      	bne.n	80130cc <UART_transmit+0x164>
			{
				led2_on[bufRxIndex]=0x0A;
 80130b8:	4b54      	ldr	r3, [pc, #336]	@ (801320c <UART_transmit+0x2a4>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	4a5b      	ldr	r2, [pc, #364]	@ (801322c <UART_transmit+0x2c4>)
 80130be:	210a      	movs	r1, #10
 80130c0:	54d1      	strb	r1, [r2, r3]
				led2_off[bufRxIndex]=0x0A;
 80130c2:	4b52      	ldr	r3, [pc, #328]	@ (801320c <UART_transmit+0x2a4>)
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	4a5a      	ldr	r2, [pc, #360]	@ (8013230 <UART_transmit+0x2c8>)
 80130c8:	210a      	movs	r1, #10
 80130ca:	54d1      	strb	r1, [r2, r3]
			}
			if(bufRxIndex==(sizeof(led2_on)/sizeof(char))||bufRxIndex==(sizeof(led2_off)/sizeof(char)))
 80130cc:	4b4f      	ldr	r3, [pc, #316]	@ (801320c <UART_transmit+0x2a4>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	2b15      	cmp	r3, #21
 80130d2:	d004      	beq.n	80130de <UART_transmit+0x176>
 80130d4:	4b4d      	ldr	r3, [pc, #308]	@ (801320c <UART_transmit+0x2a4>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	2b15      	cmp	r3, #21
 80130da:	f040 819c 	bne.w	8013416 <UART_transmit+0x4ae>
			{
				if(buforRx[0]==50)
 80130de:	4b4e      	ldr	r3, [pc, #312]	@ (8013218 <UART_transmit+0x2b0>)
 80130e0:	781b      	ldrb	r3, [r3, #0]
 80130e2:	2b32      	cmp	r3, #50	@ 0x32
 80130e4:	d125      	bne.n	8013132 <UART_transmit+0x1ca>
				{
					if((dSTATE&0x02)==0x00)
 80130e6:	4b4d      	ldr	r3, [pc, #308]	@ (801321c <UART_transmit+0x2b4>)
 80130e8:	781b      	ldrb	r3, [r3, #0]
 80130ea:	f003 0302 	and.w	r3, r3, #2
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d10c      	bne.n	801310c <UART_transmit+0x1a4>
					{
						dSTATE=dSTATE|0x02;
 80130f2:	4b4a      	ldr	r3, [pc, #296]	@ (801321c <UART_transmit+0x2b4>)
 80130f4:	781b      	ldrb	r3, [r3, #0]
 80130f6:	f043 0302 	orr.w	r3, r3, #2
 80130fa:	b2da      	uxtb	r2, r3
 80130fc:	4b47      	ldr	r3, [pc, #284]	@ (801321c <UART_transmit+0x2b4>)
 80130fe:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOC, Zolty_1_Pin, SET);
 8013100:	2201      	movs	r2, #1
 8013102:	2140      	movs	r1, #64	@ 0x40
 8013104:	4846      	ldr	r0, [pc, #280]	@ (8013220 <UART_transmit+0x2b8>)
 8013106:	f003 ff1f 	bl	8016f48 <HAL_GPIO_WritePin>
 801310a:	e039      	b.n	8013180 <UART_transmit+0x218>
					}
					else if((dSTATE&0x02)==0x02)
 801310c:	4b43      	ldr	r3, [pc, #268]	@ (801321c <UART_transmit+0x2b4>)
 801310e:	781b      	ldrb	r3, [r3, #0]
 8013110:	f003 0302 	and.w	r3, r3, #2
 8013114:	2b00      	cmp	r3, #0
 8013116:	d033      	beq.n	8013180 <UART_transmit+0x218>
					{
						dSTATE=dSTATE^0x02;
 8013118:	4b40      	ldr	r3, [pc, #256]	@ (801321c <UART_transmit+0x2b4>)
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	f083 0302 	eor.w	r3, r3, #2
 8013120:	b2da      	uxtb	r2, r3
 8013122:	4b3e      	ldr	r3, [pc, #248]	@ (801321c <UART_transmit+0x2b4>)
 8013124:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOC, Zolty_1_Pin, RESET);
 8013126:	2200      	movs	r2, #0
 8013128:	2140      	movs	r1, #64	@ 0x40
 801312a:	483d      	ldr	r0, [pc, #244]	@ (8013220 <UART_transmit+0x2b8>)
 801312c:	f003 ff0c 	bl	8016f48 <HAL_GPIO_WritePin>
 8013130:	e026      	b.n	8013180 <UART_transmit+0x218>
					}
				}
				else
				{
					if((dSTATE&0x10)==0x00)
 8013132:	4b3a      	ldr	r3, [pc, #232]	@ (801321c <UART_transmit+0x2b4>)
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	f003 0310 	and.w	r3, r3, #16
 801313a:	2b00      	cmp	r3, #0
 801313c:	d10d      	bne.n	801315a <UART_transmit+0x1f2>
					{
						dSTATE=dSTATE|0x10;
 801313e:	4b37      	ldr	r3, [pc, #220]	@ (801321c <UART_transmit+0x2b4>)
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	f043 0310 	orr.w	r3, r3, #16
 8013146:	b2da      	uxtb	r2, r3
 8013148:	4b34      	ldr	r3, [pc, #208]	@ (801321c <UART_transmit+0x2b4>)
 801314a:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, Zolty_2_Pin, SET);
 801314c:	2201      	movs	r2, #1
 801314e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013152:	4838      	ldr	r0, [pc, #224]	@ (8013234 <UART_transmit+0x2cc>)
 8013154:	f003 fef8 	bl	8016f48 <HAL_GPIO_WritePin>
 8013158:	e012      	b.n	8013180 <UART_transmit+0x218>
					}
					else if((dSTATE&0x10)==0x10)
 801315a:	4b30      	ldr	r3, [pc, #192]	@ (801321c <UART_transmit+0x2b4>)
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	f003 0310 	and.w	r3, r3, #16
 8013162:	2b00      	cmp	r3, #0
 8013164:	d00c      	beq.n	8013180 <UART_transmit+0x218>
					{
						dSTATE=dSTATE^0x10;
 8013166:	4b2d      	ldr	r3, [pc, #180]	@ (801321c <UART_transmit+0x2b4>)
 8013168:	781b      	ldrb	r3, [r3, #0]
 801316a:	f083 0310 	eor.w	r3, r3, #16
 801316e:	b2da      	uxtb	r2, r3
 8013170:	4b2a      	ldr	r3, [pc, #168]	@ (801321c <UART_transmit+0x2b4>)
 8013172:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, Zolty_2_Pin, RESET);
 8013174:	2200      	movs	r2, #0
 8013176:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801317a:	482e      	ldr	r0, [pc, #184]	@ (8013234 <UART_transmit+0x2cc>)
 801317c:	f003 fee4 	bl	8016f48 <HAL_GPIO_WritePin>
					}
				}
			bufRxIndex=0;
 8013180:	4b22      	ldr	r3, [pc, #136]	@ (801320c <UART_transmit+0x2a4>)
 8013182:	2200      	movs	r2, #0
 8013184:	601a      	str	r2, [r3, #0]
			odebrano=FALSE;
 8013186:	4b27      	ldr	r3, [pc, #156]	@ (8013224 <UART_transmit+0x2bc>)
 8013188:	2200      	movs	r2, #0
 801318a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &buforRx[bufRxIndex], 1);
 801318c:	4b1f      	ldr	r3, [pc, #124]	@ (801320c <UART_transmit+0x2a4>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	4a21      	ldr	r2, [pc, #132]	@ (8013218 <UART_transmit+0x2b0>)
 8013192:	4413      	add	r3, r2
 8013194:	2201      	movs	r2, #1
 8013196:	4619      	mov	r1, r3
 8013198:	4823      	ldr	r0, [pc, #140]	@ (8013228 <UART_transmit+0x2c0>)
 801319a:	f005 fec1 	bl	8018f20 <HAL_UART_Receive_IT>
			}
			break;
 801319e:	e13a      	b.n	8013416 <UART_transmit+0x4ae>
	case 3: if(led3_on[bufRxIndex]==0x00||led3_off[bufRxIndex]==0x00)
 80131a0:	4b1a      	ldr	r3, [pc, #104]	@ (801320c <UART_transmit+0x2a4>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	4a24      	ldr	r2, [pc, #144]	@ (8013238 <UART_transmit+0x2d0>)
 80131a6:	5cd3      	ldrb	r3, [r2, r3]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d005      	beq.n	80131b8 <UART_transmit+0x250>
 80131ac:	4b17      	ldr	r3, [pc, #92]	@ (801320c <UART_transmit+0x2a4>)
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	4a22      	ldr	r2, [pc, #136]	@ (801323c <UART_transmit+0x2d4>)
 80131b2:	5cd3      	ldrb	r3, [r2, r3]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d109      	bne.n	80131cc <UART_transmit+0x264>
			{
				led3_on[bufRxIndex]=0x0A;
 80131b8:	4b14      	ldr	r3, [pc, #80]	@ (801320c <UART_transmit+0x2a4>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	4a1e      	ldr	r2, [pc, #120]	@ (8013238 <UART_transmit+0x2d0>)
 80131be:	210a      	movs	r1, #10
 80131c0:	54d1      	strb	r1, [r2, r3]
				led3_off[bufRxIndex]=0x0A;
 80131c2:	4b12      	ldr	r3, [pc, #72]	@ (801320c <UART_transmit+0x2a4>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	4a1d      	ldr	r2, [pc, #116]	@ (801323c <UART_transmit+0x2d4>)
 80131c8:	210a      	movs	r1, #10
 80131ca:	54d1      	strb	r1, [r2, r3]
			}
			if(bufRxIndex==(sizeof(led3_on)/sizeof(char))||bufRxIndex==(sizeof(led3_off)/sizeof(char)))
 80131cc:	4b0f      	ldr	r3, [pc, #60]	@ (801320c <UART_transmit+0x2a4>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	2b17      	cmp	r3, #23
 80131d2:	d004      	beq.n	80131de <UART_transmit+0x276>
 80131d4:	4b0d      	ldr	r3, [pc, #52]	@ (801320c <UART_transmit+0x2a4>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	2b17      	cmp	r3, #23
 80131da:	f040 811e 	bne.w	801341a <UART_transmit+0x4b2>
			{
				if(buforRx[0]==51)
 80131de:	4b0e      	ldr	r3, [pc, #56]	@ (8013218 <UART_transmit+0x2b0>)
 80131e0:	781b      	ldrb	r3, [r3, #0]
 80131e2:	2b33      	cmp	r3, #51	@ 0x33
 80131e4:	d13f      	bne.n	8013266 <UART_transmit+0x2fe>
				{
					if((dSTATE&0x04)==0x00)
 80131e6:	4b0d      	ldr	r3, [pc, #52]	@ (801321c <UART_transmit+0x2b4>)
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	f003 0304 	and.w	r3, r3, #4
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d126      	bne.n	8013240 <UART_transmit+0x2d8>
					{
						dSTATE=dSTATE|0x04;
 80131f2:	4b0a      	ldr	r3, [pc, #40]	@ (801321c <UART_transmit+0x2b4>)
 80131f4:	781b      	ldrb	r3, [r3, #0]
 80131f6:	f043 0304 	orr.w	r3, r3, #4
 80131fa:	b2da      	uxtb	r2, r3
 80131fc:	4b07      	ldr	r3, [pc, #28]	@ (801321c <UART_transmit+0x2b4>)
 80131fe:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOC, Zielony_1_Pin, SET);
 8013200:	2201      	movs	r2, #1
 8013202:	2120      	movs	r1, #32
 8013204:	4806      	ldr	r0, [pc, #24]	@ (8013220 <UART_transmit+0x2b8>)
 8013206:	f003 fe9f 	bl	8016f48 <HAL_GPIO_WritePin>
 801320a:	e053      	b.n	80132b4 <UART_transmit+0x34c>
 801320c:	20000480 	.word	0x20000480
 8013210:	20000024 	.word	0x20000024
 8013214:	2000006c 	.word	0x2000006c
 8013218:	20000490 	.word	0x20000490
 801321c:	2000047d 	.word	0x2000047d
 8013220:	48000800 	.word	0x48000800
 8013224:	20000478 	.word	0x20000478
 8013228:	20000508 	.word	0x20000508
 801322c:	2000003c 	.word	0x2000003c
 8013230:	20000084 	.word	0x20000084
 8013234:	48000400 	.word	0x48000400
 8013238:	20000054 	.word	0x20000054
 801323c:	2000009c 	.word	0x2000009c
					}
					else if((dSTATE&0x04)==0x04)
 8013240:	4b7d      	ldr	r3, [pc, #500]	@ (8013438 <UART_transmit+0x4d0>)
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	f003 0304 	and.w	r3, r3, #4
 8013248:	2b00      	cmp	r3, #0
 801324a:	d033      	beq.n	80132b4 <UART_transmit+0x34c>
					{
						dSTATE=dSTATE^0x04;
 801324c:	4b7a      	ldr	r3, [pc, #488]	@ (8013438 <UART_transmit+0x4d0>)
 801324e:	781b      	ldrb	r3, [r3, #0]
 8013250:	f083 0304 	eor.w	r3, r3, #4
 8013254:	b2da      	uxtb	r2, r3
 8013256:	4b78      	ldr	r3, [pc, #480]	@ (8013438 <UART_transmit+0x4d0>)
 8013258:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOC, Zielony_1_Pin, RESET);
 801325a:	2200      	movs	r2, #0
 801325c:	2120      	movs	r1, #32
 801325e:	4877      	ldr	r0, [pc, #476]	@ (801343c <UART_transmit+0x4d4>)
 8013260:	f003 fe72 	bl	8016f48 <HAL_GPIO_WritePin>
 8013264:	e026      	b.n	80132b4 <UART_transmit+0x34c>
					}
				}
				else
				{
					if((dSTATE&0x20)==0x00)
 8013266:	4b74      	ldr	r3, [pc, #464]	@ (8013438 <UART_transmit+0x4d0>)
 8013268:	781b      	ldrb	r3, [r3, #0]
 801326a:	f003 0320 	and.w	r3, r3, #32
 801326e:	2b00      	cmp	r3, #0
 8013270:	d10d      	bne.n	801328e <UART_transmit+0x326>
					{
						dSTATE=dSTATE|0x20;
 8013272:	4b71      	ldr	r3, [pc, #452]	@ (8013438 <UART_transmit+0x4d0>)
 8013274:	781b      	ldrb	r3, [r3, #0]
 8013276:	f043 0320 	orr.w	r3, r3, #32
 801327a:	b2da      	uxtb	r2, r3
 801327c:	4b6e      	ldr	r3, [pc, #440]	@ (8013438 <UART_transmit+0x4d0>)
 801327e:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, Zielony_2_Pin, SET);
 8013280:	2201      	movs	r2, #1
 8013282:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8013286:	486e      	ldr	r0, [pc, #440]	@ (8013440 <UART_transmit+0x4d8>)
 8013288:	f003 fe5e 	bl	8016f48 <HAL_GPIO_WritePin>
 801328c:	e012      	b.n	80132b4 <UART_transmit+0x34c>
					}
					else if((dSTATE&0x20)==0x20)
 801328e:	4b6a      	ldr	r3, [pc, #424]	@ (8013438 <UART_transmit+0x4d0>)
 8013290:	781b      	ldrb	r3, [r3, #0]
 8013292:	f003 0320 	and.w	r3, r3, #32
 8013296:	2b00      	cmp	r3, #0
 8013298:	d00c      	beq.n	80132b4 <UART_transmit+0x34c>
					{
						dSTATE=dSTATE^0x20;
 801329a:	4b67      	ldr	r3, [pc, #412]	@ (8013438 <UART_transmit+0x4d0>)
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	f083 0320 	eor.w	r3, r3, #32
 80132a2:	b2da      	uxtb	r2, r3
 80132a4:	4b64      	ldr	r3, [pc, #400]	@ (8013438 <UART_transmit+0x4d0>)
 80132a6:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, Zielony_2_Pin, RESET);
 80132a8:	2200      	movs	r2, #0
 80132aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80132ae:	4864      	ldr	r0, [pc, #400]	@ (8013440 <UART_transmit+0x4d8>)
 80132b0:	f003 fe4a 	bl	8016f48 <HAL_GPIO_WritePin>
					}
				}
			bufRxIndex=0;
 80132b4:	4b63      	ldr	r3, [pc, #396]	@ (8013444 <UART_transmit+0x4dc>)
 80132b6:	2200      	movs	r2, #0
 80132b8:	601a      	str	r2, [r3, #0]
			odebrano=FALSE;
 80132ba:	4b63      	ldr	r3, [pc, #396]	@ (8013448 <UART_transmit+0x4e0>)
 80132bc:	2200      	movs	r2, #0
 80132be:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &buforRx[bufRxIndex], 1);
 80132c0:	4b60      	ldr	r3, [pc, #384]	@ (8013444 <UART_transmit+0x4dc>)
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	4a61      	ldr	r2, [pc, #388]	@ (801344c <UART_transmit+0x4e4>)
 80132c6:	4413      	add	r3, r2
 80132c8:	2201      	movs	r2, #1
 80132ca:	4619      	mov	r1, r3
 80132cc:	4860      	ldr	r0, [pc, #384]	@ (8013450 <UART_transmit+0x4e8>)
 80132ce:	f005 fe27 	bl	8018f20 <HAL_UART_Receive_IT>
			}
			break;
 80132d2:	e0a2      	b.n	801341a <UART_transmit+0x4b2>
	case 4: if(all_off[bufRxIndex]==0x00)
 80132d4:	4b5b      	ldr	r3, [pc, #364]	@ (8013444 <UART_transmit+0x4dc>)
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	4a5e      	ldr	r2, [pc, #376]	@ (8013454 <UART_transmit+0x4ec>)
 80132da:	5cd3      	ldrb	r3, [r2, r3]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d104      	bne.n	80132ea <UART_transmit+0x382>
			{
				all_off[bufRxIndex]=0x0A;
 80132e0:	4b58      	ldr	r3, [pc, #352]	@ (8013444 <UART_transmit+0x4dc>)
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	4a5b      	ldr	r2, [pc, #364]	@ (8013454 <UART_transmit+0x4ec>)
 80132e6:	210a      	movs	r1, #10
 80132e8:	54d1      	strb	r1, [r2, r3]
			}
			if(bufRxIndex==(sizeof(all_off)/sizeof(char)))
 80132ea:	4b56      	ldr	r3, [pc, #344]	@ (8013444 <UART_transmit+0x4dc>)
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	2b19      	cmp	r3, #25
 80132f0:	f040 8095 	bne.w	801341e <UART_transmit+0x4b6>
			{
				bufRxIndex=0;
 80132f4:	4b53      	ldr	r3, [pc, #332]	@ (8013444 <UART_transmit+0x4dc>)
 80132f6:	2200      	movs	r2, #0
 80132f8:	601a      	str	r2, [r3, #0]
				odebrano=FALSE;
 80132fa:	4b53      	ldr	r3, [pc, #332]	@ (8013448 <UART_transmit+0x4e0>)
 80132fc:	2200      	movs	r2, #0
 80132fe:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart2, &buforRx[bufRxIndex], 1);
 8013300:	4b50      	ldr	r3, [pc, #320]	@ (8013444 <UART_transmit+0x4dc>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	4a51      	ldr	r2, [pc, #324]	@ (801344c <UART_transmit+0x4e4>)
 8013306:	4413      	add	r3, r2
 8013308:	2201      	movs	r2, #1
 801330a:	4619      	mov	r1, r3
 801330c:	4850      	ldr	r0, [pc, #320]	@ (8013450 <UART_transmit+0x4e8>)
 801330e:	f005 fe07 	bl	8018f20 <HAL_UART_Receive_IT>
			}
			break;
 8013312:	e084      	b.n	801341e <UART_transmit+0x4b6>
	case 5: if(dadc[bufRxIndex]==0x00)
 8013314:	4b4b      	ldr	r3, [pc, #300]	@ (8013444 <UART_transmit+0x4dc>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	4a4f      	ldr	r2, [pc, #316]	@ (8013458 <UART_transmit+0x4f0>)
 801331a:	5cd3      	ldrb	r3, [r2, r3]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d104      	bne.n	801332a <UART_transmit+0x3c2>
			{
				dadc[bufRxIndex]=0x0A;
 8013320:	4b48      	ldr	r3, [pc, #288]	@ (8013444 <UART_transmit+0x4dc>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	4a4c      	ldr	r2, [pc, #304]	@ (8013458 <UART_transmit+0x4f0>)
 8013326:	210a      	movs	r1, #10
 8013328:	54d1      	strb	r1, [r2, r3]
			}
			if(bufRxIndex==(sizeof(dadc)/sizeof(char)))
 801332a:	4b46      	ldr	r3, [pc, #280]	@ (8013444 <UART_transmit+0x4dc>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	2b2c      	cmp	r3, #44	@ 0x2c
 8013330:	d177      	bne.n	8013422 <UART_transmit+0x4ba>
			{
				bufRxIndex=0;
 8013332:	4b44      	ldr	r3, [pc, #272]	@ (8013444 <UART_transmit+0x4dc>)
 8013334:	2200      	movs	r2, #0
 8013336:	601a      	str	r2, [r3, #0]
				odebrano=FALSE;
 8013338:	4b43      	ldr	r3, [pc, #268]	@ (8013448 <UART_transmit+0x4e0>)
 801333a:	2200      	movs	r2, #0
 801333c:	701a      	strb	r2, [r3, #0]
				aDC1_wyslano=TRUE;
 801333e:	4b47      	ldr	r3, [pc, #284]	@ (801345c <UART_transmit+0x4f4>)
 8013340:	2201      	movs	r2, #1
 8013342:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart2, &buforRx[bufRxIndex], 1);
 8013344:	4b3f      	ldr	r3, [pc, #252]	@ (8013444 <UART_transmit+0x4dc>)
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	4a40      	ldr	r2, [pc, #256]	@ (801344c <UART_transmit+0x4e4>)
 801334a:	4413      	add	r3, r2
 801334c:	2201      	movs	r2, #1
 801334e:	4619      	mov	r1, r3
 8013350:	483f      	ldr	r0, [pc, #252]	@ (8013450 <UART_transmit+0x4e8>)
 8013352:	f005 fde5 	bl	8018f20 <HAL_UART_Receive_IT>
			}
			break;
 8013356:	e064      	b.n	8013422 <UART_transmit+0x4ba>
	case 6: if(line[bufRxIndex]==0x00)
 8013358:	4b3a      	ldr	r3, [pc, #232]	@ (8013444 <UART_transmit+0x4dc>)
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	4a40      	ldr	r2, [pc, #256]	@ (8013460 <UART_transmit+0x4f8>)
 801335e:	5cd3      	ldrb	r3, [r2, r3]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d104      	bne.n	801336e <UART_transmit+0x406>
			{
				line[bufRxIndex]=0x0A;
 8013364:	4b37      	ldr	r3, [pc, #220]	@ (8013444 <UART_transmit+0x4dc>)
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	4a3d      	ldr	r2, [pc, #244]	@ (8013460 <UART_transmit+0x4f8>)
 801336a:	210a      	movs	r1, #10
 801336c:	54d1      	strb	r1, [r2, r3]
			}
			if(bufRxIndex==(sizeof(line)/sizeof(char)))
 801336e:	4b35      	ldr	r3, [pc, #212]	@ (8013444 <UART_transmit+0x4dc>)
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	2b23      	cmp	r3, #35	@ 0x23
 8013374:	d157      	bne.n	8013426 <UART_transmit+0x4be>
			{
				bufRxIndex=0;
 8013376:	4b33      	ldr	r3, [pc, #204]	@ (8013444 <UART_transmit+0x4dc>)
 8013378:	2200      	movs	r2, #0
 801337a:	601a      	str	r2, [r3, #0]
				odebrano=FALSE;
 801337c:	4b32      	ldr	r3, [pc, #200]	@ (8013448 <UART_transmit+0x4e0>)
 801337e:	2200      	movs	r2, #0
 8013380:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart2, &buforRx[bufRxIndex], 1);
 8013382:	4b30      	ldr	r3, [pc, #192]	@ (8013444 <UART_transmit+0x4dc>)
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	4a31      	ldr	r2, [pc, #196]	@ (801344c <UART_transmit+0x4e4>)
 8013388:	4413      	add	r3, r2
 801338a:	2201      	movs	r2, #1
 801338c:	4619      	mov	r1, r3
 801338e:	4830      	ldr	r0, [pc, #192]	@ (8013450 <UART_transmit+0x4e8>)
 8013390:	f005 fdc6 	bl	8018f20 <HAL_UART_Receive_IT>
			}
			break;
 8013394:	e047      	b.n	8013426 <UART_transmit+0x4be>
	case 7: if(tsegment[bufRxIndex]==0x00)
 8013396:	4b2b      	ldr	r3, [pc, #172]	@ (8013444 <UART_transmit+0x4dc>)
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	4a32      	ldr	r2, [pc, #200]	@ (8013464 <UART_transmit+0x4fc>)
 801339c:	5cd3      	ldrb	r3, [r2, r3]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d104      	bne.n	80133ac <UART_transmit+0x444>
			{
				tsegment[bufRxIndex]=0x0A;
 80133a2:	4b28      	ldr	r3, [pc, #160]	@ (8013444 <UART_transmit+0x4dc>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	4a2f      	ldr	r2, [pc, #188]	@ (8013464 <UART_transmit+0x4fc>)
 80133a8:	210a      	movs	r1, #10
 80133aa:	54d1      	strb	r1, [r2, r3]
			}
			if(bufRxIndex==(sizeof(tsegment)/sizeof(char)))
 80133ac:	4b25      	ldr	r3, [pc, #148]	@ (8013444 <UART_transmit+0x4dc>)
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	2b17      	cmp	r3, #23
 80133b2:	d13a      	bne.n	801342a <UART_transmit+0x4c2>
			{
				bufRxIndex=0;
 80133b4:	4b23      	ldr	r3, [pc, #140]	@ (8013444 <UART_transmit+0x4dc>)
 80133b6:	2200      	movs	r2, #0
 80133b8:	601a      	str	r2, [r3, #0]
				odebrano=FALSE;
 80133ba:	4b23      	ldr	r3, [pc, #140]	@ (8013448 <UART_transmit+0x4e0>)
 80133bc:	2200      	movs	r2, #0
 80133be:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart2, &buforRx[bufRxIndex], 1);
 80133c0:	4b20      	ldr	r3, [pc, #128]	@ (8013444 <UART_transmit+0x4dc>)
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	4a21      	ldr	r2, [pc, #132]	@ (801344c <UART_transmit+0x4e4>)
 80133c6:	4413      	add	r3, r2
 80133c8:	2201      	movs	r2, #1
 80133ca:	4619      	mov	r1, r3
 80133cc:	4820      	ldr	r0, [pc, #128]	@ (8013450 <UART_transmit+0x4e8>)
 80133ce:	f005 fda7 	bl	8018f20 <HAL_UART_Receive_IT>
			}
			break;
 80133d2:	e02a      	b.n	801342a <UART_transmit+0x4c2>
	default:if(led[bufRxIndex]==0x00)
 80133d4:	4b1b      	ldr	r3, [pc, #108]	@ (8013444 <UART_transmit+0x4dc>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	4a23      	ldr	r2, [pc, #140]	@ (8013468 <UART_transmit+0x500>)
 80133da:	5cd3      	ldrb	r3, [r2, r3]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d104      	bne.n	80133ea <UART_transmit+0x482>
			{
				led[bufRxIndex]=0x0A;
 80133e0:	4b18      	ldr	r3, [pc, #96]	@ (8013444 <UART_transmit+0x4dc>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	4a20      	ldr	r2, [pc, #128]	@ (8013468 <UART_transmit+0x500>)
 80133e6:	210a      	movs	r1, #10
 80133e8:	54d1      	strb	r1, [r2, r3]
			}
			if(bufRxIndex==(sizeof(led)/sizeof(char)))
 80133ea:	4b16      	ldr	r3, [pc, #88]	@ (8013444 <UART_transmit+0x4dc>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	2b2c      	cmp	r3, #44	@ 0x2c
 80133f0:	d11d      	bne.n	801342e <UART_transmit+0x4c6>
			{
				bufRxIndex=0;
 80133f2:	4b14      	ldr	r3, [pc, #80]	@ (8013444 <UART_transmit+0x4dc>)
 80133f4:	2200      	movs	r2, #0
 80133f6:	601a      	str	r2, [r3, #0]
				odebrano=FALSE;
 80133f8:	4b13      	ldr	r3, [pc, #76]	@ (8013448 <UART_transmit+0x4e0>)
 80133fa:	2200      	movs	r2, #0
 80133fc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart2, &buforRx[bufRxIndex], 1);
 80133fe:	4b11      	ldr	r3, [pc, #68]	@ (8013444 <UART_transmit+0x4dc>)
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	4a12      	ldr	r2, [pc, #72]	@ (801344c <UART_transmit+0x4e4>)
 8013404:	4413      	add	r3, r2
 8013406:	2201      	movs	r2, #1
 8013408:	4619      	mov	r1, r3
 801340a:	4811      	ldr	r0, [pc, #68]	@ (8013450 <UART_transmit+0x4e8>)
 801340c:	f005 fd88 	bl	8018f20 <HAL_UART_Receive_IT>
			}break;
 8013410:	e00d      	b.n	801342e <UART_transmit+0x4c6>
			break;
 8013412:	bf00      	nop
 8013414:	e00c      	b.n	8013430 <UART_transmit+0x4c8>
			break;
 8013416:	bf00      	nop
 8013418:	e00a      	b.n	8013430 <UART_transmit+0x4c8>
			break;
 801341a:	bf00      	nop
 801341c:	e008      	b.n	8013430 <UART_transmit+0x4c8>
			break;
 801341e:	bf00      	nop
 8013420:	e006      	b.n	8013430 <UART_transmit+0x4c8>
			break;
 8013422:	bf00      	nop
 8013424:	e004      	b.n	8013430 <UART_transmit+0x4c8>
			break;
 8013426:	bf00      	nop
 8013428:	e002      	b.n	8013430 <UART_transmit+0x4c8>
			break;
 801342a:	bf00      	nop
 801342c:	e000      	b.n	8013430 <UART_transmit+0x4c8>
			}break;
 801342e:	bf00      	nop
	}
}
 8013430:	bf00      	nop
 8013432:	3708      	adds	r7, #8
 8013434:	46bd      	mov	sp, r7
 8013436:	bd80      	pop	{r7, pc}
 8013438:	2000047d 	.word	0x2000047d
 801343c:	48000800 	.word	0x48000800
 8013440:	48000400 	.word	0x48000400
 8013444:	20000480 	.word	0x20000480
 8013448:	20000478 	.word	0x20000478
 801344c:	20000490 	.word	0x20000490
 8013450:	20000508 	.word	0x20000508
 8013454:	200000b4 	.word	0x200000b4
 8013458:	2000010c 	.word	0x2000010c
 801345c:	2000047c 	.word	0x2000047c
 8013460:	200000e8 	.word	0x200000e8
 8013464:	200000d0 	.word	0x200000d0
 8013468:	20000138 	.word	0x20000138

0801346c <segment1>:

void segment1(unsigned int n, bool action)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b084      	sub	sp, #16
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
 8013474:	460b      	mov	r3, r1
 8013476:	70fb      	strb	r3, [r7, #3]
	int j=0;
 8013478:	2300      	movs	r3, #0
 801347a:	60fb      	str	r3, [r7, #12]
	switch(n)
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	2b09      	cmp	r3, #9
 8013480:	f200 81d7 	bhi.w	8013832 <segment1+0x3c6>
 8013484:	a201      	add	r2, pc, #4	@ (adr r2, 801348c <segment1+0x20>)
 8013486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801348a:	bf00      	nop
 801348c:	080134b5 	.word	0x080134b5
 8013490:	0801350b 	.word	0x0801350b
 8013494:	08013561 	.word	0x08013561
 8013498:	080135b7 	.word	0x080135b7
 801349c:	0801360d 	.word	0x0801360d
 80134a0:	08013663 	.word	0x08013663
 80134a4:	080136b9 	.word	0x080136b9
 80134a8:	0801370f 	.word	0x0801370f
 80134ac:	08013787 	.word	0x08013787
 80134b0:	080137dd 	.word	0x080137dd
	{
	case 0:
		if(action)
 80134b4:	78fb      	ldrb	r3, [r7, #3]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d013      	beq.n	80134e2 <segment1+0x76>
		{
			for(j=0;j<(sizeof(seg_0))/sizeof(uint16_t);j++)
 80134ba:	2300      	movs	r3, #0
 80134bc:	60fb      	str	r3, [r7, #12]
 80134be:	e00c      	b.n	80134da <segment1+0x6e>
			{
				HAL_GPIO_WritePin(GPIOA, seg_0[j].pin, GPIO_PIN_SET);
 80134c0:	4aa0      	ldr	r2, [pc, #640]	@ (8013744 <segment1+0x2d8>)
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80134c8:	2201      	movs	r2, #1
 80134ca:	4619      	mov	r1, r3
 80134cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80134d0:	f003 fd3a 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_0))/sizeof(uint16_t);j++)
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	3301      	adds	r3, #1
 80134d8:	60fb      	str	r3, [r7, #12]
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	2b05      	cmp	r3, #5
 80134de:	d9ef      	bls.n	80134c0 <segment1+0x54>
		{
			for(j=0;j<(sizeof(seg_0))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOA, seg_0[j].pin, GPIO_PIN_RESET);
			}
		}break;
 80134e0:	e1a8      	b.n	8013834 <segment1+0x3c8>
			for(j=0;j<(sizeof(seg_0))/sizeof(uint16_t);j++)
 80134e2:	2300      	movs	r3, #0
 80134e4:	60fb      	str	r3, [r7, #12]
 80134e6:	e00c      	b.n	8013502 <segment1+0x96>
				HAL_GPIO_WritePin(GPIOA, seg_0[j].pin, GPIO_PIN_RESET);
 80134e8:	4a96      	ldr	r2, [pc, #600]	@ (8013744 <segment1+0x2d8>)
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80134f0:	2200      	movs	r2, #0
 80134f2:	4619      	mov	r1, r3
 80134f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80134f8:	f003 fd26 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_0))/sizeof(uint16_t);j++)
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	3301      	adds	r3, #1
 8013500:	60fb      	str	r3, [r7, #12]
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	2b05      	cmp	r3, #5
 8013506:	d9ef      	bls.n	80134e8 <segment1+0x7c>
		}break;
 8013508:	e194      	b.n	8013834 <segment1+0x3c8>
	case 1:
			if(action)
 801350a:	78fb      	ldrb	r3, [r7, #3]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d013      	beq.n	8013538 <segment1+0xcc>
			{
				for(j=0;j<(sizeof(seg_1))/sizeof(uint16_t);j++)
 8013510:	2300      	movs	r3, #0
 8013512:	60fb      	str	r3, [r7, #12]
 8013514:	e00c      	b.n	8013530 <segment1+0xc4>
				{
					HAL_GPIO_WritePin(GPIOA, seg_1[j].pin, GPIO_PIN_SET);
 8013516:	4a8c      	ldr	r2, [pc, #560]	@ (8013748 <segment1+0x2dc>)
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801351e:	2201      	movs	r2, #1
 8013520:	4619      	mov	r1, r3
 8013522:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8013526:	f003 fd0f 	bl	8016f48 <HAL_GPIO_WritePin>
				for(j=0;j<(sizeof(seg_1))/sizeof(uint16_t);j++)
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	3301      	adds	r3, #1
 801352e:	60fb      	str	r3, [r7, #12]
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	2b01      	cmp	r3, #1
 8013534:	d9ef      	bls.n	8013516 <segment1+0xaa>
				for(j=0;j<(sizeof(seg_1))/sizeof(uint16_t);j++)
				{
					HAL_GPIO_WritePin(GPIOA, seg_1[j].pin, GPIO_PIN_RESET);
				}

			}break;
 8013536:	e17d      	b.n	8013834 <segment1+0x3c8>
				for(j=0;j<(sizeof(seg_1))/sizeof(uint16_t);j++)
 8013538:	2300      	movs	r3, #0
 801353a:	60fb      	str	r3, [r7, #12]
 801353c:	e00c      	b.n	8013558 <segment1+0xec>
					HAL_GPIO_WritePin(GPIOA, seg_1[j].pin, GPIO_PIN_RESET);
 801353e:	4a82      	ldr	r2, [pc, #520]	@ (8013748 <segment1+0x2dc>)
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013546:	2200      	movs	r2, #0
 8013548:	4619      	mov	r1, r3
 801354a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801354e:	f003 fcfb 	bl	8016f48 <HAL_GPIO_WritePin>
				for(j=0;j<(sizeof(seg_1))/sizeof(uint16_t);j++)
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	3301      	adds	r3, #1
 8013556:	60fb      	str	r3, [r7, #12]
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	2b01      	cmp	r3, #1
 801355c:	d9ef      	bls.n	801353e <segment1+0xd2>
			}break;
 801355e:	e169      	b.n	8013834 <segment1+0x3c8>
	case 2:
		if(action)
 8013560:	78fb      	ldrb	r3, [r7, #3]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d013      	beq.n	801358e <segment1+0x122>
		{
			for(j=0;j<(sizeof(seg_2))/sizeof(uint16_t);j++)
 8013566:	2300      	movs	r3, #0
 8013568:	60fb      	str	r3, [r7, #12]
 801356a:	e00c      	b.n	8013586 <segment1+0x11a>
			{
				HAL_GPIO_WritePin(GPIOA, seg_2[j].pin, GPIO_PIN_SET);
 801356c:	4a77      	ldr	r2, [pc, #476]	@ (801374c <segment1+0x2e0>)
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013574:	2201      	movs	r2, #1
 8013576:	4619      	mov	r1, r3
 8013578:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801357c:	f003 fce4 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_2))/sizeof(uint16_t);j++)
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	3301      	adds	r3, #1
 8013584:	60fb      	str	r3, [r7, #12]
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	2b04      	cmp	r3, #4
 801358a:	d9ef      	bls.n	801356c <segment1+0x100>
		{
			for(j=0;j<(sizeof(seg_2))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOA, seg_2[j].pin, GPIO_PIN_RESET);
			}
		}break;
 801358c:	e152      	b.n	8013834 <segment1+0x3c8>
			for(j=0;j<(sizeof(seg_2))/sizeof(uint16_t);j++)
 801358e:	2300      	movs	r3, #0
 8013590:	60fb      	str	r3, [r7, #12]
 8013592:	e00c      	b.n	80135ae <segment1+0x142>
				HAL_GPIO_WritePin(GPIOA, seg_2[j].pin, GPIO_PIN_RESET);
 8013594:	4a6d      	ldr	r2, [pc, #436]	@ (801374c <segment1+0x2e0>)
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801359c:	2200      	movs	r2, #0
 801359e:	4619      	mov	r1, r3
 80135a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80135a4:	f003 fcd0 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_2))/sizeof(uint16_t);j++)
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	3301      	adds	r3, #1
 80135ac:	60fb      	str	r3, [r7, #12]
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	2b04      	cmp	r3, #4
 80135b2:	d9ef      	bls.n	8013594 <segment1+0x128>
		}break;
 80135b4:	e13e      	b.n	8013834 <segment1+0x3c8>
	case 3:
		if(action)
 80135b6:	78fb      	ldrb	r3, [r7, #3]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d013      	beq.n	80135e4 <segment1+0x178>
		{
			for(j=0;j<(sizeof(seg_3))/sizeof(uint16_t);j++)
 80135bc:	2300      	movs	r3, #0
 80135be:	60fb      	str	r3, [r7, #12]
 80135c0:	e00c      	b.n	80135dc <segment1+0x170>
			{
				HAL_GPIO_WritePin(GPIOA, seg_3[j].pin, GPIO_PIN_SET);
 80135c2:	4a63      	ldr	r2, [pc, #396]	@ (8013750 <segment1+0x2e4>)
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80135ca:	2201      	movs	r2, #1
 80135cc:	4619      	mov	r1, r3
 80135ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80135d2:	f003 fcb9 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_3))/sizeof(uint16_t);j++)
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	3301      	adds	r3, #1
 80135da:	60fb      	str	r3, [r7, #12]
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	2b04      	cmp	r3, #4
 80135e0:	d9ef      	bls.n	80135c2 <segment1+0x156>
		{
			for(j=0;j<(sizeof(seg_3))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOA, seg_3[j].pin, GPIO_PIN_RESET);
			}
		}break;
 80135e2:	e127      	b.n	8013834 <segment1+0x3c8>
			for(j=0;j<(sizeof(seg_3))/sizeof(uint16_t);j++)
 80135e4:	2300      	movs	r3, #0
 80135e6:	60fb      	str	r3, [r7, #12]
 80135e8:	e00c      	b.n	8013604 <segment1+0x198>
				HAL_GPIO_WritePin(GPIOA, seg_3[j].pin, GPIO_PIN_RESET);
 80135ea:	4a59      	ldr	r2, [pc, #356]	@ (8013750 <segment1+0x2e4>)
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80135f2:	2200      	movs	r2, #0
 80135f4:	4619      	mov	r1, r3
 80135f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80135fa:	f003 fca5 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_3))/sizeof(uint16_t);j++)
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	3301      	adds	r3, #1
 8013602:	60fb      	str	r3, [r7, #12]
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2b04      	cmp	r3, #4
 8013608:	d9ef      	bls.n	80135ea <segment1+0x17e>
		}break;
 801360a:	e113      	b.n	8013834 <segment1+0x3c8>
	case 4:
		if(action)
 801360c:	78fb      	ldrb	r3, [r7, #3]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d013      	beq.n	801363a <segment1+0x1ce>
		{
			for(j=0;j<(sizeof(seg_4))/sizeof(uint16_t);j++)
 8013612:	2300      	movs	r3, #0
 8013614:	60fb      	str	r3, [r7, #12]
 8013616:	e00c      	b.n	8013632 <segment1+0x1c6>
			{
				HAL_GPIO_WritePin(GPIOA, seg_4[j].pin, GPIO_PIN_SET);
 8013618:	4a4e      	ldr	r2, [pc, #312]	@ (8013754 <segment1+0x2e8>)
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013620:	2201      	movs	r2, #1
 8013622:	4619      	mov	r1, r3
 8013624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8013628:	f003 fc8e 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_4))/sizeof(uint16_t);j++)
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	3301      	adds	r3, #1
 8013630:	60fb      	str	r3, [r7, #12]
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	2b03      	cmp	r3, #3
 8013636:	d9ef      	bls.n	8013618 <segment1+0x1ac>
		{
			for(j=0;j<(sizeof(seg_4))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOA, seg_4[j].pin, GPIO_PIN_RESET);
			}
		}break;
 8013638:	e0fc      	b.n	8013834 <segment1+0x3c8>
			for(j=0;j<(sizeof(seg_4))/sizeof(uint16_t);j++)
 801363a:	2300      	movs	r3, #0
 801363c:	60fb      	str	r3, [r7, #12]
 801363e:	e00c      	b.n	801365a <segment1+0x1ee>
				HAL_GPIO_WritePin(GPIOA, seg_4[j].pin, GPIO_PIN_RESET);
 8013640:	4a44      	ldr	r2, [pc, #272]	@ (8013754 <segment1+0x2e8>)
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013648:	2200      	movs	r2, #0
 801364a:	4619      	mov	r1, r3
 801364c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8013650:	f003 fc7a 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_4))/sizeof(uint16_t);j++)
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	3301      	adds	r3, #1
 8013658:	60fb      	str	r3, [r7, #12]
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	2b03      	cmp	r3, #3
 801365e:	d9ef      	bls.n	8013640 <segment1+0x1d4>
		}break;
 8013660:	e0e8      	b.n	8013834 <segment1+0x3c8>
	case 5:
		if(action)
 8013662:	78fb      	ldrb	r3, [r7, #3]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d013      	beq.n	8013690 <segment1+0x224>
		{
			for(j=0;j<(sizeof(seg_5))/sizeof(uint16_t);j++)
 8013668:	2300      	movs	r3, #0
 801366a:	60fb      	str	r3, [r7, #12]
 801366c:	e00c      	b.n	8013688 <segment1+0x21c>
			{
				HAL_GPIO_WritePin(GPIOA, seg_5[j].pin, GPIO_PIN_SET);
 801366e:	4a3a      	ldr	r2, [pc, #232]	@ (8013758 <segment1+0x2ec>)
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013676:	2201      	movs	r2, #1
 8013678:	4619      	mov	r1, r3
 801367a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801367e:	f003 fc63 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_5))/sizeof(uint16_t);j++)
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	3301      	adds	r3, #1
 8013686:	60fb      	str	r3, [r7, #12]
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	2b04      	cmp	r3, #4
 801368c:	d9ef      	bls.n	801366e <segment1+0x202>
		{
			for(j=0;j<(sizeof(seg_5))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOA, seg_5[j].pin, GPIO_PIN_RESET);
			}
		}break;
 801368e:	e0d1      	b.n	8013834 <segment1+0x3c8>
			for(j=0;j<(sizeof(seg_5))/sizeof(uint16_t);j++)
 8013690:	2300      	movs	r3, #0
 8013692:	60fb      	str	r3, [r7, #12]
 8013694:	e00c      	b.n	80136b0 <segment1+0x244>
				HAL_GPIO_WritePin(GPIOA, seg_5[j].pin, GPIO_PIN_RESET);
 8013696:	4a30      	ldr	r2, [pc, #192]	@ (8013758 <segment1+0x2ec>)
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801369e:	2200      	movs	r2, #0
 80136a0:	4619      	mov	r1, r3
 80136a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80136a6:	f003 fc4f 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_5))/sizeof(uint16_t);j++)
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	3301      	adds	r3, #1
 80136ae:	60fb      	str	r3, [r7, #12]
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	2b04      	cmp	r3, #4
 80136b4:	d9ef      	bls.n	8013696 <segment1+0x22a>
		}break;
 80136b6:	e0bd      	b.n	8013834 <segment1+0x3c8>
	case 6:
		if(action)
 80136b8:	78fb      	ldrb	r3, [r7, #3]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d013      	beq.n	80136e6 <segment1+0x27a>
		{
			for(j=0;j<(sizeof(seg_6))/sizeof(uint16_t);j++)
 80136be:	2300      	movs	r3, #0
 80136c0:	60fb      	str	r3, [r7, #12]
 80136c2:	e00c      	b.n	80136de <segment1+0x272>
			{
				HAL_GPIO_WritePin(GPIOA, seg_6[j].pin, GPIO_PIN_SET);
 80136c4:	4a25      	ldr	r2, [pc, #148]	@ (801375c <segment1+0x2f0>)
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80136cc:	2201      	movs	r2, #1
 80136ce:	4619      	mov	r1, r3
 80136d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80136d4:	f003 fc38 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_6))/sizeof(uint16_t);j++)
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	3301      	adds	r3, #1
 80136dc:	60fb      	str	r3, [r7, #12]
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	2b05      	cmp	r3, #5
 80136e2:	d9ef      	bls.n	80136c4 <segment1+0x258>
		{
			for(j=0;j<(sizeof(seg_6))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOA, seg_6[j].pin, GPIO_PIN_RESET);
			}
		}break;
 80136e4:	e0a6      	b.n	8013834 <segment1+0x3c8>
			for(j=0;j<(sizeof(seg_6))/sizeof(uint16_t);j++)
 80136e6:	2300      	movs	r3, #0
 80136e8:	60fb      	str	r3, [r7, #12]
 80136ea:	e00c      	b.n	8013706 <segment1+0x29a>
				HAL_GPIO_WritePin(GPIOA, seg_6[j].pin, GPIO_PIN_RESET);
 80136ec:	4a1b      	ldr	r2, [pc, #108]	@ (801375c <segment1+0x2f0>)
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80136f4:	2200      	movs	r2, #0
 80136f6:	4619      	mov	r1, r3
 80136f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80136fc:	f003 fc24 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_6))/sizeof(uint16_t);j++)
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	3301      	adds	r3, #1
 8013704:	60fb      	str	r3, [r7, #12]
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	2b05      	cmp	r3, #5
 801370a:	d9ef      	bls.n	80136ec <segment1+0x280>
		}break;
 801370c:	e092      	b.n	8013834 <segment1+0x3c8>
	case 7:
		if(action)
 801370e:	78fb      	ldrb	r3, [r7, #3]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d013      	beq.n	801373c <segment1+0x2d0>
		{
			for(j=0;j<(sizeof(seg_7))/sizeof(uint16_t);j++)
 8013714:	2300      	movs	r3, #0
 8013716:	60fb      	str	r3, [r7, #12]
 8013718:	e00c      	b.n	8013734 <segment1+0x2c8>
			{
				HAL_GPIO_WritePin(GPIOA, seg_7[j].pin, GPIO_PIN_SET);
 801371a:	4a11      	ldr	r2, [pc, #68]	@ (8013760 <segment1+0x2f4>)
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013722:	2201      	movs	r2, #1
 8013724:	4619      	mov	r1, r3
 8013726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801372a:	f003 fc0d 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_7))/sizeof(uint16_t);j++)
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	3301      	adds	r3, #1
 8013732:	60fb      	str	r3, [r7, #12]
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	2b02      	cmp	r3, #2
 8013738:	d9ef      	bls.n	801371a <segment1+0x2ae>
		{
			for(j=0;j<(sizeof(seg_7))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOA, seg_7[j].pin, GPIO_PIN_RESET);
			}
		}break;
 801373a:	e07b      	b.n	8013834 <segment1+0x3c8>
			for(j=0;j<(sizeof(seg_7))/sizeof(uint16_t);j++)
 801373c:	2300      	movs	r3, #0
 801373e:	60fb      	str	r3, [r7, #12]
 8013740:	e01d      	b.n	801377e <segment1+0x312>
 8013742:	bf00      	nop
 8013744:	0801a718 	.word	0x0801a718
 8013748:	0801a724 	.word	0x0801a724
 801374c:	0801a728 	.word	0x0801a728
 8013750:	0801a734 	.word	0x0801a734
 8013754:	0801a740 	.word	0x0801a740
 8013758:	0801a748 	.word	0x0801a748
 801375c:	0801a754 	.word	0x0801a754
 8013760:	0801a760 	.word	0x0801a760
				HAL_GPIO_WritePin(GPIOA, seg_7[j].pin, GPIO_PIN_RESET);
 8013764:	4a35      	ldr	r2, [pc, #212]	@ (801383c <segment1+0x3d0>)
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801376c:	2200      	movs	r2, #0
 801376e:	4619      	mov	r1, r3
 8013770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8013774:	f003 fbe8 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_7))/sizeof(uint16_t);j++)
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	3301      	adds	r3, #1
 801377c:	60fb      	str	r3, [r7, #12]
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	2b02      	cmp	r3, #2
 8013782:	d9ef      	bls.n	8013764 <segment1+0x2f8>
		}break;
 8013784:	e056      	b.n	8013834 <segment1+0x3c8>
	case 8:
		if(action)
 8013786:	78fb      	ldrb	r3, [r7, #3]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d013      	beq.n	80137b4 <segment1+0x348>
		{
			for(j=0;j<(sizeof(seg_8))/sizeof(uint16_t);j++)
 801378c:	2300      	movs	r3, #0
 801378e:	60fb      	str	r3, [r7, #12]
 8013790:	e00c      	b.n	80137ac <segment1+0x340>
			{
				HAL_GPIO_WritePin(GPIOA, seg_8[j].pin, GPIO_PIN_SET);
 8013792:	4a2b      	ldr	r2, [pc, #172]	@ (8013840 <segment1+0x3d4>)
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801379a:	2201      	movs	r2, #1
 801379c:	4619      	mov	r1, r3
 801379e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80137a2:	f003 fbd1 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_8))/sizeof(uint16_t);j++)
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	3301      	adds	r3, #1
 80137aa:	60fb      	str	r3, [r7, #12]
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	2b06      	cmp	r3, #6
 80137b0:	d9ef      	bls.n	8013792 <segment1+0x326>
		{
			for(j=0;j<(sizeof(seg_8))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOA, seg_8[j].pin, GPIO_PIN_RESET);
			}
		}break;
 80137b2:	e03f      	b.n	8013834 <segment1+0x3c8>
			for(j=0;j<(sizeof(seg_8))/sizeof(uint16_t);j++)
 80137b4:	2300      	movs	r3, #0
 80137b6:	60fb      	str	r3, [r7, #12]
 80137b8:	e00c      	b.n	80137d4 <segment1+0x368>
				HAL_GPIO_WritePin(GPIOA, seg_8[j].pin, GPIO_PIN_RESET);
 80137ba:	4a21      	ldr	r2, [pc, #132]	@ (8013840 <segment1+0x3d4>)
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80137c2:	2200      	movs	r2, #0
 80137c4:	4619      	mov	r1, r3
 80137c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80137ca:	f003 fbbd 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_8))/sizeof(uint16_t);j++)
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	3301      	adds	r3, #1
 80137d2:	60fb      	str	r3, [r7, #12]
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	2b06      	cmp	r3, #6
 80137d8:	d9ef      	bls.n	80137ba <segment1+0x34e>
		}break;
 80137da:	e02b      	b.n	8013834 <segment1+0x3c8>
	case 9:
		if(action)
 80137dc:	78fb      	ldrb	r3, [r7, #3]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d013      	beq.n	801380a <segment1+0x39e>
		{
			for(j=0;j<(sizeof(seg_9))/sizeof(uint16_t);j++)
 80137e2:	2300      	movs	r3, #0
 80137e4:	60fb      	str	r3, [r7, #12]
 80137e6:	e00c      	b.n	8013802 <segment1+0x396>
			{
				HAL_GPIO_WritePin(GPIOA, seg_9[j].pin, GPIO_PIN_SET);
 80137e8:	4a16      	ldr	r2, [pc, #88]	@ (8013844 <segment1+0x3d8>)
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80137f0:	2201      	movs	r2, #1
 80137f2:	4619      	mov	r1, r3
 80137f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80137f8:	f003 fba6 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_9))/sizeof(uint16_t);j++)
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	3301      	adds	r3, #1
 8013800:	60fb      	str	r3, [r7, #12]
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	2b05      	cmp	r3, #5
 8013806:	d9ef      	bls.n	80137e8 <segment1+0x37c>
		{
			for(j=0;j<(sizeof(seg_9))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOA, seg_9[j].pin, GPIO_PIN_RESET);
			}
		}break;
 8013808:	e014      	b.n	8013834 <segment1+0x3c8>
			for(j=0;j<(sizeof(seg_9))/sizeof(uint16_t);j++)
 801380a:	2300      	movs	r3, #0
 801380c:	60fb      	str	r3, [r7, #12]
 801380e:	e00c      	b.n	801382a <segment1+0x3be>
				HAL_GPIO_WritePin(GPIOA, seg_9[j].pin, GPIO_PIN_RESET);
 8013810:	4a0c      	ldr	r2, [pc, #48]	@ (8013844 <segment1+0x3d8>)
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013818:	2200      	movs	r2, #0
 801381a:	4619      	mov	r1, r3
 801381c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8013820:	f003 fb92 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg_9))/sizeof(uint16_t);j++)
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	3301      	adds	r3, #1
 8013828:	60fb      	str	r3, [r7, #12]
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	2b05      	cmp	r3, #5
 801382e:	d9ef      	bls.n	8013810 <segment1+0x3a4>
		}break;
 8013830:	e000      	b.n	8013834 <segment1+0x3c8>

	default: break;
 8013832:	bf00      	nop
	}
}
 8013834:	bf00      	nop
 8013836:	3710      	adds	r7, #16
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}
 801383c:	0801a760 	.word	0x0801a760
 8013840:	0801a768 	.word	0x0801a768
 8013844:	0801a778 	.word	0x0801a778

08013848 <segment2>:

void segment2(unsigned int n, bool action)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b084      	sub	sp, #16
 801384c:	af00      	add	r7, sp, #0
 801384e:	6078      	str	r0, [r7, #4]
 8013850:	460b      	mov	r3, r1
 8013852:	70fb      	strb	r3, [r7, #3]
	int j=0;
 8013854:	2300      	movs	r3, #0
 8013856:	60fb      	str	r3, [r7, #12]
	switch(n)
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	2b09      	cmp	r3, #9
 801385c:	f200 81c4 	bhi.w	8013be8 <segment2+0x3a0>
 8013860:	a201      	add	r2, pc, #4	@ (adr r2, 8013868 <segment2+0x20>)
 8013862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013866:	bf00      	nop
 8013868:	08013891 	.word	0x08013891
 801386c:	080138e3 	.word	0x080138e3
 8013870:	08013935 	.word	0x08013935
 8013874:	08013987 	.word	0x08013987
 8013878:	080139d9 	.word	0x080139d9
 801387c:	08013a2b 	.word	0x08013a2b
 8013880:	08013a7d 	.word	0x08013a7d
 8013884:	08013acf 	.word	0x08013acf
 8013888:	08013b45 	.word	0x08013b45
 801388c:	08013b97 	.word	0x08013b97
	{
	case 0:
		if(action)
 8013890:	78fb      	ldrb	r3, [r7, #3]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d012      	beq.n	80138bc <segment2+0x74>
		{
			for(j=0;j<(sizeof(seg2_0))/sizeof(uint16_t);j++)
 8013896:	2300      	movs	r3, #0
 8013898:	60fb      	str	r3, [r7, #12]
 801389a:	e00b      	b.n	80138b4 <segment2+0x6c>
			{
				HAL_GPIO_WritePin(GPIOB, seg2_0[j].pin, GPIO_PIN_SET);
 801389c:	4a98      	ldr	r2, [pc, #608]	@ (8013b00 <segment2+0x2b8>)
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80138a4:	2201      	movs	r2, #1
 80138a6:	4619      	mov	r1, r3
 80138a8:	4896      	ldr	r0, [pc, #600]	@ (8013b04 <segment2+0x2bc>)
 80138aa:	f003 fb4d 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_0))/sizeof(uint16_t);j++)
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	3301      	adds	r3, #1
 80138b2:	60fb      	str	r3, [r7, #12]
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	2b05      	cmp	r3, #5
 80138b8:	d9f0      	bls.n	801389c <segment2+0x54>
		{
			for(j=0;j<(sizeof(seg2_0))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOB, seg2_0[j].pin, GPIO_PIN_RESET);
			}
		}break;
 80138ba:	e196      	b.n	8013bea <segment2+0x3a2>
			for(j=0;j<(sizeof(seg2_0))/sizeof(uint16_t);j++)
 80138bc:	2300      	movs	r3, #0
 80138be:	60fb      	str	r3, [r7, #12]
 80138c0:	e00b      	b.n	80138da <segment2+0x92>
				HAL_GPIO_WritePin(GPIOB, seg2_0[j].pin, GPIO_PIN_RESET);
 80138c2:	4a8f      	ldr	r2, [pc, #572]	@ (8013b00 <segment2+0x2b8>)
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80138ca:	2200      	movs	r2, #0
 80138cc:	4619      	mov	r1, r3
 80138ce:	488d      	ldr	r0, [pc, #564]	@ (8013b04 <segment2+0x2bc>)
 80138d0:	f003 fb3a 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_0))/sizeof(uint16_t);j++)
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	3301      	adds	r3, #1
 80138d8:	60fb      	str	r3, [r7, #12]
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	2b05      	cmp	r3, #5
 80138de:	d9f0      	bls.n	80138c2 <segment2+0x7a>
		}break;
 80138e0:	e183      	b.n	8013bea <segment2+0x3a2>
	case 1:
			if(action)
 80138e2:	78fb      	ldrb	r3, [r7, #3]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d012      	beq.n	801390e <segment2+0xc6>
			{
				for(j=0;j<(sizeof(seg2_1))/sizeof(uint16_t);j++)
 80138e8:	2300      	movs	r3, #0
 80138ea:	60fb      	str	r3, [r7, #12]
 80138ec:	e00b      	b.n	8013906 <segment2+0xbe>
				{
					HAL_GPIO_WritePin(GPIOB, seg2_1[j].pin, GPIO_PIN_SET);
 80138ee:	4a86      	ldr	r2, [pc, #536]	@ (8013b08 <segment2+0x2c0>)
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80138f6:	2201      	movs	r2, #1
 80138f8:	4619      	mov	r1, r3
 80138fa:	4882      	ldr	r0, [pc, #520]	@ (8013b04 <segment2+0x2bc>)
 80138fc:	f003 fb24 	bl	8016f48 <HAL_GPIO_WritePin>
				for(j=0;j<(sizeof(seg2_1))/sizeof(uint16_t);j++)
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	3301      	adds	r3, #1
 8013904:	60fb      	str	r3, [r7, #12]
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	2b01      	cmp	r3, #1
 801390a:	d9f0      	bls.n	80138ee <segment2+0xa6>
			{
				for(j=0;j<(sizeof(seg2_1))/sizeof(uint16_t);j++)
				{
					HAL_GPIO_WritePin(GPIOB, seg2_1[j].pin, GPIO_PIN_RESET);
				}
			}break;
 801390c:	e16d      	b.n	8013bea <segment2+0x3a2>
				for(j=0;j<(sizeof(seg2_1))/sizeof(uint16_t);j++)
 801390e:	2300      	movs	r3, #0
 8013910:	60fb      	str	r3, [r7, #12]
 8013912:	e00b      	b.n	801392c <segment2+0xe4>
					HAL_GPIO_WritePin(GPIOB, seg2_1[j].pin, GPIO_PIN_RESET);
 8013914:	4a7c      	ldr	r2, [pc, #496]	@ (8013b08 <segment2+0x2c0>)
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801391c:	2200      	movs	r2, #0
 801391e:	4619      	mov	r1, r3
 8013920:	4878      	ldr	r0, [pc, #480]	@ (8013b04 <segment2+0x2bc>)
 8013922:	f003 fb11 	bl	8016f48 <HAL_GPIO_WritePin>
				for(j=0;j<(sizeof(seg2_1))/sizeof(uint16_t);j++)
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	3301      	adds	r3, #1
 801392a:	60fb      	str	r3, [r7, #12]
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	2b01      	cmp	r3, #1
 8013930:	d9f0      	bls.n	8013914 <segment2+0xcc>
			}break;
 8013932:	e15a      	b.n	8013bea <segment2+0x3a2>
	case 2:
		if(action)
 8013934:	78fb      	ldrb	r3, [r7, #3]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d012      	beq.n	8013960 <segment2+0x118>
		{
			for(j=0;j<(sizeof(seg2_2))/sizeof(uint16_t);j++)
 801393a:	2300      	movs	r3, #0
 801393c:	60fb      	str	r3, [r7, #12]
 801393e:	e00b      	b.n	8013958 <segment2+0x110>
			{
				HAL_GPIO_WritePin(GPIOB, seg2_2[j].pin, GPIO_PIN_SET);
 8013940:	4a72      	ldr	r2, [pc, #456]	@ (8013b0c <segment2+0x2c4>)
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013948:	2201      	movs	r2, #1
 801394a:	4619      	mov	r1, r3
 801394c:	486d      	ldr	r0, [pc, #436]	@ (8013b04 <segment2+0x2bc>)
 801394e:	f003 fafb 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_2))/sizeof(uint16_t);j++)
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	3301      	adds	r3, #1
 8013956:	60fb      	str	r3, [r7, #12]
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	2b04      	cmp	r3, #4
 801395c:	d9f0      	bls.n	8013940 <segment2+0xf8>
		{
			for(j=0;j<(sizeof(seg2_2))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOB, seg2_2[j].pin, GPIO_PIN_RESET);
			}
		}break;
 801395e:	e144      	b.n	8013bea <segment2+0x3a2>
			for(j=0;j<(sizeof(seg2_2))/sizeof(uint16_t);j++)
 8013960:	2300      	movs	r3, #0
 8013962:	60fb      	str	r3, [r7, #12]
 8013964:	e00b      	b.n	801397e <segment2+0x136>
				HAL_GPIO_WritePin(GPIOB, seg2_2[j].pin, GPIO_PIN_RESET);
 8013966:	4a69      	ldr	r2, [pc, #420]	@ (8013b0c <segment2+0x2c4>)
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801396e:	2200      	movs	r2, #0
 8013970:	4619      	mov	r1, r3
 8013972:	4864      	ldr	r0, [pc, #400]	@ (8013b04 <segment2+0x2bc>)
 8013974:	f003 fae8 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_2))/sizeof(uint16_t);j++)
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	3301      	adds	r3, #1
 801397c:	60fb      	str	r3, [r7, #12]
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	2b04      	cmp	r3, #4
 8013982:	d9f0      	bls.n	8013966 <segment2+0x11e>
		}break;
 8013984:	e131      	b.n	8013bea <segment2+0x3a2>
	case 3:
		if(action)
 8013986:	78fb      	ldrb	r3, [r7, #3]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d012      	beq.n	80139b2 <segment2+0x16a>
		{
			for(j=0;j<(sizeof(seg2_3))/sizeof(uint16_t);j++)
 801398c:	2300      	movs	r3, #0
 801398e:	60fb      	str	r3, [r7, #12]
 8013990:	e00b      	b.n	80139aa <segment2+0x162>
			{
				HAL_GPIO_WritePin(GPIOB, seg2_3[j].pin, GPIO_PIN_SET);
 8013992:	4a5f      	ldr	r2, [pc, #380]	@ (8013b10 <segment2+0x2c8>)
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801399a:	2201      	movs	r2, #1
 801399c:	4619      	mov	r1, r3
 801399e:	4859      	ldr	r0, [pc, #356]	@ (8013b04 <segment2+0x2bc>)
 80139a0:	f003 fad2 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_3))/sizeof(uint16_t);j++)
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	3301      	adds	r3, #1
 80139a8:	60fb      	str	r3, [r7, #12]
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	2b04      	cmp	r3, #4
 80139ae:	d9f0      	bls.n	8013992 <segment2+0x14a>
		{
			for(j=0;j<(sizeof(seg2_3))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOB, seg2_3[j].pin, GPIO_PIN_RESET);
			}
		}break;
 80139b0:	e11b      	b.n	8013bea <segment2+0x3a2>
			for(j=0;j<(sizeof(seg2_3))/sizeof(uint16_t);j++)
 80139b2:	2300      	movs	r3, #0
 80139b4:	60fb      	str	r3, [r7, #12]
 80139b6:	e00b      	b.n	80139d0 <segment2+0x188>
				HAL_GPIO_WritePin(GPIOB, seg2_3[j].pin, GPIO_PIN_RESET);
 80139b8:	4a55      	ldr	r2, [pc, #340]	@ (8013b10 <segment2+0x2c8>)
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80139c0:	2200      	movs	r2, #0
 80139c2:	4619      	mov	r1, r3
 80139c4:	484f      	ldr	r0, [pc, #316]	@ (8013b04 <segment2+0x2bc>)
 80139c6:	f003 fabf 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_3))/sizeof(uint16_t);j++)
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	3301      	adds	r3, #1
 80139ce:	60fb      	str	r3, [r7, #12]
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	2b04      	cmp	r3, #4
 80139d4:	d9f0      	bls.n	80139b8 <segment2+0x170>
		}break;
 80139d6:	e108      	b.n	8013bea <segment2+0x3a2>
	case 4:
		if(action)
 80139d8:	78fb      	ldrb	r3, [r7, #3]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d012      	beq.n	8013a04 <segment2+0x1bc>
		{
			for(j=0;j<(sizeof(seg2_4))/sizeof(uint16_t);j++)
 80139de:	2300      	movs	r3, #0
 80139e0:	60fb      	str	r3, [r7, #12]
 80139e2:	e00b      	b.n	80139fc <segment2+0x1b4>
			{
				HAL_GPIO_WritePin(GPIOB, seg2_4[j].pin, GPIO_PIN_SET);
 80139e4:	4a4b      	ldr	r2, [pc, #300]	@ (8013b14 <segment2+0x2cc>)
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80139ec:	2201      	movs	r2, #1
 80139ee:	4619      	mov	r1, r3
 80139f0:	4844      	ldr	r0, [pc, #272]	@ (8013b04 <segment2+0x2bc>)
 80139f2:	f003 faa9 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_4))/sizeof(uint16_t);j++)
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	3301      	adds	r3, #1
 80139fa:	60fb      	str	r3, [r7, #12]
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	2b03      	cmp	r3, #3
 8013a00:	d9f0      	bls.n	80139e4 <segment2+0x19c>
		{
			for(j=0;j<(sizeof(seg2_4))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOB, seg2_4[j].pin, GPIO_PIN_RESET);
			}
		}break;
 8013a02:	e0f2      	b.n	8013bea <segment2+0x3a2>
			for(j=0;j<(sizeof(seg2_4))/sizeof(uint16_t);j++)
 8013a04:	2300      	movs	r3, #0
 8013a06:	60fb      	str	r3, [r7, #12]
 8013a08:	e00b      	b.n	8013a22 <segment2+0x1da>
				HAL_GPIO_WritePin(GPIOB, seg2_4[j].pin, GPIO_PIN_RESET);
 8013a0a:	4a42      	ldr	r2, [pc, #264]	@ (8013b14 <segment2+0x2cc>)
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013a12:	2200      	movs	r2, #0
 8013a14:	4619      	mov	r1, r3
 8013a16:	483b      	ldr	r0, [pc, #236]	@ (8013b04 <segment2+0x2bc>)
 8013a18:	f003 fa96 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_4))/sizeof(uint16_t);j++)
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	3301      	adds	r3, #1
 8013a20:	60fb      	str	r3, [r7, #12]
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	2b03      	cmp	r3, #3
 8013a26:	d9f0      	bls.n	8013a0a <segment2+0x1c2>
		}break;
 8013a28:	e0df      	b.n	8013bea <segment2+0x3a2>
	case 5:
		if(action)
 8013a2a:	78fb      	ldrb	r3, [r7, #3]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d012      	beq.n	8013a56 <segment2+0x20e>
		{
			for(j=0;j<(sizeof(seg2_5))/sizeof(uint16_t);j++)
 8013a30:	2300      	movs	r3, #0
 8013a32:	60fb      	str	r3, [r7, #12]
 8013a34:	e00b      	b.n	8013a4e <segment2+0x206>
			{
				HAL_GPIO_WritePin(GPIOB, seg2_5[j].pin, GPIO_PIN_SET);
 8013a36:	4a38      	ldr	r2, [pc, #224]	@ (8013b18 <segment2+0x2d0>)
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013a3e:	2201      	movs	r2, #1
 8013a40:	4619      	mov	r1, r3
 8013a42:	4830      	ldr	r0, [pc, #192]	@ (8013b04 <segment2+0x2bc>)
 8013a44:	f003 fa80 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_5))/sizeof(uint16_t);j++)
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	3301      	adds	r3, #1
 8013a4c:	60fb      	str	r3, [r7, #12]
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	2b04      	cmp	r3, #4
 8013a52:	d9f0      	bls.n	8013a36 <segment2+0x1ee>
		{
			for(j=0;j<(sizeof(seg2_5))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOB, seg2_5[j].pin, GPIO_PIN_RESET);
			}
		}break;
 8013a54:	e0c9      	b.n	8013bea <segment2+0x3a2>
			for(j=0;j<(sizeof(seg2_5))/sizeof(uint16_t);j++)
 8013a56:	2300      	movs	r3, #0
 8013a58:	60fb      	str	r3, [r7, #12]
 8013a5a:	e00b      	b.n	8013a74 <segment2+0x22c>
				HAL_GPIO_WritePin(GPIOB, seg2_5[j].pin, GPIO_PIN_RESET);
 8013a5c:	4a2e      	ldr	r2, [pc, #184]	@ (8013b18 <segment2+0x2d0>)
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013a64:	2200      	movs	r2, #0
 8013a66:	4619      	mov	r1, r3
 8013a68:	4826      	ldr	r0, [pc, #152]	@ (8013b04 <segment2+0x2bc>)
 8013a6a:	f003 fa6d 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_5))/sizeof(uint16_t);j++)
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	3301      	adds	r3, #1
 8013a72:	60fb      	str	r3, [r7, #12]
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	2b04      	cmp	r3, #4
 8013a78:	d9f0      	bls.n	8013a5c <segment2+0x214>
		}break;
 8013a7a:	e0b6      	b.n	8013bea <segment2+0x3a2>
	case 6:
		if(action)
 8013a7c:	78fb      	ldrb	r3, [r7, #3]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d012      	beq.n	8013aa8 <segment2+0x260>
		{
			for(j=0;j<(sizeof(seg2_6))/sizeof(uint16_t);j++)
 8013a82:	2300      	movs	r3, #0
 8013a84:	60fb      	str	r3, [r7, #12]
 8013a86:	e00b      	b.n	8013aa0 <segment2+0x258>
			{
				HAL_GPIO_WritePin(GPIOB, seg2_6[j].pin, GPIO_PIN_SET);
 8013a88:	4a24      	ldr	r2, [pc, #144]	@ (8013b1c <segment2+0x2d4>)
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013a90:	2201      	movs	r2, #1
 8013a92:	4619      	mov	r1, r3
 8013a94:	481b      	ldr	r0, [pc, #108]	@ (8013b04 <segment2+0x2bc>)
 8013a96:	f003 fa57 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_6))/sizeof(uint16_t);j++)
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	3301      	adds	r3, #1
 8013a9e:	60fb      	str	r3, [r7, #12]
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	2b05      	cmp	r3, #5
 8013aa4:	d9f0      	bls.n	8013a88 <segment2+0x240>
		{
			for(j=0;j<(sizeof(seg2_6))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOB, seg2_6[j].pin, GPIO_PIN_RESET);
			}
		}break;
 8013aa6:	e0a0      	b.n	8013bea <segment2+0x3a2>
			for(j=0;j<(sizeof(seg2_6))/sizeof(uint16_t);j++)
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	60fb      	str	r3, [r7, #12]
 8013aac:	e00b      	b.n	8013ac6 <segment2+0x27e>
				HAL_GPIO_WritePin(GPIOB, seg2_6[j].pin, GPIO_PIN_RESET);
 8013aae:	4a1b      	ldr	r2, [pc, #108]	@ (8013b1c <segment2+0x2d4>)
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	4619      	mov	r1, r3
 8013aba:	4812      	ldr	r0, [pc, #72]	@ (8013b04 <segment2+0x2bc>)
 8013abc:	f003 fa44 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_6))/sizeof(uint16_t);j++)
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	3301      	adds	r3, #1
 8013ac4:	60fb      	str	r3, [r7, #12]
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	2b05      	cmp	r3, #5
 8013aca:	d9f0      	bls.n	8013aae <segment2+0x266>
		}break;
 8013acc:	e08d      	b.n	8013bea <segment2+0x3a2>
	case 7:
		if(action)
 8013ace:	78fb      	ldrb	r3, [r7, #3]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d012      	beq.n	8013afa <segment2+0x2b2>
		{
			for(j=0;j<(sizeof(seg2_7))/sizeof(uint16_t);j++)
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	60fb      	str	r3, [r7, #12]
 8013ad8:	e00b      	b.n	8013af2 <segment2+0x2aa>
			{
				HAL_GPIO_WritePin(GPIOB, seg2_7[j].pin, GPIO_PIN_SET);
 8013ada:	4a11      	ldr	r2, [pc, #68]	@ (8013b20 <segment2+0x2d8>)
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013ae2:	2201      	movs	r2, #1
 8013ae4:	4619      	mov	r1, r3
 8013ae6:	4807      	ldr	r0, [pc, #28]	@ (8013b04 <segment2+0x2bc>)
 8013ae8:	f003 fa2e 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_7))/sizeof(uint16_t);j++)
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	3301      	adds	r3, #1
 8013af0:	60fb      	str	r3, [r7, #12]
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	2b02      	cmp	r3, #2
 8013af6:	d9f0      	bls.n	8013ada <segment2+0x292>
		{
			for(j=0;j<(sizeof(seg2_7))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOB, seg2_7[j].pin, GPIO_PIN_RESET);
			}
		}break;
 8013af8:	e077      	b.n	8013bea <segment2+0x3a2>
			for(j=0;j<(sizeof(seg2_7))/sizeof(uint16_t);j++)
 8013afa:	2300      	movs	r3, #0
 8013afc:	60fb      	str	r3, [r7, #12]
 8013afe:	e01d      	b.n	8013b3c <segment2+0x2f4>
 8013b00:	0801a784 	.word	0x0801a784
 8013b04:	48000400 	.word	0x48000400
 8013b08:	0801a790 	.word	0x0801a790
 8013b0c:	0801a794 	.word	0x0801a794
 8013b10:	0801a7a0 	.word	0x0801a7a0
 8013b14:	0801a7ac 	.word	0x0801a7ac
 8013b18:	0801a7b4 	.word	0x0801a7b4
 8013b1c:	0801a7c0 	.word	0x0801a7c0
 8013b20:	0801a7cc 	.word	0x0801a7cc
				HAL_GPIO_WritePin(GPIOB, seg2_7[j].pin, GPIO_PIN_RESET);
 8013b24:	4a33      	ldr	r2, [pc, #204]	@ (8013bf4 <segment2+0x3ac>)
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	4619      	mov	r1, r3
 8013b30:	4831      	ldr	r0, [pc, #196]	@ (8013bf8 <segment2+0x3b0>)
 8013b32:	f003 fa09 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_7))/sizeof(uint16_t);j++)
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	3301      	adds	r3, #1
 8013b3a:	60fb      	str	r3, [r7, #12]
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	2b02      	cmp	r3, #2
 8013b40:	d9f0      	bls.n	8013b24 <segment2+0x2dc>
		}break;
 8013b42:	e052      	b.n	8013bea <segment2+0x3a2>
	case 8:
		if(action)
 8013b44:	78fb      	ldrb	r3, [r7, #3]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d012      	beq.n	8013b70 <segment2+0x328>
		{
			for(j=0;j<(sizeof(seg2_8))/sizeof(uint16_t);j++)
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	60fb      	str	r3, [r7, #12]
 8013b4e:	e00b      	b.n	8013b68 <segment2+0x320>
			{
				HAL_GPIO_WritePin(GPIOB, seg2_8[j].pin, GPIO_PIN_SET);
 8013b50:	4a2a      	ldr	r2, [pc, #168]	@ (8013bfc <segment2+0x3b4>)
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b58:	2201      	movs	r2, #1
 8013b5a:	4619      	mov	r1, r3
 8013b5c:	4826      	ldr	r0, [pc, #152]	@ (8013bf8 <segment2+0x3b0>)
 8013b5e:	f003 f9f3 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_8))/sizeof(uint16_t);j++)
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	3301      	adds	r3, #1
 8013b66:	60fb      	str	r3, [r7, #12]
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	2b06      	cmp	r3, #6
 8013b6c:	d9f0      	bls.n	8013b50 <segment2+0x308>
		{
			for(j=0;j<(sizeof(seg2_8))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOB, seg2_8[j].pin, GPIO_PIN_RESET);
			}
		}break;
 8013b6e:	e03c      	b.n	8013bea <segment2+0x3a2>
			for(j=0;j<(sizeof(seg2_8))/sizeof(uint16_t);j++)
 8013b70:	2300      	movs	r3, #0
 8013b72:	60fb      	str	r3, [r7, #12]
 8013b74:	e00b      	b.n	8013b8e <segment2+0x346>
				HAL_GPIO_WritePin(GPIOB, seg2_8[j].pin, GPIO_PIN_RESET);
 8013b76:	4a21      	ldr	r2, [pc, #132]	@ (8013bfc <segment2+0x3b4>)
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b7e:	2200      	movs	r2, #0
 8013b80:	4619      	mov	r1, r3
 8013b82:	481d      	ldr	r0, [pc, #116]	@ (8013bf8 <segment2+0x3b0>)
 8013b84:	f003 f9e0 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_8))/sizeof(uint16_t);j++)
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	3301      	adds	r3, #1
 8013b8c:	60fb      	str	r3, [r7, #12]
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	2b06      	cmp	r3, #6
 8013b92:	d9f0      	bls.n	8013b76 <segment2+0x32e>
		}break;
 8013b94:	e029      	b.n	8013bea <segment2+0x3a2>
	case 9:
		if(action)
 8013b96:	78fb      	ldrb	r3, [r7, #3]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d012      	beq.n	8013bc2 <segment2+0x37a>
		{
			for(j=0;j<(sizeof(seg2_9))/sizeof(uint16_t);j++)
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	60fb      	str	r3, [r7, #12]
 8013ba0:	e00b      	b.n	8013bba <segment2+0x372>
			{
				HAL_GPIO_WritePin(GPIOB, seg2_9[j].pin, GPIO_PIN_SET);
 8013ba2:	4a17      	ldr	r2, [pc, #92]	@ (8013c00 <segment2+0x3b8>)
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013baa:	2201      	movs	r2, #1
 8013bac:	4619      	mov	r1, r3
 8013bae:	4812      	ldr	r0, [pc, #72]	@ (8013bf8 <segment2+0x3b0>)
 8013bb0:	f003 f9ca 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_9))/sizeof(uint16_t);j++)
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	3301      	adds	r3, #1
 8013bb8:	60fb      	str	r3, [r7, #12]
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	2b05      	cmp	r3, #5
 8013bbe:	d9f0      	bls.n	8013ba2 <segment2+0x35a>
		{
			for(j=0;j<(sizeof(seg2_9))/sizeof(uint16_t);j++)
			{
				HAL_GPIO_WritePin(GPIOB, seg2_9[j].pin, GPIO_PIN_RESET);
			}
		}break;
 8013bc0:	e013      	b.n	8013bea <segment2+0x3a2>
			for(j=0;j<(sizeof(seg2_9))/sizeof(uint16_t);j++)
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	60fb      	str	r3, [r7, #12]
 8013bc6:	e00b      	b.n	8013be0 <segment2+0x398>
				HAL_GPIO_WritePin(GPIOB, seg2_9[j].pin, GPIO_PIN_RESET);
 8013bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8013c00 <segment2+0x3b8>)
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	4619      	mov	r1, r3
 8013bd4:	4808      	ldr	r0, [pc, #32]	@ (8013bf8 <segment2+0x3b0>)
 8013bd6:	f003 f9b7 	bl	8016f48 <HAL_GPIO_WritePin>
			for(j=0;j<(sizeof(seg2_9))/sizeof(uint16_t);j++)
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	3301      	adds	r3, #1
 8013bde:	60fb      	str	r3, [r7, #12]
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	2b05      	cmp	r3, #5
 8013be4:	d9f0      	bls.n	8013bc8 <segment2+0x380>
		}break;
 8013be6:	e000      	b.n	8013bea <segment2+0x3a2>

	default: ;break;
 8013be8:	bf00      	nop
	}
}
 8013bea:	bf00      	nop
 8013bec:	3710      	adds	r7, #16
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}
 8013bf2:	bf00      	nop
 8013bf4:	0801a7cc 	.word	0x0801a7cc
 8013bf8:	48000400 	.word	0x48000400
 8013bfc:	0801a7d4 	.word	0x0801a7d4
 8013c00:	0801a7e4 	.word	0x0801a7e4

08013c04 <allsegment>:

void allsegment(bool action)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b084      	sub	sp, #16
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	71fb      	strb	r3, [r7, #7]
	int j=0;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	60fb      	str	r3, [r7, #12]
	if(!action)
 8013c12:	79fb      	ldrb	r3, [r7, #7]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d112      	bne.n	8013c3e <allsegment+0x3a>
	{
		for(j=0;j<(sizeof(all))/sizeof(uint16_t);j++)
 8013c18:	2300      	movs	r3, #0
 8013c1a:	60fb      	str	r3, [r7, #12]
 8013c1c:	e00b      	b.n	8013c36 <allsegment+0x32>
		{
			HAL_GPIO_WritePin(GPIOB, all[j].pin, GPIO_PIN_RESET);
 8013c1e:	4a28      	ldr	r2, [pc, #160]	@ (8013cc0 <allsegment+0xbc>)
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013c26:	2200      	movs	r2, #0
 8013c28:	4619      	mov	r1, r3
 8013c2a:	4826      	ldr	r0, [pc, #152]	@ (8013cc4 <allsegment+0xc0>)
 8013c2c:	f003 f98c 	bl	8016f48 <HAL_GPIO_WritePin>
		for(j=0;j<(sizeof(all))/sizeof(uint16_t);j++)
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	3301      	adds	r3, #1
 8013c34:	60fb      	str	r3, [r7, #12]
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	2b06      	cmp	r3, #6
 8013c3a:	d9f0      	bls.n	8013c1e <allsegment+0x1a>
 8013c3c:	e011      	b.n	8013c62 <allsegment+0x5e>
		}
	}
	else
	{
		for(j=0;j<(sizeof(all))/sizeof(uint16_t);j++)
 8013c3e:	2300      	movs	r3, #0
 8013c40:	60fb      	str	r3, [r7, #12]
 8013c42:	e00b      	b.n	8013c5c <allsegment+0x58>
		{
			HAL_GPIO_WritePin(GPIOB, all[j].pin, GPIO_PIN_SET);
 8013c44:	4a1e      	ldr	r2, [pc, #120]	@ (8013cc0 <allsegment+0xbc>)
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013c4c:	2201      	movs	r2, #1
 8013c4e:	4619      	mov	r1, r3
 8013c50:	481c      	ldr	r0, [pc, #112]	@ (8013cc4 <allsegment+0xc0>)
 8013c52:	f003 f979 	bl	8016f48 <HAL_GPIO_WritePin>
		for(j=0;j<(sizeof(all))/sizeof(uint16_t);j++)
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	3301      	adds	r3, #1
 8013c5a:	60fb      	str	r3, [r7, #12]
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	2b06      	cmp	r3, #6
 8013c60:	d9f0      	bls.n	8013c44 <allsegment+0x40>
		}
	}
	if(!action)
 8013c62:	79fb      	ldrb	r3, [r7, #7]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d113      	bne.n	8013c90 <allsegment+0x8c>
	{
		for(j=0;j<(sizeof(all2))/sizeof(uint16_t);j++)
 8013c68:	2300      	movs	r3, #0
 8013c6a:	60fb      	str	r3, [r7, #12]
 8013c6c:	e00c      	b.n	8013c88 <allsegment+0x84>
		{
			HAL_GPIO_WritePin(GPIOA, all2[j].pin, GPIO_PIN_RESET);
 8013c6e:	4a16      	ldr	r2, [pc, #88]	@ (8013cc8 <allsegment+0xc4>)
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013c76:	2200      	movs	r2, #0
 8013c78:	4619      	mov	r1, r3
 8013c7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8013c7e:	f003 f963 	bl	8016f48 <HAL_GPIO_WritePin>
		for(j=0;j<(sizeof(all2))/sizeof(uint16_t);j++)
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	3301      	adds	r3, #1
 8013c86:	60fb      	str	r3, [r7, #12]
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	2b06      	cmp	r3, #6
 8013c8c:	d9ef      	bls.n	8013c6e <allsegment+0x6a>
		for(j=0;j<(sizeof(all2))/sizeof(uint16_t);j++)
		{
			HAL_GPIO_WritePin(GPIOA, all2[j].pin, GPIO_PIN_SET);
		}
	}
}
 8013c8e:	e012      	b.n	8013cb6 <allsegment+0xb2>
		for(j=0;j<(sizeof(all2))/sizeof(uint16_t);j++)
 8013c90:	2300      	movs	r3, #0
 8013c92:	60fb      	str	r3, [r7, #12]
 8013c94:	e00c      	b.n	8013cb0 <allsegment+0xac>
			HAL_GPIO_WritePin(GPIOA, all2[j].pin, GPIO_PIN_SET);
 8013c96:	4a0c      	ldr	r2, [pc, #48]	@ (8013cc8 <allsegment+0xc4>)
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013c9e:	2201      	movs	r2, #1
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8013ca6:	f003 f94f 	bl	8016f48 <HAL_GPIO_WritePin>
		for(j=0;j<(sizeof(all2))/sizeof(uint16_t);j++)
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	3301      	adds	r3, #1
 8013cae:	60fb      	str	r3, [r7, #12]
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	2b06      	cmp	r3, #6
 8013cb4:	d9ef      	bls.n	8013c96 <allsegment+0x92>
}
 8013cb6:	bf00      	nop
 8013cb8:	3710      	adds	r7, #16
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}
 8013cbe:	bf00      	nop
 8013cc0:	0801a7f0 	.word	0x0801a7f0
 8013cc4:	48000400 	.word	0x48000400
 8013cc8:	0801a800 	.word	0x0801a800
 8013ccc:	00000000 	.word	0x00000000

08013cd0 <linijka1>:

void linijka1(float poziom1)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b082      	sub	sp, #8
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	ed87 0a01 	vstr	s0, [r7, #4]
	allsegment(FALSE);
 8013cda:	2000      	movs	r0, #0
 8013cdc:	f7ff ff92 	bl	8013c04 <allsegment>
	if(poziom1>=0 && poziom1<=0.471)
 8013ce0:	edd7 7a01 	vldr	s15, [r7, #4]
 8013ce4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cec:	db11      	blt.n	8013d12 <linijka1+0x42>
 8013cee:	6878      	ldr	r0, [r7, #4]
 8013cf0:	f7ec fcf8 	bl	80006e4 <__aeabi_f2d>
 8013cf4:	a360      	add	r3, pc, #384	@ (adr r3, 8013e78 <linijka1+0x1a8>)
 8013cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cfa:	f7ec fdb5 	bl	8000868 <__aeabi_dcmple>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d006      	beq.n	8013d12 <linijka1+0x42>
	{
		HAL_GPIO_WritePin(GPIOA, A_Pin, SET);
 8013d04:	2201      	movs	r2, #1
 8013d06:	2101      	movs	r1, #1
 8013d08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8013d0c:	f003 f91c 	bl	8016f48 <HAL_GPIO_WritePin>
 8013d10:	e0ab      	b.n	8013e6a <linijka1+0x19a>
	}
	else if(poziom1>0.471 && poziom1<=0.942)
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f7ec fce6 	bl	80006e4 <__aeabi_f2d>
 8013d18:	a357      	add	r3, pc, #348	@ (adr r3, 8013e78 <linijka1+0x1a8>)
 8013d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d1e:	f7ec fdb7 	bl	8000890 <__aeabi_dcmpgt>
 8013d22:	4603      	mov	r3, r0
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d011      	beq.n	8013d4c <linijka1+0x7c>
 8013d28:	6878      	ldr	r0, [r7, #4]
 8013d2a:	f7ec fcdb 	bl	80006e4 <__aeabi_f2d>
 8013d2e:	a354      	add	r3, pc, #336	@ (adr r3, 8013e80 <linijka1+0x1b0>)
 8013d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d34:	f7ec fd98 	bl	8000868 <__aeabi_dcmple>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d006      	beq.n	8013d4c <linijka1+0x7c>
	{
		HAL_GPIO_WritePin(GPIOA, A_Pin | B_Pin, SET);
 8013d3e:	2201      	movs	r2, #1
 8013d40:	2103      	movs	r1, #3
 8013d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8013d46:	f003 f8ff 	bl	8016f48 <HAL_GPIO_WritePin>
 8013d4a:	e08e      	b.n	8013e6a <linijka1+0x19a>
	}
	else if(poziom1>0.942 && poziom1<=1.413)
 8013d4c:	6878      	ldr	r0, [r7, #4]
 8013d4e:	f7ec fcc9 	bl	80006e4 <__aeabi_f2d>
 8013d52:	a34b      	add	r3, pc, #300	@ (adr r3, 8013e80 <linijka1+0x1b0>)
 8013d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d58:	f7ec fd9a 	bl	8000890 <__aeabi_dcmpgt>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d012      	beq.n	8013d88 <linijka1+0xb8>
 8013d62:	6878      	ldr	r0, [r7, #4]
 8013d64:	f7ec fcbe 	bl	80006e4 <__aeabi_f2d>
 8013d68:	a347      	add	r3, pc, #284	@ (adr r3, 8013e88 <linijka1+0x1b8>)
 8013d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d6e:	f7ec fd7b 	bl	8000868 <__aeabi_dcmple>
 8013d72:	4603      	mov	r3, r0
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d007      	beq.n	8013d88 <linijka1+0xb8>
	{
		HAL_GPIO_WritePin(GPIOA, A_Pin | B_Pin | C_Pin, SET);
 8013d78:	2201      	movs	r2, #1
 8013d7a:	f241 0103 	movw	r1, #4099	@ 0x1003
 8013d7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8013d82:	f003 f8e1 	bl	8016f48 <HAL_GPIO_WritePin>
 8013d86:	e070      	b.n	8013e6a <linijka1+0x19a>
	}
	else if(poziom1>1.413 && poziom1<=1.884)
 8013d88:	6878      	ldr	r0, [r7, #4]
 8013d8a:	f7ec fcab 	bl	80006e4 <__aeabi_f2d>
 8013d8e:	a33e      	add	r3, pc, #248	@ (adr r3, 8013e88 <linijka1+0x1b8>)
 8013d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d94:	f7ec fd7c 	bl	8000890 <__aeabi_dcmpgt>
 8013d98:	4603      	mov	r3, r0
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d012      	beq.n	8013dc4 <linijka1+0xf4>
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f7ec fca0 	bl	80006e4 <__aeabi_f2d>
 8013da4:	a33a      	add	r3, pc, #232	@ (adr r3, 8013e90 <linijka1+0x1c0>)
 8013da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013daa:	f7ec fd5d 	bl	8000868 <__aeabi_dcmple>
 8013dae:	4603      	mov	r3, r0
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d007      	beq.n	8013dc4 <linijka1+0xf4>
	{
		HAL_GPIO_WritePin(GPIOA, A_Pin | B_Pin | C_Pin | D_Pin, SET);
 8013db4:	2201      	movs	r2, #1
 8013db6:	f641 0103 	movw	r1, #6147	@ 0x1803
 8013dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8013dbe:	f003 f8c3 	bl	8016f48 <HAL_GPIO_WritePin>
 8013dc2:	e052      	b.n	8013e6a <linijka1+0x19a>
	}
	else if(poziom1>1.884 && poziom1<=2.355)
 8013dc4:	6878      	ldr	r0, [r7, #4]
 8013dc6:	f7ec fc8d 	bl	80006e4 <__aeabi_f2d>
 8013dca:	a331      	add	r3, pc, #196	@ (adr r3, 8013e90 <linijka1+0x1c0>)
 8013dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd0:	f7ec fd5e 	bl	8000890 <__aeabi_dcmpgt>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d012      	beq.n	8013e00 <linijka1+0x130>
 8013dda:	6878      	ldr	r0, [r7, #4]
 8013ddc:	f7ec fc82 	bl	80006e4 <__aeabi_f2d>
 8013de0:	a32d      	add	r3, pc, #180	@ (adr r3, 8013e98 <linijka1+0x1c8>)
 8013de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de6:	f7ec fd3f 	bl	8000868 <__aeabi_dcmple>
 8013dea:	4603      	mov	r3, r0
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d007      	beq.n	8013e00 <linijka1+0x130>
	{
		HAL_GPIO_WritePin(GPIOA, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin, SET);
 8013df0:	2201      	movs	r2, #1
 8013df2:	f641 0113 	movw	r1, #6163	@ 0x1813
 8013df6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8013dfa:	f003 f8a5 	bl	8016f48 <HAL_GPIO_WritePin>
 8013dfe:	e034      	b.n	8013e6a <linijka1+0x19a>
	}
	else if(poziom1>2.355 && poziom1<=2.826)
 8013e00:	6878      	ldr	r0, [r7, #4]
 8013e02:	f7ec fc6f 	bl	80006e4 <__aeabi_f2d>
 8013e06:	a324      	add	r3, pc, #144	@ (adr r3, 8013e98 <linijka1+0x1c8>)
 8013e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e0c:	f7ec fd40 	bl	8000890 <__aeabi_dcmpgt>
 8013e10:	4603      	mov	r3, r0
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d012      	beq.n	8013e3c <linijka1+0x16c>
 8013e16:	6878      	ldr	r0, [r7, #4]
 8013e18:	f7ec fc64 	bl	80006e4 <__aeabi_f2d>
 8013e1c:	a320      	add	r3, pc, #128	@ (adr r3, 8013ea0 <linijka1+0x1d0>)
 8013e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e22:	f7ec fd21 	bl	8000868 <__aeabi_dcmple>
 8013e26:	4603      	mov	r3, r0
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d007      	beq.n	8013e3c <linijka1+0x16c>
	{
		HAL_GPIO_WritePin(GPIOA, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin, SET);
 8013e2c:	2201      	movs	r2, #1
 8013e2e:	f641 0133 	movw	r1, #6195	@ 0x1833
 8013e32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8013e36:	f003 f887 	bl	8016f48 <HAL_GPIO_WritePin>
 8013e3a:	e016      	b.n	8013e6a <linijka1+0x19a>
	}
	else if(poziom1>2.826)
 8013e3c:	6878      	ldr	r0, [r7, #4]
 8013e3e:	f7ec fc51 	bl	80006e4 <__aeabi_f2d>
 8013e42:	a317      	add	r3, pc, #92	@ (adr r3, 8013ea0 <linijka1+0x1d0>)
 8013e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e48:	f7ec fd22 	bl	8000890 <__aeabi_dcmpgt>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d007      	beq.n	8013e62 <linijka1+0x192>
	{
		HAL_GPIO_WritePin(GPIOA, A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin, SET);
 8013e52:	2201      	movs	r2, #1
 8013e54:	f641 0173 	movw	r1, #6259	@ 0x1873
 8013e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8013e5c:	f003 f874 	bl	8016f48 <HAL_GPIO_WritePin>
	}
	else
	{
		allsegment(FALSE);
	}
}
 8013e60:	e003      	b.n	8013e6a <linijka1+0x19a>
		allsegment(FALSE);
 8013e62:	2000      	movs	r0, #0
 8013e64:	f7ff fece 	bl	8013c04 <allsegment>
}
 8013e68:	e7ff      	b.n	8013e6a <linijka1+0x19a>
 8013e6a:	bf00      	nop
 8013e6c:	3708      	adds	r7, #8
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bd80      	pop	{r7, pc}
 8013e72:	bf00      	nop
 8013e74:	f3af 8000 	nop.w
 8013e78:	2f1a9fbe 	.word	0x2f1a9fbe
 8013e7c:	3fde24dd 	.word	0x3fde24dd
 8013e80:	2f1a9fbe 	.word	0x2f1a9fbe
 8013e84:	3fee24dd 	.word	0x3fee24dd
 8013e88:	e353f7cf 	.word	0xe353f7cf
 8013e8c:	3ff69ba5 	.word	0x3ff69ba5
 8013e90:	2f1a9fbe 	.word	0x2f1a9fbe
 8013e94:	3ffe24dd 	.word	0x3ffe24dd
 8013e98:	3d70a3d7 	.word	0x3d70a3d7
 8013e9c:	4002d70a 	.word	0x4002d70a
 8013ea0:	e353f7cf 	.word	0xe353f7cf
 8013ea4:	40069ba5 	.word	0x40069ba5

08013ea8 <linijka2>:

void linijka2(float poziom2)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b082      	sub	sp, #8
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	ed87 0a01 	vstr	s0, [r7, #4]
	allsegment(FALSE);
 8013eb2:	2000      	movs	r0, #0
 8013eb4:	f7ff fea6 	bl	8013c04 <allsegment>
	if(poziom2>=0 && poziom2<=0.471)
 8013eb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8013ebc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ec4:	db10      	blt.n	8013ee8 <linijka2+0x40>
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f7ec fc0c 	bl	80006e4 <__aeabi_f2d>
 8013ecc:	a35a      	add	r3, pc, #360	@ (adr r3, 8014038 <linijka2+0x190>)
 8013ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ed2:	f7ec fcc9 	bl	8000868 <__aeabi_dcmple>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d005      	beq.n	8013ee8 <linijka2+0x40>
	{
		HAL_GPIO_WritePin(GPIOB, Ad2_Pin, SET);
 8013edc:	2201      	movs	r2, #1
 8013ede:	2101      	movs	r1, #1
 8013ee0:	4861      	ldr	r0, [pc, #388]	@ (8014068 <linijka2+0x1c0>)
 8013ee2:	f003 f831 	bl	8016f48 <HAL_GPIO_WritePin>
 8013ee6:	e0a1      	b.n	801402c <linijka2+0x184>
	}
	else if(poziom2>0.471 && poziom2<=0.942)
 8013ee8:	6878      	ldr	r0, [r7, #4]
 8013eea:	f7ec fbfb 	bl	80006e4 <__aeabi_f2d>
 8013eee:	a352      	add	r3, pc, #328	@ (adr r3, 8014038 <linijka2+0x190>)
 8013ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ef4:	f7ec fccc 	bl	8000890 <__aeabi_dcmpgt>
 8013ef8:	4603      	mov	r3, r0
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d010      	beq.n	8013f20 <linijka2+0x78>
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f7ec fbf0 	bl	80006e4 <__aeabi_f2d>
 8013f04:	a34e      	add	r3, pc, #312	@ (adr r3, 8014040 <linijka2+0x198>)
 8013f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f0a:	f7ec fcad 	bl	8000868 <__aeabi_dcmple>
 8013f0e:	4603      	mov	r3, r0
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d005      	beq.n	8013f20 <linijka2+0x78>
	{
		HAL_GPIO_WritePin(GPIOB, Ad2_Pin | Bd2_Pin, SET);
 8013f14:	2201      	movs	r2, #1
 8013f16:	2103      	movs	r1, #3
 8013f18:	4853      	ldr	r0, [pc, #332]	@ (8014068 <linijka2+0x1c0>)
 8013f1a:	f003 f815 	bl	8016f48 <HAL_GPIO_WritePin>
 8013f1e:	e085      	b.n	801402c <linijka2+0x184>
	}
	else if(poziom2>0.942 && poziom2<=1.413)
 8013f20:	6878      	ldr	r0, [r7, #4]
 8013f22:	f7ec fbdf 	bl	80006e4 <__aeabi_f2d>
 8013f26:	a346      	add	r3, pc, #280	@ (adr r3, 8014040 <linijka2+0x198>)
 8013f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f2c:	f7ec fcb0 	bl	8000890 <__aeabi_dcmpgt>
 8013f30:	4603      	mov	r3, r0
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d010      	beq.n	8013f58 <linijka2+0xb0>
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f7ec fbd4 	bl	80006e4 <__aeabi_f2d>
 8013f3c:	a342      	add	r3, pc, #264	@ (adr r3, 8014048 <linijka2+0x1a0>)
 8013f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f42:	f7ec fc91 	bl	8000868 <__aeabi_dcmple>
 8013f46:	4603      	mov	r3, r0
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d005      	beq.n	8013f58 <linijka2+0xb0>
	{
		HAL_GPIO_WritePin(GPIOB, Ad2_Pin | Bd2_Pin | Cd2_Pin, SET);
 8013f4c:	2201      	movs	r2, #1
 8013f4e:	2107      	movs	r1, #7
 8013f50:	4845      	ldr	r0, [pc, #276]	@ (8014068 <linijka2+0x1c0>)
 8013f52:	f002 fff9 	bl	8016f48 <HAL_GPIO_WritePin>
 8013f56:	e069      	b.n	801402c <linijka2+0x184>
	}
	else if(poziom2>1.413 && poziom2<=1.884)
 8013f58:	6878      	ldr	r0, [r7, #4]
 8013f5a:	f7ec fbc3 	bl	80006e4 <__aeabi_f2d>
 8013f5e:	a33a      	add	r3, pc, #232	@ (adr r3, 8014048 <linijka2+0x1a0>)
 8013f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f64:	f7ec fc94 	bl	8000890 <__aeabi_dcmpgt>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d010      	beq.n	8013f90 <linijka2+0xe8>
 8013f6e:	6878      	ldr	r0, [r7, #4]
 8013f70:	f7ec fbb8 	bl	80006e4 <__aeabi_f2d>
 8013f74:	a336      	add	r3, pc, #216	@ (adr r3, 8014050 <linijka2+0x1a8>)
 8013f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f7a:	f7ec fc75 	bl	8000868 <__aeabi_dcmple>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d005      	beq.n	8013f90 <linijka2+0xe8>
	{
		HAL_GPIO_WritePin(GPIOB, Ad2_Pin | Bd2_Pin | Cd2_Pin | Dd2_Pin, SET);
 8013f84:	2201      	movs	r2, #1
 8013f86:	210f      	movs	r1, #15
 8013f88:	4837      	ldr	r0, [pc, #220]	@ (8014068 <linijka2+0x1c0>)
 8013f8a:	f002 ffdd 	bl	8016f48 <HAL_GPIO_WritePin>
 8013f8e:	e04d      	b.n	801402c <linijka2+0x184>
	}
	else if(poziom2>1.884 && poziom2<=2.355)
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f7ec fba7 	bl	80006e4 <__aeabi_f2d>
 8013f96:	a32e      	add	r3, pc, #184	@ (adr r3, 8014050 <linijka2+0x1a8>)
 8013f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f9c:	f7ec fc78 	bl	8000890 <__aeabi_dcmpgt>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d010      	beq.n	8013fc8 <linijka2+0x120>
 8013fa6:	6878      	ldr	r0, [r7, #4]
 8013fa8:	f7ec fb9c 	bl	80006e4 <__aeabi_f2d>
 8013fac:	a32a      	add	r3, pc, #168	@ (adr r3, 8014058 <linijka2+0x1b0>)
 8013fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fb2:	f7ec fc59 	bl	8000868 <__aeabi_dcmple>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d005      	beq.n	8013fc8 <linijka2+0x120>
	{
		HAL_GPIO_WritePin(GPIOB, Ad2_Pin | Bd2_Pin | Cd2_Pin | Dd2_Pin | Ed2_Pin, SET);
 8013fbc:	2201      	movs	r2, #1
 8013fbe:	211f      	movs	r1, #31
 8013fc0:	4829      	ldr	r0, [pc, #164]	@ (8014068 <linijka2+0x1c0>)
 8013fc2:	f002 ffc1 	bl	8016f48 <HAL_GPIO_WritePin>
 8013fc6:	e031      	b.n	801402c <linijka2+0x184>
	}
	else if(poziom2>2.355 && poziom2<=2.826)
 8013fc8:	6878      	ldr	r0, [r7, #4]
 8013fca:	f7ec fb8b 	bl	80006e4 <__aeabi_f2d>
 8013fce:	a322      	add	r3, pc, #136	@ (adr r3, 8014058 <linijka2+0x1b0>)
 8013fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd4:	f7ec fc5c 	bl	8000890 <__aeabi_dcmpgt>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d010      	beq.n	8014000 <linijka2+0x158>
 8013fde:	6878      	ldr	r0, [r7, #4]
 8013fe0:	f7ec fb80 	bl	80006e4 <__aeabi_f2d>
 8013fe4:	a31e      	add	r3, pc, #120	@ (adr r3, 8014060 <linijka2+0x1b8>)
 8013fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fea:	f7ec fc3d 	bl	8000868 <__aeabi_dcmple>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d005      	beq.n	8014000 <linijka2+0x158>
	{
		HAL_GPIO_WritePin(GPIOB, Ad2_Pin | Bd2_Pin | Cd2_Pin | Dd2_Pin | Ed2_Pin | Fd2_Pin, SET);
 8013ff4:	2201      	movs	r2, #1
 8013ff6:	213f      	movs	r1, #63	@ 0x3f
 8013ff8:	481b      	ldr	r0, [pc, #108]	@ (8014068 <linijka2+0x1c0>)
 8013ffa:	f002 ffa5 	bl	8016f48 <HAL_GPIO_WritePin>
 8013ffe:	e015      	b.n	801402c <linijka2+0x184>
	}
	else if(poziom2>2.826)
 8014000:	6878      	ldr	r0, [r7, #4]
 8014002:	f7ec fb6f 	bl	80006e4 <__aeabi_f2d>
 8014006:	a316      	add	r3, pc, #88	@ (adr r3, 8014060 <linijka2+0x1b8>)
 8014008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801400c:	f7ec fc40 	bl	8000890 <__aeabi_dcmpgt>
 8014010:	4603      	mov	r3, r0
 8014012:	2b00      	cmp	r3, #0
 8014014:	d006      	beq.n	8014024 <linijka2+0x17c>
	{
		HAL_GPIO_WritePin(GPIOB, Ad2_Pin | Bd2_Pin | Cd2_Pin | Dd2_Pin | Ed2_Pin | Fd2_Pin | Gd2_Pin, SET);
 8014016:	2201      	movs	r2, #1
 8014018:	f640 013f 	movw	r1, #2111	@ 0x83f
 801401c:	4812      	ldr	r0, [pc, #72]	@ (8014068 <linijka2+0x1c0>)
 801401e:	f002 ff93 	bl	8016f48 <HAL_GPIO_WritePin>
	}
	else
	{
		allsegment(FALSE);
	}
}
 8014022:	e003      	b.n	801402c <linijka2+0x184>
		allsegment(FALSE);
 8014024:	2000      	movs	r0, #0
 8014026:	f7ff fded 	bl	8013c04 <allsegment>
}
 801402a:	e7ff      	b.n	801402c <linijka2+0x184>
 801402c:	bf00      	nop
 801402e:	3708      	adds	r7, #8
 8014030:	46bd      	mov	sp, r7
 8014032:	bd80      	pop	{r7, pc}
 8014034:	f3af 8000 	nop.w
 8014038:	2f1a9fbe 	.word	0x2f1a9fbe
 801403c:	3fde24dd 	.word	0x3fde24dd
 8014040:	2f1a9fbe 	.word	0x2f1a9fbe
 8014044:	3fee24dd 	.word	0x3fee24dd
 8014048:	e353f7cf 	.word	0xe353f7cf
 801404c:	3ff69ba5 	.word	0x3ff69ba5
 8014050:	2f1a9fbe 	.word	0x2f1a9fbe
 8014054:	3ffe24dd 	.word	0x3ffe24dd
 8014058:	3d70a3d7 	.word	0x3d70a3d7
 801405c:	4002d70a 	.word	0x4002d70a
 8014060:	e353f7cf 	.word	0xe353f7cf
 8014064:	40069ba5 	.word	0x40069ba5
 8014068:	48000400 	.word	0x48000400
 801406c:	00000000 	.word	0x00000000

08014070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b09a      	sub	sp, #104	@ 0x68
 8014074:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */

	adres_t ADRES;
	ADRES.ZERO=0x00;
 8014076:	2300      	movs	r3, #0
 8014078:	773b      	strb	r3, [r7, #28]
	ADRES.SOFTWARERESET=0x01;
 801407a:	2301      	movs	r3, #1
 801407c:	777b      	strb	r3, [r7, #29]
	ADRES.SLEEPOUT=0x11;
 801407e:	2311      	movs	r3, #17
 8014080:	77bb      	strb	r3, [r7, #30]
	ADRES.DISPLAYOFF=0x28;
 8014082:	2328      	movs	r3, #40	@ 0x28
 8014084:	77fb      	strb	r3, [r7, #31]
	ADRES.DISPLAYON=0x29;
 8014086:	2329      	movs	r3, #41	@ 0x29
 8014088:	f887 3020 	strb.w	r3, [r7, #32]
	ADRES.INTERFEJSON=0x3A;
 801408c:	233a      	movs	r3, #58	@ 0x3a
 801408e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	ADRES.BIT_12_ON_PIXEL=0x03;
 8014092:	2303      	movs	r3, #3
 8014094:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	ADRES.BIT_16_ON_PIXEL=0x05;
 8014098:	2305      	movs	r3, #5
 801409a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	ADRES.BIT_18_ON_PIXEL=0x06;
 801409e:	2306      	movs	r3, #6
 80140a0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	ADRES.CASET=0x2A;
 80140a4:	232a      	movs	r3, #42	@ 0x2a
 80140a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	ADRES.RASET=0x2B;
 80140aa:	232b      	movs	r3, #43	@ 0x2b
 80140ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	ADRES.MEMWRITE=0x2C;
 80140b0:	232c      	movs	r3, #44	@ 0x2c
 80140b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	ADRES.X0_SET=0x00;
 80140b6:	2300      	movs	r3, #0
 80140b8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	ADRES.Y0_SET=0x00;
 80140bc:	2300      	movs	r3, #0
 80140be:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	ADRES.X_END_SET=ADRES.X0_SET+30;
 80140c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80140c6:	331e      	adds	r3, #30
 80140c8:	b2db      	uxtb	r3, r3
 80140ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	ADRES.Y_END_SET=ADRES.Y0_SET+60;
 80140ce:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80140d2:	333c      	adds	r3, #60	@ 0x3c
 80140d4:	b2db      	uxtb	r3, r3
 80140d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	ADRES.RM=0;
 80140da:	2300      	movs	r3, #0
 80140dc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	ADRES.GM=63;
 80140e0:	233f      	movs	r3, #63	@ 0x3f
 80140e2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	ADRES.BM=31;
 80140e6:	231f      	movs	r3, #31
 80140e8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	ADRES.Mbyte=0x00;
 80140ec:	2300      	movs	r3, #0
 80140ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	ADRES.Mbyte2=0x00;
 80140f2:	2300      	movs	r3, #0
 80140f4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	ADRES.Mbyte=((ADRES.Mbyte^ADRES.RM)<<3)^(ADRES.GM&0x38);
 80140f8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80140fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8014100:	4053      	eors	r3, r2
 8014102:	b2db      	uxtb	r3, r3
 8014104:	00db      	lsls	r3, r3, #3
 8014106:	b25a      	sxtb	r2, r3
 8014108:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801410c:	b25b      	sxtb	r3, r3
 801410e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014112:	b25b      	sxtb	r3, r3
 8014114:	4053      	eors	r3, r2
 8014116:	b25b      	sxtb	r3, r3
 8014118:	b2db      	uxtb	r3, r3
 801411a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	ADRES.Mbyte2=((ADRES.Mbyte2^(ADRES.GM&0x07))<<5)^ADRES.BM;
 801411e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8014122:	461a      	mov	r2, r3
 8014124:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014128:	f003 0307 	and.w	r3, r3, #7
 801412c:	4053      	eors	r3, r2
 801412e:	015b      	lsls	r3, r3, #5
 8014130:	b25a      	sxtb	r2, r3
 8014132:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014136:	b25b      	sxtb	r3, r3
 8014138:	4053      	eors	r3, r2
 801413a:	b25b      	sxtb	r3, r3
 801413c:	b2db      	uxtb	r3, r3
 801413e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30



	unsigned int i=0,j=0;
 8014142:	2300      	movs	r3, #0
 8014144:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014146:	2300      	movs	r3, #0
 8014148:	64bb      	str	r3, [r7, #72]	@ 0x48
	long int napiecie=0;
 801414a:	2300      	movs	r3, #0
 801414c:	647b      	str	r3, [r7, #68]	@ 0x44
	float fnapiecie=0.0;
 801414e:	f04f 0300 	mov.w	r3, #0
 8014152:	657b      	str	r3, [r7, #84]	@ 0x54
	long int napiecie2=0;
 8014154:	2300      	movs	r3, #0
 8014156:	643b      	str	r3, [r7, #64]	@ 0x40
	float fnapiecie2=0.0;
 8014158:	f04f 0300 	mov.w	r3, #0
 801415c:	653b      	str	r3, [r7, #80]	@ 0x50
	float fnapiecie2_1=0.0;
 801415e:	f04f 0300 	mov.w	r3, #0
 8014162:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned int seg1=0;
 8014164:	2300      	movs	r3, #0
 8014166:	63bb      	str	r3, [r7, #56]	@ 0x38
	unsigned int seg2=0;
 8014168:	2300      	movs	r3, #0
 801416a:	637b      	str	r3, [r7, #52]	@ 0x34
	unsigned int tabADC[4]={0};
 801416c:	f107 030c 	add.w	r3, r7, #12
 8014170:	2200      	movs	r2, #0
 8014172:	601a      	str	r2, [r3, #0]
 8014174:	605a      	str	r2, [r3, #4]
 8014176:	609a      	str	r2, [r3, #8]
 8014178:	60da      	str	r2, [r3, #12]
	float tabADC2[2]={0};
 801417a:	1d3b      	adds	r3, r7, #4
 801417c:	2200      	movs	r2, #0
 801417e:	601a      	str	r2, [r3, #0]
 8014180:	605a      	str	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8014182:	f000 fcba 	bl	8014afa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8014186:	f000 fa09 	bl	801459c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 801418a:	f000 fa5b 	bl	8014644 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801418e:	f7ec feb9 	bl	8000f04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8014192:	f000 fbf5 	bl	8014980 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8014196:	f7ec fd4d 	bl	8000c34 <MX_ADC1_Init>
  MX_ADC2_Init();
 801419a:	f7ec fdc5 	bl	8000d28 <MX_ADC2_Init>
  MX_SPI3_Init();
 801419e:	f000 faef 	bl	8014780 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, &powitanie, sizeof(powitanie)-1, HAL_MAX_DELAY);
 80141a2:	f04f 33ff 	mov.w	r3, #4294967295
 80141a6:	f240 221e 	movw	r2, #542	@ 0x21e
 80141aa:	496b      	ldr	r1, [pc, #428]	@ (8014358 <main+0x2e8>)
 80141ac:	486b      	ldr	r0, [pc, #428]	@ (801435c <main+0x2ec>)
 80141ae:	f004 fdcf 	bl	8018d50 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, &buforRx[bufRxIndex], 1);
 80141b2:	4b6b      	ldr	r3, [pc, #428]	@ (8014360 <main+0x2f0>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	4a6b      	ldr	r2, [pc, #428]	@ (8014364 <main+0x2f4>)
 80141b8:	4413      	add	r3, r2
 80141ba:	2201      	movs	r2, #1
 80141bc:	4619      	mov	r1, r3
 80141be:	4867      	ldr	r0, [pc, #412]	@ (801435c <main+0x2ec>)
 80141c0:	f004 feae 	bl	8018f20 <HAL_UART_Receive_IT>
  allsegment(FALSE);
 80141c4:	2000      	movs	r0, #0
 80141c6:	f7ff fd1d 	bl	8013c04 <allsegment>
  LCD_init(&ADRES);
 80141ca:	f107 031c 	add.w	r3, r7, #28
 80141ce:	4618      	mov	r0, r3
 80141d0:	f7ec ff9c 	bl	800110c <LCD_init>
  LCD_printMENU(1, 1, 1, &ADRES);
 80141d4:	f107 031c 	add.w	r3, r7, #28
 80141d8:	2201      	movs	r2, #1
 80141da:	2101      	movs	r1, #1
 80141dc:	2001      	movs	r0, #1
 80141de:	f7fc ff47 	bl	8011070 <LCD_printMENU>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc2);
 80141e2:	4861      	ldr	r0, [pc, #388]	@ (8014368 <main+0x2f8>)
 80141e4:	f001 f8b6 	bl	8015354 <HAL_ADC_Start>
	  HAL_ADC_Start(&hadc1);
 80141e8:	4860      	ldr	r0, [pc, #384]	@ (801436c <main+0x2fc>)
 80141ea:	f001 f8b3 	bl	8015354 <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc2, 1)==HAL_OK)
 80141ee:	e0a6      	b.n	801433e <main+0x2ce>
	  {
		  //allsegment(FALSE);
		  napiecie2=HAL_ADC_GetValue(&hadc2);
 80141f0:	485d      	ldr	r0, [pc, #372]	@ (8014368 <main+0x2f8>)
 80141f2:	f001 fa75 	bl	80156e0 <HAL_ADC_GetValue>
 80141f6:	4603      	mov	r3, r0
 80141f8:	643b      	str	r3, [r7, #64]	@ 0x40
		  fnapiecie2=(float)(napiecie2)*(8059.0/10000000.0);
 80141fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80141fc:	ee07 3a90 	vmov	s15, r3
 8014200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014204:	ee17 0a90 	vmov	r0, s15
 8014208:	f7ec fa6c 	bl	80006e4 <__aeabi_f2d>
 801420c:	a350      	add	r3, pc, #320	@ (adr r3, 8014350 <main+0x2e0>)
 801420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014212:	f7eb ffd9 	bl	80001c8 <__aeabi_dmul>
 8014216:	4602      	mov	r2, r0
 8014218:	460b      	mov	r3, r1
 801421a:	4610      	mov	r0, r2
 801421c:	4619      	mov	r1, r3
 801421e:	f7ec fb41 	bl	80008a4 <__aeabi_d2f>
 8014222:	4603      	mov	r3, r0
 8014224:	653b      	str	r3, [r7, #80]	@ 0x50
		  fnapiecie2_1=fnapiecie2;
 8014226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014228:	63fb      	str	r3, [r7, #60]	@ 0x3c
		  if(tryb==7)
 801422a:	4b51      	ldr	r3, [pc, #324]	@ (8014370 <main+0x300>)
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	2b07      	cmp	r3, #7
 8014230:	d121      	bne.n	8014276 <main+0x206>
		  {
			  fnapiecie2=fnapiecie2-(unsigned int)fnapiecie2;
 8014232:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8014236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801423a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801423e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8014242:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014246:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
			  num1=fnapiecie2*10;
 801424a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 801424e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8014252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801425a:	ee17 2a90 	vmov	r2, s15
 801425e:	4b45      	ldr	r3, [pc, #276]	@ (8014374 <main+0x304>)
 8014260:	601a      	str	r2, [r3, #0]
			  tabADC[0]=fnapiecie2_1;
 8014262:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8014266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801426a:	ee17 3a90 	vmov	r3, s15
 801426e:	60fb      	str	r3, [r7, #12]
			  tabADC[1]=num1;
 8014270:	4b40      	ldr	r3, [pc, #256]	@ (8014374 <main+0x304>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	613b      	str	r3, [r7, #16]
		  }
		  if(aDC2)
 8014276:	4b40      	ldr	r3, [pc, #256]	@ (8014378 <main+0x308>)
 8014278:	781b      	ldrb	r3, [r3, #0]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d04f      	beq.n	801431e <main+0x2ae>
		  {
			  allsegment(FALSE);
 801427e:	2000      	movs	r0, #0
 8014280:	f7ff fcc0 	bl	8013c04 <allsegment>
//			  HAL_Delay(100);
			  segment1(fnapiecie2,TRUE);
 8014284:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8014288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801428c:	2101      	movs	r1, #1
 801428e:	ee17 0a90 	vmov	r0, s15
 8014292:	f7ff f8eb 	bl	801346c <segment1>
			  fnapiecie2=fnapiecie2-(unsigned int)fnapiecie2;
 8014296:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 801429a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801429e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80142a2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80142a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80142aa:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
			  num1=fnapiecie2*10;
 80142ae:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80142b2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80142b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80142ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80142be:	ee17 2a90 	vmov	r2, s15
 80142c2:	4b2c      	ldr	r3, [pc, #176]	@ (8014374 <main+0x304>)
 80142c4:	601a      	str	r2, [r3, #0]
			  segment2(num1,TRUE);
 80142c6:	4b2b      	ldr	r3, [pc, #172]	@ (8014374 <main+0x304>)
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	2101      	movs	r1, #1
 80142cc:	4618      	mov	r0, r3
 80142ce:	f7ff fabb 	bl	8013848 <segment2>
			  if(aDC1_wyslano)
 80142d2:	4b2a      	ldr	r3, [pc, #168]	@ (801437c <main+0x30c>)
 80142d4:	781b      	ldrb	r3, [r3, #0]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d021      	beq.n	801431e <main+0x2ae>
			  {
				  LCD_komenda(&ADRES.DISPLAYOFF);
 80142da:	f107 031c 	add.w	r3, r7, #28
 80142de:	3303      	adds	r3, #3
 80142e0:	b2db      	uxtb	r3, r3
 80142e2:	4618      	mov	r0, r3
 80142e4:	f7ec fee2 	bl	80010ac <LCD_komenda>
				  LCD_print_tryb_adc_numbers(1,1,1,&ADRES,fnapiecie2_1,num1,TRUE);
 80142e8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80142ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80142f0:	ee17 0a90 	vmov	r0, s15
 80142f4:	4b1f      	ldr	r3, [pc, #124]	@ (8014374 <main+0x304>)
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	f107 021c 	add.w	r2, r7, #28
 80142fc:	2101      	movs	r1, #1
 80142fe:	9102      	str	r1, [sp, #8]
 8014300:	9301      	str	r3, [sp, #4]
 8014302:	9000      	str	r0, [sp, #0]
 8014304:	4613      	mov	r3, r2
 8014306:	2201      	movs	r2, #1
 8014308:	2101      	movs	r1, #1
 801430a:	2001      	movs	r0, #1
 801430c:	f7fd fd76 	bl	8011dfc <LCD_print_tryb_adc_numbers>
				  LCD_komenda(&ADRES.DISPLAYON);
 8014310:	f107 031c 	add.w	r3, r7, #28
 8014314:	3304      	adds	r3, #4
 8014316:	b2db      	uxtb	r3, r3
 8014318:	4618      	mov	r0, r3
 801431a:	f7ec fec7 	bl	80010ac <LCD_komenda>
			  }
		  }
		  if(lineON)
 801431e:	4b18      	ldr	r3, [pc, #96]	@ (8014380 <main+0x310>)
 8014320:	781b      	ldrb	r3, [r3, #0]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d008      	beq.n	8014338 <main+0x2c8>
		  {
			  allsegment(FALSE);
 8014326:	2000      	movs	r0, #0
 8014328:	f7ff fc6c 	bl	8013c04 <allsegment>
			  tabADC2[0]=fnapiecie2;
 801432c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801432e:	607b      	str	r3, [r7, #4]
			  linijka2(fnapiecie2);
 8014330:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 8014334:	f7ff fdb8 	bl	8013ea8 <linijka2>
		  }
		  HAL_ADC_Stop(&hadc2);
 8014338:	480b      	ldr	r0, [pc, #44]	@ (8014368 <main+0x2f8>)
 801433a:	f001 f8c5 	bl	80154c8 <HAL_ADC_Stop>
	  while(HAL_ADC_PollForConversion(&hadc2, 1)==HAL_OK)
 801433e:	2101      	movs	r1, #1
 8014340:	4809      	ldr	r0, [pc, #36]	@ (8014368 <main+0x2f8>)
 8014342:	f001 f8f5 	bl	8015530 <HAL_ADC_PollForConversion>
 8014346:	4603      	mov	r3, r0
 8014348:	2b00      	cmp	r3, #0
 801434a:	f43f af51 	beq.w	80141f0 <main+0x180>
	  }
	  while(HAL_ADC_PollForConversion(&hadc1, 1)==HAL_OK)
 801434e:	e0c0      	b.n	80144d2 <main+0x462>
 8014350:	12698f10 	.word	0x12698f10
 8014354:	3f4a6861 	.word	0x3f4a6861
 8014358:	20000164 	.word	0x20000164
 801435c:	20000508 	.word	0x20000508
 8014360:	20000480 	.word	0x20000480
 8014364:	20000490 	.word	0x20000490
 8014368:	20000410 	.word	0x20000410
 801436c:	200003ac 	.word	0x200003ac
 8014370:	20000488 	.word	0x20000488
 8014374:	2000048c 	.word	0x2000048c
 8014378:	2000047b 	.word	0x2000047b
 801437c:	2000047c 	.word	0x2000047c
 8014380:	20000479 	.word	0x20000479
	  {
		  //allsegment(FALSE);
		  napiecie=HAL_ADC_GetValue(&hadc1);
 8014384:	487c      	ldr	r0, [pc, #496]	@ (8014578 <main+0x508>)
 8014386:	f001 f9ab 	bl	80156e0 <HAL_ADC_GetValue>
 801438a:	4603      	mov	r3, r0
 801438c:	647b      	str	r3, [r7, #68]	@ 0x44
		  fnapiecie=(float)(napiecie)*(8059.0/10000000.0);
 801438e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014390:	ee07 3a90 	vmov	s15, r3
 8014394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014398:	ee17 0a90 	vmov	r0, s15
 801439c:	f7ec f9a2 	bl	80006e4 <__aeabi_f2d>
 80143a0:	a373      	add	r3, pc, #460	@ (adr r3, 8014570 <main+0x500>)
 80143a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143a6:	f7eb ff0f 	bl	80001c8 <__aeabi_dmul>
 80143aa:	4602      	mov	r2, r0
 80143ac:	460b      	mov	r3, r1
 80143ae:	4610      	mov	r0, r2
 80143b0:	4619      	mov	r1, r3
 80143b2:	f7ec fa77 	bl	80008a4 <__aeabi_d2f>
 80143b6:	4603      	mov	r3, r0
 80143b8:	657b      	str	r3, [r7, #84]	@ 0x54
		  fnapiecie2_1=fnapiecie;
 80143ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
		  if(tryb==7)
 80143be:	4b6f      	ldr	r3, [pc, #444]	@ (801457c <main+0x50c>)
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	2b07      	cmp	r3, #7
 80143c4:	d121      	bne.n	801440a <main+0x39a>
		  {
			  fnapiecie=fnapiecie-(unsigned int)fnapiecie;
 80143c6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80143ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80143ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80143d2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80143d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80143da:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
			  num1=fnapiecie*10;
 80143de:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80143e2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80143e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80143ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80143ee:	ee17 2a90 	vmov	r2, s15
 80143f2:	4b63      	ldr	r3, [pc, #396]	@ (8014580 <main+0x510>)
 80143f4:	601a      	str	r2, [r3, #0]
			  tabADC[2]=fnapiecie2_1;
 80143f6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80143fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80143fe:	ee17 3a90 	vmov	r3, s15
 8014402:	617b      	str	r3, [r7, #20]
			  tabADC[3]=num1;
 8014404:	4b5e      	ldr	r3, [pc, #376]	@ (8014580 <main+0x510>)
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	61bb      	str	r3, [r7, #24]
		  }
		  if(aDC1)
 801440a:	4b5e      	ldr	r3, [pc, #376]	@ (8014584 <main+0x514>)
 801440c:	781b      	ldrb	r3, [r3, #0]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d04f      	beq.n	80144b2 <main+0x442>
		  {
			  allsegment(FALSE);
 8014412:	2000      	movs	r0, #0
 8014414:	f7ff fbf6 	bl	8013c04 <allsegment>
			  segment1(fnapiecie,TRUE);
 8014418:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 801441c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014420:	2101      	movs	r1, #1
 8014422:	ee17 0a90 	vmov	r0, s15
 8014426:	f7ff f821 	bl	801346c <segment1>
			  fnapiecie=fnapiecie-(unsigned int)fnapiecie;
 801442a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 801442e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014436:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 801443a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801443e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
			  num1=fnapiecie*10;
 8014442:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8014446:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 801444a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801444e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014452:	ee17 2a90 	vmov	r2, s15
 8014456:	4b4a      	ldr	r3, [pc, #296]	@ (8014580 <main+0x510>)
 8014458:	601a      	str	r2, [r3, #0]
			  segment2(num1,TRUE);
 801445a:	4b49      	ldr	r3, [pc, #292]	@ (8014580 <main+0x510>)
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	2101      	movs	r1, #1
 8014460:	4618      	mov	r0, r3
 8014462:	f7ff f9f1 	bl	8013848 <segment2>
			  if(aDC1_wyslano)
 8014466:	4b48      	ldr	r3, [pc, #288]	@ (8014588 <main+0x518>)
 8014468:	781b      	ldrb	r3, [r3, #0]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d021      	beq.n	80144b2 <main+0x442>
			  {
				  LCD_komenda(&ADRES.DISPLAYOFF);
 801446e:	f107 031c 	add.w	r3, r7, #28
 8014472:	3303      	adds	r3, #3
 8014474:	b2db      	uxtb	r3, r3
 8014476:	4618      	mov	r0, r3
 8014478:	f7ec fe18 	bl	80010ac <LCD_komenda>
				  LCD_print_tryb_adc_numbers(1,1,1,&ADRES,fnapiecie2_1,num1,FALSE);
 801447c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8014480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014484:	ee17 0a90 	vmov	r0, s15
 8014488:	4b3d      	ldr	r3, [pc, #244]	@ (8014580 <main+0x510>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	f107 021c 	add.w	r2, r7, #28
 8014490:	2100      	movs	r1, #0
 8014492:	9102      	str	r1, [sp, #8]
 8014494:	9301      	str	r3, [sp, #4]
 8014496:	9000      	str	r0, [sp, #0]
 8014498:	4613      	mov	r3, r2
 801449a:	2201      	movs	r2, #1
 801449c:	2101      	movs	r1, #1
 801449e:	2001      	movs	r0, #1
 80144a0:	f7fd fcac 	bl	8011dfc <LCD_print_tryb_adc_numbers>
				  LCD_komenda(&ADRES.DISPLAYON);
 80144a4:	f107 031c 	add.w	r3, r7, #28
 80144a8:	3304      	adds	r3, #4
 80144aa:	b2db      	uxtb	r3, r3
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7ec fdfd 	bl	80010ac <LCD_komenda>
			  }
		  }
		  if(lineON)
 80144b2:	4b36      	ldr	r3, [pc, #216]	@ (801458c <main+0x51c>)
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d008      	beq.n	80144cc <main+0x45c>
		  {
			  tabADC2[1]=fnapiecie;
 80144ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80144bc:	60bb      	str	r3, [r7, #8]
			  allsegment(FALSE);
 80144be:	2000      	movs	r0, #0
 80144c0:	f7ff fba0 	bl	8013c04 <allsegment>
			  linijka1(fnapiecie);
 80144c4:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 80144c8:	f7ff fc02 	bl	8013cd0 <linijka1>
		  }
		  HAL_ADC_Stop(&hadc1);
 80144cc:	482a      	ldr	r0, [pc, #168]	@ (8014578 <main+0x508>)
 80144ce:	f000 fffb 	bl	80154c8 <HAL_ADC_Stop>
	  while(HAL_ADC_PollForConversion(&hadc1, 1)==HAL_OK)
 80144d2:	2101      	movs	r1, #1
 80144d4:	4828      	ldr	r0, [pc, #160]	@ (8014578 <main+0x508>)
 80144d6:	f001 f82b 	bl	8015530 <HAL_ADC_PollForConversion>
 80144da:	4603      	mov	r3, r0
 80144dc:	2b00      	cmp	r3, #0
 80144de:	f43f af51 	beq.w	8014384 <main+0x314>
	  }


	  if(odebrano)
 80144e2:	4b2b      	ldr	r3, [pc, #172]	@ (8014590 <main+0x520>)
 80144e4:	781b      	ldrb	r3, [r3, #0]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d00e      	beq.n	8014508 <main+0x498>
	  {
		  if(rozmiar)
 80144ea:	4b2a      	ldr	r3, [pc, #168]	@ (8014594 <main+0x524>)
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	f43f ae77 	beq.w	80141e2 <main+0x172>
		  {
			  UART_decision(buforRx[0], &ADRES, tabADC);
 80144f4:	4b28      	ldr	r3, [pc, #160]	@ (8014598 <main+0x528>)
 80144f6:	781b      	ldrb	r3, [r3, #0]
 80144f8:	f107 020c 	add.w	r2, r7, #12
 80144fc:	f107 011c 	add.w	r1, r7, #28
 8014500:	4618      	mov	r0, r3
 8014502:	f7fe faf5 	bl	8012af0 <UART_decision>
 8014506:	e66c      	b.n	80141e2 <main+0x172>
		  }
	  }
	  else
	  {
		  if((tryb>=1 && tryb<=3) || tryb==4)
 8014508:	4b1c      	ldr	r3, [pc, #112]	@ (801457c <main+0x50c>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d003      	beq.n	8014518 <main+0x4a8>
 8014510:	4b1a      	ldr	r3, [pc, #104]	@ (801457c <main+0x50c>)
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	2b03      	cmp	r3, #3
 8014516:	d903      	bls.n	8014520 <main+0x4b0>
 8014518:	4b18      	ldr	r3, [pc, #96]	@ (801457c <main+0x50c>)
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	2b04      	cmp	r3, #4
 801451e:	d107      	bne.n	8014530 <main+0x4c0>
		  {
			  LCD_print_tryb_diody(1, 1, 1, &ADRES);
 8014520:	f107 031c 	add.w	r3, r7, #28
 8014524:	2201      	movs	r2, #1
 8014526:	2101      	movs	r1, #1
 8014528:	2001      	movs	r0, #1
 801452a:	f7fd fab7 	bl	8011a9c <LCD_print_tryb_diody>
 801452e:	e01e      	b.n	801456e <main+0x4fe>
		  }
		  else if(tryb==7)
 8014530:	4b12      	ldr	r3, [pc, #72]	@ (801457c <main+0x50c>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	2b07      	cmp	r3, #7
 8014536:	d10b      	bne.n	8014550 <main+0x4e0>
		  {
			  LCD_print_tryb_segment(1, 1, 1, &ADRES, tabADC);
 8014538:	f107 021c 	add.w	r2, r7, #28
 801453c:	f107 030c 	add.w	r3, r7, #12
 8014540:	9300      	str	r3, [sp, #0]
 8014542:	4613      	mov	r3, r2
 8014544:	2201      	movs	r2, #1
 8014546:	2101      	movs	r1, #1
 8014548:	2001      	movs	r0, #1
 801454a:	f7fd ffb3 	bl	80124b4 <LCD_print_tryb_segment>
 801454e:	e648      	b.n	80141e2 <main+0x172>
		  }
		  else if(tryb==6)
 8014550:	4b0a      	ldr	r3, [pc, #40]	@ (801457c <main+0x50c>)
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	2b06      	cmp	r3, #6
 8014556:	f47f ae44 	bne.w	80141e2 <main+0x172>
		  {
			  LCD_print_tryb_tank(1, 1, 1, &ADRES, tabADC2);
 801455a:	f107 021c 	add.w	r2, r7, #28
 801455e:	1d3b      	adds	r3, r7, #4
 8014560:	9300      	str	r3, [sp, #0]
 8014562:	4613      	mov	r3, r2
 8014564:	2201      	movs	r2, #1
 8014566:	2101      	movs	r1, #1
 8014568:	2001      	movs	r0, #1
 801456a:	f7fe f9b1 	bl	80128d0 <LCD_print_tryb_tank>
	  HAL_ADC_Start(&hadc2);
 801456e:	e638      	b.n	80141e2 <main+0x172>
 8014570:	12698f10 	.word	0x12698f10
 8014574:	3f4a6861 	.word	0x3f4a6861
 8014578:	200003ac 	.word	0x200003ac
 801457c:	20000488 	.word	0x20000488
 8014580:	2000048c 	.word	0x2000048c
 8014584:	2000047a 	.word	0x2000047a
 8014588:	2000047c 	.word	0x2000047c
 801458c:	20000479 	.word	0x20000479
 8014590:	20000478 	.word	0x20000478
 8014594:	20000484 	.word	0x20000484
 8014598:	20000490 	.word	0x20000490

0801459c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b096      	sub	sp, #88	@ 0x58
 80145a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80145a2:	f107 0314 	add.w	r3, r7, #20
 80145a6:	2244      	movs	r2, #68	@ 0x44
 80145a8:	2100      	movs	r1, #0
 80145aa:	4618      	mov	r0, r3
 80145ac:	f006 f87c 	bl	801a6a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80145b0:	463b      	mov	r3, r7
 80145b2:	2200      	movs	r2, #0
 80145b4:	601a      	str	r2, [r3, #0]
 80145b6:	605a      	str	r2, [r3, #4]
 80145b8:	609a      	str	r2, [r3, #8]
 80145ba:	60da      	str	r2, [r3, #12]
 80145bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80145be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80145c2:	f002 fce7 	bl	8016f94 <HAL_PWREx_ControlVoltageScaling>
 80145c6:	4603      	mov	r3, r0
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d001      	beq.n	80145d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80145cc:	f000 f8d2 	bl	8014774 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80145d0:	2318      	movs	r3, #24
 80145d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80145d4:	2301      	movs	r3, #1
 80145d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80145d8:	2301      	movs	r3, #1
 80145da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80145dc:	2300      	movs	r3, #0
 80145de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80145e0:	2360      	movs	r3, #96	@ 0x60
 80145e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80145e4:	2302      	movs	r3, #2
 80145e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80145e8:	2301      	movs	r3, #1
 80145ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80145ec:	2301      	movs	r3, #1
 80145ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80145f0:	2328      	movs	r3, #40	@ 0x28
 80145f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80145f4:	2307      	movs	r3, #7
 80145f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80145f8:	2302      	movs	r3, #2
 80145fa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80145fc:	2302      	movs	r3, #2
 80145fe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8014600:	f107 0314 	add.w	r3, r7, #20
 8014604:	4618      	mov	r0, r3
 8014606:	f002 fd1b 	bl	8017040 <HAL_RCC_OscConfig>
 801460a:	4603      	mov	r3, r0
 801460c:	2b00      	cmp	r3, #0
 801460e:	d001      	beq.n	8014614 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8014610:	f000 f8b0 	bl	8014774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8014614:	230f      	movs	r3, #15
 8014616:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8014618:	2303      	movs	r3, #3
 801461a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801461c:	2300      	movs	r3, #0
 801461e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8014620:	2300      	movs	r3, #0
 8014622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8014624:	2300      	movs	r3, #0
 8014626:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8014628:	463b      	mov	r3, r7
 801462a:	2104      	movs	r1, #4
 801462c:	4618      	mov	r0, r3
 801462e:	f003 f8e3 	bl	80177f8 <HAL_RCC_ClockConfig>
 8014632:	4603      	mov	r3, r0
 8014634:	2b00      	cmp	r3, #0
 8014636:	d001      	beq.n	801463c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8014638:	f000 f89c 	bl	8014774 <Error_Handler>
  }
}
 801463c:	bf00      	nop
 801463e:	3758      	adds	r7, #88	@ 0x58
 8014640:	46bd      	mov	sp, r7
 8014642:	bd80      	pop	{r7, pc}

08014644 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8014644:	b580      	push	{r7, lr}
 8014646:	b0a2      	sub	sp, #136	@ 0x88
 8014648:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801464a:	463b      	mov	r3, r7
 801464c:	2288      	movs	r2, #136	@ 0x88
 801464e:	2100      	movs	r1, #0
 8014650:	4618      	mov	r0, r3
 8014652:	f006 f829 	bl	801a6a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8014656:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801465a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 801465c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8014660:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8014662:	2301      	movs	r3, #1
 8014664:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8014666:	2301      	movs	r3, #1
 8014668:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 801466a:	2318      	movs	r3, #24
 801466c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 801466e:	2307      	movs	r3, #7
 8014670:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8014672:	2302      	movs	r3, #2
 8014674:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8014676:	2302      	movs	r3, #2
 8014678:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 801467a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801467e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8014680:	463b      	mov	r3, r7
 8014682:	4618      	mov	r0, r3
 8014684:	f003 fadc 	bl	8017c40 <HAL_RCCEx_PeriphCLKConfig>
 8014688:	4603      	mov	r3, r0
 801468a:	2b00      	cmp	r3, #0
 801468c:	d001      	beq.n	8014692 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 801468e:	f000 f871 	bl	8014774 <Error_Handler>
  }
}
 8014692:	bf00      	nop
 8014694:	3788      	adds	r7, #136	@ 0x88
 8014696:	46bd      	mov	sp, r7
 8014698:	bd80      	pop	{r7, pc}
	...

0801469c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b082      	sub	sp, #8
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	4a1d      	ldr	r2, [pc, #116]	@ (8014720 <HAL_UART_RxCpltCallback+0x84>)
 80146aa:	4293      	cmp	r3, r2
 80146ac:	d12b      	bne.n	8014706 <HAL_UART_RxCpltCallback+0x6a>
	{
		if(buforRx[bufRxIndex]==10)
 80146ae:	4b1d      	ldr	r3, [pc, #116]	@ (8014724 <HAL_UART_RxCpltCallback+0x88>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	4a1d      	ldr	r2, [pc, #116]	@ (8014728 <HAL_UART_RxCpltCallback+0x8c>)
 80146b4:	5cd3      	ldrb	r3, [r2, r3]
 80146b6:	2b0a      	cmp	r3, #10
 80146b8:	d119      	bne.n	80146ee <HAL_UART_RxCpltCallback+0x52>
		{
			rozmiar=bufRxIndex;
 80146ba:	4b1a      	ldr	r3, [pc, #104]	@ (8014724 <HAL_UART_RxCpltCallback+0x88>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	4a1b      	ldr	r2, [pc, #108]	@ (801472c <HAL_UART_RxCpltCallback+0x90>)
 80146c0:	6013      	str	r3, [r2, #0]
			odebrano=TRUE;
 80146c2:	4b1b      	ldr	r3, [pc, #108]	@ (8014730 <HAL_UART_RxCpltCallback+0x94>)
 80146c4:	2201      	movs	r2, #1
 80146c6:	701a      	strb	r2, [r3, #0]
			for(;bufRxIndex<17;bufRxIndex++)
 80146c8:	e009      	b.n	80146de <HAL_UART_RxCpltCallback+0x42>
			{
				buforRx[bufRxIndex]=0;
 80146ca:	4b16      	ldr	r3, [pc, #88]	@ (8014724 <HAL_UART_RxCpltCallback+0x88>)
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	4a16      	ldr	r2, [pc, #88]	@ (8014728 <HAL_UART_RxCpltCallback+0x8c>)
 80146d0:	2100      	movs	r1, #0
 80146d2:	54d1      	strb	r1, [r2, r3]
			for(;bufRxIndex<17;bufRxIndex++)
 80146d4:	4b13      	ldr	r3, [pc, #76]	@ (8014724 <HAL_UART_RxCpltCallback+0x88>)
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	3301      	adds	r3, #1
 80146da:	4a12      	ldr	r2, [pc, #72]	@ (8014724 <HAL_UART_RxCpltCallback+0x88>)
 80146dc:	6013      	str	r3, [r2, #0]
 80146de:	4b11      	ldr	r3, [pc, #68]	@ (8014724 <HAL_UART_RxCpltCallback+0x88>)
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	2b10      	cmp	r3, #16
 80146e4:	d9f1      	bls.n	80146ca <HAL_UART_RxCpltCallback+0x2e>
			}
			bufRxIndex=0;
 80146e6:	4b0f      	ldr	r3, [pc, #60]	@ (8014724 <HAL_UART_RxCpltCallback+0x88>)
 80146e8:	2200      	movs	r2, #0
 80146ea:	601a      	str	r2, [r3, #0]
 80146ec:	e00b      	b.n	8014706 <HAL_UART_RxCpltCallback+0x6a>

		}
		else
		{
			bufRxIndex++;
 80146ee:	4b0d      	ldr	r3, [pc, #52]	@ (8014724 <HAL_UART_RxCpltCallback+0x88>)
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	3301      	adds	r3, #1
 80146f4:	4a0b      	ldr	r2, [pc, #44]	@ (8014724 <HAL_UART_RxCpltCallback+0x88>)
 80146f6:	6013      	str	r3, [r2, #0]

			if(bufRxIndex>16)
 80146f8:	4b0a      	ldr	r3, [pc, #40]	@ (8014724 <HAL_UART_RxCpltCallback+0x88>)
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	2b10      	cmp	r3, #16
 80146fe:	d902      	bls.n	8014706 <HAL_UART_RxCpltCallback+0x6a>
			{
				bufRxIndex=0;
 8014700:	4b08      	ldr	r3, [pc, #32]	@ (8014724 <HAL_UART_RxCpltCallback+0x88>)
 8014702:	2200      	movs	r2, #0
 8014704:	601a      	str	r2, [r3, #0]
			}
		}
	}
	HAL_UART_Receive_IT(&huart2, &buforRx[bufRxIndex], 1);
 8014706:	4b07      	ldr	r3, [pc, #28]	@ (8014724 <HAL_UART_RxCpltCallback+0x88>)
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	4a07      	ldr	r2, [pc, #28]	@ (8014728 <HAL_UART_RxCpltCallback+0x8c>)
 801470c:	4413      	add	r3, r2
 801470e:	2201      	movs	r2, #1
 8014710:	4619      	mov	r1, r3
 8014712:	4808      	ldr	r0, [pc, #32]	@ (8014734 <HAL_UART_RxCpltCallback+0x98>)
 8014714:	f004 fc04 	bl	8018f20 <HAL_UART_Receive_IT>
}
 8014718:	bf00      	nop
 801471a:	3708      	adds	r7, #8
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}
 8014720:	40004400 	.word	0x40004400
 8014724:	20000480 	.word	0x20000480
 8014728:	20000490 	.word	0x20000490
 801472c:	20000484 	.word	0x20000484
 8014730:	20000478 	.word	0x20000478
 8014734:	20000508 	.word	0x20000508

08014738 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b082      	sub	sp, #8
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	4a08      	ldr	r2, [pc, #32]	@ (8014768 <HAL_UART_TxCpltCallback+0x30>)
 8014746:	4293      	cmp	r3, r2
 8014748:	d109      	bne.n	801475e <HAL_UART_TxCpltCallback+0x26>
	{
		bufRxIndex++;
 801474a:	4b08      	ldr	r3, [pc, #32]	@ (801476c <HAL_UART_TxCpltCallback+0x34>)
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	3301      	adds	r3, #1
 8014750:	4a06      	ldr	r2, [pc, #24]	@ (801476c <HAL_UART_TxCpltCallback+0x34>)
 8014752:	6013      	str	r3, [r2, #0]
		UART_transmit(tryb);
 8014754:	4b06      	ldr	r3, [pc, #24]	@ (8014770 <HAL_UART_TxCpltCallback+0x38>)
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	4618      	mov	r0, r3
 801475a:	f7fe fc05 	bl	8012f68 <UART_transmit>
	}
}
 801475e:	bf00      	nop
 8014760:	3708      	adds	r7, #8
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}
 8014766:	bf00      	nop
 8014768:	40004400 	.word	0x40004400
 801476c:	20000480 	.word	0x20000480
 8014770:	20000488 	.word	0x20000488

08014774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8014774:	b480      	push	{r7}
 8014776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8014778:	b672      	cpsid	i
}
 801477a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while(1)
 801477c:	bf00      	nop
 801477e:	e7fd      	b.n	801477c <Error_Handler+0x8>

08014780 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8014784:	4b1b      	ldr	r3, [pc, #108]	@ (80147f4 <MX_SPI3_Init+0x74>)
 8014786:	4a1c      	ldr	r2, [pc, #112]	@ (80147f8 <MX_SPI3_Init+0x78>)
 8014788:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 801478a:	4b1a      	ldr	r3, [pc, #104]	@ (80147f4 <MX_SPI3_Init+0x74>)
 801478c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8014790:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8014792:	4b18      	ldr	r3, [pc, #96]	@ (80147f4 <MX_SPI3_Init+0x74>)
 8014794:	2200      	movs	r2, #0
 8014796:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8014798:	4b16      	ldr	r3, [pc, #88]	@ (80147f4 <MX_SPI3_Init+0x74>)
 801479a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 801479e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80147a0:	4b14      	ldr	r3, [pc, #80]	@ (80147f4 <MX_SPI3_Init+0x74>)
 80147a2:	2200      	movs	r2, #0
 80147a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80147a6:	4b13      	ldr	r3, [pc, #76]	@ (80147f4 <MX_SPI3_Init+0x74>)
 80147a8:	2200      	movs	r2, #0
 80147aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80147ac:	4b11      	ldr	r3, [pc, #68]	@ (80147f4 <MX_SPI3_Init+0x74>)
 80147ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80147b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80147b4:	4b0f      	ldr	r3, [pc, #60]	@ (80147f4 <MX_SPI3_Init+0x74>)
 80147b6:	2238      	movs	r2, #56	@ 0x38
 80147b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80147ba:	4b0e      	ldr	r3, [pc, #56]	@ (80147f4 <MX_SPI3_Init+0x74>)
 80147bc:	2200      	movs	r2, #0
 80147be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80147c0:	4b0c      	ldr	r3, [pc, #48]	@ (80147f4 <MX_SPI3_Init+0x74>)
 80147c2:	2200      	movs	r2, #0
 80147c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80147c6:	4b0b      	ldr	r3, [pc, #44]	@ (80147f4 <MX_SPI3_Init+0x74>)
 80147c8:	2200      	movs	r2, #0
 80147ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80147cc:	4b09      	ldr	r3, [pc, #36]	@ (80147f4 <MX_SPI3_Init+0x74>)
 80147ce:	2207      	movs	r2, #7
 80147d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80147d2:	4b08      	ldr	r3, [pc, #32]	@ (80147f4 <MX_SPI3_Init+0x74>)
 80147d4:	2200      	movs	r2, #0
 80147d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80147d8:	4b06      	ldr	r3, [pc, #24]	@ (80147f4 <MX_SPI3_Init+0x74>)
 80147da:	2200      	movs	r2, #0
 80147dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80147de:	4805      	ldr	r0, [pc, #20]	@ (80147f4 <MX_SPI3_Init+0x74>)
 80147e0:	f003 feea 	bl	80185b8 <HAL_SPI_Init>
 80147e4:	4603      	mov	r3, r0
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d001      	beq.n	80147ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80147ea:	f7ff ffc3 	bl	8014774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80147ee:	bf00      	nop
 80147f0:	bd80      	pop	{r7, pc}
 80147f2:	bf00      	nop
 80147f4:	200004a4 	.word	0x200004a4
 80147f8:	40003c00 	.word	0x40003c00

080147fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b08a      	sub	sp, #40	@ 0x28
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014804:	f107 0314 	add.w	r3, r7, #20
 8014808:	2200      	movs	r2, #0
 801480a:	601a      	str	r2, [r3, #0]
 801480c:	605a      	str	r2, [r3, #4]
 801480e:	609a      	str	r2, [r3, #8]
 8014810:	60da      	str	r2, [r3, #12]
 8014812:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	4a17      	ldr	r2, [pc, #92]	@ (8014878 <HAL_SPI_MspInit+0x7c>)
 801481a:	4293      	cmp	r3, r2
 801481c:	d128      	bne.n	8014870 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 801481e:	4b17      	ldr	r3, [pc, #92]	@ (801487c <HAL_SPI_MspInit+0x80>)
 8014820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014822:	4a16      	ldr	r2, [pc, #88]	@ (801487c <HAL_SPI_MspInit+0x80>)
 8014824:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8014828:	6593      	str	r3, [r2, #88]	@ 0x58
 801482a:	4b14      	ldr	r3, [pc, #80]	@ (801487c <HAL_SPI_MspInit+0x80>)
 801482c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801482e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014832:	613b      	str	r3, [r7, #16]
 8014834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014836:	4b11      	ldr	r3, [pc, #68]	@ (801487c <HAL_SPI_MspInit+0x80>)
 8014838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801483a:	4a10      	ldr	r2, [pc, #64]	@ (801487c <HAL_SPI_MspInit+0x80>)
 801483c:	f043 0304 	orr.w	r3, r3, #4
 8014840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8014842:	4b0e      	ldr	r3, [pc, #56]	@ (801487c <HAL_SPI_MspInit+0x80>)
 8014844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014846:	f003 0304 	and.w	r3, r3, #4
 801484a:	60fb      	str	r3, [r7, #12]
 801484c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 801484e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8014852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014854:	2302      	movs	r3, #2
 8014856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014858:	2300      	movs	r3, #0
 801485a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801485c:	2303      	movs	r3, #3
 801485e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8014860:	2306      	movs	r3, #6
 8014862:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014864:	f107 0314 	add.w	r3, r7, #20
 8014868:	4619      	mov	r1, r3
 801486a:	4805      	ldr	r0, [pc, #20]	@ (8014880 <HAL_SPI_MspInit+0x84>)
 801486c:	f002 f9aa 	bl	8016bc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8014870:	bf00      	nop
 8014872:	3728      	adds	r7, #40	@ 0x28
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}
 8014878:	40003c00 	.word	0x40003c00
 801487c:	40021000 	.word	0x40021000
 8014880:	48000800 	.word	0x48000800

08014884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b082      	sub	sp, #8
 8014888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801488a:	4b0f      	ldr	r3, [pc, #60]	@ (80148c8 <HAL_MspInit+0x44>)
 801488c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801488e:	4a0e      	ldr	r2, [pc, #56]	@ (80148c8 <HAL_MspInit+0x44>)
 8014890:	f043 0301 	orr.w	r3, r3, #1
 8014894:	6613      	str	r3, [r2, #96]	@ 0x60
 8014896:	4b0c      	ldr	r3, [pc, #48]	@ (80148c8 <HAL_MspInit+0x44>)
 8014898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801489a:	f003 0301 	and.w	r3, r3, #1
 801489e:	607b      	str	r3, [r7, #4]
 80148a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80148a2:	4b09      	ldr	r3, [pc, #36]	@ (80148c8 <HAL_MspInit+0x44>)
 80148a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80148a6:	4a08      	ldr	r2, [pc, #32]	@ (80148c8 <HAL_MspInit+0x44>)
 80148a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80148ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80148ae:	4b06      	ldr	r3, [pc, #24]	@ (80148c8 <HAL_MspInit+0x44>)
 80148b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80148b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80148b6:	603b      	str	r3, [r7, #0]
 80148b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80148ba:	2006      	movs	r0, #6
 80148bc:	f002 f8c2 	bl	8016a44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80148c0:	bf00      	nop
 80148c2:	3708      	adds	r7, #8
 80148c4:	46bd      	mov	sp, r7
 80148c6:	bd80      	pop	{r7, pc}
 80148c8:	40021000 	.word	0x40021000

080148cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80148cc:	b480      	push	{r7}
 80148ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80148d0:	bf00      	nop
 80148d2:	e7fd      	b.n	80148d0 <NMI_Handler+0x4>

080148d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80148d4:	b480      	push	{r7}
 80148d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80148d8:	bf00      	nop
 80148da:	e7fd      	b.n	80148d8 <HardFault_Handler+0x4>

080148dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80148dc:	b480      	push	{r7}
 80148de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80148e0:	bf00      	nop
 80148e2:	e7fd      	b.n	80148e0 <MemManage_Handler+0x4>

080148e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80148e4:	b480      	push	{r7}
 80148e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80148e8:	bf00      	nop
 80148ea:	e7fd      	b.n	80148e8 <BusFault_Handler+0x4>

080148ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80148ec:	b480      	push	{r7}
 80148ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80148f0:	bf00      	nop
 80148f2:	e7fd      	b.n	80148f0 <UsageFault_Handler+0x4>

080148f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80148f4:	b480      	push	{r7}
 80148f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80148f8:	bf00      	nop
 80148fa:	46bd      	mov	sp, r7
 80148fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014900:	4770      	bx	lr

08014902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014902:	b480      	push	{r7}
 8014904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014906:	bf00      	nop
 8014908:	46bd      	mov	sp, r7
 801490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801490e:	4770      	bx	lr

08014910 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8014910:	b480      	push	{r7}
 8014912:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8014914:	bf00      	nop
 8014916:	46bd      	mov	sp, r7
 8014918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491c:	4770      	bx	lr

0801491e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801491e:	b580      	push	{r7, lr}
 8014920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014922:	f000 f93f 	bl	8014ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014926:	bf00      	nop
 8014928:	bd80      	pop	{r7, pc}
	...

0801492c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8014930:	4803      	ldr	r0, [pc, #12]	@ (8014940 <ADC1_2_IRQHandler+0x14>)
 8014932:	f000 fee3 	bl	80156fc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8014936:	4803      	ldr	r0, [pc, #12]	@ (8014944 <ADC1_2_IRQHandler+0x18>)
 8014938:	f000 fee0 	bl	80156fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 801493c:	bf00      	nop
 801493e:	bd80      	pop	{r7, pc}
 8014940:	200003ac 	.word	0x200003ac
 8014944:	20000410 	.word	0x20000410

08014948 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 801494c:	4802      	ldr	r0, [pc, #8]	@ (8014958 <USART2_IRQHandler+0x10>)
 801494e:	f004 fb33 	bl	8018fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8014952:	bf00      	nop
 8014954:	bd80      	pop	{r7, pc}
 8014956:	bf00      	nop
 8014958:	20000508 	.word	0x20000508

0801495c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 801495c:	b480      	push	{r7}
 801495e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8014960:	4b06      	ldr	r3, [pc, #24]	@ (801497c <SystemInit+0x20>)
 8014962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014966:	4a05      	ldr	r2, [pc, #20]	@ (801497c <SystemInit+0x20>)
 8014968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801496c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8014970:	bf00      	nop
 8014972:	46bd      	mov	sp, r7
 8014974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014978:	4770      	bx	lr
 801497a:	bf00      	nop
 801497c:	e000ed00 	.word	0xe000ed00

08014980 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8014980:	b580      	push	{r7, lr}
 8014982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8014984:	4b14      	ldr	r3, [pc, #80]	@ (80149d8 <MX_USART2_UART_Init+0x58>)
 8014986:	4a15      	ldr	r2, [pc, #84]	@ (80149dc <MX_USART2_UART_Init+0x5c>)
 8014988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 801498a:	4b13      	ldr	r3, [pc, #76]	@ (80149d8 <MX_USART2_UART_Init+0x58>)
 801498c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8014990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8014992:	4b11      	ldr	r3, [pc, #68]	@ (80149d8 <MX_USART2_UART_Init+0x58>)
 8014994:	2200      	movs	r2, #0
 8014996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8014998:	4b0f      	ldr	r3, [pc, #60]	@ (80149d8 <MX_USART2_UART_Init+0x58>)
 801499a:	2200      	movs	r2, #0
 801499c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801499e:	4b0e      	ldr	r3, [pc, #56]	@ (80149d8 <MX_USART2_UART_Init+0x58>)
 80149a0:	2200      	movs	r2, #0
 80149a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80149a4:	4b0c      	ldr	r3, [pc, #48]	@ (80149d8 <MX_USART2_UART_Init+0x58>)
 80149a6:	220c      	movs	r2, #12
 80149a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80149aa:	4b0b      	ldr	r3, [pc, #44]	@ (80149d8 <MX_USART2_UART_Init+0x58>)
 80149ac:	2200      	movs	r2, #0
 80149ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80149b0:	4b09      	ldr	r3, [pc, #36]	@ (80149d8 <MX_USART2_UART_Init+0x58>)
 80149b2:	2200      	movs	r2, #0
 80149b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80149b6:	4b08      	ldr	r3, [pc, #32]	@ (80149d8 <MX_USART2_UART_Init+0x58>)
 80149b8:	2200      	movs	r2, #0
 80149ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80149bc:	4b06      	ldr	r3, [pc, #24]	@ (80149d8 <MX_USART2_UART_Init+0x58>)
 80149be:	2200      	movs	r2, #0
 80149c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80149c2:	4805      	ldr	r0, [pc, #20]	@ (80149d8 <MX_USART2_UART_Init+0x58>)
 80149c4:	f004 f976 	bl	8018cb4 <HAL_UART_Init>
 80149c8:	4603      	mov	r3, r0
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d001      	beq.n	80149d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80149ce:	f7ff fed1 	bl	8014774 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80149d2:	bf00      	nop
 80149d4:	bd80      	pop	{r7, pc}
 80149d6:	bf00      	nop
 80149d8:	20000508 	.word	0x20000508
 80149dc:	40004400 	.word	0x40004400

080149e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b0ac      	sub	sp, #176	@ 0xb0
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80149e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80149ec:	2200      	movs	r2, #0
 80149ee:	601a      	str	r2, [r3, #0]
 80149f0:	605a      	str	r2, [r3, #4]
 80149f2:	609a      	str	r2, [r3, #8]
 80149f4:	60da      	str	r2, [r3, #12]
 80149f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80149f8:	f107 0314 	add.w	r3, r7, #20
 80149fc:	2288      	movs	r2, #136	@ 0x88
 80149fe:	2100      	movs	r1, #0
 8014a00:	4618      	mov	r0, r3
 8014a02:	f005 fe51 	bl	801a6a8 <memset>
  if(uartHandle->Instance==USART2)
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	4a25      	ldr	r2, [pc, #148]	@ (8014aa0 <HAL_UART_MspInit+0xc0>)
 8014a0c:	4293      	cmp	r3, r2
 8014a0e:	d143      	bne.n	8014a98 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8014a10:	2302      	movs	r3, #2
 8014a12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8014a14:	2300      	movs	r3, #0
 8014a16:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8014a18:	f107 0314 	add.w	r3, r7, #20
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	f003 f90f 	bl	8017c40 <HAL_RCCEx_PeriphCLKConfig>
 8014a22:	4603      	mov	r3, r0
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d001      	beq.n	8014a2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8014a28:	f7ff fea4 	bl	8014774 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8014a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8014aa4 <HAL_UART_MspInit+0xc4>)
 8014a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014a30:	4a1c      	ldr	r2, [pc, #112]	@ (8014aa4 <HAL_UART_MspInit+0xc4>)
 8014a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8014a38:	4b1a      	ldr	r3, [pc, #104]	@ (8014aa4 <HAL_UART_MspInit+0xc4>)
 8014a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014a40:	613b      	str	r3, [r7, #16]
 8014a42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014a44:	4b17      	ldr	r3, [pc, #92]	@ (8014aa4 <HAL_UART_MspInit+0xc4>)
 8014a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014a48:	4a16      	ldr	r2, [pc, #88]	@ (8014aa4 <HAL_UART_MspInit+0xc4>)
 8014a4a:	f043 0301 	orr.w	r3, r3, #1
 8014a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8014a50:	4b14      	ldr	r3, [pc, #80]	@ (8014aa4 <HAL_UART_MspInit+0xc4>)
 8014a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014a54:	f003 0301 	and.w	r3, r3, #1
 8014a58:	60fb      	str	r3, [r7, #12]
 8014a5a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8014a5c:	230c      	movs	r3, #12
 8014a5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a62:	2302      	movs	r3, #2
 8014a64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a68:	2300      	movs	r3, #0
 8014a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014a6e:	2303      	movs	r3, #3
 8014a70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8014a74:	2307      	movs	r3, #7
 8014a76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014a7a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8014a7e:	4619      	mov	r1, r3
 8014a80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8014a84:	f002 f89e 	bl	8016bc4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8014a88:	2200      	movs	r2, #0
 8014a8a:	2101      	movs	r1, #1
 8014a8c:	2026      	movs	r0, #38	@ 0x26
 8014a8e:	f001 ffe4 	bl	8016a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8014a92:	2026      	movs	r0, #38	@ 0x26
 8014a94:	f001 fffd 	bl	8016a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8014a98:	bf00      	nop
 8014a9a:	37b0      	adds	r7, #176	@ 0xb0
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bd80      	pop	{r7, pc}
 8014aa0:	40004400 	.word	0x40004400
 8014aa4:	40021000 	.word	0x40021000

08014aa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8014aa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8014ae0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8014aac:	f7ff ff56 	bl	801495c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8014ab0:	480c      	ldr	r0, [pc, #48]	@ (8014ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8014ab2:	490d      	ldr	r1, [pc, #52]	@ (8014ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8014ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8014aec <LoopForever+0xe>)
  movs r3, #0
 8014ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8014ab8:	e002      	b.n	8014ac0 <LoopCopyDataInit>

08014aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8014aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8014abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8014abe:	3304      	adds	r3, #4

08014ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8014ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8014ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8014ac4:	d3f9      	bcc.n	8014aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8014ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8014af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8014ac8:	4c0a      	ldr	r4, [pc, #40]	@ (8014af4 <LoopForever+0x16>)
  movs r3, #0
 8014aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8014acc:	e001      	b.n	8014ad2 <LoopFillZerobss>

08014ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8014ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8014ad0:	3204      	adds	r2, #4

08014ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8014ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8014ad4:	d3fb      	bcc.n	8014ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8014ad6:	f005 fdef 	bl	801a6b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8014ada:	f7ff fac9 	bl	8014070 <main>

08014ade <LoopForever>:

LoopForever:
    b LoopForever
 8014ade:	e7fe      	b.n	8014ade <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8014ae0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8014ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8014ae8:	20000390 	.word	0x20000390
  ldr r2, =_sidata
 8014aec:	0801a868 	.word	0x0801a868
  ldr r2, =_sbss
 8014af0:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 8014af4:	20000594 	.word	0x20000594

08014af8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8014af8:	e7fe      	b.n	8014af8 <ADC3_IRQHandler>

08014afa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8014afa:	b580      	push	{r7, lr}
 8014afc:	b082      	sub	sp, #8
 8014afe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8014b00:	2300      	movs	r3, #0
 8014b02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8014b04:	2003      	movs	r0, #3
 8014b06:	f001 ff9d 	bl	8016a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8014b0a:	2000      	movs	r0, #0
 8014b0c:	f000 f80e 	bl	8014b2c <HAL_InitTick>
 8014b10:	4603      	mov	r3, r0
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d002      	beq.n	8014b1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8014b16:	2301      	movs	r3, #1
 8014b18:	71fb      	strb	r3, [r7, #7]
 8014b1a:	e001      	b.n	8014b20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8014b1c:	f7ff feb2 	bl	8014884 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8014b20:	79fb      	ldrb	r3, [r7, #7]
}
 8014b22:	4618      	mov	r0, r3
 8014b24:	3708      	adds	r7, #8
 8014b26:	46bd      	mov	sp, r7
 8014b28:	bd80      	pop	{r7, pc}
	...

08014b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b084      	sub	sp, #16
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8014b34:	2300      	movs	r3, #0
 8014b36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8014b38:	4b17      	ldr	r3, [pc, #92]	@ (8014b98 <HAL_InitTick+0x6c>)
 8014b3a:	781b      	ldrb	r3, [r3, #0]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d023      	beq.n	8014b88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8014b40:	4b16      	ldr	r3, [pc, #88]	@ (8014b9c <HAL_InitTick+0x70>)
 8014b42:	681a      	ldr	r2, [r3, #0]
 8014b44:	4b14      	ldr	r3, [pc, #80]	@ (8014b98 <HAL_InitTick+0x6c>)
 8014b46:	781b      	ldrb	r3, [r3, #0]
 8014b48:	4619      	mov	r1, r3
 8014b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b56:	4618      	mov	r0, r3
 8014b58:	f001 ffa9 	bl	8016aae <HAL_SYSTICK_Config>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d10f      	bne.n	8014b82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	2b0f      	cmp	r3, #15
 8014b66:	d809      	bhi.n	8014b7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8014b68:	2200      	movs	r2, #0
 8014b6a:	6879      	ldr	r1, [r7, #4]
 8014b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8014b70:	f001 ff73 	bl	8016a5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8014b74:	4a0a      	ldr	r2, [pc, #40]	@ (8014ba0 <HAL_InitTick+0x74>)
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	6013      	str	r3, [r2, #0]
 8014b7a:	e007      	b.n	8014b8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8014b7c:	2301      	movs	r3, #1
 8014b7e:	73fb      	strb	r3, [r7, #15]
 8014b80:	e004      	b.n	8014b8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8014b82:	2301      	movs	r3, #1
 8014b84:	73fb      	strb	r3, [r7, #15]
 8014b86:	e001      	b.n	8014b8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8014b88:	2301      	movs	r3, #1
 8014b8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8014b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b8e:	4618      	mov	r0, r3
 8014b90:	3710      	adds	r7, #16
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bd80      	pop	{r7, pc}
 8014b96:	bf00      	nop
 8014b98:	2000038c 	.word	0x2000038c
 8014b9c:	20000384 	.word	0x20000384
 8014ba0:	20000388 	.word	0x20000388

08014ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8014ba4:	b480      	push	{r7}
 8014ba6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8014ba8:	4b06      	ldr	r3, [pc, #24]	@ (8014bc4 <HAL_IncTick+0x20>)
 8014baa:	781b      	ldrb	r3, [r3, #0]
 8014bac:	461a      	mov	r2, r3
 8014bae:	4b06      	ldr	r3, [pc, #24]	@ (8014bc8 <HAL_IncTick+0x24>)
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	4413      	add	r3, r2
 8014bb4:	4a04      	ldr	r2, [pc, #16]	@ (8014bc8 <HAL_IncTick+0x24>)
 8014bb6:	6013      	str	r3, [r2, #0]
}
 8014bb8:	bf00      	nop
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc0:	4770      	bx	lr
 8014bc2:	bf00      	nop
 8014bc4:	2000038c 	.word	0x2000038c
 8014bc8:	20000590 	.word	0x20000590

08014bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8014bcc:	b480      	push	{r7}
 8014bce:	af00      	add	r7, sp, #0
  return uwTick;
 8014bd0:	4b03      	ldr	r3, [pc, #12]	@ (8014be0 <HAL_GetTick+0x14>)
 8014bd2:	681b      	ldr	r3, [r3, #0]
}
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bdc:	4770      	bx	lr
 8014bde:	bf00      	nop
 8014be0:	20000590 	.word	0x20000590

08014be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b084      	sub	sp, #16
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8014bec:	f7ff ffee 	bl	8014bcc <HAL_GetTick>
 8014bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bfc:	d005      	beq.n	8014c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8014bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8014c28 <HAL_Delay+0x44>)
 8014c00:	781b      	ldrb	r3, [r3, #0]
 8014c02:	461a      	mov	r2, r3
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	4413      	add	r3, r2
 8014c08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8014c0a:	bf00      	nop
 8014c0c:	f7ff ffde 	bl	8014bcc <HAL_GetTick>
 8014c10:	4602      	mov	r2, r0
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	1ad3      	subs	r3, r2, r3
 8014c16:	68fa      	ldr	r2, [r7, #12]
 8014c18:	429a      	cmp	r2, r3
 8014c1a:	d8f7      	bhi.n	8014c0c <HAL_Delay+0x28>
  {
  }
}
 8014c1c:	bf00      	nop
 8014c1e:	bf00      	nop
 8014c20:	3710      	adds	r7, #16
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd80      	pop	{r7, pc}
 8014c26:	bf00      	nop
 8014c28:	2000038c 	.word	0x2000038c

08014c2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8014c2c:	b480      	push	{r7}
 8014c2e:	b083      	sub	sp, #12
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
 8014c34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	689b      	ldr	r3, [r3, #8]
 8014c3a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8014c3e:	683b      	ldr	r3, [r7, #0]
 8014c40:	431a      	orrs	r2, r3
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	609a      	str	r2, [r3, #8]
}
 8014c46:	bf00      	nop
 8014c48:	370c      	adds	r7, #12
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c50:	4770      	bx	lr

08014c52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8014c52:	b480      	push	{r7}
 8014c54:	b083      	sub	sp, #12
 8014c56:	af00      	add	r7, sp, #0
 8014c58:	6078      	str	r0, [r7, #4]
 8014c5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	689b      	ldr	r3, [r3, #8]
 8014c60:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8014c64:	683b      	ldr	r3, [r7, #0]
 8014c66:	431a      	orrs	r2, r3
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	609a      	str	r2, [r3, #8]
}
 8014c6c:	bf00      	nop
 8014c6e:	370c      	adds	r7, #12
 8014c70:	46bd      	mov	sp, r7
 8014c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c76:	4770      	bx	lr

08014c78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8014c78:	b480      	push	{r7}
 8014c7a:	b083      	sub	sp, #12
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	689b      	ldr	r3, [r3, #8]
 8014c84:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8014c88:	4618      	mov	r0, r3
 8014c8a:	370c      	adds	r7, #12
 8014c8c:	46bd      	mov	sp, r7
 8014c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c92:	4770      	bx	lr

08014c94 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8014c94:	b480      	push	{r7}
 8014c96:	b087      	sub	sp, #28
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	60f8      	str	r0, [r7, #12]
 8014c9c:	60b9      	str	r1, [r7, #8]
 8014c9e:	607a      	str	r2, [r7, #4]
 8014ca0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	3360      	adds	r3, #96	@ 0x60
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	009b      	lsls	r3, r3, #2
 8014cac:	4413      	add	r3, r2
 8014cae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8014cb0:	697b      	ldr	r3, [r7, #20]
 8014cb2:	681a      	ldr	r2, [r3, #0]
 8014cb4:	4b08      	ldr	r3, [pc, #32]	@ (8014cd8 <LL_ADC_SetOffset+0x44>)
 8014cb6:	4013      	ands	r3, r2
 8014cb8:	687a      	ldr	r2, [r7, #4]
 8014cba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8014cbe:	683a      	ldr	r2, [r7, #0]
 8014cc0:	430a      	orrs	r2, r1
 8014cc2:	4313      	orrs	r3, r2
 8014cc4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8014ccc:	bf00      	nop
 8014cce:	371c      	adds	r7, #28
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd6:	4770      	bx	lr
 8014cd8:	03fff000 	.word	0x03fff000

08014cdc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8014cdc:	b480      	push	{r7}
 8014cde:	b085      	sub	sp, #20
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	6078      	str	r0, [r7, #4]
 8014ce4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	3360      	adds	r3, #96	@ 0x60
 8014cea:	461a      	mov	r2, r3
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	009b      	lsls	r3, r3, #2
 8014cf0:	4413      	add	r3, r2
 8014cf2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	3714      	adds	r7, #20
 8014d00:	46bd      	mov	sp, r7
 8014d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d06:	4770      	bx	lr

08014d08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8014d08:	b480      	push	{r7}
 8014d0a:	b087      	sub	sp, #28
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	60f8      	str	r0, [r7, #12]
 8014d10:	60b9      	str	r1, [r7, #8]
 8014d12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	3360      	adds	r3, #96	@ 0x60
 8014d18:	461a      	mov	r2, r3
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	009b      	lsls	r3, r3, #2
 8014d1e:	4413      	add	r3, r2
 8014d20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8014d22:	697b      	ldr	r3, [r7, #20]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	431a      	orrs	r2, r3
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8014d32:	bf00      	nop
 8014d34:	371c      	adds	r7, #28
 8014d36:	46bd      	mov	sp, r7
 8014d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3c:	4770      	bx	lr

08014d3e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8014d3e:	b480      	push	{r7}
 8014d40:	b083      	sub	sp, #12
 8014d42:	af00      	add	r7, sp, #0
 8014d44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	68db      	ldr	r3, [r3, #12]
 8014d4a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d101      	bne.n	8014d56 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8014d52:	2301      	movs	r3, #1
 8014d54:	e000      	b.n	8014d58 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8014d56:	2300      	movs	r3, #0
}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	370c      	adds	r7, #12
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d62:	4770      	bx	lr

08014d64 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8014d64:	b480      	push	{r7}
 8014d66:	b087      	sub	sp, #28
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	60f8      	str	r0, [r7, #12]
 8014d6c:	60b9      	str	r1, [r7, #8]
 8014d6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	3330      	adds	r3, #48	@ 0x30
 8014d74:	461a      	mov	r2, r3
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	0a1b      	lsrs	r3, r3, #8
 8014d7a:	009b      	lsls	r3, r3, #2
 8014d7c:	f003 030c 	and.w	r3, r3, #12
 8014d80:	4413      	add	r3, r2
 8014d82:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8014d84:	697b      	ldr	r3, [r7, #20]
 8014d86:	681a      	ldr	r2, [r3, #0]
 8014d88:	68bb      	ldr	r3, [r7, #8]
 8014d8a:	f003 031f 	and.w	r3, r3, #31
 8014d8e:	211f      	movs	r1, #31
 8014d90:	fa01 f303 	lsl.w	r3, r1, r3
 8014d94:	43db      	mvns	r3, r3
 8014d96:	401a      	ands	r2, r3
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	0e9b      	lsrs	r3, r3, #26
 8014d9c:	f003 011f 	and.w	r1, r3, #31
 8014da0:	68bb      	ldr	r3, [r7, #8]
 8014da2:	f003 031f 	and.w	r3, r3, #31
 8014da6:	fa01 f303 	lsl.w	r3, r1, r3
 8014daa:	431a      	orrs	r2, r3
 8014dac:	697b      	ldr	r3, [r7, #20]
 8014dae:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8014db0:	bf00      	nop
 8014db2:	371c      	adds	r7, #28
 8014db4:	46bd      	mov	sp, r7
 8014db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dba:	4770      	bx	lr

08014dbc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8014dbc:	b480      	push	{r7}
 8014dbe:	b083      	sub	sp, #12
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014dc8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d101      	bne.n	8014dd4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	e000      	b.n	8014dd6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8014dd4:	2300      	movs	r3, #0
}
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	370c      	adds	r7, #12
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de0:	4770      	bx	lr

08014de2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8014de2:	b480      	push	{r7}
 8014de4:	b087      	sub	sp, #28
 8014de6:	af00      	add	r7, sp, #0
 8014de8:	60f8      	str	r0, [r7, #12]
 8014dea:	60b9      	str	r1, [r7, #8]
 8014dec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	3314      	adds	r3, #20
 8014df2:	461a      	mov	r2, r3
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	0e5b      	lsrs	r3, r3, #25
 8014df8:	009b      	lsls	r3, r3, #2
 8014dfa:	f003 0304 	and.w	r3, r3, #4
 8014dfe:	4413      	add	r3, r2
 8014e00:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8014e02:	697b      	ldr	r3, [r7, #20]
 8014e04:	681a      	ldr	r2, [r3, #0]
 8014e06:	68bb      	ldr	r3, [r7, #8]
 8014e08:	0d1b      	lsrs	r3, r3, #20
 8014e0a:	f003 031f 	and.w	r3, r3, #31
 8014e0e:	2107      	movs	r1, #7
 8014e10:	fa01 f303 	lsl.w	r3, r1, r3
 8014e14:	43db      	mvns	r3, r3
 8014e16:	401a      	ands	r2, r3
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	0d1b      	lsrs	r3, r3, #20
 8014e1c:	f003 031f 	and.w	r3, r3, #31
 8014e20:	6879      	ldr	r1, [r7, #4]
 8014e22:	fa01 f303 	lsl.w	r3, r1, r3
 8014e26:	431a      	orrs	r2, r3
 8014e28:	697b      	ldr	r3, [r7, #20]
 8014e2a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8014e2c:	bf00      	nop
 8014e2e:	371c      	adds	r7, #28
 8014e30:	46bd      	mov	sp, r7
 8014e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e36:	4770      	bx	lr

08014e38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8014e38:	b480      	push	{r7}
 8014e3a:	b085      	sub	sp, #20
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	60f8      	str	r0, [r7, #12]
 8014e40:	60b9      	str	r1, [r7, #8]
 8014e42:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8014e4a:	68bb      	ldr	r3, [r7, #8]
 8014e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014e50:	43db      	mvns	r3, r3
 8014e52:	401a      	ands	r2, r3
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	f003 0318 	and.w	r3, r3, #24
 8014e5a:	4908      	ldr	r1, [pc, #32]	@ (8014e7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8014e5c:	40d9      	lsrs	r1, r3
 8014e5e:	68bb      	ldr	r3, [r7, #8]
 8014e60:	400b      	ands	r3, r1
 8014e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014e66:	431a      	orrs	r2, r3
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8014e6e:	bf00      	nop
 8014e70:	3714      	adds	r7, #20
 8014e72:	46bd      	mov	sp, r7
 8014e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e78:	4770      	bx	lr
 8014e7a:	bf00      	nop
 8014e7c:	0007ffff 	.word	0x0007ffff

08014e80 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8014e80:	b480      	push	{r7}
 8014e82:	b083      	sub	sp, #12
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	689b      	ldr	r3, [r3, #8]
 8014e8c:	f003 031f 	and.w	r3, r3, #31
}
 8014e90:	4618      	mov	r0, r3
 8014e92:	370c      	adds	r7, #12
 8014e94:	46bd      	mov	sp, r7
 8014e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9a:	4770      	bx	lr

08014e9c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8014e9c:	b480      	push	{r7}
 8014e9e:	b083      	sub	sp, #12
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	689b      	ldr	r3, [r3, #8]
 8014ea8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8014eac:	4618      	mov	r0, r3
 8014eae:	370c      	adds	r7, #12
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb6:	4770      	bx	lr

08014eb8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8014eb8:	b480      	push	{r7}
 8014eba:	b083      	sub	sp, #12
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	689b      	ldr	r3, [r3, #8]
 8014ec4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8014ec8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8014ecc:	687a      	ldr	r2, [r7, #4]
 8014ece:	6093      	str	r3, [r2, #8]
}
 8014ed0:	bf00      	nop
 8014ed2:	370c      	adds	r7, #12
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eda:	4770      	bx	lr

08014edc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8014edc:	b480      	push	{r7}
 8014ede:	b083      	sub	sp, #12
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	689b      	ldr	r3, [r3, #8]
 8014ee8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014eec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014ef0:	d101      	bne.n	8014ef6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8014ef2:	2301      	movs	r3, #1
 8014ef4:	e000      	b.n	8014ef8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8014ef6:	2300      	movs	r3, #0
}
 8014ef8:	4618      	mov	r0, r3
 8014efa:	370c      	adds	r7, #12
 8014efc:	46bd      	mov	sp, r7
 8014efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f02:	4770      	bx	lr

08014f04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8014f04:	b480      	push	{r7}
 8014f06:	b083      	sub	sp, #12
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	689b      	ldr	r3, [r3, #8]
 8014f10:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8014f14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8014f18:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8014f20:	bf00      	nop
 8014f22:	370c      	adds	r7, #12
 8014f24:	46bd      	mov	sp, r7
 8014f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2a:	4770      	bx	lr

08014f2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8014f2c:	b480      	push	{r7}
 8014f2e:	b083      	sub	sp, #12
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	689b      	ldr	r3, [r3, #8]
 8014f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014f3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014f40:	d101      	bne.n	8014f46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8014f42:	2301      	movs	r3, #1
 8014f44:	e000      	b.n	8014f48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8014f46:	2300      	movs	r3, #0
}
 8014f48:	4618      	mov	r0, r3
 8014f4a:	370c      	adds	r7, #12
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f52:	4770      	bx	lr

08014f54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8014f54:	b480      	push	{r7}
 8014f56:	b083      	sub	sp, #12
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	689b      	ldr	r3, [r3, #8]
 8014f60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014f64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8014f68:	f043 0201 	orr.w	r2, r3, #1
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8014f70:	bf00      	nop
 8014f72:	370c      	adds	r7, #12
 8014f74:	46bd      	mov	sp, r7
 8014f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7a:	4770      	bx	lr

08014f7c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8014f7c:	b480      	push	{r7}
 8014f7e:	b083      	sub	sp, #12
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	689b      	ldr	r3, [r3, #8]
 8014f88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014f8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8014f90:	f043 0202 	orr.w	r2, r3, #2
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8014f98:	bf00      	nop
 8014f9a:	370c      	adds	r7, #12
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa2:	4770      	bx	lr

08014fa4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8014fa4:	b480      	push	{r7}
 8014fa6:	b083      	sub	sp, #12
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	689b      	ldr	r3, [r3, #8]
 8014fb0:	f003 0301 	and.w	r3, r3, #1
 8014fb4:	2b01      	cmp	r3, #1
 8014fb6:	d101      	bne.n	8014fbc <LL_ADC_IsEnabled+0x18>
 8014fb8:	2301      	movs	r3, #1
 8014fba:	e000      	b.n	8014fbe <LL_ADC_IsEnabled+0x1a>
 8014fbc:	2300      	movs	r3, #0
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	370c      	adds	r7, #12
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc8:	4770      	bx	lr

08014fca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8014fca:	b480      	push	{r7}
 8014fcc:	b083      	sub	sp, #12
 8014fce:	af00      	add	r7, sp, #0
 8014fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	689b      	ldr	r3, [r3, #8]
 8014fd6:	f003 0302 	and.w	r3, r3, #2
 8014fda:	2b02      	cmp	r3, #2
 8014fdc:	d101      	bne.n	8014fe2 <LL_ADC_IsDisableOngoing+0x18>
 8014fde:	2301      	movs	r3, #1
 8014fe0:	e000      	b.n	8014fe4 <LL_ADC_IsDisableOngoing+0x1a>
 8014fe2:	2300      	movs	r3, #0
}
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	370c      	adds	r7, #12
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fee:	4770      	bx	lr

08014ff0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8014ff0:	b480      	push	{r7}
 8014ff2:	b083      	sub	sp, #12
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	689b      	ldr	r3, [r3, #8]
 8014ffc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015000:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8015004:	f043 0204 	orr.w	r2, r3, #4
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 801500c:	bf00      	nop
 801500e:	370c      	adds	r7, #12
 8015010:	46bd      	mov	sp, r7
 8015012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015016:	4770      	bx	lr

08015018 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8015018:	b480      	push	{r7}
 801501a:	b083      	sub	sp, #12
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	689b      	ldr	r3, [r3, #8]
 8015024:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015028:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801502c:	f043 0210 	orr.w	r2, r3, #16
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8015034:	bf00      	nop
 8015036:	370c      	adds	r7, #12
 8015038:	46bd      	mov	sp, r7
 801503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503e:	4770      	bx	lr

08015040 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8015040:	b480      	push	{r7}
 8015042:	b083      	sub	sp, #12
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	689b      	ldr	r3, [r3, #8]
 801504c:	f003 0304 	and.w	r3, r3, #4
 8015050:	2b04      	cmp	r3, #4
 8015052:	d101      	bne.n	8015058 <LL_ADC_REG_IsConversionOngoing+0x18>
 8015054:	2301      	movs	r3, #1
 8015056:	e000      	b.n	801505a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8015058:	2300      	movs	r3, #0
}
 801505a:	4618      	mov	r0, r3
 801505c:	370c      	adds	r7, #12
 801505e:	46bd      	mov	sp, r7
 8015060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015064:	4770      	bx	lr

08015066 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8015066:	b480      	push	{r7}
 8015068:	b083      	sub	sp, #12
 801506a:	af00      	add	r7, sp, #0
 801506c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	689b      	ldr	r3, [r3, #8]
 8015072:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015076:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801507a:	f043 0220 	orr.w	r2, r3, #32
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8015082:	bf00      	nop
 8015084:	370c      	adds	r7, #12
 8015086:	46bd      	mov	sp, r7
 8015088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508c:	4770      	bx	lr

0801508e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 801508e:	b480      	push	{r7}
 8015090:	b083      	sub	sp, #12
 8015092:	af00      	add	r7, sp, #0
 8015094:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	689b      	ldr	r3, [r3, #8]
 801509a:	f003 0308 	and.w	r3, r3, #8
 801509e:	2b08      	cmp	r3, #8
 80150a0:	d101      	bne.n	80150a6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80150a2:	2301      	movs	r3, #1
 80150a4:	e000      	b.n	80150a8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80150a6:	2300      	movs	r3, #0
}
 80150a8:	4618      	mov	r0, r3
 80150aa:	370c      	adds	r7, #12
 80150ac:	46bd      	mov	sp, r7
 80150ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b2:	4770      	bx	lr

080150b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80150b4:	b590      	push	{r4, r7, lr}
 80150b6:	b089      	sub	sp, #36	@ 0x24
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80150bc:	2300      	movs	r3, #0
 80150be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80150c0:	2300      	movs	r3, #0
 80150c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d101      	bne.n	80150ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80150ca:	2301      	movs	r3, #1
 80150cc:	e130      	b.n	8015330 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	691b      	ldr	r3, [r3, #16]
 80150d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d109      	bne.n	80150f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80150dc:	6878      	ldr	r0, [r7, #4]
 80150de:	f7eb fe81 	bl	8000de4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	2200      	movs	r2, #0
 80150e6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	2200      	movs	r2, #0
 80150ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	4618      	mov	r0, r3
 80150f6:	f7ff fef1 	bl	8014edc <LL_ADC_IsDeepPowerDownEnabled>
 80150fa:	4603      	mov	r3, r0
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d004      	beq.n	801510a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	4618      	mov	r0, r3
 8015106:	f7ff fed7 	bl	8014eb8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	4618      	mov	r0, r3
 8015110:	f7ff ff0c 	bl	8014f2c <LL_ADC_IsInternalRegulatorEnabled>
 8015114:	4603      	mov	r3, r0
 8015116:	2b00      	cmp	r3, #0
 8015118:	d115      	bne.n	8015146 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	4618      	mov	r0, r3
 8015120:	f7ff fef0 	bl	8014f04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8015124:	4b84      	ldr	r3, [pc, #528]	@ (8015338 <HAL_ADC_Init+0x284>)
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	099b      	lsrs	r3, r3, #6
 801512a:	4a84      	ldr	r2, [pc, #528]	@ (801533c <HAL_ADC_Init+0x288>)
 801512c:	fba2 2303 	umull	r2, r3, r2, r3
 8015130:	099b      	lsrs	r3, r3, #6
 8015132:	3301      	adds	r3, #1
 8015134:	005b      	lsls	r3, r3, #1
 8015136:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8015138:	e002      	b.n	8015140 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	3b01      	subs	r3, #1
 801513e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d1f9      	bne.n	801513a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	4618      	mov	r0, r3
 801514c:	f7ff feee 	bl	8014f2c <LL_ADC_IsInternalRegulatorEnabled>
 8015150:	4603      	mov	r3, r0
 8015152:	2b00      	cmp	r3, #0
 8015154:	d10d      	bne.n	8015172 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801515a:	f043 0210 	orr.w	r2, r3, #16
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015166:	f043 0201 	orr.w	r2, r3, #1
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 801516e:	2301      	movs	r3, #1
 8015170:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	4618      	mov	r0, r3
 8015178:	f7ff ff62 	bl	8015040 <LL_ADC_REG_IsConversionOngoing>
 801517c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015182:	f003 0310 	and.w	r3, r3, #16
 8015186:	2b00      	cmp	r3, #0
 8015188:	f040 80c9 	bne.w	801531e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 801518c:	697b      	ldr	r3, [r7, #20]
 801518e:	2b00      	cmp	r3, #0
 8015190:	f040 80c5 	bne.w	801531e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015198:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 801519c:	f043 0202 	orr.w	r2, r3, #2
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	4618      	mov	r0, r3
 80151aa:	f7ff fefb 	bl	8014fa4 <LL_ADC_IsEnabled>
 80151ae:	4603      	mov	r3, r0
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d115      	bne.n	80151e0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80151b4:	4862      	ldr	r0, [pc, #392]	@ (8015340 <HAL_ADC_Init+0x28c>)
 80151b6:	f7ff fef5 	bl	8014fa4 <LL_ADC_IsEnabled>
 80151ba:	4604      	mov	r4, r0
 80151bc:	4861      	ldr	r0, [pc, #388]	@ (8015344 <HAL_ADC_Init+0x290>)
 80151be:	f7ff fef1 	bl	8014fa4 <LL_ADC_IsEnabled>
 80151c2:	4603      	mov	r3, r0
 80151c4:	431c      	orrs	r4, r3
 80151c6:	4860      	ldr	r0, [pc, #384]	@ (8015348 <HAL_ADC_Init+0x294>)
 80151c8:	f7ff feec 	bl	8014fa4 <LL_ADC_IsEnabled>
 80151cc:	4603      	mov	r3, r0
 80151ce:	4323      	orrs	r3, r4
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d105      	bne.n	80151e0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	685b      	ldr	r3, [r3, #4]
 80151d8:	4619      	mov	r1, r3
 80151da:	485c      	ldr	r0, [pc, #368]	@ (801534c <HAL_ADC_Init+0x298>)
 80151dc:	f7ff fd26 	bl	8014c2c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	7e5b      	ldrb	r3, [r3, #25]
 80151e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80151ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80151f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80151f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80151fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8015200:	4313      	orrs	r3, r2
 8015202:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	f893 3020 	ldrb.w	r3, [r3, #32]
 801520a:	2b01      	cmp	r3, #1
 801520c:	d106      	bne.n	801521c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015212:	3b01      	subs	r3, #1
 8015214:	045b      	lsls	r3, r3, #17
 8015216:	69ba      	ldr	r2, [r7, #24]
 8015218:	4313      	orrs	r3, r2
 801521a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015220:	2b00      	cmp	r3, #0
 8015222:	d009      	beq.n	8015238 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015228:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015230:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8015232:	69ba      	ldr	r2, [r7, #24]
 8015234:	4313      	orrs	r3, r2
 8015236:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	68da      	ldr	r2, [r3, #12]
 801523e:	4b44      	ldr	r3, [pc, #272]	@ (8015350 <HAL_ADC_Init+0x29c>)
 8015240:	4013      	ands	r3, r2
 8015242:	687a      	ldr	r2, [r7, #4]
 8015244:	6812      	ldr	r2, [r2, #0]
 8015246:	69b9      	ldr	r1, [r7, #24]
 8015248:	430b      	orrs	r3, r1
 801524a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	4618      	mov	r0, r3
 8015252:	f7ff ff1c 	bl	801508e <LL_ADC_INJ_IsConversionOngoing>
 8015256:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8015258:	697b      	ldr	r3, [r7, #20]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d13d      	bne.n	80152da <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801525e:	693b      	ldr	r3, [r7, #16]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d13a      	bne.n	80152da <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8015268:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015270:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8015272:	4313      	orrs	r3, r2
 8015274:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	68db      	ldr	r3, [r3, #12]
 801527c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8015280:	f023 0302 	bic.w	r3, r3, #2
 8015284:	687a      	ldr	r2, [r7, #4]
 8015286:	6812      	ldr	r2, [r2, #0]
 8015288:	69b9      	ldr	r1, [r7, #24]
 801528a:	430b      	orrs	r3, r1
 801528c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015294:	2b01      	cmp	r3, #1
 8015296:	d118      	bne.n	80152ca <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	691b      	ldr	r3, [r3, #16]
 801529e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80152a2:	f023 0304 	bic.w	r3, r3, #4
 80152a6:	687a      	ldr	r2, [r7, #4]
 80152a8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80152aa:	687a      	ldr	r2, [r7, #4]
 80152ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80152ae:	4311      	orrs	r1, r2
 80152b0:	687a      	ldr	r2, [r7, #4]
 80152b2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80152b4:	4311      	orrs	r1, r2
 80152b6:	687a      	ldr	r2, [r7, #4]
 80152b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80152ba:	430a      	orrs	r2, r1
 80152bc:	431a      	orrs	r2, r3
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	f042 0201 	orr.w	r2, r2, #1
 80152c6:	611a      	str	r2, [r3, #16]
 80152c8:	e007      	b.n	80152da <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	691a      	ldr	r2, [r3, #16]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	f022 0201 	bic.w	r2, r2, #1
 80152d8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	691b      	ldr	r3, [r3, #16]
 80152de:	2b01      	cmp	r3, #1
 80152e0:	d10c      	bne.n	80152fc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152e8:	f023 010f 	bic.w	r1, r3, #15
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	69db      	ldr	r3, [r3, #28]
 80152f0:	1e5a      	subs	r2, r3, #1
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	430a      	orrs	r2, r1
 80152f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80152fa:	e007      	b.n	801530c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	f022 020f 	bic.w	r2, r2, #15
 801530a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015310:	f023 0303 	bic.w	r3, r3, #3
 8015314:	f043 0201 	orr.w	r2, r3, #1
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	655a      	str	r2, [r3, #84]	@ 0x54
 801531c:	e007      	b.n	801532e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015322:	f043 0210 	orr.w	r2, r3, #16
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 801532a:	2301      	movs	r3, #1
 801532c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 801532e:	7ffb      	ldrb	r3, [r7, #31]
}
 8015330:	4618      	mov	r0, r3
 8015332:	3724      	adds	r7, #36	@ 0x24
 8015334:	46bd      	mov	sp, r7
 8015336:	bd90      	pop	{r4, r7, pc}
 8015338:	20000384 	.word	0x20000384
 801533c:	053e2d63 	.word	0x053e2d63
 8015340:	50040000 	.word	0x50040000
 8015344:	50040100 	.word	0x50040100
 8015348:	50040200 	.word	0x50040200
 801534c:	50040300 	.word	0x50040300
 8015350:	fff0c007 	.word	0xfff0c007

08015354 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b086      	sub	sp, #24
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801535c:	4857      	ldr	r0, [pc, #348]	@ (80154bc <HAL_ADC_Start+0x168>)
 801535e:	f7ff fd8f 	bl	8014e80 <LL_ADC_GetMultimode>
 8015362:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	4618      	mov	r0, r3
 801536a:	f7ff fe69 	bl	8015040 <LL_ADC_REG_IsConversionOngoing>
 801536e:	4603      	mov	r3, r0
 8015370:	2b00      	cmp	r3, #0
 8015372:	f040 809c 	bne.w	80154ae <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801537c:	2b01      	cmp	r3, #1
 801537e:	d101      	bne.n	8015384 <HAL_ADC_Start+0x30>
 8015380:	2302      	movs	r3, #2
 8015382:	e097      	b.n	80154b4 <HAL_ADC_Start+0x160>
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	2201      	movs	r2, #1
 8015388:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 801538c:	6878      	ldr	r0, [r7, #4]
 801538e:	f001 f89b 	bl	80164c8 <ADC_Enable>
 8015392:	4603      	mov	r3, r0
 8015394:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8015396:	7dfb      	ldrb	r3, [r7, #23]
 8015398:	2b00      	cmp	r3, #0
 801539a:	f040 8083 	bne.w	80154a4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80153a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80153a6:	f023 0301 	bic.w	r3, r3, #1
 80153aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	4a42      	ldr	r2, [pc, #264]	@ (80154c0 <HAL_ADC_Start+0x16c>)
 80153b8:	4293      	cmp	r3, r2
 80153ba:	d002      	beq.n	80153c2 <HAL_ADC_Start+0x6e>
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	e000      	b.n	80153c4 <HAL_ADC_Start+0x70>
 80153c2:	4b40      	ldr	r3, [pc, #256]	@ (80154c4 <HAL_ADC_Start+0x170>)
 80153c4:	687a      	ldr	r2, [r7, #4]
 80153c6:	6812      	ldr	r2, [r2, #0]
 80153c8:	4293      	cmp	r3, r2
 80153ca:	d002      	beq.n	80153d2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80153cc:	693b      	ldr	r3, [r7, #16]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d105      	bne.n	80153de <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80153d6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80153e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80153e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80153ea:	d106      	bne.n	80153fa <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80153f0:	f023 0206 	bic.w	r2, r3, #6
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80153f8:	e002      	b.n	8015400 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	2200      	movs	r2, #0
 80153fe:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	221c      	movs	r2, #28
 8015406:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	2200      	movs	r2, #0
 801540c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	4a2a      	ldr	r2, [pc, #168]	@ (80154c0 <HAL_ADC_Start+0x16c>)
 8015416:	4293      	cmp	r3, r2
 8015418:	d002      	beq.n	8015420 <HAL_ADC_Start+0xcc>
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	e000      	b.n	8015422 <HAL_ADC_Start+0xce>
 8015420:	4b28      	ldr	r3, [pc, #160]	@ (80154c4 <HAL_ADC_Start+0x170>)
 8015422:	687a      	ldr	r2, [r7, #4]
 8015424:	6812      	ldr	r2, [r2, #0]
 8015426:	4293      	cmp	r3, r2
 8015428:	d008      	beq.n	801543c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801542a:	693b      	ldr	r3, [r7, #16]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d005      	beq.n	801543c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8015430:	693b      	ldr	r3, [r7, #16]
 8015432:	2b05      	cmp	r3, #5
 8015434:	d002      	beq.n	801543c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8015436:	693b      	ldr	r3, [r7, #16]
 8015438:	2b09      	cmp	r3, #9
 801543a:	d114      	bne.n	8015466 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	68db      	ldr	r3, [r3, #12]
 8015442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015446:	2b00      	cmp	r3, #0
 8015448:	d007      	beq.n	801545a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801544e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8015452:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	4618      	mov	r0, r3
 8015460:	f7ff fdc6 	bl	8014ff0 <LL_ADC_REG_StartConversion>
 8015464:	e025      	b.n	80154b2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801546a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	4a12      	ldr	r2, [pc, #72]	@ (80154c0 <HAL_ADC_Start+0x16c>)
 8015478:	4293      	cmp	r3, r2
 801547a:	d002      	beq.n	8015482 <HAL_ADC_Start+0x12e>
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	e000      	b.n	8015484 <HAL_ADC_Start+0x130>
 8015482:	4b10      	ldr	r3, [pc, #64]	@ (80154c4 <HAL_ADC_Start+0x170>)
 8015484:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	68db      	ldr	r3, [r3, #12]
 801548a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801548e:	2b00      	cmp	r3, #0
 8015490:	d00f      	beq.n	80154b2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015496:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 801549a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80154a2:	e006      	b.n	80154b2 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	2200      	movs	r2, #0
 80154a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80154ac:	e001      	b.n	80154b2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80154ae:	2302      	movs	r3, #2
 80154b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80154b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80154b4:	4618      	mov	r0, r3
 80154b6:	3718      	adds	r7, #24
 80154b8:	46bd      	mov	sp, r7
 80154ba:	bd80      	pop	{r7, pc}
 80154bc:	50040300 	.word	0x50040300
 80154c0:	50040100 	.word	0x50040100
 80154c4:	50040000 	.word	0x50040000

080154c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b084      	sub	sp, #16
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80154d6:	2b01      	cmp	r3, #1
 80154d8:	d101      	bne.n	80154de <HAL_ADC_Stop+0x16>
 80154da:	2302      	movs	r3, #2
 80154dc:	e023      	b.n	8015526 <HAL_ADC_Stop+0x5e>
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	2201      	movs	r2, #1
 80154e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80154e6:	2103      	movs	r1, #3
 80154e8:	6878      	ldr	r0, [r7, #4]
 80154ea:	f000 ff31 	bl	8016350 <ADC_ConversionStop>
 80154ee:	4603      	mov	r3, r0
 80154f0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80154f2:	7bfb      	ldrb	r3, [r7, #15]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d111      	bne.n	801551c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80154f8:	6878      	ldr	r0, [r7, #4]
 80154fa:	f001 f86b 	bl	80165d4 <ADC_Disable>
 80154fe:	4603      	mov	r3, r0
 8015500:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8015502:	7bfb      	ldrb	r3, [r7, #15]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d109      	bne.n	801551c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801550c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8015510:	f023 0301 	bic.w	r3, r3, #1
 8015514:	f043 0201 	orr.w	r2, r3, #1
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	2200      	movs	r2, #0
 8015520:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8015524:	7bfb      	ldrb	r3, [r7, #15]
}
 8015526:	4618      	mov	r0, r3
 8015528:	3710      	adds	r7, #16
 801552a:	46bd      	mov	sp, r7
 801552c:	bd80      	pop	{r7, pc}
	...

08015530 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b088      	sub	sp, #32
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
 8015538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801553a:	4866      	ldr	r0, [pc, #408]	@ (80156d4 <HAL_ADC_PollForConversion+0x1a4>)
 801553c:	f7ff fca0 	bl	8014e80 <LL_ADC_GetMultimode>
 8015540:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	695b      	ldr	r3, [r3, #20]
 8015546:	2b08      	cmp	r3, #8
 8015548:	d102      	bne.n	8015550 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 801554a:	2308      	movs	r3, #8
 801554c:	61fb      	str	r3, [r7, #28]
 801554e:	e02a      	b.n	80155a6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d005      	beq.n	8015562 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8015556:	697b      	ldr	r3, [r7, #20]
 8015558:	2b05      	cmp	r3, #5
 801555a:	d002      	beq.n	8015562 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	2b09      	cmp	r3, #9
 8015560:	d111      	bne.n	8015586 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	68db      	ldr	r3, [r3, #12]
 8015568:	f003 0301 	and.w	r3, r3, #1
 801556c:	2b00      	cmp	r3, #0
 801556e:	d007      	beq.n	8015580 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015574:	f043 0220 	orr.w	r2, r3, #32
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 801557c:	2301      	movs	r3, #1
 801557e:	e0a4      	b.n	80156ca <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8015580:	2304      	movs	r3, #4
 8015582:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8015584:	e00f      	b.n	80155a6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8015586:	4853      	ldr	r0, [pc, #332]	@ (80156d4 <HAL_ADC_PollForConversion+0x1a4>)
 8015588:	f7ff fc88 	bl	8014e9c <LL_ADC_GetMultiDMATransfer>
 801558c:	4603      	mov	r3, r0
 801558e:	2b00      	cmp	r3, #0
 8015590:	d007      	beq.n	80155a2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015596:	f043 0220 	orr.w	r2, r3, #32
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 801559e:	2301      	movs	r3, #1
 80155a0:	e093      	b.n	80156ca <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80155a2:	2304      	movs	r3, #4
 80155a4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80155a6:	f7ff fb11 	bl	8014bcc <HAL_GetTick>
 80155aa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80155ac:	e021      	b.n	80155f2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80155ae:	683b      	ldr	r3, [r7, #0]
 80155b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155b4:	d01d      	beq.n	80155f2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80155b6:	f7ff fb09 	bl	8014bcc <HAL_GetTick>
 80155ba:	4602      	mov	r2, r0
 80155bc:	693b      	ldr	r3, [r7, #16]
 80155be:	1ad3      	subs	r3, r2, r3
 80155c0:	683a      	ldr	r2, [r7, #0]
 80155c2:	429a      	cmp	r2, r3
 80155c4:	d302      	bcc.n	80155cc <HAL_ADC_PollForConversion+0x9c>
 80155c6:	683b      	ldr	r3, [r7, #0]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d112      	bne.n	80155f2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	681a      	ldr	r2, [r3, #0]
 80155d2:	69fb      	ldr	r3, [r7, #28]
 80155d4:	4013      	ands	r3, r2
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d10b      	bne.n	80155f2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80155de:	f043 0204 	orr.w	r2, r3, #4
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	2200      	movs	r2, #0
 80155ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80155ee:	2303      	movs	r3, #3
 80155f0:	e06b      	b.n	80156ca <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	681a      	ldr	r2, [r3, #0]
 80155f8:	69fb      	ldr	r3, [r7, #28]
 80155fa:	4013      	ands	r3, r2
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d0d6      	beq.n	80155ae <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015604:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	4618      	mov	r0, r3
 8015612:	f7ff fb94 	bl	8014d3e <LL_ADC_REG_IsTriggerSourceSWStart>
 8015616:	4603      	mov	r3, r0
 8015618:	2b00      	cmp	r3, #0
 801561a:	d01c      	beq.n	8015656 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	7e5b      	ldrb	r3, [r3, #25]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d118      	bne.n	8015656 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	f003 0308 	and.w	r3, r3, #8
 801562e:	2b08      	cmp	r3, #8
 8015630:	d111      	bne.n	8015656 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015636:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015642:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8015646:	2b00      	cmp	r3, #0
 8015648:	d105      	bne.n	8015656 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801564e:	f043 0201 	orr.w	r2, r3, #1
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	4a1f      	ldr	r2, [pc, #124]	@ (80156d8 <HAL_ADC_PollForConversion+0x1a8>)
 801565c:	4293      	cmp	r3, r2
 801565e:	d002      	beq.n	8015666 <HAL_ADC_PollForConversion+0x136>
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	e000      	b.n	8015668 <HAL_ADC_PollForConversion+0x138>
 8015666:	4b1d      	ldr	r3, [pc, #116]	@ (80156dc <HAL_ADC_PollForConversion+0x1ac>)
 8015668:	687a      	ldr	r2, [r7, #4]
 801566a:	6812      	ldr	r2, [r2, #0]
 801566c:	4293      	cmp	r3, r2
 801566e:	d008      	beq.n	8015682 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8015670:	697b      	ldr	r3, [r7, #20]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d005      	beq.n	8015682 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8015676:	697b      	ldr	r3, [r7, #20]
 8015678:	2b05      	cmp	r3, #5
 801567a:	d002      	beq.n	8015682 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801567c:	697b      	ldr	r3, [r7, #20]
 801567e:	2b09      	cmp	r3, #9
 8015680:	d104      	bne.n	801568c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	68db      	ldr	r3, [r3, #12]
 8015688:	61bb      	str	r3, [r7, #24]
 801568a:	e00c      	b.n	80156a6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	4a11      	ldr	r2, [pc, #68]	@ (80156d8 <HAL_ADC_PollForConversion+0x1a8>)
 8015692:	4293      	cmp	r3, r2
 8015694:	d002      	beq.n	801569c <HAL_ADC_PollForConversion+0x16c>
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	e000      	b.n	801569e <HAL_ADC_PollForConversion+0x16e>
 801569c:	4b0f      	ldr	r3, [pc, #60]	@ (80156dc <HAL_ADC_PollForConversion+0x1ac>)
 801569e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	68db      	ldr	r3, [r3, #12]
 80156a4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80156a6:	69fb      	ldr	r3, [r7, #28]
 80156a8:	2b08      	cmp	r3, #8
 80156aa:	d104      	bne.n	80156b6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	2208      	movs	r2, #8
 80156b2:	601a      	str	r2, [r3, #0]
 80156b4:	e008      	b.n	80156c8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80156b6:	69bb      	ldr	r3, [r7, #24]
 80156b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d103      	bne.n	80156c8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	220c      	movs	r2, #12
 80156c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80156c8:	2300      	movs	r3, #0
}
 80156ca:	4618      	mov	r0, r3
 80156cc:	3720      	adds	r7, #32
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd80      	pop	{r7, pc}
 80156d2:	bf00      	nop
 80156d4:	50040300 	.word	0x50040300
 80156d8:	50040100 	.word	0x50040100
 80156dc:	50040000 	.word	0x50040000

080156e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80156e0:	b480      	push	{r7}
 80156e2:	b083      	sub	sp, #12
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80156ee:	4618      	mov	r0, r3
 80156f0:	370c      	adds	r7, #12
 80156f2:	46bd      	mov	sp, r7
 80156f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f8:	4770      	bx	lr
	...

080156fc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b08a      	sub	sp, #40	@ 0x28
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8015704:	2300      	movs	r3, #0
 8015706:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	685b      	ldr	r3, [r3, #4]
 8015716:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8015718:	4882      	ldr	r0, [pc, #520]	@ (8015924 <HAL_ADC_IRQHandler+0x228>)
 801571a:	f7ff fbb1 	bl	8014e80 <LL_ADC_GetMultimode>
 801571e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8015720:	69fb      	ldr	r3, [r7, #28]
 8015722:	f003 0302 	and.w	r3, r3, #2
 8015726:	2b00      	cmp	r3, #0
 8015728:	d017      	beq.n	801575a <HAL_ADC_IRQHandler+0x5e>
 801572a:	69bb      	ldr	r3, [r7, #24]
 801572c:	f003 0302 	and.w	r3, r3, #2
 8015730:	2b00      	cmp	r3, #0
 8015732:	d012      	beq.n	801575a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015738:	f003 0310 	and.w	r3, r3, #16
 801573c:	2b00      	cmp	r3, #0
 801573e:	d105      	bne.n	801574c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015744:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 801574c:	6878      	ldr	r0, [r7, #4]
 801574e:	f000 ffee 	bl	801672e <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	2202      	movs	r2, #2
 8015758:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 801575a:	69fb      	ldr	r3, [r7, #28]
 801575c:	f003 0304 	and.w	r3, r3, #4
 8015760:	2b00      	cmp	r3, #0
 8015762:	d004      	beq.n	801576e <HAL_ADC_IRQHandler+0x72>
 8015764:	69bb      	ldr	r3, [r7, #24]
 8015766:	f003 0304 	and.w	r3, r3, #4
 801576a:	2b00      	cmp	r3, #0
 801576c:	d10a      	bne.n	8015784 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 801576e:	69fb      	ldr	r3, [r7, #28]
 8015770:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8015774:	2b00      	cmp	r3, #0
 8015776:	f000 8083 	beq.w	8015880 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 801577a:	69bb      	ldr	r3, [r7, #24]
 801577c:	f003 0308 	and.w	r3, r3, #8
 8015780:	2b00      	cmp	r3, #0
 8015782:	d07d      	beq.n	8015880 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015788:	f003 0310 	and.w	r3, r3, #16
 801578c:	2b00      	cmp	r3, #0
 801578e:	d105      	bne.n	801579c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015794:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	4618      	mov	r0, r3
 80157a2:	f7ff facc 	bl	8014d3e <LL_ADC_REG_IsTriggerSourceSWStart>
 80157a6:	4603      	mov	r3, r0
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d062      	beq.n	8015872 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	4a5d      	ldr	r2, [pc, #372]	@ (8015928 <HAL_ADC_IRQHandler+0x22c>)
 80157b2:	4293      	cmp	r3, r2
 80157b4:	d002      	beq.n	80157bc <HAL_ADC_IRQHandler+0xc0>
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	e000      	b.n	80157be <HAL_ADC_IRQHandler+0xc2>
 80157bc:	4b5b      	ldr	r3, [pc, #364]	@ (801592c <HAL_ADC_IRQHandler+0x230>)
 80157be:	687a      	ldr	r2, [r7, #4]
 80157c0:	6812      	ldr	r2, [r2, #0]
 80157c2:	4293      	cmp	r3, r2
 80157c4:	d008      	beq.n	80157d8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80157c6:	697b      	ldr	r3, [r7, #20]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d005      	beq.n	80157d8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80157cc:	697b      	ldr	r3, [r7, #20]
 80157ce:	2b05      	cmp	r3, #5
 80157d0:	d002      	beq.n	80157d8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80157d2:	697b      	ldr	r3, [r7, #20]
 80157d4:	2b09      	cmp	r3, #9
 80157d6:	d104      	bne.n	80157e2 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	68db      	ldr	r3, [r3, #12]
 80157de:	623b      	str	r3, [r7, #32]
 80157e0:	e00c      	b.n	80157fc <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	4a50      	ldr	r2, [pc, #320]	@ (8015928 <HAL_ADC_IRQHandler+0x22c>)
 80157e8:	4293      	cmp	r3, r2
 80157ea:	d002      	beq.n	80157f2 <HAL_ADC_IRQHandler+0xf6>
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	e000      	b.n	80157f4 <HAL_ADC_IRQHandler+0xf8>
 80157f2:	4b4e      	ldr	r3, [pc, #312]	@ (801592c <HAL_ADC_IRQHandler+0x230>)
 80157f4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80157f6:	693b      	ldr	r3, [r7, #16]
 80157f8:	68db      	ldr	r3, [r3, #12]
 80157fa:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80157fc:	6a3b      	ldr	r3, [r7, #32]
 80157fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015802:	2b00      	cmp	r3, #0
 8015804:	d135      	bne.n	8015872 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	f003 0308 	and.w	r3, r3, #8
 8015810:	2b08      	cmp	r3, #8
 8015812:	d12e      	bne.n	8015872 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	4618      	mov	r0, r3
 801581a:	f7ff fc11 	bl	8015040 <LL_ADC_REG_IsConversionOngoing>
 801581e:	4603      	mov	r3, r0
 8015820:	2b00      	cmp	r3, #0
 8015822:	d11a      	bne.n	801585a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	685a      	ldr	r2, [r3, #4]
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	f022 020c 	bic.w	r2, r2, #12
 8015832:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015838:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015844:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8015848:	2b00      	cmp	r3, #0
 801584a:	d112      	bne.n	8015872 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015850:	f043 0201 	orr.w	r2, r3, #1
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	655a      	str	r2, [r3, #84]	@ 0x54
 8015858:	e00b      	b.n	8015872 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801585e:	f043 0210 	orr.w	r2, r3, #16
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801586a:	f043 0201 	orr.w	r2, r3, #1
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8015872:	6878      	ldr	r0, [r7, #4]
 8015874:	f000 f95c 	bl	8015b30 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	220c      	movs	r2, #12
 801587e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8015880:	69fb      	ldr	r3, [r7, #28]
 8015882:	f003 0320 	and.w	r3, r3, #32
 8015886:	2b00      	cmp	r3, #0
 8015888:	d004      	beq.n	8015894 <HAL_ADC_IRQHandler+0x198>
 801588a:	69bb      	ldr	r3, [r7, #24]
 801588c:	f003 0320 	and.w	r3, r3, #32
 8015890:	2b00      	cmp	r3, #0
 8015892:	d10b      	bne.n	80158ac <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8015894:	69fb      	ldr	r3, [r7, #28]
 8015896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 801589a:	2b00      	cmp	r3, #0
 801589c:	f000 809f 	beq.w	80159de <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80158a0:	69bb      	ldr	r3, [r7, #24]
 80158a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	f000 8099 	beq.w	80159de <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80158b0:	f003 0310 	and.w	r3, r3, #16
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d105      	bne.n	80158c4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80158bc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7ff fa77 	bl	8014dbc <LL_ADC_INJ_IsTriggerSourceSWStart>
 80158ce:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	4618      	mov	r0, r3
 80158d6:	f7ff fa32 	bl	8014d3e <LL_ADC_REG_IsTriggerSourceSWStart>
 80158da:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	4a11      	ldr	r2, [pc, #68]	@ (8015928 <HAL_ADC_IRQHandler+0x22c>)
 80158e2:	4293      	cmp	r3, r2
 80158e4:	d002      	beq.n	80158ec <HAL_ADC_IRQHandler+0x1f0>
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	e000      	b.n	80158ee <HAL_ADC_IRQHandler+0x1f2>
 80158ec:	4b0f      	ldr	r3, [pc, #60]	@ (801592c <HAL_ADC_IRQHandler+0x230>)
 80158ee:	687a      	ldr	r2, [r7, #4]
 80158f0:	6812      	ldr	r2, [r2, #0]
 80158f2:	4293      	cmp	r3, r2
 80158f4:	d008      	beq.n	8015908 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80158f6:	697b      	ldr	r3, [r7, #20]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d005      	beq.n	8015908 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80158fc:	697b      	ldr	r3, [r7, #20]
 80158fe:	2b06      	cmp	r3, #6
 8015900:	d002      	beq.n	8015908 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8015902:	697b      	ldr	r3, [r7, #20]
 8015904:	2b07      	cmp	r3, #7
 8015906:	d104      	bne.n	8015912 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	68db      	ldr	r3, [r3, #12]
 801590e:	623b      	str	r3, [r7, #32]
 8015910:	e013      	b.n	801593a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	4a04      	ldr	r2, [pc, #16]	@ (8015928 <HAL_ADC_IRQHandler+0x22c>)
 8015918:	4293      	cmp	r3, r2
 801591a:	d009      	beq.n	8015930 <HAL_ADC_IRQHandler+0x234>
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	e007      	b.n	8015932 <HAL_ADC_IRQHandler+0x236>
 8015922:	bf00      	nop
 8015924:	50040300 	.word	0x50040300
 8015928:	50040100 	.word	0x50040100
 801592c:	50040000 	.word	0x50040000
 8015930:	4b7d      	ldr	r3, [pc, #500]	@ (8015b28 <HAL_ADC_IRQHandler+0x42c>)
 8015932:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8015934:	693b      	ldr	r3, [r7, #16]
 8015936:	68db      	ldr	r3, [r3, #12]
 8015938:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d047      	beq.n	80159d0 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8015940:	6a3b      	ldr	r3, [r7, #32]
 8015942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8015946:	2b00      	cmp	r3, #0
 8015948:	d007      	beq.n	801595a <HAL_ADC_IRQHandler+0x25e>
 801594a:	68bb      	ldr	r3, [r7, #8]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d03f      	beq.n	80159d0 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8015950:	6a3b      	ldr	r3, [r7, #32]
 8015952:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8015956:	2b00      	cmp	r3, #0
 8015958:	d13a      	bne.n	80159d0 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015964:	2b40      	cmp	r3, #64	@ 0x40
 8015966:	d133      	bne.n	80159d0 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8015968:	6a3b      	ldr	r3, [r7, #32]
 801596a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801596e:	2b00      	cmp	r3, #0
 8015970:	d12e      	bne.n	80159d0 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	4618      	mov	r0, r3
 8015978:	f7ff fb89 	bl	801508e <LL_ADC_INJ_IsConversionOngoing>
 801597c:	4603      	mov	r3, r0
 801597e:	2b00      	cmp	r3, #0
 8015980:	d11a      	bne.n	80159b8 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	685a      	ldr	r2, [r3, #4]
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8015990:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015996:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80159a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d112      	bne.n	80159d0 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80159ae:	f043 0201 	orr.w	r2, r3, #1
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	655a      	str	r2, [r3, #84]	@ 0x54
 80159b6:	e00b      	b.n	80159d0 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80159bc:	f043 0210 	orr.w	r2, r3, #16
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80159c8:	f043 0201 	orr.w	r2, r3, #1
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80159d0:	6878      	ldr	r0, [r7, #4]
 80159d2:	f000 fe84 	bl	80166de <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	2260      	movs	r2, #96	@ 0x60
 80159dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80159de:	69fb      	ldr	r3, [r7, #28]
 80159e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d011      	beq.n	8015a0c <HAL_ADC_IRQHandler+0x310>
 80159e8:	69bb      	ldr	r3, [r7, #24]
 80159ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d00c      	beq.n	8015a0c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80159f6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80159fe:	6878      	ldr	r0, [r7, #4]
 8015a00:	f000 f8a0 	bl	8015b44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	2280      	movs	r2, #128	@ 0x80
 8015a0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8015a0c:	69fb      	ldr	r3, [r7, #28]
 8015a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d012      	beq.n	8015a3c <HAL_ADC_IRQHandler+0x340>
 8015a16:	69bb      	ldr	r3, [r7, #24]
 8015a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d00d      	beq.n	8015a3c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015a24:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8015a2c:	6878      	ldr	r0, [r7, #4]
 8015a2e:	f000 fe6a 	bl	8016706 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015a3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8015a3c:	69fb      	ldr	r3, [r7, #28]
 8015a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d012      	beq.n	8015a6c <HAL_ADC_IRQHandler+0x370>
 8015a46:	69bb      	ldr	r3, [r7, #24]
 8015a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d00d      	beq.n	8015a6c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015a54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8015a5c:	6878      	ldr	r0, [r7, #4]
 8015a5e:	f000 fe5c 	bl	801671a <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015a6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8015a6c:	69fb      	ldr	r3, [r7, #28]
 8015a6e:	f003 0310 	and.w	r3, r3, #16
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d036      	beq.n	8015ae4 <HAL_ADC_IRQHandler+0x3e8>
 8015a76:	69bb      	ldr	r3, [r7, #24]
 8015a78:	f003 0310 	and.w	r3, r3, #16
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d031      	beq.n	8015ae4 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d102      	bne.n	8015a8e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8015a88:	2301      	movs	r3, #1
 8015a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8015a8c:	e014      	b.n	8015ab8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8015a8e:	697b      	ldr	r3, [r7, #20]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d008      	beq.n	8015aa6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8015a94:	4825      	ldr	r0, [pc, #148]	@ (8015b2c <HAL_ADC_IRQHandler+0x430>)
 8015a96:	f7ff fa01 	bl	8014e9c <LL_ADC_GetMultiDMATransfer>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d00b      	beq.n	8015ab8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8015aa0:	2301      	movs	r3, #1
 8015aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8015aa4:	e008      	b.n	8015ab8 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	68db      	ldr	r3, [r3, #12]
 8015aac:	f003 0301 	and.w	r3, r3, #1
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d001      	beq.n	8015ab8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8015ab4:	2301      	movs	r3, #1
 8015ab6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8015ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aba:	2b01      	cmp	r3, #1
 8015abc:	d10e      	bne.n	8015adc <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015ac2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015ace:	f043 0202 	orr.w	r2, r3, #2
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8015ad6:	6878      	ldr	r0, [r7, #4]
 8015ad8:	f000 f83e 	bl	8015b58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	2210      	movs	r2, #16
 8015ae2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8015ae4:	69fb      	ldr	r3, [r7, #28]
 8015ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d018      	beq.n	8015b20 <HAL_ADC_IRQHandler+0x424>
 8015aee:	69bb      	ldr	r3, [r7, #24]
 8015af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d013      	beq.n	8015b20 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015afc:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015b08:	f043 0208 	orr.w	r2, r3, #8
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8015b18:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	f000 fde9 	bl	80166f2 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8015b20:	bf00      	nop
 8015b22:	3728      	adds	r7, #40	@ 0x28
 8015b24:	46bd      	mov	sp, r7
 8015b26:	bd80      	pop	{r7, pc}
 8015b28:	50040000 	.word	0x50040000
 8015b2c:	50040300 	.word	0x50040300

08015b30 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8015b30:	b480      	push	{r7}
 8015b32:	b083      	sub	sp, #12
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8015b38:	bf00      	nop
 8015b3a:	370c      	adds	r7, #12
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b42:	4770      	bx	lr

08015b44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8015b44:	b480      	push	{r7}
 8015b46:	b083      	sub	sp, #12
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8015b4c:	bf00      	nop
 8015b4e:	370c      	adds	r7, #12
 8015b50:	46bd      	mov	sp, r7
 8015b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b56:	4770      	bx	lr

08015b58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8015b58:	b480      	push	{r7}
 8015b5a:	b083      	sub	sp, #12
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8015b60:	bf00      	nop
 8015b62:	370c      	adds	r7, #12
 8015b64:	46bd      	mov	sp, r7
 8015b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6a:	4770      	bx	lr

08015b6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b0b6      	sub	sp, #216	@ 0xd8
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
 8015b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8015b76:	2300      	movs	r3, #0
 8015b78:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8015b86:	2b01      	cmp	r3, #1
 8015b88:	d101      	bne.n	8015b8e <HAL_ADC_ConfigChannel+0x22>
 8015b8a:	2302      	movs	r3, #2
 8015b8c:	e3c9      	b.n	8016322 <HAL_ADC_ConfigChannel+0x7b6>
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	2201      	movs	r2, #1
 8015b92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	f7ff fa50 	bl	8015040 <LL_ADC_REG_IsConversionOngoing>
 8015ba0:	4603      	mov	r3, r0
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	f040 83aa 	bne.w	80162fc <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8015ba8:	683b      	ldr	r3, [r7, #0]
 8015baa:	685b      	ldr	r3, [r3, #4]
 8015bac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8015bb0:	683b      	ldr	r3, [r7, #0]
 8015bb2:	685b      	ldr	r3, [r3, #4]
 8015bb4:	2b05      	cmp	r3, #5
 8015bb6:	d824      	bhi.n	8015c02 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8015bb8:	683b      	ldr	r3, [r7, #0]
 8015bba:	685b      	ldr	r3, [r3, #4]
 8015bbc:	3b02      	subs	r3, #2
 8015bbe:	2b03      	cmp	r3, #3
 8015bc0:	d81b      	bhi.n	8015bfa <HAL_ADC_ConfigChannel+0x8e>
 8015bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8015bc8 <HAL_ADC_ConfigChannel+0x5c>)
 8015bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bc8:	08015bd9 	.word	0x08015bd9
 8015bcc:	08015be1 	.word	0x08015be1
 8015bd0:	08015be9 	.word	0x08015be9
 8015bd4:	08015bf1 	.word	0x08015bf1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8015bd8:	230c      	movs	r3, #12
 8015bda:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8015bde:	e010      	b.n	8015c02 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8015be0:	2312      	movs	r3, #18
 8015be2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8015be6:	e00c      	b.n	8015c02 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8015be8:	2318      	movs	r3, #24
 8015bea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8015bee:	e008      	b.n	8015c02 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8015bf0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8015bf8:	e003      	b.n	8015c02 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8015bfa:	2306      	movs	r3, #6
 8015bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8015c00:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	6818      	ldr	r0, [r3, #0]
 8015c06:	683b      	ldr	r3, [r7, #0]
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	461a      	mov	r2, r3
 8015c0c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8015c10:	f7ff f8a8 	bl	8014d64 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	4618      	mov	r0, r3
 8015c1a:	f7ff fa11 	bl	8015040 <LL_ADC_REG_IsConversionOngoing>
 8015c1e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	4618      	mov	r0, r3
 8015c28:	f7ff fa31 	bl	801508e <LL_ADC_INJ_IsConversionOngoing>
 8015c2c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8015c30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	f040 81a4 	bne.w	8015f82 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8015c3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	f040 819f 	bne.w	8015f82 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	6818      	ldr	r0, [r3, #0]
 8015c48:	683b      	ldr	r3, [r7, #0]
 8015c4a:	6819      	ldr	r1, [r3, #0]
 8015c4c:	683b      	ldr	r3, [r7, #0]
 8015c4e:	689b      	ldr	r3, [r3, #8]
 8015c50:	461a      	mov	r2, r3
 8015c52:	f7ff f8c6 	bl	8014de2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8015c56:	683b      	ldr	r3, [r7, #0]
 8015c58:	695a      	ldr	r2, [r3, #20]
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	68db      	ldr	r3, [r3, #12]
 8015c60:	08db      	lsrs	r3, r3, #3
 8015c62:	f003 0303 	and.w	r3, r3, #3
 8015c66:	005b      	lsls	r3, r3, #1
 8015c68:	fa02 f303 	lsl.w	r3, r2, r3
 8015c6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8015c70:	683b      	ldr	r3, [r7, #0]
 8015c72:	691b      	ldr	r3, [r3, #16]
 8015c74:	2b04      	cmp	r3, #4
 8015c76:	d00a      	beq.n	8015c8e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	6818      	ldr	r0, [r3, #0]
 8015c7c:	683b      	ldr	r3, [r7, #0]
 8015c7e:	6919      	ldr	r1, [r3, #16]
 8015c80:	683b      	ldr	r3, [r7, #0]
 8015c82:	681a      	ldr	r2, [r3, #0]
 8015c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8015c88:	f7ff f804 	bl	8014c94 <LL_ADC_SetOffset>
 8015c8c:	e179      	b.n	8015f82 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	2100      	movs	r1, #0
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7ff f821 	bl	8014cdc <LL_ADC_GetOffsetChannel>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d10a      	bne.n	8015cba <HAL_ADC_ConfigChannel+0x14e>
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	2100      	movs	r1, #0
 8015caa:	4618      	mov	r0, r3
 8015cac:	f7ff f816 	bl	8014cdc <LL_ADC_GetOffsetChannel>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	0e9b      	lsrs	r3, r3, #26
 8015cb4:	f003 021f 	and.w	r2, r3, #31
 8015cb8:	e01e      	b.n	8015cf8 <HAL_ADC_ConfigChannel+0x18c>
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	2100      	movs	r1, #0
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f7ff f80b 	bl	8014cdc <LL_ADC_GetOffsetChannel>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015ccc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8015cd0:	fa93 f3a3 	rbit	r3, r3
 8015cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8015cd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8015cdc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8015ce0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d101      	bne.n	8015cec <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8015ce8:	2320      	movs	r3, #32
 8015cea:	e004      	b.n	8015cf6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8015cec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015cf0:	fab3 f383 	clz	r3, r3
 8015cf4:	b2db      	uxtb	r3, r3
 8015cf6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8015cf8:	683b      	ldr	r3, [r7, #0]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d105      	bne.n	8015d10 <HAL_ADC_ConfigChannel+0x1a4>
 8015d04:	683b      	ldr	r3, [r7, #0]
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	0e9b      	lsrs	r3, r3, #26
 8015d0a:	f003 031f 	and.w	r3, r3, #31
 8015d0e:	e018      	b.n	8015d42 <HAL_ADC_ConfigChannel+0x1d6>
 8015d10:	683b      	ldr	r3, [r7, #0]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8015d1c:	fa93 f3a3 	rbit	r3, r3
 8015d20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8015d24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8015d28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8015d2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d101      	bne.n	8015d38 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8015d34:	2320      	movs	r3, #32
 8015d36:	e004      	b.n	8015d42 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8015d38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015d3c:	fab3 f383 	clz	r3, r3
 8015d40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8015d42:	429a      	cmp	r2, r3
 8015d44:	d106      	bne.n	8015d54 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	2100      	movs	r1, #0
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f7fe ffda 	bl	8014d08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	2101      	movs	r1, #1
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f7fe ffbe 	bl	8014cdc <LL_ADC_GetOffsetChannel>
 8015d60:	4603      	mov	r3, r0
 8015d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d10a      	bne.n	8015d80 <HAL_ADC_ConfigChannel+0x214>
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	2101      	movs	r1, #1
 8015d70:	4618      	mov	r0, r3
 8015d72:	f7fe ffb3 	bl	8014cdc <LL_ADC_GetOffsetChannel>
 8015d76:	4603      	mov	r3, r0
 8015d78:	0e9b      	lsrs	r3, r3, #26
 8015d7a:	f003 021f 	and.w	r2, r3, #31
 8015d7e:	e01e      	b.n	8015dbe <HAL_ADC_ConfigChannel+0x252>
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	2101      	movs	r1, #1
 8015d86:	4618      	mov	r0, r3
 8015d88:	f7fe ffa8 	bl	8014cdc <LL_ADC_GetOffsetChannel>
 8015d8c:	4603      	mov	r3, r0
 8015d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015d96:	fa93 f3a3 	rbit	r3, r3
 8015d9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8015d9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8015da2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8015da6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d101      	bne.n	8015db2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8015dae:	2320      	movs	r3, #32
 8015db0:	e004      	b.n	8015dbc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8015db2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015db6:	fab3 f383 	clz	r3, r3
 8015dba:	b2db      	uxtb	r3, r3
 8015dbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8015dbe:	683b      	ldr	r3, [r7, #0]
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d105      	bne.n	8015dd6 <HAL_ADC_ConfigChannel+0x26a>
 8015dca:	683b      	ldr	r3, [r7, #0]
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	0e9b      	lsrs	r3, r3, #26
 8015dd0:	f003 031f 	and.w	r3, r3, #31
 8015dd4:	e018      	b.n	8015e08 <HAL_ADC_ConfigChannel+0x29c>
 8015dd6:	683b      	ldr	r3, [r7, #0]
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015dde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015de2:	fa93 f3a3 	rbit	r3, r3
 8015de6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8015dea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015dee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8015df2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d101      	bne.n	8015dfe <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8015dfa:	2320      	movs	r3, #32
 8015dfc:	e004      	b.n	8015e08 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8015dfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8015e02:	fab3 f383 	clz	r3, r3
 8015e06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8015e08:	429a      	cmp	r2, r3
 8015e0a:	d106      	bne.n	8015e1a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	2200      	movs	r2, #0
 8015e12:	2101      	movs	r1, #1
 8015e14:	4618      	mov	r0, r3
 8015e16:	f7fe ff77 	bl	8014d08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	2102      	movs	r1, #2
 8015e20:	4618      	mov	r0, r3
 8015e22:	f7fe ff5b 	bl	8014cdc <LL_ADC_GetOffsetChannel>
 8015e26:	4603      	mov	r3, r0
 8015e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d10a      	bne.n	8015e46 <HAL_ADC_ConfigChannel+0x2da>
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	2102      	movs	r1, #2
 8015e36:	4618      	mov	r0, r3
 8015e38:	f7fe ff50 	bl	8014cdc <LL_ADC_GetOffsetChannel>
 8015e3c:	4603      	mov	r3, r0
 8015e3e:	0e9b      	lsrs	r3, r3, #26
 8015e40:	f003 021f 	and.w	r2, r3, #31
 8015e44:	e01e      	b.n	8015e84 <HAL_ADC_ConfigChannel+0x318>
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	2102      	movs	r1, #2
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	f7fe ff45 	bl	8014cdc <LL_ADC_GetOffsetChannel>
 8015e52:	4603      	mov	r3, r0
 8015e54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015e5c:	fa93 f3a3 	rbit	r3, r3
 8015e60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8015e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015e68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8015e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d101      	bne.n	8015e78 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8015e74:	2320      	movs	r3, #32
 8015e76:	e004      	b.n	8015e82 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8015e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015e7c:	fab3 f383 	clz	r3, r3
 8015e80:	b2db      	uxtb	r3, r3
 8015e82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8015e84:	683b      	ldr	r3, [r7, #0]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d105      	bne.n	8015e9c <HAL_ADC_ConfigChannel+0x330>
 8015e90:	683b      	ldr	r3, [r7, #0]
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	0e9b      	lsrs	r3, r3, #26
 8015e96:	f003 031f 	and.w	r3, r3, #31
 8015e9a:	e014      	b.n	8015ec6 <HAL_ADC_ConfigChannel+0x35a>
 8015e9c:	683b      	ldr	r3, [r7, #0]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015ea2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015ea4:	fa93 f3a3 	rbit	r3, r3
 8015ea8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8015eaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015eac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8015eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d101      	bne.n	8015ebc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8015eb8:	2320      	movs	r3, #32
 8015eba:	e004      	b.n	8015ec6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8015ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8015ec0:	fab3 f383 	clz	r3, r3
 8015ec4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8015ec6:	429a      	cmp	r2, r3
 8015ec8:	d106      	bne.n	8015ed8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	2200      	movs	r2, #0
 8015ed0:	2102      	movs	r1, #2
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	f7fe ff18 	bl	8014d08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	2103      	movs	r1, #3
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f7fe fefc 	bl	8014cdc <LL_ADC_GetOffsetChannel>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d10a      	bne.n	8015f04 <HAL_ADC_ConfigChannel+0x398>
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	2103      	movs	r1, #3
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f7fe fef1 	bl	8014cdc <LL_ADC_GetOffsetChannel>
 8015efa:	4603      	mov	r3, r0
 8015efc:	0e9b      	lsrs	r3, r3, #26
 8015efe:	f003 021f 	and.w	r2, r3, #31
 8015f02:	e017      	b.n	8015f34 <HAL_ADC_ConfigChannel+0x3c8>
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	2103      	movs	r1, #3
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	f7fe fee6 	bl	8014cdc <LL_ADC_GetOffsetChannel>
 8015f10:	4603      	mov	r3, r0
 8015f12:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015f14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8015f16:	fa93 f3a3 	rbit	r3, r3
 8015f1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8015f1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015f1e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8015f20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d101      	bne.n	8015f2a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8015f26:	2320      	movs	r3, #32
 8015f28:	e003      	b.n	8015f32 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8015f2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015f2c:	fab3 f383 	clz	r3, r3
 8015f30:	b2db      	uxtb	r3, r3
 8015f32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8015f34:	683b      	ldr	r3, [r7, #0]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d105      	bne.n	8015f4c <HAL_ADC_ConfigChannel+0x3e0>
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	0e9b      	lsrs	r3, r3, #26
 8015f46:	f003 031f 	and.w	r3, r3, #31
 8015f4a:	e011      	b.n	8015f70 <HAL_ADC_ConfigChannel+0x404>
 8015f4c:	683b      	ldr	r3, [r7, #0]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015f52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015f54:	fa93 f3a3 	rbit	r3, r3
 8015f58:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8015f5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8015f5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d101      	bne.n	8015f68 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8015f64:	2320      	movs	r3, #32
 8015f66:	e003      	b.n	8015f70 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8015f68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015f6a:	fab3 f383 	clz	r3, r3
 8015f6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8015f70:	429a      	cmp	r2, r3
 8015f72:	d106      	bne.n	8015f82 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	2200      	movs	r2, #0
 8015f7a:	2103      	movs	r1, #3
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	f7fe fec3 	bl	8014d08 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	4618      	mov	r0, r3
 8015f88:	f7ff f80c 	bl	8014fa4 <LL_ADC_IsEnabled>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	f040 8140 	bne.w	8016214 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	6818      	ldr	r0, [r3, #0]
 8015f98:	683b      	ldr	r3, [r7, #0]
 8015f9a:	6819      	ldr	r1, [r3, #0]
 8015f9c:	683b      	ldr	r3, [r7, #0]
 8015f9e:	68db      	ldr	r3, [r3, #12]
 8015fa0:	461a      	mov	r2, r3
 8015fa2:	f7fe ff49 	bl	8014e38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	68db      	ldr	r3, [r3, #12]
 8015faa:	4a8f      	ldr	r2, [pc, #572]	@ (80161e8 <HAL_ADC_ConfigChannel+0x67c>)
 8015fac:	4293      	cmp	r3, r2
 8015fae:	f040 8131 	bne.w	8016214 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d10b      	bne.n	8015fda <HAL_ADC_ConfigChannel+0x46e>
 8015fc2:	683b      	ldr	r3, [r7, #0]
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	0e9b      	lsrs	r3, r3, #26
 8015fc8:	3301      	adds	r3, #1
 8015fca:	f003 031f 	and.w	r3, r3, #31
 8015fce:	2b09      	cmp	r3, #9
 8015fd0:	bf94      	ite	ls
 8015fd2:	2301      	movls	r3, #1
 8015fd4:	2300      	movhi	r3, #0
 8015fd6:	b2db      	uxtb	r3, r3
 8015fd8:	e019      	b.n	801600e <HAL_ADC_ConfigChannel+0x4a2>
 8015fda:	683b      	ldr	r3, [r7, #0]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8015fe0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015fe2:	fa93 f3a3 	rbit	r3, r3
 8015fe6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8015fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015fea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8015fec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d101      	bne.n	8015ff6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8015ff2:	2320      	movs	r3, #32
 8015ff4:	e003      	b.n	8015ffe <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8015ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015ff8:	fab3 f383 	clz	r3, r3
 8015ffc:	b2db      	uxtb	r3, r3
 8015ffe:	3301      	adds	r3, #1
 8016000:	f003 031f 	and.w	r3, r3, #31
 8016004:	2b09      	cmp	r3, #9
 8016006:	bf94      	ite	ls
 8016008:	2301      	movls	r3, #1
 801600a:	2300      	movhi	r3, #0
 801600c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801600e:	2b00      	cmp	r3, #0
 8016010:	d079      	beq.n	8016106 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8016012:	683b      	ldr	r3, [r7, #0]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801601a:	2b00      	cmp	r3, #0
 801601c:	d107      	bne.n	801602e <HAL_ADC_ConfigChannel+0x4c2>
 801601e:	683b      	ldr	r3, [r7, #0]
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	0e9b      	lsrs	r3, r3, #26
 8016024:	3301      	adds	r3, #1
 8016026:	069b      	lsls	r3, r3, #26
 8016028:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 801602c:	e015      	b.n	801605a <HAL_ADC_ConfigChannel+0x4ee>
 801602e:	683b      	ldr	r3, [r7, #0]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016036:	fa93 f3a3 	rbit	r3, r3
 801603a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 801603c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801603e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8016040:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016042:	2b00      	cmp	r3, #0
 8016044:	d101      	bne.n	801604a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8016046:	2320      	movs	r3, #32
 8016048:	e003      	b.n	8016052 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 801604a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801604c:	fab3 f383 	clz	r3, r3
 8016050:	b2db      	uxtb	r3, r3
 8016052:	3301      	adds	r3, #1
 8016054:	069b      	lsls	r3, r3, #26
 8016056:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 801605a:	683b      	ldr	r3, [r7, #0]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016062:	2b00      	cmp	r3, #0
 8016064:	d109      	bne.n	801607a <HAL_ADC_ConfigChannel+0x50e>
 8016066:	683b      	ldr	r3, [r7, #0]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	0e9b      	lsrs	r3, r3, #26
 801606c:	3301      	adds	r3, #1
 801606e:	f003 031f 	and.w	r3, r3, #31
 8016072:	2101      	movs	r1, #1
 8016074:	fa01 f303 	lsl.w	r3, r1, r3
 8016078:	e017      	b.n	80160aa <HAL_ADC_ConfigChannel+0x53e>
 801607a:	683b      	ldr	r3, [r7, #0]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016082:	fa93 f3a3 	rbit	r3, r3
 8016086:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8016088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801608a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 801608c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801608e:	2b00      	cmp	r3, #0
 8016090:	d101      	bne.n	8016096 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8016092:	2320      	movs	r3, #32
 8016094:	e003      	b.n	801609e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8016096:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016098:	fab3 f383 	clz	r3, r3
 801609c:	b2db      	uxtb	r3, r3
 801609e:	3301      	adds	r3, #1
 80160a0:	f003 031f 	and.w	r3, r3, #31
 80160a4:	2101      	movs	r1, #1
 80160a6:	fa01 f303 	lsl.w	r3, r1, r3
 80160aa:	ea42 0103 	orr.w	r1, r2, r3
 80160ae:	683b      	ldr	r3, [r7, #0]
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d10a      	bne.n	80160d0 <HAL_ADC_ConfigChannel+0x564>
 80160ba:	683b      	ldr	r3, [r7, #0]
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	0e9b      	lsrs	r3, r3, #26
 80160c0:	3301      	adds	r3, #1
 80160c2:	f003 021f 	and.w	r2, r3, #31
 80160c6:	4613      	mov	r3, r2
 80160c8:	005b      	lsls	r3, r3, #1
 80160ca:	4413      	add	r3, r2
 80160cc:	051b      	lsls	r3, r3, #20
 80160ce:	e018      	b.n	8016102 <HAL_ADC_ConfigChannel+0x596>
 80160d0:	683b      	ldr	r3, [r7, #0]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80160d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80160d8:	fa93 f3a3 	rbit	r3, r3
 80160dc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80160de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80160e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d101      	bne.n	80160ec <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80160e8:	2320      	movs	r3, #32
 80160ea:	e003      	b.n	80160f4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80160ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80160ee:	fab3 f383 	clz	r3, r3
 80160f2:	b2db      	uxtb	r3, r3
 80160f4:	3301      	adds	r3, #1
 80160f6:	f003 021f 	and.w	r2, r3, #31
 80160fa:	4613      	mov	r3, r2
 80160fc:	005b      	lsls	r3, r3, #1
 80160fe:	4413      	add	r3, r2
 8016100:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016102:	430b      	orrs	r3, r1
 8016104:	e081      	b.n	801620a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8016106:	683b      	ldr	r3, [r7, #0]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801610e:	2b00      	cmp	r3, #0
 8016110:	d107      	bne.n	8016122 <HAL_ADC_ConfigChannel+0x5b6>
 8016112:	683b      	ldr	r3, [r7, #0]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	0e9b      	lsrs	r3, r3, #26
 8016118:	3301      	adds	r3, #1
 801611a:	069b      	lsls	r3, r3, #26
 801611c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8016120:	e015      	b.n	801614e <HAL_ADC_ConfigChannel+0x5e2>
 8016122:	683b      	ldr	r3, [r7, #0]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801612a:	fa93 f3a3 	rbit	r3, r3
 801612e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8016130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8016134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016136:	2b00      	cmp	r3, #0
 8016138:	d101      	bne.n	801613e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 801613a:	2320      	movs	r3, #32
 801613c:	e003      	b.n	8016146 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 801613e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016140:	fab3 f383 	clz	r3, r3
 8016144:	b2db      	uxtb	r3, r3
 8016146:	3301      	adds	r3, #1
 8016148:	069b      	lsls	r3, r3, #26
 801614a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 801614e:	683b      	ldr	r3, [r7, #0]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016156:	2b00      	cmp	r3, #0
 8016158:	d109      	bne.n	801616e <HAL_ADC_ConfigChannel+0x602>
 801615a:	683b      	ldr	r3, [r7, #0]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	0e9b      	lsrs	r3, r3, #26
 8016160:	3301      	adds	r3, #1
 8016162:	f003 031f 	and.w	r3, r3, #31
 8016166:	2101      	movs	r1, #1
 8016168:	fa01 f303 	lsl.w	r3, r1, r3
 801616c:	e017      	b.n	801619e <HAL_ADC_ConfigChannel+0x632>
 801616e:	683b      	ldr	r3, [r7, #0]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016174:	69fb      	ldr	r3, [r7, #28]
 8016176:	fa93 f3a3 	rbit	r3, r3
 801617a:	61bb      	str	r3, [r7, #24]
  return result;
 801617c:	69bb      	ldr	r3, [r7, #24]
 801617e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8016180:	6a3b      	ldr	r3, [r7, #32]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d101      	bne.n	801618a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8016186:	2320      	movs	r3, #32
 8016188:	e003      	b.n	8016192 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 801618a:	6a3b      	ldr	r3, [r7, #32]
 801618c:	fab3 f383 	clz	r3, r3
 8016190:	b2db      	uxtb	r3, r3
 8016192:	3301      	adds	r3, #1
 8016194:	f003 031f 	and.w	r3, r3, #31
 8016198:	2101      	movs	r1, #1
 801619a:	fa01 f303 	lsl.w	r3, r1, r3
 801619e:	ea42 0103 	orr.w	r1, r2, r3
 80161a2:	683b      	ldr	r3, [r7, #0]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d10d      	bne.n	80161ca <HAL_ADC_ConfigChannel+0x65e>
 80161ae:	683b      	ldr	r3, [r7, #0]
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	0e9b      	lsrs	r3, r3, #26
 80161b4:	3301      	adds	r3, #1
 80161b6:	f003 021f 	and.w	r2, r3, #31
 80161ba:	4613      	mov	r3, r2
 80161bc:	005b      	lsls	r3, r3, #1
 80161be:	4413      	add	r3, r2
 80161c0:	3b1e      	subs	r3, #30
 80161c2:	051b      	lsls	r3, r3, #20
 80161c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80161c8:	e01e      	b.n	8016208 <HAL_ADC_ConfigChannel+0x69c>
 80161ca:	683b      	ldr	r3, [r7, #0]
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80161d0:	693b      	ldr	r3, [r7, #16]
 80161d2:	fa93 f3a3 	rbit	r3, r3
 80161d6:	60fb      	str	r3, [r7, #12]
  return result;
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80161dc:	697b      	ldr	r3, [r7, #20]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d104      	bne.n	80161ec <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80161e2:	2320      	movs	r3, #32
 80161e4:	e006      	b.n	80161f4 <HAL_ADC_ConfigChannel+0x688>
 80161e6:	bf00      	nop
 80161e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80161ec:	697b      	ldr	r3, [r7, #20]
 80161ee:	fab3 f383 	clz	r3, r3
 80161f2:	b2db      	uxtb	r3, r3
 80161f4:	3301      	adds	r3, #1
 80161f6:	f003 021f 	and.w	r2, r3, #31
 80161fa:	4613      	mov	r3, r2
 80161fc:	005b      	lsls	r3, r3, #1
 80161fe:	4413      	add	r3, r2
 8016200:	3b1e      	subs	r3, #30
 8016202:	051b      	lsls	r3, r3, #20
 8016204:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016208:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 801620a:	683a      	ldr	r2, [r7, #0]
 801620c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801620e:	4619      	mov	r1, r3
 8016210:	f7fe fde7 	bl	8014de2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8016214:	683b      	ldr	r3, [r7, #0]
 8016216:	681a      	ldr	r2, [r3, #0]
 8016218:	4b44      	ldr	r3, [pc, #272]	@ (801632c <HAL_ADC_ConfigChannel+0x7c0>)
 801621a:	4013      	ands	r3, r2
 801621c:	2b00      	cmp	r3, #0
 801621e:	d07a      	beq.n	8016316 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8016220:	4843      	ldr	r0, [pc, #268]	@ (8016330 <HAL_ADC_ConfigChannel+0x7c4>)
 8016222:	f7fe fd29 	bl	8014c78 <LL_ADC_GetCommonPathInternalCh>
 8016226:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801622a:	683b      	ldr	r3, [r7, #0]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	4a41      	ldr	r2, [pc, #260]	@ (8016334 <HAL_ADC_ConfigChannel+0x7c8>)
 8016230:	4293      	cmp	r3, r2
 8016232:	d12c      	bne.n	801628e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8016234:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8016238:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801623c:	2b00      	cmp	r3, #0
 801623e:	d126      	bne.n	801628e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	4a3c      	ldr	r2, [pc, #240]	@ (8016338 <HAL_ADC_ConfigChannel+0x7cc>)
 8016246:	4293      	cmp	r3, r2
 8016248:	d004      	beq.n	8016254 <HAL_ADC_ConfigChannel+0x6e8>
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	4a3b      	ldr	r2, [pc, #236]	@ (801633c <HAL_ADC_ConfigChannel+0x7d0>)
 8016250:	4293      	cmp	r3, r2
 8016252:	d15d      	bne.n	8016310 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8016254:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8016258:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801625c:	4619      	mov	r1, r3
 801625e:	4834      	ldr	r0, [pc, #208]	@ (8016330 <HAL_ADC_ConfigChannel+0x7c4>)
 8016260:	f7fe fcf7 	bl	8014c52 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8016264:	4b36      	ldr	r3, [pc, #216]	@ (8016340 <HAL_ADC_ConfigChannel+0x7d4>)
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	099b      	lsrs	r3, r3, #6
 801626a:	4a36      	ldr	r2, [pc, #216]	@ (8016344 <HAL_ADC_ConfigChannel+0x7d8>)
 801626c:	fba2 2303 	umull	r2, r3, r2, r3
 8016270:	099b      	lsrs	r3, r3, #6
 8016272:	1c5a      	adds	r2, r3, #1
 8016274:	4613      	mov	r3, r2
 8016276:	005b      	lsls	r3, r3, #1
 8016278:	4413      	add	r3, r2
 801627a:	009b      	lsls	r3, r3, #2
 801627c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 801627e:	e002      	b.n	8016286 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8016280:	68bb      	ldr	r3, [r7, #8]
 8016282:	3b01      	subs	r3, #1
 8016284:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8016286:	68bb      	ldr	r3, [r7, #8]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d1f9      	bne.n	8016280 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801628c:	e040      	b.n	8016310 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 801628e:	683b      	ldr	r3, [r7, #0]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	4a2d      	ldr	r2, [pc, #180]	@ (8016348 <HAL_ADC_ConfigChannel+0x7dc>)
 8016294:	4293      	cmp	r3, r2
 8016296:	d118      	bne.n	80162ca <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8016298:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801629c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d112      	bne.n	80162ca <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	4a23      	ldr	r2, [pc, #140]	@ (8016338 <HAL_ADC_ConfigChannel+0x7cc>)
 80162aa:	4293      	cmp	r3, r2
 80162ac:	d004      	beq.n	80162b8 <HAL_ADC_ConfigChannel+0x74c>
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	4a22      	ldr	r2, [pc, #136]	@ (801633c <HAL_ADC_ConfigChannel+0x7d0>)
 80162b4:	4293      	cmp	r3, r2
 80162b6:	d12d      	bne.n	8016314 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80162b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80162bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80162c0:	4619      	mov	r1, r3
 80162c2:	481b      	ldr	r0, [pc, #108]	@ (8016330 <HAL_ADC_ConfigChannel+0x7c4>)
 80162c4:	f7fe fcc5 	bl	8014c52 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80162c8:	e024      	b.n	8016314 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80162ca:	683b      	ldr	r3, [r7, #0]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	4a1f      	ldr	r2, [pc, #124]	@ (801634c <HAL_ADC_ConfigChannel+0x7e0>)
 80162d0:	4293      	cmp	r3, r2
 80162d2:	d120      	bne.n	8016316 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80162d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80162d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d11a      	bne.n	8016316 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	4a14      	ldr	r2, [pc, #80]	@ (8016338 <HAL_ADC_ConfigChannel+0x7cc>)
 80162e6:	4293      	cmp	r3, r2
 80162e8:	d115      	bne.n	8016316 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80162ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80162ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80162f2:	4619      	mov	r1, r3
 80162f4:	480e      	ldr	r0, [pc, #56]	@ (8016330 <HAL_ADC_ConfigChannel+0x7c4>)
 80162f6:	f7fe fcac 	bl	8014c52 <LL_ADC_SetCommonPathInternalCh>
 80162fa:	e00c      	b.n	8016316 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016300:	f043 0220 	orr.w	r2, r3, #32
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8016308:	2301      	movs	r3, #1
 801630a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 801630e:	e002      	b.n	8016316 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8016310:	bf00      	nop
 8016312:	e000      	b.n	8016316 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8016314:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	2200      	movs	r2, #0
 801631a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 801631e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8016322:	4618      	mov	r0, r3
 8016324:	37d8      	adds	r7, #216	@ 0xd8
 8016326:	46bd      	mov	sp, r7
 8016328:	bd80      	pop	{r7, pc}
 801632a:	bf00      	nop
 801632c:	80080000 	.word	0x80080000
 8016330:	50040300 	.word	0x50040300
 8016334:	c7520000 	.word	0xc7520000
 8016338:	50040000 	.word	0x50040000
 801633c:	50040200 	.word	0x50040200
 8016340:	20000384 	.word	0x20000384
 8016344:	053e2d63 	.word	0x053e2d63
 8016348:	cb840000 	.word	0xcb840000
 801634c:	80000001 	.word	0x80000001

08016350 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8016350:	b580      	push	{r7, lr}
 8016352:	b088      	sub	sp, #32
 8016354:	af00      	add	r7, sp, #0
 8016356:	6078      	str	r0, [r7, #4]
 8016358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 801635a:	2300      	movs	r3, #0
 801635c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 801635e:	683b      	ldr	r3, [r7, #0]
 8016360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	4618      	mov	r0, r3
 8016368:	f7fe fe6a 	bl	8015040 <LL_ADC_REG_IsConversionOngoing>
 801636c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	4618      	mov	r0, r3
 8016374:	f7fe fe8b 	bl	801508e <LL_ADC_INJ_IsConversionOngoing>
 8016378:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 801637a:	693b      	ldr	r3, [r7, #16]
 801637c:	2b00      	cmp	r3, #0
 801637e:	d103      	bne.n	8016388 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	2b00      	cmp	r3, #0
 8016384:	f000 8098 	beq.w	80164b8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	68db      	ldr	r3, [r3, #12]
 801638e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016392:	2b00      	cmp	r3, #0
 8016394:	d02a      	beq.n	80163ec <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	7e5b      	ldrb	r3, [r3, #25]
 801639a:	2b01      	cmp	r3, #1
 801639c:	d126      	bne.n	80163ec <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	7e1b      	ldrb	r3, [r3, #24]
 80163a2:	2b01      	cmp	r3, #1
 80163a4:	d122      	bne.n	80163ec <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80163a6:	2301      	movs	r3, #1
 80163a8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80163aa:	e014      	b.n	80163d6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80163ac:	69fb      	ldr	r3, [r7, #28]
 80163ae:	4a45      	ldr	r2, [pc, #276]	@ (80164c4 <ADC_ConversionStop+0x174>)
 80163b0:	4293      	cmp	r3, r2
 80163b2:	d90d      	bls.n	80163d0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80163b8:	f043 0210 	orr.w	r2, r3, #16
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80163c4:	f043 0201 	orr.w	r2, r3, #1
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80163cc:	2301      	movs	r3, #1
 80163ce:	e074      	b.n	80164ba <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80163d0:	69fb      	ldr	r3, [r7, #28]
 80163d2:	3301      	adds	r3, #1
 80163d4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80163e0:	2b40      	cmp	r3, #64	@ 0x40
 80163e2:	d1e3      	bne.n	80163ac <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	2240      	movs	r2, #64	@ 0x40
 80163ea:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80163ec:	69bb      	ldr	r3, [r7, #24]
 80163ee:	2b02      	cmp	r3, #2
 80163f0:	d014      	beq.n	801641c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	4618      	mov	r0, r3
 80163f8:	f7fe fe22 	bl	8015040 <LL_ADC_REG_IsConversionOngoing>
 80163fc:	4603      	mov	r3, r0
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d00c      	beq.n	801641c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	4618      	mov	r0, r3
 8016408:	f7fe fddf 	bl	8014fca <LL_ADC_IsDisableOngoing>
 801640c:	4603      	mov	r3, r0
 801640e:	2b00      	cmp	r3, #0
 8016410:	d104      	bne.n	801641c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	4618      	mov	r0, r3
 8016418:	f7fe fdfe 	bl	8015018 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801641c:	69bb      	ldr	r3, [r7, #24]
 801641e:	2b01      	cmp	r3, #1
 8016420:	d014      	beq.n	801644c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	4618      	mov	r0, r3
 8016428:	f7fe fe31 	bl	801508e <LL_ADC_INJ_IsConversionOngoing>
 801642c:	4603      	mov	r3, r0
 801642e:	2b00      	cmp	r3, #0
 8016430:	d00c      	beq.n	801644c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	4618      	mov	r0, r3
 8016438:	f7fe fdc7 	bl	8014fca <LL_ADC_IsDisableOngoing>
 801643c:	4603      	mov	r3, r0
 801643e:	2b00      	cmp	r3, #0
 8016440:	d104      	bne.n	801644c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	4618      	mov	r0, r3
 8016448:	f7fe fe0d 	bl	8015066 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 801644c:	69bb      	ldr	r3, [r7, #24]
 801644e:	2b02      	cmp	r3, #2
 8016450:	d005      	beq.n	801645e <ADC_ConversionStop+0x10e>
 8016452:	69bb      	ldr	r3, [r7, #24]
 8016454:	2b03      	cmp	r3, #3
 8016456:	d105      	bne.n	8016464 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8016458:	230c      	movs	r3, #12
 801645a:	617b      	str	r3, [r7, #20]
        break;
 801645c:	e005      	b.n	801646a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 801645e:	2308      	movs	r3, #8
 8016460:	617b      	str	r3, [r7, #20]
        break;
 8016462:	e002      	b.n	801646a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8016464:	2304      	movs	r3, #4
 8016466:	617b      	str	r3, [r7, #20]
        break;
 8016468:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 801646a:	f7fe fbaf 	bl	8014bcc <HAL_GetTick>
 801646e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8016470:	e01b      	b.n	80164aa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8016472:	f7fe fbab 	bl	8014bcc <HAL_GetTick>
 8016476:	4602      	mov	r2, r0
 8016478:	68bb      	ldr	r3, [r7, #8]
 801647a:	1ad3      	subs	r3, r2, r3
 801647c:	2b05      	cmp	r3, #5
 801647e:	d914      	bls.n	80164aa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	689a      	ldr	r2, [r3, #8]
 8016486:	697b      	ldr	r3, [r7, #20]
 8016488:	4013      	ands	r3, r2
 801648a:	2b00      	cmp	r3, #0
 801648c:	d00d      	beq.n	80164aa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016492:	f043 0210 	orr.w	r2, r3, #16
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801649e:	f043 0201 	orr.w	r2, r3, #1
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80164a6:	2301      	movs	r3, #1
 80164a8:	e007      	b.n	80164ba <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	689a      	ldr	r2, [r3, #8]
 80164b0:	697b      	ldr	r3, [r7, #20]
 80164b2:	4013      	ands	r3, r2
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d1dc      	bne.n	8016472 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80164b8:	2300      	movs	r3, #0
}
 80164ba:	4618      	mov	r0, r3
 80164bc:	3720      	adds	r7, #32
 80164be:	46bd      	mov	sp, r7
 80164c0:	bd80      	pop	{r7, pc}
 80164c2:	bf00      	nop
 80164c4:	a33fffff 	.word	0xa33fffff

080164c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b084      	sub	sp, #16
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80164d0:	2300      	movs	r3, #0
 80164d2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	4618      	mov	r0, r3
 80164da:	f7fe fd63 	bl	8014fa4 <LL_ADC_IsEnabled>
 80164de:	4603      	mov	r3, r0
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d169      	bne.n	80165b8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	689a      	ldr	r2, [r3, #8]
 80164ea:	4b36      	ldr	r3, [pc, #216]	@ (80165c4 <ADC_Enable+0xfc>)
 80164ec:	4013      	ands	r3, r2
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d00d      	beq.n	801650e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80164f6:	f043 0210 	orr.w	r2, r3, #16
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016502:	f043 0201 	orr.w	r2, r3, #1
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 801650a:	2301      	movs	r3, #1
 801650c:	e055      	b.n	80165ba <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	4618      	mov	r0, r3
 8016514:	f7fe fd1e 	bl	8014f54 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8016518:	482b      	ldr	r0, [pc, #172]	@ (80165c8 <ADC_Enable+0x100>)
 801651a:	f7fe fbad 	bl	8014c78 <LL_ADC_GetCommonPathInternalCh>
 801651e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8016520:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8016524:	2b00      	cmp	r3, #0
 8016526:	d013      	beq.n	8016550 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8016528:	4b28      	ldr	r3, [pc, #160]	@ (80165cc <ADC_Enable+0x104>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	099b      	lsrs	r3, r3, #6
 801652e:	4a28      	ldr	r2, [pc, #160]	@ (80165d0 <ADC_Enable+0x108>)
 8016530:	fba2 2303 	umull	r2, r3, r2, r3
 8016534:	099b      	lsrs	r3, r3, #6
 8016536:	1c5a      	adds	r2, r3, #1
 8016538:	4613      	mov	r3, r2
 801653a:	005b      	lsls	r3, r3, #1
 801653c:	4413      	add	r3, r2
 801653e:	009b      	lsls	r3, r3, #2
 8016540:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8016542:	e002      	b.n	801654a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8016544:	68bb      	ldr	r3, [r7, #8]
 8016546:	3b01      	subs	r3, #1
 8016548:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 801654a:	68bb      	ldr	r3, [r7, #8]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d1f9      	bne.n	8016544 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8016550:	f7fe fb3c 	bl	8014bcc <HAL_GetTick>
 8016554:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8016556:	e028      	b.n	80165aa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	4618      	mov	r0, r3
 801655e:	f7fe fd21 	bl	8014fa4 <LL_ADC_IsEnabled>
 8016562:	4603      	mov	r3, r0
 8016564:	2b00      	cmp	r3, #0
 8016566:	d104      	bne.n	8016572 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	4618      	mov	r0, r3
 801656e:	f7fe fcf1 	bl	8014f54 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8016572:	f7fe fb2b 	bl	8014bcc <HAL_GetTick>
 8016576:	4602      	mov	r2, r0
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	1ad3      	subs	r3, r2, r3
 801657c:	2b02      	cmp	r3, #2
 801657e:	d914      	bls.n	80165aa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	f003 0301 	and.w	r3, r3, #1
 801658a:	2b01      	cmp	r3, #1
 801658c:	d00d      	beq.n	80165aa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016592:	f043 0210 	orr.w	r2, r3, #16
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801659e:	f043 0201 	orr.w	r2, r3, #1
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80165a6:	2301      	movs	r3, #1
 80165a8:	e007      	b.n	80165ba <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	f003 0301 	and.w	r3, r3, #1
 80165b4:	2b01      	cmp	r3, #1
 80165b6:	d1cf      	bne.n	8016558 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80165b8:	2300      	movs	r3, #0
}
 80165ba:	4618      	mov	r0, r3
 80165bc:	3710      	adds	r7, #16
 80165be:	46bd      	mov	sp, r7
 80165c0:	bd80      	pop	{r7, pc}
 80165c2:	bf00      	nop
 80165c4:	8000003f 	.word	0x8000003f
 80165c8:	50040300 	.word	0x50040300
 80165cc:	20000384 	.word	0x20000384
 80165d0:	053e2d63 	.word	0x053e2d63

080165d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b084      	sub	sp, #16
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	4618      	mov	r0, r3
 80165e2:	f7fe fcf2 	bl	8014fca <LL_ADC_IsDisableOngoing>
 80165e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	4618      	mov	r0, r3
 80165ee:	f7fe fcd9 	bl	8014fa4 <LL_ADC_IsEnabled>
 80165f2:	4603      	mov	r3, r0
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d047      	beq.n	8016688 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d144      	bne.n	8016688 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	689b      	ldr	r3, [r3, #8]
 8016604:	f003 030d 	and.w	r3, r3, #13
 8016608:	2b01      	cmp	r3, #1
 801660a:	d10c      	bne.n	8016626 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	4618      	mov	r0, r3
 8016612:	f7fe fcb3 	bl	8014f7c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	2203      	movs	r2, #3
 801661c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801661e:	f7fe fad5 	bl	8014bcc <HAL_GetTick>
 8016622:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8016624:	e029      	b.n	801667a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801662a:	f043 0210 	orr.w	r2, r3, #16
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016636:	f043 0201 	orr.w	r2, r3, #1
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 801663e:	2301      	movs	r3, #1
 8016640:	e023      	b.n	801668a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8016642:	f7fe fac3 	bl	8014bcc <HAL_GetTick>
 8016646:	4602      	mov	r2, r0
 8016648:	68bb      	ldr	r3, [r7, #8]
 801664a:	1ad3      	subs	r3, r2, r3
 801664c:	2b02      	cmp	r3, #2
 801664e:	d914      	bls.n	801667a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	689b      	ldr	r3, [r3, #8]
 8016656:	f003 0301 	and.w	r3, r3, #1
 801665a:	2b00      	cmp	r3, #0
 801665c:	d00d      	beq.n	801667a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016662:	f043 0210 	orr.w	r2, r3, #16
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801666e:	f043 0201 	orr.w	r2, r3, #1
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8016676:	2301      	movs	r3, #1
 8016678:	e007      	b.n	801668a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	689b      	ldr	r3, [r3, #8]
 8016680:	f003 0301 	and.w	r3, r3, #1
 8016684:	2b00      	cmp	r3, #0
 8016686:	d1dc      	bne.n	8016642 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8016688:	2300      	movs	r3, #0
}
 801668a:	4618      	mov	r0, r3
 801668c:	3710      	adds	r7, #16
 801668e:	46bd      	mov	sp, r7
 8016690:	bd80      	pop	{r7, pc}

08016692 <LL_ADC_IsEnabled>:
{
 8016692:	b480      	push	{r7}
 8016694:	b083      	sub	sp, #12
 8016696:	af00      	add	r7, sp, #0
 8016698:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	689b      	ldr	r3, [r3, #8]
 801669e:	f003 0301 	and.w	r3, r3, #1
 80166a2:	2b01      	cmp	r3, #1
 80166a4:	d101      	bne.n	80166aa <LL_ADC_IsEnabled+0x18>
 80166a6:	2301      	movs	r3, #1
 80166a8:	e000      	b.n	80166ac <LL_ADC_IsEnabled+0x1a>
 80166aa:	2300      	movs	r3, #0
}
 80166ac:	4618      	mov	r0, r3
 80166ae:	370c      	adds	r7, #12
 80166b0:	46bd      	mov	sp, r7
 80166b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b6:	4770      	bx	lr

080166b8 <LL_ADC_REG_IsConversionOngoing>:
{
 80166b8:	b480      	push	{r7}
 80166ba:	b083      	sub	sp, #12
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	689b      	ldr	r3, [r3, #8]
 80166c4:	f003 0304 	and.w	r3, r3, #4
 80166c8:	2b04      	cmp	r3, #4
 80166ca:	d101      	bne.n	80166d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80166cc:	2301      	movs	r3, #1
 80166ce:	e000      	b.n	80166d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80166d0:	2300      	movs	r3, #0
}
 80166d2:	4618      	mov	r0, r3
 80166d4:	370c      	adds	r7, #12
 80166d6:	46bd      	mov	sp, r7
 80166d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166dc:	4770      	bx	lr

080166de <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80166de:	b480      	push	{r7}
 80166e0:	b083      	sub	sp, #12
 80166e2:	af00      	add	r7, sp, #0
 80166e4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80166e6:	bf00      	nop
 80166e8:	370c      	adds	r7, #12
 80166ea:	46bd      	mov	sp, r7
 80166ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f0:	4770      	bx	lr

080166f2 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80166f2:	b480      	push	{r7}
 80166f4:	b083      	sub	sp, #12
 80166f6:	af00      	add	r7, sp, #0
 80166f8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80166fa:	bf00      	nop
 80166fc:	370c      	adds	r7, #12
 80166fe:	46bd      	mov	sp, r7
 8016700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016704:	4770      	bx	lr

08016706 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8016706:	b480      	push	{r7}
 8016708:	b083      	sub	sp, #12
 801670a:	af00      	add	r7, sp, #0
 801670c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 801670e:	bf00      	nop
 8016710:	370c      	adds	r7, #12
 8016712:	46bd      	mov	sp, r7
 8016714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016718:	4770      	bx	lr

0801671a <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 801671a:	b480      	push	{r7}
 801671c:	b083      	sub	sp, #12
 801671e:	af00      	add	r7, sp, #0
 8016720:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8016722:	bf00      	nop
 8016724:	370c      	adds	r7, #12
 8016726:	46bd      	mov	sp, r7
 8016728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672c:	4770      	bx	lr

0801672e <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 801672e:	b480      	push	{r7}
 8016730:	b083      	sub	sp, #12
 8016732:	af00      	add	r7, sp, #0
 8016734:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8016736:	bf00      	nop
 8016738:	370c      	adds	r7, #12
 801673a:	46bd      	mov	sp, r7
 801673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016740:	4770      	bx	lr
	...

08016744 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8016744:	b590      	push	{r4, r7, lr}
 8016746:	b09f      	sub	sp, #124	@ 0x7c
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
 801674c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801674e:	2300      	movs	r3, #0
 8016750:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801675a:	2b01      	cmp	r3, #1
 801675c:	d101      	bne.n	8016762 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 801675e:	2302      	movs	r3, #2
 8016760:	e093      	b.n	801688a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	2201      	movs	r2, #1
 8016766:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 801676a:	2300      	movs	r3, #0
 801676c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 801676e:	2300      	movs	r3, #0
 8016770:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	4a47      	ldr	r2, [pc, #284]	@ (8016894 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8016778:	4293      	cmp	r3, r2
 801677a:	d102      	bne.n	8016782 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 801677c:	4b46      	ldr	r3, [pc, #280]	@ (8016898 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 801677e:	60bb      	str	r3, [r7, #8]
 8016780:	e001      	b.n	8016786 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8016782:	2300      	movs	r3, #0
 8016784:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8016786:	68bb      	ldr	r3, [r7, #8]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d10b      	bne.n	80167a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016790:	f043 0220 	orr.w	r2, r3, #32
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	2200      	movs	r2, #0
 801679c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80167a0:	2301      	movs	r3, #1
 80167a2:	e072      	b.n	801688a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80167a4:	68bb      	ldr	r3, [r7, #8]
 80167a6:	4618      	mov	r0, r3
 80167a8:	f7ff ff86 	bl	80166b8 <LL_ADC_REG_IsConversionOngoing>
 80167ac:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	4618      	mov	r0, r3
 80167b4:	f7ff ff80 	bl	80166b8 <LL_ADC_REG_IsConversionOngoing>
 80167b8:	4603      	mov	r3, r0
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d154      	bne.n	8016868 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80167be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d151      	bne.n	8016868 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80167c4:	4b35      	ldr	r3, [pc, #212]	@ (801689c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80167c6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80167c8:	683b      	ldr	r3, [r7, #0]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d02c      	beq.n	801682a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80167d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80167d2:	689b      	ldr	r3, [r3, #8]
 80167d4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80167d8:	683b      	ldr	r3, [r7, #0]
 80167da:	6859      	ldr	r1, [r3, #4]
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80167e2:	035b      	lsls	r3, r3, #13
 80167e4:	430b      	orrs	r3, r1
 80167e6:	431a      	orrs	r2, r3
 80167e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80167ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80167ec:	4829      	ldr	r0, [pc, #164]	@ (8016894 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80167ee:	f7ff ff50 	bl	8016692 <LL_ADC_IsEnabled>
 80167f2:	4604      	mov	r4, r0
 80167f4:	4828      	ldr	r0, [pc, #160]	@ (8016898 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80167f6:	f7ff ff4c 	bl	8016692 <LL_ADC_IsEnabled>
 80167fa:	4603      	mov	r3, r0
 80167fc:	431c      	orrs	r4, r3
 80167fe:	4828      	ldr	r0, [pc, #160]	@ (80168a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8016800:	f7ff ff47 	bl	8016692 <LL_ADC_IsEnabled>
 8016804:	4603      	mov	r3, r0
 8016806:	4323      	orrs	r3, r4
 8016808:	2b00      	cmp	r3, #0
 801680a:	d137      	bne.n	801687c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 801680c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801680e:	689b      	ldr	r3, [r3, #8]
 8016810:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8016814:	f023 030f 	bic.w	r3, r3, #15
 8016818:	683a      	ldr	r2, [r7, #0]
 801681a:	6811      	ldr	r1, [r2, #0]
 801681c:	683a      	ldr	r2, [r7, #0]
 801681e:	6892      	ldr	r2, [r2, #8]
 8016820:	430a      	orrs	r2, r1
 8016822:	431a      	orrs	r2, r3
 8016824:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016826:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8016828:	e028      	b.n	801687c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 801682a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801682c:	689b      	ldr	r3, [r3, #8]
 801682e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8016832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016834:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8016836:	4817      	ldr	r0, [pc, #92]	@ (8016894 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8016838:	f7ff ff2b 	bl	8016692 <LL_ADC_IsEnabled>
 801683c:	4604      	mov	r4, r0
 801683e:	4816      	ldr	r0, [pc, #88]	@ (8016898 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8016840:	f7ff ff27 	bl	8016692 <LL_ADC_IsEnabled>
 8016844:	4603      	mov	r3, r0
 8016846:	431c      	orrs	r4, r3
 8016848:	4815      	ldr	r0, [pc, #84]	@ (80168a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 801684a:	f7ff ff22 	bl	8016692 <LL_ADC_IsEnabled>
 801684e:	4603      	mov	r3, r0
 8016850:	4323      	orrs	r3, r4
 8016852:	2b00      	cmp	r3, #0
 8016854:	d112      	bne.n	801687c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8016856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016858:	689b      	ldr	r3, [r3, #8]
 801685a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 801685e:	f023 030f 	bic.w	r3, r3, #15
 8016862:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8016864:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8016866:	e009      	b.n	801687c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801686c:	f043 0220 	orr.w	r2, r3, #32
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8016874:	2301      	movs	r3, #1
 8016876:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 801687a:	e000      	b.n	801687e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 801687c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	2200      	movs	r2, #0
 8016882:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8016886:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 801688a:	4618      	mov	r0, r3
 801688c:	377c      	adds	r7, #124	@ 0x7c
 801688e:	46bd      	mov	sp, r7
 8016890:	bd90      	pop	{r4, r7, pc}
 8016892:	bf00      	nop
 8016894:	50040000 	.word	0x50040000
 8016898:	50040100 	.word	0x50040100
 801689c:	50040300 	.word	0x50040300
 80168a0:	50040200 	.word	0x50040200

080168a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80168a4:	b480      	push	{r7}
 80168a6:	b085      	sub	sp, #20
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	f003 0307 	and.w	r3, r3, #7
 80168b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80168b4:	4b0c      	ldr	r3, [pc, #48]	@ (80168e8 <__NVIC_SetPriorityGrouping+0x44>)
 80168b6:	68db      	ldr	r3, [r3, #12]
 80168b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80168ba:	68ba      	ldr	r2, [r7, #8]
 80168bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80168c0:	4013      	ands	r3, r2
 80168c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80168c8:	68bb      	ldr	r3, [r7, #8]
 80168ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80168cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80168d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80168d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80168d6:	4a04      	ldr	r2, [pc, #16]	@ (80168e8 <__NVIC_SetPriorityGrouping+0x44>)
 80168d8:	68bb      	ldr	r3, [r7, #8]
 80168da:	60d3      	str	r3, [r2, #12]
}
 80168dc:	bf00      	nop
 80168de:	3714      	adds	r7, #20
 80168e0:	46bd      	mov	sp, r7
 80168e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e6:	4770      	bx	lr
 80168e8:	e000ed00 	.word	0xe000ed00

080168ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80168ec:	b480      	push	{r7}
 80168ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80168f0:	4b04      	ldr	r3, [pc, #16]	@ (8016904 <__NVIC_GetPriorityGrouping+0x18>)
 80168f2:	68db      	ldr	r3, [r3, #12]
 80168f4:	0a1b      	lsrs	r3, r3, #8
 80168f6:	f003 0307 	and.w	r3, r3, #7
}
 80168fa:	4618      	mov	r0, r3
 80168fc:	46bd      	mov	sp, r7
 80168fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016902:	4770      	bx	lr
 8016904:	e000ed00 	.word	0xe000ed00

08016908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016908:	b480      	push	{r7}
 801690a:	b083      	sub	sp, #12
 801690c:	af00      	add	r7, sp, #0
 801690e:	4603      	mov	r3, r0
 8016910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016916:	2b00      	cmp	r3, #0
 8016918:	db0b      	blt.n	8016932 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801691a:	79fb      	ldrb	r3, [r7, #7]
 801691c:	f003 021f 	and.w	r2, r3, #31
 8016920:	4907      	ldr	r1, [pc, #28]	@ (8016940 <__NVIC_EnableIRQ+0x38>)
 8016922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016926:	095b      	lsrs	r3, r3, #5
 8016928:	2001      	movs	r0, #1
 801692a:	fa00 f202 	lsl.w	r2, r0, r2
 801692e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8016932:	bf00      	nop
 8016934:	370c      	adds	r7, #12
 8016936:	46bd      	mov	sp, r7
 8016938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693c:	4770      	bx	lr
 801693e:	bf00      	nop
 8016940:	e000e100 	.word	0xe000e100

08016944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8016944:	b480      	push	{r7}
 8016946:	b083      	sub	sp, #12
 8016948:	af00      	add	r7, sp, #0
 801694a:	4603      	mov	r3, r0
 801694c:	6039      	str	r1, [r7, #0]
 801694e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016954:	2b00      	cmp	r3, #0
 8016956:	db0a      	blt.n	801696e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016958:	683b      	ldr	r3, [r7, #0]
 801695a:	b2da      	uxtb	r2, r3
 801695c:	490c      	ldr	r1, [pc, #48]	@ (8016990 <__NVIC_SetPriority+0x4c>)
 801695e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016962:	0112      	lsls	r2, r2, #4
 8016964:	b2d2      	uxtb	r2, r2
 8016966:	440b      	add	r3, r1
 8016968:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801696c:	e00a      	b.n	8016984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801696e:	683b      	ldr	r3, [r7, #0]
 8016970:	b2da      	uxtb	r2, r3
 8016972:	4908      	ldr	r1, [pc, #32]	@ (8016994 <__NVIC_SetPriority+0x50>)
 8016974:	79fb      	ldrb	r3, [r7, #7]
 8016976:	f003 030f 	and.w	r3, r3, #15
 801697a:	3b04      	subs	r3, #4
 801697c:	0112      	lsls	r2, r2, #4
 801697e:	b2d2      	uxtb	r2, r2
 8016980:	440b      	add	r3, r1
 8016982:	761a      	strb	r2, [r3, #24]
}
 8016984:	bf00      	nop
 8016986:	370c      	adds	r7, #12
 8016988:	46bd      	mov	sp, r7
 801698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698e:	4770      	bx	lr
 8016990:	e000e100 	.word	0xe000e100
 8016994:	e000ed00 	.word	0xe000ed00

08016998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8016998:	b480      	push	{r7}
 801699a:	b089      	sub	sp, #36	@ 0x24
 801699c:	af00      	add	r7, sp, #0
 801699e:	60f8      	str	r0, [r7, #12]
 80169a0:	60b9      	str	r1, [r7, #8]
 80169a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	f003 0307 	and.w	r3, r3, #7
 80169aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80169ac:	69fb      	ldr	r3, [r7, #28]
 80169ae:	f1c3 0307 	rsb	r3, r3, #7
 80169b2:	2b04      	cmp	r3, #4
 80169b4:	bf28      	it	cs
 80169b6:	2304      	movcs	r3, #4
 80169b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80169ba:	69fb      	ldr	r3, [r7, #28]
 80169bc:	3304      	adds	r3, #4
 80169be:	2b06      	cmp	r3, #6
 80169c0:	d902      	bls.n	80169c8 <NVIC_EncodePriority+0x30>
 80169c2:	69fb      	ldr	r3, [r7, #28]
 80169c4:	3b03      	subs	r3, #3
 80169c6:	e000      	b.n	80169ca <NVIC_EncodePriority+0x32>
 80169c8:	2300      	movs	r3, #0
 80169ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80169cc:	f04f 32ff 	mov.w	r2, #4294967295
 80169d0:	69bb      	ldr	r3, [r7, #24]
 80169d2:	fa02 f303 	lsl.w	r3, r2, r3
 80169d6:	43da      	mvns	r2, r3
 80169d8:	68bb      	ldr	r3, [r7, #8]
 80169da:	401a      	ands	r2, r3
 80169dc:	697b      	ldr	r3, [r7, #20]
 80169de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80169e0:	f04f 31ff 	mov.w	r1, #4294967295
 80169e4:	697b      	ldr	r3, [r7, #20]
 80169e6:	fa01 f303 	lsl.w	r3, r1, r3
 80169ea:	43d9      	mvns	r1, r3
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80169f0:	4313      	orrs	r3, r2
         );
}
 80169f2:	4618      	mov	r0, r3
 80169f4:	3724      	adds	r7, #36	@ 0x24
 80169f6:	46bd      	mov	sp, r7
 80169f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fc:	4770      	bx	lr
	...

08016a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b082      	sub	sp, #8
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	3b01      	subs	r3, #1
 8016a0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016a10:	d301      	bcc.n	8016a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8016a12:	2301      	movs	r3, #1
 8016a14:	e00f      	b.n	8016a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8016a16:	4a0a      	ldr	r2, [pc, #40]	@ (8016a40 <SysTick_Config+0x40>)
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	3b01      	subs	r3, #1
 8016a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8016a1e:	210f      	movs	r1, #15
 8016a20:	f04f 30ff 	mov.w	r0, #4294967295
 8016a24:	f7ff ff8e 	bl	8016944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8016a28:	4b05      	ldr	r3, [pc, #20]	@ (8016a40 <SysTick_Config+0x40>)
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8016a2e:	4b04      	ldr	r3, [pc, #16]	@ (8016a40 <SysTick_Config+0x40>)
 8016a30:	2207      	movs	r2, #7
 8016a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8016a34:	2300      	movs	r3, #0
}
 8016a36:	4618      	mov	r0, r3
 8016a38:	3708      	adds	r7, #8
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	bd80      	pop	{r7, pc}
 8016a3e:	bf00      	nop
 8016a40:	e000e010 	.word	0xe000e010

08016a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b082      	sub	sp, #8
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8016a4c:	6878      	ldr	r0, [r7, #4]
 8016a4e:	f7ff ff29 	bl	80168a4 <__NVIC_SetPriorityGrouping>
}
 8016a52:	bf00      	nop
 8016a54:	3708      	adds	r7, #8
 8016a56:	46bd      	mov	sp, r7
 8016a58:	bd80      	pop	{r7, pc}

08016a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8016a5a:	b580      	push	{r7, lr}
 8016a5c:	b086      	sub	sp, #24
 8016a5e:	af00      	add	r7, sp, #0
 8016a60:	4603      	mov	r3, r0
 8016a62:	60b9      	str	r1, [r7, #8]
 8016a64:	607a      	str	r2, [r7, #4]
 8016a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8016a68:	2300      	movs	r3, #0
 8016a6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8016a6c:	f7ff ff3e 	bl	80168ec <__NVIC_GetPriorityGrouping>
 8016a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8016a72:	687a      	ldr	r2, [r7, #4]
 8016a74:	68b9      	ldr	r1, [r7, #8]
 8016a76:	6978      	ldr	r0, [r7, #20]
 8016a78:	f7ff ff8e 	bl	8016998 <NVIC_EncodePriority>
 8016a7c:	4602      	mov	r2, r0
 8016a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a82:	4611      	mov	r1, r2
 8016a84:	4618      	mov	r0, r3
 8016a86:	f7ff ff5d 	bl	8016944 <__NVIC_SetPriority>
}
 8016a8a:	bf00      	nop
 8016a8c:	3718      	adds	r7, #24
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	bd80      	pop	{r7, pc}

08016a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016a92:	b580      	push	{r7, lr}
 8016a94:	b082      	sub	sp, #8
 8016a96:	af00      	add	r7, sp, #0
 8016a98:	4603      	mov	r3, r0
 8016a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8016a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	f7ff ff31 	bl	8016908 <__NVIC_EnableIRQ>
}
 8016aa6:	bf00      	nop
 8016aa8:	3708      	adds	r7, #8
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	bd80      	pop	{r7, pc}

08016aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8016aae:	b580      	push	{r7, lr}
 8016ab0:	b082      	sub	sp, #8
 8016ab2:	af00      	add	r7, sp, #0
 8016ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8016ab6:	6878      	ldr	r0, [r7, #4]
 8016ab8:	f7ff ffa2 	bl	8016a00 <SysTick_Config>
 8016abc:	4603      	mov	r3, r0
}
 8016abe:	4618      	mov	r0, r3
 8016ac0:	3708      	adds	r7, #8
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}

08016ac6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8016ac6:	b480      	push	{r7}
 8016ac8:	b085      	sub	sp, #20
 8016aca:	af00      	add	r7, sp, #0
 8016acc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016ace:	2300      	movs	r3, #0
 8016ad0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8016ad8:	b2db      	uxtb	r3, r3
 8016ada:	2b02      	cmp	r3, #2
 8016adc:	d008      	beq.n	8016af0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	2204      	movs	r2, #4
 8016ae2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8016aec:	2301      	movs	r3, #1
 8016aee:	e022      	b.n	8016b36 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	681a      	ldr	r2, [r3, #0]
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	f022 020e 	bic.w	r2, r2, #14
 8016afe:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	681a      	ldr	r2, [r3, #0]
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	f022 0201 	bic.w	r2, r2, #1
 8016b0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b14:	f003 021c 	and.w	r2, r3, #28
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016b1c:	2101      	movs	r1, #1
 8016b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8016b22:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	2201      	movs	r2, #1
 8016b28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	2200      	movs	r2, #0
 8016b30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8016b34:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8016b36:	4618      	mov	r0, r3
 8016b38:	3714      	adds	r7, #20
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b40:	4770      	bx	lr

08016b42 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016b42:	b580      	push	{r7, lr}
 8016b44:	b084      	sub	sp, #16
 8016b46:	af00      	add	r7, sp, #0
 8016b48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8016b54:	b2db      	uxtb	r3, r3
 8016b56:	2b02      	cmp	r3, #2
 8016b58:	d005      	beq.n	8016b66 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	2204      	movs	r2, #4
 8016b5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8016b60:	2301      	movs	r3, #1
 8016b62:	73fb      	strb	r3, [r7, #15]
 8016b64:	e029      	b.n	8016bba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	681a      	ldr	r2, [r3, #0]
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	f022 020e 	bic.w	r2, r2, #14
 8016b74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	681a      	ldr	r2, [r3, #0]
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	f022 0201 	bic.w	r2, r2, #1
 8016b84:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b8a:	f003 021c 	and.w	r2, r3, #28
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016b92:	2101      	movs	r1, #1
 8016b94:	fa01 f202 	lsl.w	r2, r1, r2
 8016b98:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	2201      	movs	r2, #1
 8016b9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	2200      	movs	r2, #0
 8016ba6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d003      	beq.n	8016bba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016bb6:	6878      	ldr	r0, [r7, #4]
 8016bb8:	4798      	blx	r3
    }
  }
  return status;
 8016bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	3710      	adds	r7, #16
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	bd80      	pop	{r7, pc}

08016bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8016bc4:	b480      	push	{r7}
 8016bc6:	b087      	sub	sp, #28
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
 8016bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8016bce:	2300      	movs	r3, #0
 8016bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8016bd2:	e17f      	b.n	8016ed4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	681a      	ldr	r2, [r3, #0]
 8016bd8:	2101      	movs	r1, #1
 8016bda:	697b      	ldr	r3, [r7, #20]
 8016bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8016be0:	4013      	ands	r3, r2
 8016be2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	f000 8171 	beq.w	8016ece <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8016bec:	683b      	ldr	r3, [r7, #0]
 8016bee:	685b      	ldr	r3, [r3, #4]
 8016bf0:	f003 0303 	and.w	r3, r3, #3
 8016bf4:	2b01      	cmp	r3, #1
 8016bf6:	d005      	beq.n	8016c04 <HAL_GPIO_Init+0x40>
 8016bf8:	683b      	ldr	r3, [r7, #0]
 8016bfa:	685b      	ldr	r3, [r3, #4]
 8016bfc:	f003 0303 	and.w	r3, r3, #3
 8016c00:	2b02      	cmp	r3, #2
 8016c02:	d130      	bne.n	8016c66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	689b      	ldr	r3, [r3, #8]
 8016c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8016c0a:	697b      	ldr	r3, [r7, #20]
 8016c0c:	005b      	lsls	r3, r3, #1
 8016c0e:	2203      	movs	r2, #3
 8016c10:	fa02 f303 	lsl.w	r3, r2, r3
 8016c14:	43db      	mvns	r3, r3
 8016c16:	693a      	ldr	r2, [r7, #16]
 8016c18:	4013      	ands	r3, r2
 8016c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8016c1c:	683b      	ldr	r3, [r7, #0]
 8016c1e:	68da      	ldr	r2, [r3, #12]
 8016c20:	697b      	ldr	r3, [r7, #20]
 8016c22:	005b      	lsls	r3, r3, #1
 8016c24:	fa02 f303 	lsl.w	r3, r2, r3
 8016c28:	693a      	ldr	r2, [r7, #16]
 8016c2a:	4313      	orrs	r3, r2
 8016c2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	693a      	ldr	r2, [r7, #16]
 8016c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	685b      	ldr	r3, [r3, #4]
 8016c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8016c3a:	2201      	movs	r2, #1
 8016c3c:	697b      	ldr	r3, [r7, #20]
 8016c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8016c42:	43db      	mvns	r3, r3
 8016c44:	693a      	ldr	r2, [r7, #16]
 8016c46:	4013      	ands	r3, r2
 8016c48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8016c4a:	683b      	ldr	r3, [r7, #0]
 8016c4c:	685b      	ldr	r3, [r3, #4]
 8016c4e:	091b      	lsrs	r3, r3, #4
 8016c50:	f003 0201 	and.w	r2, r3, #1
 8016c54:	697b      	ldr	r3, [r7, #20]
 8016c56:	fa02 f303 	lsl.w	r3, r2, r3
 8016c5a:	693a      	ldr	r2, [r7, #16]
 8016c5c:	4313      	orrs	r3, r2
 8016c5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	693a      	ldr	r2, [r7, #16]
 8016c64:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	685b      	ldr	r3, [r3, #4]
 8016c6a:	f003 0303 	and.w	r3, r3, #3
 8016c6e:	2b03      	cmp	r3, #3
 8016c70:	d118      	bne.n	8016ca4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8016c78:	2201      	movs	r2, #1
 8016c7a:	697b      	ldr	r3, [r7, #20]
 8016c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8016c80:	43db      	mvns	r3, r3
 8016c82:	693a      	ldr	r2, [r7, #16]
 8016c84:	4013      	ands	r3, r2
 8016c86:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8016c88:	683b      	ldr	r3, [r7, #0]
 8016c8a:	685b      	ldr	r3, [r3, #4]
 8016c8c:	08db      	lsrs	r3, r3, #3
 8016c8e:	f003 0201 	and.w	r2, r3, #1
 8016c92:	697b      	ldr	r3, [r7, #20]
 8016c94:	fa02 f303 	lsl.w	r3, r2, r3
 8016c98:	693a      	ldr	r2, [r7, #16]
 8016c9a:	4313      	orrs	r3, r2
 8016c9c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	693a      	ldr	r2, [r7, #16]
 8016ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8016ca4:	683b      	ldr	r3, [r7, #0]
 8016ca6:	685b      	ldr	r3, [r3, #4]
 8016ca8:	f003 0303 	and.w	r3, r3, #3
 8016cac:	2b03      	cmp	r3, #3
 8016cae:	d017      	beq.n	8016ce0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	68db      	ldr	r3, [r3, #12]
 8016cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8016cb6:	697b      	ldr	r3, [r7, #20]
 8016cb8:	005b      	lsls	r3, r3, #1
 8016cba:	2203      	movs	r2, #3
 8016cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8016cc0:	43db      	mvns	r3, r3
 8016cc2:	693a      	ldr	r2, [r7, #16]
 8016cc4:	4013      	ands	r3, r2
 8016cc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8016cc8:	683b      	ldr	r3, [r7, #0]
 8016cca:	689a      	ldr	r2, [r3, #8]
 8016ccc:	697b      	ldr	r3, [r7, #20]
 8016cce:	005b      	lsls	r3, r3, #1
 8016cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8016cd4:	693a      	ldr	r2, [r7, #16]
 8016cd6:	4313      	orrs	r3, r2
 8016cd8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	693a      	ldr	r2, [r7, #16]
 8016cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016ce0:	683b      	ldr	r3, [r7, #0]
 8016ce2:	685b      	ldr	r3, [r3, #4]
 8016ce4:	f003 0303 	and.w	r3, r3, #3
 8016ce8:	2b02      	cmp	r3, #2
 8016cea:	d123      	bne.n	8016d34 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8016cec:	697b      	ldr	r3, [r7, #20]
 8016cee:	08da      	lsrs	r2, r3, #3
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	3208      	adds	r2, #8
 8016cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8016cfa:	697b      	ldr	r3, [r7, #20]
 8016cfc:	f003 0307 	and.w	r3, r3, #7
 8016d00:	009b      	lsls	r3, r3, #2
 8016d02:	220f      	movs	r2, #15
 8016d04:	fa02 f303 	lsl.w	r3, r2, r3
 8016d08:	43db      	mvns	r3, r3
 8016d0a:	693a      	ldr	r2, [r7, #16]
 8016d0c:	4013      	ands	r3, r2
 8016d0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8016d10:	683b      	ldr	r3, [r7, #0]
 8016d12:	691a      	ldr	r2, [r3, #16]
 8016d14:	697b      	ldr	r3, [r7, #20]
 8016d16:	f003 0307 	and.w	r3, r3, #7
 8016d1a:	009b      	lsls	r3, r3, #2
 8016d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8016d20:	693a      	ldr	r2, [r7, #16]
 8016d22:	4313      	orrs	r3, r2
 8016d24:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8016d26:	697b      	ldr	r3, [r7, #20]
 8016d28:	08da      	lsrs	r2, r3, #3
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	3208      	adds	r2, #8
 8016d2e:	6939      	ldr	r1, [r7, #16]
 8016d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8016d3a:	697b      	ldr	r3, [r7, #20]
 8016d3c:	005b      	lsls	r3, r3, #1
 8016d3e:	2203      	movs	r2, #3
 8016d40:	fa02 f303 	lsl.w	r3, r2, r3
 8016d44:	43db      	mvns	r3, r3
 8016d46:	693a      	ldr	r2, [r7, #16]
 8016d48:	4013      	ands	r3, r2
 8016d4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8016d4c:	683b      	ldr	r3, [r7, #0]
 8016d4e:	685b      	ldr	r3, [r3, #4]
 8016d50:	f003 0203 	and.w	r2, r3, #3
 8016d54:	697b      	ldr	r3, [r7, #20]
 8016d56:	005b      	lsls	r3, r3, #1
 8016d58:	fa02 f303 	lsl.w	r3, r2, r3
 8016d5c:	693a      	ldr	r2, [r7, #16]
 8016d5e:	4313      	orrs	r3, r2
 8016d60:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	693a      	ldr	r2, [r7, #16]
 8016d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8016d68:	683b      	ldr	r3, [r7, #0]
 8016d6a:	685b      	ldr	r3, [r3, #4]
 8016d6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	f000 80ac 	beq.w	8016ece <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016d76:	4b5f      	ldr	r3, [pc, #380]	@ (8016ef4 <HAL_GPIO_Init+0x330>)
 8016d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016d7a:	4a5e      	ldr	r2, [pc, #376]	@ (8016ef4 <HAL_GPIO_Init+0x330>)
 8016d7c:	f043 0301 	orr.w	r3, r3, #1
 8016d80:	6613      	str	r3, [r2, #96]	@ 0x60
 8016d82:	4b5c      	ldr	r3, [pc, #368]	@ (8016ef4 <HAL_GPIO_Init+0x330>)
 8016d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016d86:	f003 0301 	and.w	r3, r3, #1
 8016d8a:	60bb      	str	r3, [r7, #8]
 8016d8c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8016d8e:	4a5a      	ldr	r2, [pc, #360]	@ (8016ef8 <HAL_GPIO_Init+0x334>)
 8016d90:	697b      	ldr	r3, [r7, #20]
 8016d92:	089b      	lsrs	r3, r3, #2
 8016d94:	3302      	adds	r3, #2
 8016d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8016d9c:	697b      	ldr	r3, [r7, #20]
 8016d9e:	f003 0303 	and.w	r3, r3, #3
 8016da2:	009b      	lsls	r3, r3, #2
 8016da4:	220f      	movs	r2, #15
 8016da6:	fa02 f303 	lsl.w	r3, r2, r3
 8016daa:	43db      	mvns	r3, r3
 8016dac:	693a      	ldr	r2, [r7, #16]
 8016dae:	4013      	ands	r3, r2
 8016db0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8016db8:	d025      	beq.n	8016e06 <HAL_GPIO_Init+0x242>
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	4a4f      	ldr	r2, [pc, #316]	@ (8016efc <HAL_GPIO_Init+0x338>)
 8016dbe:	4293      	cmp	r3, r2
 8016dc0:	d01f      	beq.n	8016e02 <HAL_GPIO_Init+0x23e>
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	4a4e      	ldr	r2, [pc, #312]	@ (8016f00 <HAL_GPIO_Init+0x33c>)
 8016dc6:	4293      	cmp	r3, r2
 8016dc8:	d019      	beq.n	8016dfe <HAL_GPIO_Init+0x23a>
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	4a4d      	ldr	r2, [pc, #308]	@ (8016f04 <HAL_GPIO_Init+0x340>)
 8016dce:	4293      	cmp	r3, r2
 8016dd0:	d013      	beq.n	8016dfa <HAL_GPIO_Init+0x236>
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	4a4c      	ldr	r2, [pc, #304]	@ (8016f08 <HAL_GPIO_Init+0x344>)
 8016dd6:	4293      	cmp	r3, r2
 8016dd8:	d00d      	beq.n	8016df6 <HAL_GPIO_Init+0x232>
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	4a4b      	ldr	r2, [pc, #300]	@ (8016f0c <HAL_GPIO_Init+0x348>)
 8016dde:	4293      	cmp	r3, r2
 8016de0:	d007      	beq.n	8016df2 <HAL_GPIO_Init+0x22e>
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	4a4a      	ldr	r2, [pc, #296]	@ (8016f10 <HAL_GPIO_Init+0x34c>)
 8016de6:	4293      	cmp	r3, r2
 8016de8:	d101      	bne.n	8016dee <HAL_GPIO_Init+0x22a>
 8016dea:	2306      	movs	r3, #6
 8016dec:	e00c      	b.n	8016e08 <HAL_GPIO_Init+0x244>
 8016dee:	2307      	movs	r3, #7
 8016df0:	e00a      	b.n	8016e08 <HAL_GPIO_Init+0x244>
 8016df2:	2305      	movs	r3, #5
 8016df4:	e008      	b.n	8016e08 <HAL_GPIO_Init+0x244>
 8016df6:	2304      	movs	r3, #4
 8016df8:	e006      	b.n	8016e08 <HAL_GPIO_Init+0x244>
 8016dfa:	2303      	movs	r3, #3
 8016dfc:	e004      	b.n	8016e08 <HAL_GPIO_Init+0x244>
 8016dfe:	2302      	movs	r3, #2
 8016e00:	e002      	b.n	8016e08 <HAL_GPIO_Init+0x244>
 8016e02:	2301      	movs	r3, #1
 8016e04:	e000      	b.n	8016e08 <HAL_GPIO_Init+0x244>
 8016e06:	2300      	movs	r3, #0
 8016e08:	697a      	ldr	r2, [r7, #20]
 8016e0a:	f002 0203 	and.w	r2, r2, #3
 8016e0e:	0092      	lsls	r2, r2, #2
 8016e10:	4093      	lsls	r3, r2
 8016e12:	693a      	ldr	r2, [r7, #16]
 8016e14:	4313      	orrs	r3, r2
 8016e16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8016e18:	4937      	ldr	r1, [pc, #220]	@ (8016ef8 <HAL_GPIO_Init+0x334>)
 8016e1a:	697b      	ldr	r3, [r7, #20]
 8016e1c:	089b      	lsrs	r3, r3, #2
 8016e1e:	3302      	adds	r3, #2
 8016e20:	693a      	ldr	r2, [r7, #16]
 8016e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8016e26:	4b3b      	ldr	r3, [pc, #236]	@ (8016f14 <HAL_GPIO_Init+0x350>)
 8016e28:	689b      	ldr	r3, [r3, #8]
 8016e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	43db      	mvns	r3, r3
 8016e30:	693a      	ldr	r2, [r7, #16]
 8016e32:	4013      	ands	r3, r2
 8016e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8016e36:	683b      	ldr	r3, [r7, #0]
 8016e38:	685b      	ldr	r3, [r3, #4]
 8016e3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d003      	beq.n	8016e4a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8016e42:	693a      	ldr	r2, [r7, #16]
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	4313      	orrs	r3, r2
 8016e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8016e4a:	4a32      	ldr	r2, [pc, #200]	@ (8016f14 <HAL_GPIO_Init+0x350>)
 8016e4c:	693b      	ldr	r3, [r7, #16]
 8016e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8016e50:	4b30      	ldr	r3, [pc, #192]	@ (8016f14 <HAL_GPIO_Init+0x350>)
 8016e52:	68db      	ldr	r3, [r3, #12]
 8016e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	43db      	mvns	r3, r3
 8016e5a:	693a      	ldr	r2, [r7, #16]
 8016e5c:	4013      	ands	r3, r2
 8016e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8016e60:	683b      	ldr	r3, [r7, #0]
 8016e62:	685b      	ldr	r3, [r3, #4]
 8016e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d003      	beq.n	8016e74 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8016e6c:	693a      	ldr	r2, [r7, #16]
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	4313      	orrs	r3, r2
 8016e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8016e74:	4a27      	ldr	r2, [pc, #156]	@ (8016f14 <HAL_GPIO_Init+0x350>)
 8016e76:	693b      	ldr	r3, [r7, #16]
 8016e78:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8016e7a:	4b26      	ldr	r3, [pc, #152]	@ (8016f14 <HAL_GPIO_Init+0x350>)
 8016e7c:	685b      	ldr	r3, [r3, #4]
 8016e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	43db      	mvns	r3, r3
 8016e84:	693a      	ldr	r2, [r7, #16]
 8016e86:	4013      	ands	r3, r2
 8016e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8016e8a:	683b      	ldr	r3, [r7, #0]
 8016e8c:	685b      	ldr	r3, [r3, #4]
 8016e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d003      	beq.n	8016e9e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8016e96:	693a      	ldr	r2, [r7, #16]
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	4313      	orrs	r3, r2
 8016e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8016e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8016f14 <HAL_GPIO_Init+0x350>)
 8016ea0:	693b      	ldr	r3, [r7, #16]
 8016ea2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8016ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8016f14 <HAL_GPIO_Init+0x350>)
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	43db      	mvns	r3, r3
 8016eae:	693a      	ldr	r2, [r7, #16]
 8016eb0:	4013      	ands	r3, r2
 8016eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8016eb4:	683b      	ldr	r3, [r7, #0]
 8016eb6:	685b      	ldr	r3, [r3, #4]
 8016eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d003      	beq.n	8016ec8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8016ec0:	693a      	ldr	r2, [r7, #16]
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	4313      	orrs	r3, r2
 8016ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8016ec8:	4a12      	ldr	r2, [pc, #72]	@ (8016f14 <HAL_GPIO_Init+0x350>)
 8016eca:	693b      	ldr	r3, [r7, #16]
 8016ecc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8016ece:	697b      	ldr	r3, [r7, #20]
 8016ed0:	3301      	adds	r3, #1
 8016ed2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8016ed4:	683b      	ldr	r3, [r7, #0]
 8016ed6:	681a      	ldr	r2, [r3, #0]
 8016ed8:	697b      	ldr	r3, [r7, #20]
 8016eda:	fa22 f303 	lsr.w	r3, r2, r3
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	f47f ae78 	bne.w	8016bd4 <HAL_GPIO_Init+0x10>
  }
}
 8016ee4:	bf00      	nop
 8016ee6:	bf00      	nop
 8016ee8:	371c      	adds	r7, #28
 8016eea:	46bd      	mov	sp, r7
 8016eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef0:	4770      	bx	lr
 8016ef2:	bf00      	nop
 8016ef4:	40021000 	.word	0x40021000
 8016ef8:	40010000 	.word	0x40010000
 8016efc:	48000400 	.word	0x48000400
 8016f00:	48000800 	.word	0x48000800
 8016f04:	48000c00 	.word	0x48000c00
 8016f08:	48001000 	.word	0x48001000
 8016f0c:	48001400 	.word	0x48001400
 8016f10:	48001800 	.word	0x48001800
 8016f14:	40010400 	.word	0x40010400

08016f18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8016f18:	b480      	push	{r7}
 8016f1a:	b085      	sub	sp, #20
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
 8016f20:	460b      	mov	r3, r1
 8016f22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	691a      	ldr	r2, [r3, #16]
 8016f28:	887b      	ldrh	r3, [r7, #2]
 8016f2a:	4013      	ands	r3, r2
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d002      	beq.n	8016f36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8016f30:	2301      	movs	r3, #1
 8016f32:	73fb      	strb	r3, [r7, #15]
 8016f34:	e001      	b.n	8016f3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8016f36:	2300      	movs	r3, #0
 8016f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8016f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	3714      	adds	r7, #20
 8016f40:	46bd      	mov	sp, r7
 8016f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f46:	4770      	bx	lr

08016f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016f48:	b480      	push	{r7}
 8016f4a:	b083      	sub	sp, #12
 8016f4c:	af00      	add	r7, sp, #0
 8016f4e:	6078      	str	r0, [r7, #4]
 8016f50:	460b      	mov	r3, r1
 8016f52:	807b      	strh	r3, [r7, #2]
 8016f54:	4613      	mov	r3, r2
 8016f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8016f58:	787b      	ldrb	r3, [r7, #1]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d003      	beq.n	8016f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8016f5e:	887a      	ldrh	r2, [r7, #2]
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8016f64:	e002      	b.n	8016f6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8016f66:	887a      	ldrh	r2, [r7, #2]
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8016f6c:	bf00      	nop
 8016f6e:	370c      	adds	r7, #12
 8016f70:	46bd      	mov	sp, r7
 8016f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f76:	4770      	bx	lr

08016f78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8016f78:	b480      	push	{r7}
 8016f7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8016f7c:	4b04      	ldr	r3, [pc, #16]	@ (8016f90 <HAL_PWREx_GetVoltageRange+0x18>)
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8016f84:	4618      	mov	r0, r3
 8016f86:	46bd      	mov	sp, r7
 8016f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f8c:	4770      	bx	lr
 8016f8e:	bf00      	nop
 8016f90:	40007000 	.word	0x40007000

08016f94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8016f94:	b480      	push	{r7}
 8016f96:	b085      	sub	sp, #20
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016fa2:	d130      	bne.n	8017006 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8016fa4:	4b23      	ldr	r3, [pc, #140]	@ (8017034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8016fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016fb0:	d038      	beq.n	8017024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8016fb2:	4b20      	ldr	r3, [pc, #128]	@ (8017034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8016fba:	4a1e      	ldr	r2, [pc, #120]	@ (8017034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8016fbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8016fc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8016fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8017038 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	2232      	movs	r2, #50	@ 0x32
 8016fc8:	fb02 f303 	mul.w	r3, r2, r3
 8016fcc:	4a1b      	ldr	r2, [pc, #108]	@ (801703c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8016fce:	fba2 2303 	umull	r2, r3, r2, r3
 8016fd2:	0c9b      	lsrs	r3, r3, #18
 8016fd4:	3301      	adds	r3, #1
 8016fd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8016fd8:	e002      	b.n	8016fe0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	3b01      	subs	r3, #1
 8016fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8016fe0:	4b14      	ldr	r3, [pc, #80]	@ (8017034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8016fe2:	695b      	ldr	r3, [r3, #20]
 8016fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016fec:	d102      	bne.n	8016ff4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d1f2      	bne.n	8016fda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8016ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8017034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8016ff6:	695b      	ldr	r3, [r3, #20]
 8016ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017000:	d110      	bne.n	8017024 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8017002:	2303      	movs	r3, #3
 8017004:	e00f      	b.n	8017026 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8017006:	4b0b      	ldr	r3, [pc, #44]	@ (8017034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801700e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017012:	d007      	beq.n	8017024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8017014:	4b07      	ldr	r3, [pc, #28]	@ (8017034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 801701c:	4a05      	ldr	r2, [pc, #20]	@ (8017034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801701e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8017022:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8017024:	2300      	movs	r3, #0
}
 8017026:	4618      	mov	r0, r3
 8017028:	3714      	adds	r7, #20
 801702a:	46bd      	mov	sp, r7
 801702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017030:	4770      	bx	lr
 8017032:	bf00      	nop
 8017034:	40007000 	.word	0x40007000
 8017038:	20000384 	.word	0x20000384
 801703c:	431bde83 	.word	0x431bde83

08017040 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8017040:	b580      	push	{r7, lr}
 8017042:	b088      	sub	sp, #32
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d101      	bne.n	8017052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801704e:	2301      	movs	r3, #1
 8017050:	e3ca      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017052:	4b97      	ldr	r3, [pc, #604]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 8017054:	689b      	ldr	r3, [r3, #8]
 8017056:	f003 030c 	and.w	r3, r3, #12
 801705a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801705c:	4b94      	ldr	r3, [pc, #592]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 801705e:	68db      	ldr	r3, [r3, #12]
 8017060:	f003 0303 	and.w	r3, r3, #3
 8017064:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	f003 0310 	and.w	r3, r3, #16
 801706e:	2b00      	cmp	r3, #0
 8017070:	f000 80e4 	beq.w	801723c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8017074:	69bb      	ldr	r3, [r7, #24]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d007      	beq.n	801708a <HAL_RCC_OscConfig+0x4a>
 801707a:	69bb      	ldr	r3, [r7, #24]
 801707c:	2b0c      	cmp	r3, #12
 801707e:	f040 808b 	bne.w	8017198 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8017082:	697b      	ldr	r3, [r7, #20]
 8017084:	2b01      	cmp	r3, #1
 8017086:	f040 8087 	bne.w	8017198 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801708a:	4b89      	ldr	r3, [pc, #548]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	f003 0302 	and.w	r3, r3, #2
 8017092:	2b00      	cmp	r3, #0
 8017094:	d005      	beq.n	80170a2 <HAL_RCC_OscConfig+0x62>
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	699b      	ldr	r3, [r3, #24]
 801709a:	2b00      	cmp	r3, #0
 801709c:	d101      	bne.n	80170a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 801709e:	2301      	movs	r3, #1
 80170a0:	e3a2      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	6a1a      	ldr	r2, [r3, #32]
 80170a6:	4b82      	ldr	r3, [pc, #520]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	f003 0308 	and.w	r3, r3, #8
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d004      	beq.n	80170bc <HAL_RCC_OscConfig+0x7c>
 80170b2:	4b7f      	ldr	r3, [pc, #508]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80170ba:	e005      	b.n	80170c8 <HAL_RCC_OscConfig+0x88>
 80170bc:	4b7c      	ldr	r3, [pc, #496]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 80170be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80170c2:	091b      	lsrs	r3, r3, #4
 80170c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80170c8:	4293      	cmp	r3, r2
 80170ca:	d223      	bcs.n	8017114 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	6a1b      	ldr	r3, [r3, #32]
 80170d0:	4618      	mov	r0, r3
 80170d2:	f000 fd55 	bl	8017b80 <RCC_SetFlashLatencyFromMSIRange>
 80170d6:	4603      	mov	r3, r0
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d001      	beq.n	80170e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80170dc:	2301      	movs	r3, #1
 80170de:	e383      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80170e0:	4b73      	ldr	r3, [pc, #460]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	4a72      	ldr	r2, [pc, #456]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 80170e6:	f043 0308 	orr.w	r3, r3, #8
 80170ea:	6013      	str	r3, [r2, #0]
 80170ec:	4b70      	ldr	r3, [pc, #448]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	6a1b      	ldr	r3, [r3, #32]
 80170f8:	496d      	ldr	r1, [pc, #436]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 80170fa:	4313      	orrs	r3, r2
 80170fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80170fe:	4b6c      	ldr	r3, [pc, #432]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 8017100:	685b      	ldr	r3, [r3, #4]
 8017102:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	69db      	ldr	r3, [r3, #28]
 801710a:	021b      	lsls	r3, r3, #8
 801710c:	4968      	ldr	r1, [pc, #416]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 801710e:	4313      	orrs	r3, r2
 8017110:	604b      	str	r3, [r1, #4]
 8017112:	e025      	b.n	8017160 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017114:	4b66      	ldr	r3, [pc, #408]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	4a65      	ldr	r2, [pc, #404]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 801711a:	f043 0308 	orr.w	r3, r3, #8
 801711e:	6013      	str	r3, [r2, #0]
 8017120:	4b63      	ldr	r3, [pc, #396]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	6a1b      	ldr	r3, [r3, #32]
 801712c:	4960      	ldr	r1, [pc, #384]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 801712e:	4313      	orrs	r3, r2
 8017130:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017132:	4b5f      	ldr	r3, [pc, #380]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 8017134:	685b      	ldr	r3, [r3, #4]
 8017136:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	69db      	ldr	r3, [r3, #28]
 801713e:	021b      	lsls	r3, r3, #8
 8017140:	495b      	ldr	r1, [pc, #364]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 8017142:	4313      	orrs	r3, r2
 8017144:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8017146:	69bb      	ldr	r3, [r7, #24]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d109      	bne.n	8017160 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	6a1b      	ldr	r3, [r3, #32]
 8017150:	4618      	mov	r0, r3
 8017152:	f000 fd15 	bl	8017b80 <RCC_SetFlashLatencyFromMSIRange>
 8017156:	4603      	mov	r3, r0
 8017158:	2b00      	cmp	r3, #0
 801715a:	d001      	beq.n	8017160 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 801715c:	2301      	movs	r3, #1
 801715e:	e343      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8017160:	f000 fc4a 	bl	80179f8 <HAL_RCC_GetSysClockFreq>
 8017164:	4602      	mov	r2, r0
 8017166:	4b52      	ldr	r3, [pc, #328]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 8017168:	689b      	ldr	r3, [r3, #8]
 801716a:	091b      	lsrs	r3, r3, #4
 801716c:	f003 030f 	and.w	r3, r3, #15
 8017170:	4950      	ldr	r1, [pc, #320]	@ (80172b4 <HAL_RCC_OscConfig+0x274>)
 8017172:	5ccb      	ldrb	r3, [r1, r3]
 8017174:	f003 031f 	and.w	r3, r3, #31
 8017178:	fa22 f303 	lsr.w	r3, r2, r3
 801717c:	4a4e      	ldr	r2, [pc, #312]	@ (80172b8 <HAL_RCC_OscConfig+0x278>)
 801717e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8017180:	4b4e      	ldr	r3, [pc, #312]	@ (80172bc <HAL_RCC_OscConfig+0x27c>)
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	4618      	mov	r0, r3
 8017186:	f7fd fcd1 	bl	8014b2c <HAL_InitTick>
 801718a:	4603      	mov	r3, r0
 801718c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 801718e:	7bfb      	ldrb	r3, [r7, #15]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d052      	beq.n	801723a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8017194:	7bfb      	ldrb	r3, [r7, #15]
 8017196:	e327      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	699b      	ldr	r3, [r3, #24]
 801719c:	2b00      	cmp	r3, #0
 801719e:	d032      	beq.n	8017206 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80171a0:	4b43      	ldr	r3, [pc, #268]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	4a42      	ldr	r2, [pc, #264]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 80171a6:	f043 0301 	orr.w	r3, r3, #1
 80171aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80171ac:	f7fd fd0e 	bl	8014bcc <HAL_GetTick>
 80171b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80171b2:	e008      	b.n	80171c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80171b4:	f7fd fd0a 	bl	8014bcc <HAL_GetTick>
 80171b8:	4602      	mov	r2, r0
 80171ba:	693b      	ldr	r3, [r7, #16]
 80171bc:	1ad3      	subs	r3, r2, r3
 80171be:	2b02      	cmp	r3, #2
 80171c0:	d901      	bls.n	80171c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80171c2:	2303      	movs	r3, #3
 80171c4:	e310      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80171c6:	4b3a      	ldr	r3, [pc, #232]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	f003 0302 	and.w	r3, r3, #2
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d0f0      	beq.n	80171b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80171d2:	4b37      	ldr	r3, [pc, #220]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	4a36      	ldr	r2, [pc, #216]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 80171d8:	f043 0308 	orr.w	r3, r3, #8
 80171dc:	6013      	str	r3, [r2, #0]
 80171de:	4b34      	ldr	r3, [pc, #208]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	6a1b      	ldr	r3, [r3, #32]
 80171ea:	4931      	ldr	r1, [pc, #196]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 80171ec:	4313      	orrs	r3, r2
 80171ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80171f0:	4b2f      	ldr	r3, [pc, #188]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 80171f2:	685b      	ldr	r3, [r3, #4]
 80171f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	69db      	ldr	r3, [r3, #28]
 80171fc:	021b      	lsls	r3, r3, #8
 80171fe:	492c      	ldr	r1, [pc, #176]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 8017200:	4313      	orrs	r3, r2
 8017202:	604b      	str	r3, [r1, #4]
 8017204:	e01a      	b.n	801723c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8017206:	4b2a      	ldr	r3, [pc, #168]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	4a29      	ldr	r2, [pc, #164]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 801720c:	f023 0301 	bic.w	r3, r3, #1
 8017210:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8017212:	f7fd fcdb 	bl	8014bcc <HAL_GetTick>
 8017216:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8017218:	e008      	b.n	801722c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801721a:	f7fd fcd7 	bl	8014bcc <HAL_GetTick>
 801721e:	4602      	mov	r2, r0
 8017220:	693b      	ldr	r3, [r7, #16]
 8017222:	1ad3      	subs	r3, r2, r3
 8017224:	2b02      	cmp	r3, #2
 8017226:	d901      	bls.n	801722c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8017228:	2303      	movs	r3, #3
 801722a:	e2dd      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801722c:	4b20      	ldr	r3, [pc, #128]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	f003 0302 	and.w	r3, r3, #2
 8017234:	2b00      	cmp	r3, #0
 8017236:	d1f0      	bne.n	801721a <HAL_RCC_OscConfig+0x1da>
 8017238:	e000      	b.n	801723c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801723a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	f003 0301 	and.w	r3, r3, #1
 8017244:	2b00      	cmp	r3, #0
 8017246:	d074      	beq.n	8017332 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8017248:	69bb      	ldr	r3, [r7, #24]
 801724a:	2b08      	cmp	r3, #8
 801724c:	d005      	beq.n	801725a <HAL_RCC_OscConfig+0x21a>
 801724e:	69bb      	ldr	r3, [r7, #24]
 8017250:	2b0c      	cmp	r3, #12
 8017252:	d10e      	bne.n	8017272 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8017254:	697b      	ldr	r3, [r7, #20]
 8017256:	2b03      	cmp	r3, #3
 8017258:	d10b      	bne.n	8017272 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801725a:	4b15      	ldr	r3, [pc, #84]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017262:	2b00      	cmp	r3, #0
 8017264:	d064      	beq.n	8017330 <HAL_RCC_OscConfig+0x2f0>
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	685b      	ldr	r3, [r3, #4]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d160      	bne.n	8017330 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 801726e:	2301      	movs	r3, #1
 8017270:	e2ba      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	685b      	ldr	r3, [r3, #4]
 8017276:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801727a:	d106      	bne.n	801728a <HAL_RCC_OscConfig+0x24a>
 801727c:	4b0c      	ldr	r3, [pc, #48]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	4a0b      	ldr	r2, [pc, #44]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 8017282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8017286:	6013      	str	r3, [r2, #0]
 8017288:	e026      	b.n	80172d8 <HAL_RCC_OscConfig+0x298>
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	685b      	ldr	r3, [r3, #4]
 801728e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8017292:	d115      	bne.n	80172c0 <HAL_RCC_OscConfig+0x280>
 8017294:	4b06      	ldr	r3, [pc, #24]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	4a05      	ldr	r2, [pc, #20]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 801729a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801729e:	6013      	str	r3, [r2, #0]
 80172a0:	4b03      	ldr	r3, [pc, #12]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	4a02      	ldr	r2, [pc, #8]	@ (80172b0 <HAL_RCC_OscConfig+0x270>)
 80172a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80172aa:	6013      	str	r3, [r2, #0]
 80172ac:	e014      	b.n	80172d8 <HAL_RCC_OscConfig+0x298>
 80172ae:	bf00      	nop
 80172b0:	40021000 	.word	0x40021000
 80172b4:	0801a810 	.word	0x0801a810
 80172b8:	20000384 	.word	0x20000384
 80172bc:	20000388 	.word	0x20000388
 80172c0:	4ba0      	ldr	r3, [pc, #640]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	4a9f      	ldr	r2, [pc, #636]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 80172c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80172ca:	6013      	str	r3, [r2, #0]
 80172cc:	4b9d      	ldr	r3, [pc, #628]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	4a9c      	ldr	r2, [pc, #624]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 80172d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80172d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	685b      	ldr	r3, [r3, #4]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d013      	beq.n	8017308 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80172e0:	f7fd fc74 	bl	8014bcc <HAL_GetTick>
 80172e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80172e6:	e008      	b.n	80172fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80172e8:	f7fd fc70 	bl	8014bcc <HAL_GetTick>
 80172ec:	4602      	mov	r2, r0
 80172ee:	693b      	ldr	r3, [r7, #16]
 80172f0:	1ad3      	subs	r3, r2, r3
 80172f2:	2b64      	cmp	r3, #100	@ 0x64
 80172f4:	d901      	bls.n	80172fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80172f6:	2303      	movs	r3, #3
 80172f8:	e276      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80172fa:	4b92      	ldr	r3, [pc, #584]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017302:	2b00      	cmp	r3, #0
 8017304:	d0f0      	beq.n	80172e8 <HAL_RCC_OscConfig+0x2a8>
 8017306:	e014      	b.n	8017332 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017308:	f7fd fc60 	bl	8014bcc <HAL_GetTick>
 801730c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801730e:	e008      	b.n	8017322 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8017310:	f7fd fc5c 	bl	8014bcc <HAL_GetTick>
 8017314:	4602      	mov	r2, r0
 8017316:	693b      	ldr	r3, [r7, #16]
 8017318:	1ad3      	subs	r3, r2, r3
 801731a:	2b64      	cmp	r3, #100	@ 0x64
 801731c:	d901      	bls.n	8017322 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801731e:	2303      	movs	r3, #3
 8017320:	e262      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8017322:	4b88      	ldr	r3, [pc, #544]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801732a:	2b00      	cmp	r3, #0
 801732c:	d1f0      	bne.n	8017310 <HAL_RCC_OscConfig+0x2d0>
 801732e:	e000      	b.n	8017332 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	f003 0302 	and.w	r3, r3, #2
 801733a:	2b00      	cmp	r3, #0
 801733c:	d060      	beq.n	8017400 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 801733e:	69bb      	ldr	r3, [r7, #24]
 8017340:	2b04      	cmp	r3, #4
 8017342:	d005      	beq.n	8017350 <HAL_RCC_OscConfig+0x310>
 8017344:	69bb      	ldr	r3, [r7, #24]
 8017346:	2b0c      	cmp	r3, #12
 8017348:	d119      	bne.n	801737e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 801734a:	697b      	ldr	r3, [r7, #20]
 801734c:	2b02      	cmp	r3, #2
 801734e:	d116      	bne.n	801737e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8017350:	4b7c      	ldr	r3, [pc, #496]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017358:	2b00      	cmp	r3, #0
 801735a:	d005      	beq.n	8017368 <HAL_RCC_OscConfig+0x328>
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	68db      	ldr	r3, [r3, #12]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d101      	bne.n	8017368 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8017364:	2301      	movs	r3, #1
 8017366:	e23f      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017368:	4b76      	ldr	r3, [pc, #472]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 801736a:	685b      	ldr	r3, [r3, #4]
 801736c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	691b      	ldr	r3, [r3, #16]
 8017374:	061b      	lsls	r3, r3, #24
 8017376:	4973      	ldr	r1, [pc, #460]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 8017378:	4313      	orrs	r3, r2
 801737a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801737c:	e040      	b.n	8017400 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	68db      	ldr	r3, [r3, #12]
 8017382:	2b00      	cmp	r3, #0
 8017384:	d023      	beq.n	80173ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8017386:	4b6f      	ldr	r3, [pc, #444]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	4a6e      	ldr	r2, [pc, #440]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 801738c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017392:	f7fd fc1b 	bl	8014bcc <HAL_GetTick>
 8017396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8017398:	e008      	b.n	80173ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801739a:	f7fd fc17 	bl	8014bcc <HAL_GetTick>
 801739e:	4602      	mov	r2, r0
 80173a0:	693b      	ldr	r3, [r7, #16]
 80173a2:	1ad3      	subs	r3, r2, r3
 80173a4:	2b02      	cmp	r3, #2
 80173a6:	d901      	bls.n	80173ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80173a8:	2303      	movs	r3, #3
 80173aa:	e21d      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80173ac:	4b65      	ldr	r3, [pc, #404]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d0f0      	beq.n	801739a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80173b8:	4b62      	ldr	r3, [pc, #392]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 80173ba:	685b      	ldr	r3, [r3, #4]
 80173bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	691b      	ldr	r3, [r3, #16]
 80173c4:	061b      	lsls	r3, r3, #24
 80173c6:	495f      	ldr	r1, [pc, #380]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 80173c8:	4313      	orrs	r3, r2
 80173ca:	604b      	str	r3, [r1, #4]
 80173cc:	e018      	b.n	8017400 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80173ce:	4b5d      	ldr	r3, [pc, #372]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	4a5c      	ldr	r2, [pc, #368]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 80173d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80173d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80173da:	f7fd fbf7 	bl	8014bcc <HAL_GetTick>
 80173de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80173e0:	e008      	b.n	80173f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80173e2:	f7fd fbf3 	bl	8014bcc <HAL_GetTick>
 80173e6:	4602      	mov	r2, r0
 80173e8:	693b      	ldr	r3, [r7, #16]
 80173ea:	1ad3      	subs	r3, r2, r3
 80173ec:	2b02      	cmp	r3, #2
 80173ee:	d901      	bls.n	80173f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80173f0:	2303      	movs	r3, #3
 80173f2:	e1f9      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80173f4:	4b53      	ldr	r3, [pc, #332]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d1f0      	bne.n	80173e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	f003 0308 	and.w	r3, r3, #8
 8017408:	2b00      	cmp	r3, #0
 801740a:	d03c      	beq.n	8017486 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	695b      	ldr	r3, [r3, #20]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d01c      	beq.n	801744e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017414:	4b4b      	ldr	r3, [pc, #300]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 8017416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801741a:	4a4a      	ldr	r2, [pc, #296]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 801741c:	f043 0301 	orr.w	r3, r3, #1
 8017420:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017424:	f7fd fbd2 	bl	8014bcc <HAL_GetTick>
 8017428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801742a:	e008      	b.n	801743e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801742c:	f7fd fbce 	bl	8014bcc <HAL_GetTick>
 8017430:	4602      	mov	r2, r0
 8017432:	693b      	ldr	r3, [r7, #16]
 8017434:	1ad3      	subs	r3, r2, r3
 8017436:	2b02      	cmp	r3, #2
 8017438:	d901      	bls.n	801743e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 801743a:	2303      	movs	r3, #3
 801743c:	e1d4      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801743e:	4b41      	ldr	r3, [pc, #260]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 8017440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8017444:	f003 0302 	and.w	r3, r3, #2
 8017448:	2b00      	cmp	r3, #0
 801744a:	d0ef      	beq.n	801742c <HAL_RCC_OscConfig+0x3ec>
 801744c:	e01b      	b.n	8017486 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801744e:	4b3d      	ldr	r3, [pc, #244]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 8017450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8017454:	4a3b      	ldr	r2, [pc, #236]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 8017456:	f023 0301 	bic.w	r3, r3, #1
 801745a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801745e:	f7fd fbb5 	bl	8014bcc <HAL_GetTick>
 8017462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8017464:	e008      	b.n	8017478 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8017466:	f7fd fbb1 	bl	8014bcc <HAL_GetTick>
 801746a:	4602      	mov	r2, r0
 801746c:	693b      	ldr	r3, [r7, #16]
 801746e:	1ad3      	subs	r3, r2, r3
 8017470:	2b02      	cmp	r3, #2
 8017472:	d901      	bls.n	8017478 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8017474:	2303      	movs	r3, #3
 8017476:	e1b7      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8017478:	4b32      	ldr	r3, [pc, #200]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 801747a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801747e:	f003 0302 	and.w	r3, r3, #2
 8017482:	2b00      	cmp	r3, #0
 8017484:	d1ef      	bne.n	8017466 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	f003 0304 	and.w	r3, r3, #4
 801748e:	2b00      	cmp	r3, #0
 8017490:	f000 80a6 	beq.w	80175e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017494:	2300      	movs	r3, #0
 8017496:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8017498:	4b2a      	ldr	r3, [pc, #168]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 801749a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801749c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d10d      	bne.n	80174c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80174a4:	4b27      	ldr	r3, [pc, #156]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 80174a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80174a8:	4a26      	ldr	r2, [pc, #152]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 80174aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80174ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80174b0:	4b24      	ldr	r3, [pc, #144]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 80174b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80174b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80174b8:	60bb      	str	r3, [r7, #8]
 80174ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80174bc:	2301      	movs	r3, #1
 80174be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80174c0:	4b21      	ldr	r3, [pc, #132]	@ (8017548 <HAL_RCC_OscConfig+0x508>)
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d118      	bne.n	80174fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80174cc:	4b1e      	ldr	r3, [pc, #120]	@ (8017548 <HAL_RCC_OscConfig+0x508>)
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	4a1d      	ldr	r2, [pc, #116]	@ (8017548 <HAL_RCC_OscConfig+0x508>)
 80174d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80174d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80174d8:	f7fd fb78 	bl	8014bcc <HAL_GetTick>
 80174dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80174de:	e008      	b.n	80174f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80174e0:	f7fd fb74 	bl	8014bcc <HAL_GetTick>
 80174e4:	4602      	mov	r2, r0
 80174e6:	693b      	ldr	r3, [r7, #16]
 80174e8:	1ad3      	subs	r3, r2, r3
 80174ea:	2b02      	cmp	r3, #2
 80174ec:	d901      	bls.n	80174f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80174ee:	2303      	movs	r3, #3
 80174f0:	e17a      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80174f2:	4b15      	ldr	r3, [pc, #84]	@ (8017548 <HAL_RCC_OscConfig+0x508>)
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d0f0      	beq.n	80174e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	689b      	ldr	r3, [r3, #8]
 8017502:	2b01      	cmp	r3, #1
 8017504:	d108      	bne.n	8017518 <HAL_RCC_OscConfig+0x4d8>
 8017506:	4b0f      	ldr	r3, [pc, #60]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 8017508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801750c:	4a0d      	ldr	r2, [pc, #52]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 801750e:	f043 0301 	orr.w	r3, r3, #1
 8017512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8017516:	e029      	b.n	801756c <HAL_RCC_OscConfig+0x52c>
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	689b      	ldr	r3, [r3, #8]
 801751c:	2b05      	cmp	r3, #5
 801751e:	d115      	bne.n	801754c <HAL_RCC_OscConfig+0x50c>
 8017520:	4b08      	ldr	r3, [pc, #32]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 8017522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017526:	4a07      	ldr	r2, [pc, #28]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 8017528:	f043 0304 	orr.w	r3, r3, #4
 801752c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8017530:	4b04      	ldr	r3, [pc, #16]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 8017532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017536:	4a03      	ldr	r2, [pc, #12]	@ (8017544 <HAL_RCC_OscConfig+0x504>)
 8017538:	f043 0301 	orr.w	r3, r3, #1
 801753c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8017540:	e014      	b.n	801756c <HAL_RCC_OscConfig+0x52c>
 8017542:	bf00      	nop
 8017544:	40021000 	.word	0x40021000
 8017548:	40007000 	.word	0x40007000
 801754c:	4b9c      	ldr	r3, [pc, #624]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 801754e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017552:	4a9b      	ldr	r2, [pc, #620]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 8017554:	f023 0301 	bic.w	r3, r3, #1
 8017558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 801755c:	4b98      	ldr	r3, [pc, #608]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 801755e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017562:	4a97      	ldr	r2, [pc, #604]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 8017564:	f023 0304 	bic.w	r3, r3, #4
 8017568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	689b      	ldr	r3, [r3, #8]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d016      	beq.n	80175a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017574:	f7fd fb2a 	bl	8014bcc <HAL_GetTick>
 8017578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801757a:	e00a      	b.n	8017592 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801757c:	f7fd fb26 	bl	8014bcc <HAL_GetTick>
 8017580:	4602      	mov	r2, r0
 8017582:	693b      	ldr	r3, [r7, #16]
 8017584:	1ad3      	subs	r3, r2, r3
 8017586:	f241 3288 	movw	r2, #5000	@ 0x1388
 801758a:	4293      	cmp	r3, r2
 801758c:	d901      	bls.n	8017592 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 801758e:	2303      	movs	r3, #3
 8017590:	e12a      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017592:	4b8b      	ldr	r3, [pc, #556]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 8017594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017598:	f003 0302 	and.w	r3, r3, #2
 801759c:	2b00      	cmp	r3, #0
 801759e:	d0ed      	beq.n	801757c <HAL_RCC_OscConfig+0x53c>
 80175a0:	e015      	b.n	80175ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80175a2:	f7fd fb13 	bl	8014bcc <HAL_GetTick>
 80175a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80175a8:	e00a      	b.n	80175c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80175aa:	f7fd fb0f 	bl	8014bcc <HAL_GetTick>
 80175ae:	4602      	mov	r2, r0
 80175b0:	693b      	ldr	r3, [r7, #16]
 80175b2:	1ad3      	subs	r3, r2, r3
 80175b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80175b8:	4293      	cmp	r3, r2
 80175ba:	d901      	bls.n	80175c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80175bc:	2303      	movs	r3, #3
 80175be:	e113      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80175c0:	4b7f      	ldr	r3, [pc, #508]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 80175c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80175c6:	f003 0302 	and.w	r3, r3, #2
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d1ed      	bne.n	80175aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80175ce:	7ffb      	ldrb	r3, [r7, #31]
 80175d0:	2b01      	cmp	r3, #1
 80175d2:	d105      	bne.n	80175e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80175d4:	4b7a      	ldr	r3, [pc, #488]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 80175d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80175d8:	4a79      	ldr	r2, [pc, #484]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 80175da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80175de:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	f000 80fe 	beq.w	80177e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80175ee:	2b02      	cmp	r3, #2
 80175f0:	f040 80d0 	bne.w	8017794 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80175f4:	4b72      	ldr	r3, [pc, #456]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 80175f6:	68db      	ldr	r3, [r3, #12]
 80175f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80175fa:	697b      	ldr	r3, [r7, #20]
 80175fc:	f003 0203 	and.w	r2, r3, #3
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017604:	429a      	cmp	r2, r3
 8017606:	d130      	bne.n	801766a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8017608:	697b      	ldr	r3, [r7, #20]
 801760a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017612:	3b01      	subs	r3, #1
 8017614:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8017616:	429a      	cmp	r2, r3
 8017618:	d127      	bne.n	801766a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801761a:	697b      	ldr	r3, [r7, #20]
 801761c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017624:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8017626:	429a      	cmp	r2, r3
 8017628:	d11f      	bne.n	801766a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 801762a:	697b      	ldr	r3, [r7, #20]
 801762c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017630:	687a      	ldr	r2, [r7, #4]
 8017632:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8017634:	2a07      	cmp	r2, #7
 8017636:	bf14      	ite	ne
 8017638:	2201      	movne	r2, #1
 801763a:	2200      	moveq	r2, #0
 801763c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801763e:	4293      	cmp	r3, r2
 8017640:	d113      	bne.n	801766a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8017642:	697b      	ldr	r3, [r7, #20]
 8017644:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801764c:	085b      	lsrs	r3, r3, #1
 801764e:	3b01      	subs	r3, #1
 8017650:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8017652:	429a      	cmp	r2, r3
 8017654:	d109      	bne.n	801766a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8017656:	697b      	ldr	r3, [r7, #20]
 8017658:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017660:	085b      	lsrs	r3, r3, #1
 8017662:	3b01      	subs	r3, #1
 8017664:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8017666:	429a      	cmp	r2, r3
 8017668:	d06e      	beq.n	8017748 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801766a:	69bb      	ldr	r3, [r7, #24]
 801766c:	2b0c      	cmp	r3, #12
 801766e:	d069      	beq.n	8017744 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8017670:	4b53      	ldr	r3, [pc, #332]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8017678:	2b00      	cmp	r3, #0
 801767a:	d105      	bne.n	8017688 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 801767c:	4b50      	ldr	r3, [pc, #320]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017684:	2b00      	cmp	r3, #0
 8017686:	d001      	beq.n	801768c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8017688:	2301      	movs	r3, #1
 801768a:	e0ad      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801768c:	4b4c      	ldr	r3, [pc, #304]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	4a4b      	ldr	r2, [pc, #300]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 8017692:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8017696:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8017698:	f7fd fa98 	bl	8014bcc <HAL_GetTick>
 801769c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801769e:	e008      	b.n	80176b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80176a0:	f7fd fa94 	bl	8014bcc <HAL_GetTick>
 80176a4:	4602      	mov	r2, r0
 80176a6:	693b      	ldr	r3, [r7, #16]
 80176a8:	1ad3      	subs	r3, r2, r3
 80176aa:	2b02      	cmp	r3, #2
 80176ac:	d901      	bls.n	80176b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80176ae:	2303      	movs	r3, #3
 80176b0:	e09a      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80176b2:	4b43      	ldr	r3, [pc, #268]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d1f0      	bne.n	80176a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80176be:	4b40      	ldr	r3, [pc, #256]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 80176c0:	68da      	ldr	r2, [r3, #12]
 80176c2:	4b40      	ldr	r3, [pc, #256]	@ (80177c4 <HAL_RCC_OscConfig+0x784>)
 80176c4:	4013      	ands	r3, r2
 80176c6:	687a      	ldr	r2, [r7, #4]
 80176c8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80176ca:	687a      	ldr	r2, [r7, #4]
 80176cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80176ce:	3a01      	subs	r2, #1
 80176d0:	0112      	lsls	r2, r2, #4
 80176d2:	4311      	orrs	r1, r2
 80176d4:	687a      	ldr	r2, [r7, #4]
 80176d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80176d8:	0212      	lsls	r2, r2, #8
 80176da:	4311      	orrs	r1, r2
 80176dc:	687a      	ldr	r2, [r7, #4]
 80176de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80176e0:	0852      	lsrs	r2, r2, #1
 80176e2:	3a01      	subs	r2, #1
 80176e4:	0552      	lsls	r2, r2, #21
 80176e6:	4311      	orrs	r1, r2
 80176e8:	687a      	ldr	r2, [r7, #4]
 80176ea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80176ec:	0852      	lsrs	r2, r2, #1
 80176ee:	3a01      	subs	r2, #1
 80176f0:	0652      	lsls	r2, r2, #25
 80176f2:	4311      	orrs	r1, r2
 80176f4:	687a      	ldr	r2, [r7, #4]
 80176f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80176f8:	0912      	lsrs	r2, r2, #4
 80176fa:	0452      	lsls	r2, r2, #17
 80176fc:	430a      	orrs	r2, r1
 80176fe:	4930      	ldr	r1, [pc, #192]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 8017700:	4313      	orrs	r3, r2
 8017702:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8017704:	4b2e      	ldr	r3, [pc, #184]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	4a2d      	ldr	r2, [pc, #180]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 801770a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801770e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8017710:	4b2b      	ldr	r3, [pc, #172]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 8017712:	68db      	ldr	r3, [r3, #12]
 8017714:	4a2a      	ldr	r2, [pc, #168]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 8017716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801771a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801771c:	f7fd fa56 	bl	8014bcc <HAL_GetTick>
 8017720:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017722:	e008      	b.n	8017736 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017724:	f7fd fa52 	bl	8014bcc <HAL_GetTick>
 8017728:	4602      	mov	r2, r0
 801772a:	693b      	ldr	r3, [r7, #16]
 801772c:	1ad3      	subs	r3, r2, r3
 801772e:	2b02      	cmp	r3, #2
 8017730:	d901      	bls.n	8017736 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8017732:	2303      	movs	r3, #3
 8017734:	e058      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017736:	4b22      	ldr	r3, [pc, #136]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801773e:	2b00      	cmp	r3, #0
 8017740:	d0f0      	beq.n	8017724 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8017742:	e050      	b.n	80177e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8017744:	2301      	movs	r3, #1
 8017746:	e04f      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017748:	4b1d      	ldr	r3, [pc, #116]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017750:	2b00      	cmp	r3, #0
 8017752:	d148      	bne.n	80177e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8017754:	4b1a      	ldr	r3, [pc, #104]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	4a19      	ldr	r2, [pc, #100]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 801775a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801775e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8017760:	4b17      	ldr	r3, [pc, #92]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 8017762:	68db      	ldr	r3, [r3, #12]
 8017764:	4a16      	ldr	r2, [pc, #88]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 8017766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801776a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801776c:	f7fd fa2e 	bl	8014bcc <HAL_GetTick>
 8017770:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017772:	e008      	b.n	8017786 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017774:	f7fd fa2a 	bl	8014bcc <HAL_GetTick>
 8017778:	4602      	mov	r2, r0
 801777a:	693b      	ldr	r3, [r7, #16]
 801777c:	1ad3      	subs	r3, r2, r3
 801777e:	2b02      	cmp	r3, #2
 8017780:	d901      	bls.n	8017786 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8017782:	2303      	movs	r3, #3
 8017784:	e030      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017786:	4b0e      	ldr	r3, [pc, #56]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801778e:	2b00      	cmp	r3, #0
 8017790:	d0f0      	beq.n	8017774 <HAL_RCC_OscConfig+0x734>
 8017792:	e028      	b.n	80177e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8017794:	69bb      	ldr	r3, [r7, #24]
 8017796:	2b0c      	cmp	r3, #12
 8017798:	d023      	beq.n	80177e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801779a:	4b09      	ldr	r3, [pc, #36]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	4a08      	ldr	r2, [pc, #32]	@ (80177c0 <HAL_RCC_OscConfig+0x780>)
 80177a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80177a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80177a6:	f7fd fa11 	bl	8014bcc <HAL_GetTick>
 80177aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80177ac:	e00c      	b.n	80177c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80177ae:	f7fd fa0d 	bl	8014bcc <HAL_GetTick>
 80177b2:	4602      	mov	r2, r0
 80177b4:	693b      	ldr	r3, [r7, #16]
 80177b6:	1ad3      	subs	r3, r2, r3
 80177b8:	2b02      	cmp	r3, #2
 80177ba:	d905      	bls.n	80177c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80177bc:	2303      	movs	r3, #3
 80177be:	e013      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
 80177c0:	40021000 	.word	0x40021000
 80177c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80177c8:	4b09      	ldr	r3, [pc, #36]	@ (80177f0 <HAL_RCC_OscConfig+0x7b0>)
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d1ec      	bne.n	80177ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80177d4:	4b06      	ldr	r3, [pc, #24]	@ (80177f0 <HAL_RCC_OscConfig+0x7b0>)
 80177d6:	68da      	ldr	r2, [r3, #12]
 80177d8:	4905      	ldr	r1, [pc, #20]	@ (80177f0 <HAL_RCC_OscConfig+0x7b0>)
 80177da:	4b06      	ldr	r3, [pc, #24]	@ (80177f4 <HAL_RCC_OscConfig+0x7b4>)
 80177dc:	4013      	ands	r3, r2
 80177de:	60cb      	str	r3, [r1, #12]
 80177e0:	e001      	b.n	80177e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80177e2:	2301      	movs	r3, #1
 80177e4:	e000      	b.n	80177e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80177e6:	2300      	movs	r3, #0
}
 80177e8:	4618      	mov	r0, r3
 80177ea:	3720      	adds	r7, #32
 80177ec:	46bd      	mov	sp, r7
 80177ee:	bd80      	pop	{r7, pc}
 80177f0:	40021000 	.word	0x40021000
 80177f4:	feeefffc 	.word	0xfeeefffc

080177f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b084      	sub	sp, #16
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
 8017800:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	2b00      	cmp	r3, #0
 8017806:	d101      	bne.n	801780c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8017808:	2301      	movs	r3, #1
 801780a:	e0e7      	b.n	80179dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801780c:	4b75      	ldr	r3, [pc, #468]	@ (80179e4 <HAL_RCC_ClockConfig+0x1ec>)
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	f003 0307 	and.w	r3, r3, #7
 8017814:	683a      	ldr	r2, [r7, #0]
 8017816:	429a      	cmp	r2, r3
 8017818:	d910      	bls.n	801783c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801781a:	4b72      	ldr	r3, [pc, #456]	@ (80179e4 <HAL_RCC_ClockConfig+0x1ec>)
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	f023 0207 	bic.w	r2, r3, #7
 8017822:	4970      	ldr	r1, [pc, #448]	@ (80179e4 <HAL_RCC_ClockConfig+0x1ec>)
 8017824:	683b      	ldr	r3, [r7, #0]
 8017826:	4313      	orrs	r3, r2
 8017828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801782a:	4b6e      	ldr	r3, [pc, #440]	@ (80179e4 <HAL_RCC_ClockConfig+0x1ec>)
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	f003 0307 	and.w	r3, r3, #7
 8017832:	683a      	ldr	r2, [r7, #0]
 8017834:	429a      	cmp	r2, r3
 8017836:	d001      	beq.n	801783c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8017838:	2301      	movs	r3, #1
 801783a:	e0cf      	b.n	80179dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	f003 0302 	and.w	r3, r3, #2
 8017844:	2b00      	cmp	r3, #0
 8017846:	d010      	beq.n	801786a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	689a      	ldr	r2, [r3, #8]
 801784c:	4b66      	ldr	r3, [pc, #408]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 801784e:	689b      	ldr	r3, [r3, #8]
 8017850:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017854:	429a      	cmp	r2, r3
 8017856:	d908      	bls.n	801786a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8017858:	4b63      	ldr	r3, [pc, #396]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 801785a:	689b      	ldr	r3, [r3, #8]
 801785c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	689b      	ldr	r3, [r3, #8]
 8017864:	4960      	ldr	r1, [pc, #384]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 8017866:	4313      	orrs	r3, r2
 8017868:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	f003 0301 	and.w	r3, r3, #1
 8017872:	2b00      	cmp	r3, #0
 8017874:	d04c      	beq.n	8017910 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	685b      	ldr	r3, [r3, #4]
 801787a:	2b03      	cmp	r3, #3
 801787c:	d107      	bne.n	801788e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801787e:	4b5a      	ldr	r3, [pc, #360]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017886:	2b00      	cmp	r3, #0
 8017888:	d121      	bne.n	80178ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 801788a:	2301      	movs	r3, #1
 801788c:	e0a6      	b.n	80179dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	685b      	ldr	r3, [r3, #4]
 8017892:	2b02      	cmp	r3, #2
 8017894:	d107      	bne.n	80178a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8017896:	4b54      	ldr	r3, [pc, #336]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d115      	bne.n	80178ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80178a2:	2301      	movs	r3, #1
 80178a4:	e09a      	b.n	80179dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	685b      	ldr	r3, [r3, #4]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d107      	bne.n	80178be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80178ae:	4b4e      	ldr	r3, [pc, #312]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	f003 0302 	and.w	r3, r3, #2
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d109      	bne.n	80178ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80178ba:	2301      	movs	r3, #1
 80178bc:	e08e      	b.n	80179dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80178be:	4b4a      	ldr	r3, [pc, #296]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d101      	bne.n	80178ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80178ca:	2301      	movs	r3, #1
 80178cc:	e086      	b.n	80179dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80178ce:	4b46      	ldr	r3, [pc, #280]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 80178d0:	689b      	ldr	r3, [r3, #8]
 80178d2:	f023 0203 	bic.w	r2, r3, #3
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	685b      	ldr	r3, [r3, #4]
 80178da:	4943      	ldr	r1, [pc, #268]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 80178dc:	4313      	orrs	r3, r2
 80178de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80178e0:	f7fd f974 	bl	8014bcc <HAL_GetTick>
 80178e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80178e6:	e00a      	b.n	80178fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80178e8:	f7fd f970 	bl	8014bcc <HAL_GetTick>
 80178ec:	4602      	mov	r2, r0
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	1ad3      	subs	r3, r2, r3
 80178f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80178f6:	4293      	cmp	r3, r2
 80178f8:	d901      	bls.n	80178fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80178fa:	2303      	movs	r3, #3
 80178fc:	e06e      	b.n	80179dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80178fe:	4b3a      	ldr	r3, [pc, #232]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 8017900:	689b      	ldr	r3, [r3, #8]
 8017902:	f003 020c 	and.w	r2, r3, #12
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	685b      	ldr	r3, [r3, #4]
 801790a:	009b      	lsls	r3, r3, #2
 801790c:	429a      	cmp	r2, r3
 801790e:	d1eb      	bne.n	80178e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	f003 0302 	and.w	r3, r3, #2
 8017918:	2b00      	cmp	r3, #0
 801791a:	d010      	beq.n	801793e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	689a      	ldr	r2, [r3, #8]
 8017920:	4b31      	ldr	r3, [pc, #196]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 8017922:	689b      	ldr	r3, [r3, #8]
 8017924:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017928:	429a      	cmp	r2, r3
 801792a:	d208      	bcs.n	801793e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801792c:	4b2e      	ldr	r3, [pc, #184]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 801792e:	689b      	ldr	r3, [r3, #8]
 8017930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	689b      	ldr	r3, [r3, #8]
 8017938:	492b      	ldr	r1, [pc, #172]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 801793a:	4313      	orrs	r3, r2
 801793c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801793e:	4b29      	ldr	r3, [pc, #164]	@ (80179e4 <HAL_RCC_ClockConfig+0x1ec>)
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	f003 0307 	and.w	r3, r3, #7
 8017946:	683a      	ldr	r2, [r7, #0]
 8017948:	429a      	cmp	r2, r3
 801794a:	d210      	bcs.n	801796e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801794c:	4b25      	ldr	r3, [pc, #148]	@ (80179e4 <HAL_RCC_ClockConfig+0x1ec>)
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	f023 0207 	bic.w	r2, r3, #7
 8017954:	4923      	ldr	r1, [pc, #140]	@ (80179e4 <HAL_RCC_ClockConfig+0x1ec>)
 8017956:	683b      	ldr	r3, [r7, #0]
 8017958:	4313      	orrs	r3, r2
 801795a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801795c:	4b21      	ldr	r3, [pc, #132]	@ (80179e4 <HAL_RCC_ClockConfig+0x1ec>)
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	f003 0307 	and.w	r3, r3, #7
 8017964:	683a      	ldr	r2, [r7, #0]
 8017966:	429a      	cmp	r2, r3
 8017968:	d001      	beq.n	801796e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 801796a:	2301      	movs	r3, #1
 801796c:	e036      	b.n	80179dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	f003 0304 	and.w	r3, r3, #4
 8017976:	2b00      	cmp	r3, #0
 8017978:	d008      	beq.n	801798c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801797a:	4b1b      	ldr	r3, [pc, #108]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 801797c:	689b      	ldr	r3, [r3, #8]
 801797e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	68db      	ldr	r3, [r3, #12]
 8017986:	4918      	ldr	r1, [pc, #96]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 8017988:	4313      	orrs	r3, r2
 801798a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	f003 0308 	and.w	r3, r3, #8
 8017994:	2b00      	cmp	r3, #0
 8017996:	d009      	beq.n	80179ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8017998:	4b13      	ldr	r3, [pc, #76]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 801799a:	689b      	ldr	r3, [r3, #8]
 801799c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	691b      	ldr	r3, [r3, #16]
 80179a4:	00db      	lsls	r3, r3, #3
 80179a6:	4910      	ldr	r1, [pc, #64]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 80179a8:	4313      	orrs	r3, r2
 80179aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80179ac:	f000 f824 	bl	80179f8 <HAL_RCC_GetSysClockFreq>
 80179b0:	4602      	mov	r2, r0
 80179b2:	4b0d      	ldr	r3, [pc, #52]	@ (80179e8 <HAL_RCC_ClockConfig+0x1f0>)
 80179b4:	689b      	ldr	r3, [r3, #8]
 80179b6:	091b      	lsrs	r3, r3, #4
 80179b8:	f003 030f 	and.w	r3, r3, #15
 80179bc:	490b      	ldr	r1, [pc, #44]	@ (80179ec <HAL_RCC_ClockConfig+0x1f4>)
 80179be:	5ccb      	ldrb	r3, [r1, r3]
 80179c0:	f003 031f 	and.w	r3, r3, #31
 80179c4:	fa22 f303 	lsr.w	r3, r2, r3
 80179c8:	4a09      	ldr	r2, [pc, #36]	@ (80179f0 <HAL_RCC_ClockConfig+0x1f8>)
 80179ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80179cc:	4b09      	ldr	r3, [pc, #36]	@ (80179f4 <HAL_RCC_ClockConfig+0x1fc>)
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	4618      	mov	r0, r3
 80179d2:	f7fd f8ab 	bl	8014b2c <HAL_InitTick>
 80179d6:	4603      	mov	r3, r0
 80179d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80179da:	7afb      	ldrb	r3, [r7, #11]
}
 80179dc:	4618      	mov	r0, r3
 80179de:	3710      	adds	r7, #16
 80179e0:	46bd      	mov	sp, r7
 80179e2:	bd80      	pop	{r7, pc}
 80179e4:	40022000 	.word	0x40022000
 80179e8:	40021000 	.word	0x40021000
 80179ec:	0801a810 	.word	0x0801a810
 80179f0:	20000384 	.word	0x20000384
 80179f4:	20000388 	.word	0x20000388

080179f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80179f8:	b480      	push	{r7}
 80179fa:	b089      	sub	sp, #36	@ 0x24
 80179fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80179fe:	2300      	movs	r3, #0
 8017a00:	61fb      	str	r3, [r7, #28]
 8017a02:	2300      	movs	r3, #0
 8017a04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017a06:	4b3e      	ldr	r3, [pc, #248]	@ (8017b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8017a08:	689b      	ldr	r3, [r3, #8]
 8017a0a:	f003 030c 	and.w	r3, r3, #12
 8017a0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017a10:	4b3b      	ldr	r3, [pc, #236]	@ (8017b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8017a12:	68db      	ldr	r3, [r3, #12]
 8017a14:	f003 0303 	and.w	r3, r3, #3
 8017a18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8017a1a:	693b      	ldr	r3, [r7, #16]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d005      	beq.n	8017a2c <HAL_RCC_GetSysClockFreq+0x34>
 8017a20:	693b      	ldr	r3, [r7, #16]
 8017a22:	2b0c      	cmp	r3, #12
 8017a24:	d121      	bne.n	8017a6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	2b01      	cmp	r3, #1
 8017a2a:	d11e      	bne.n	8017a6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8017a2c:	4b34      	ldr	r3, [pc, #208]	@ (8017b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	f003 0308 	and.w	r3, r3, #8
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d107      	bne.n	8017a48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8017a38:	4b31      	ldr	r3, [pc, #196]	@ (8017b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8017a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8017a3e:	0a1b      	lsrs	r3, r3, #8
 8017a40:	f003 030f 	and.w	r3, r3, #15
 8017a44:	61fb      	str	r3, [r7, #28]
 8017a46:	e005      	b.n	8017a54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8017a48:	4b2d      	ldr	r3, [pc, #180]	@ (8017b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	091b      	lsrs	r3, r3, #4
 8017a4e:	f003 030f 	and.w	r3, r3, #15
 8017a52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8017a54:	4a2b      	ldr	r2, [pc, #172]	@ (8017b04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8017a56:	69fb      	ldr	r3, [r7, #28]
 8017a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017a5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8017a5e:	693b      	ldr	r3, [r7, #16]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d10d      	bne.n	8017a80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8017a64:	69fb      	ldr	r3, [r7, #28]
 8017a66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8017a68:	e00a      	b.n	8017a80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8017a6a:	693b      	ldr	r3, [r7, #16]
 8017a6c:	2b04      	cmp	r3, #4
 8017a6e:	d102      	bne.n	8017a76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8017a70:	4b25      	ldr	r3, [pc, #148]	@ (8017b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8017a72:	61bb      	str	r3, [r7, #24]
 8017a74:	e004      	b.n	8017a80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8017a76:	693b      	ldr	r3, [r7, #16]
 8017a78:	2b08      	cmp	r3, #8
 8017a7a:	d101      	bne.n	8017a80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8017a7c:	4b23      	ldr	r3, [pc, #140]	@ (8017b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8017a7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8017a80:	693b      	ldr	r3, [r7, #16]
 8017a82:	2b0c      	cmp	r3, #12
 8017a84:	d134      	bne.n	8017af0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8017a86:	4b1e      	ldr	r3, [pc, #120]	@ (8017b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8017a88:	68db      	ldr	r3, [r3, #12]
 8017a8a:	f003 0303 	and.w	r3, r3, #3
 8017a8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8017a90:	68bb      	ldr	r3, [r7, #8]
 8017a92:	2b02      	cmp	r3, #2
 8017a94:	d003      	beq.n	8017a9e <HAL_RCC_GetSysClockFreq+0xa6>
 8017a96:	68bb      	ldr	r3, [r7, #8]
 8017a98:	2b03      	cmp	r3, #3
 8017a9a:	d003      	beq.n	8017aa4 <HAL_RCC_GetSysClockFreq+0xac>
 8017a9c:	e005      	b.n	8017aaa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8017a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8017b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8017aa0:	617b      	str	r3, [r7, #20]
      break;
 8017aa2:	e005      	b.n	8017ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8017aa4:	4b19      	ldr	r3, [pc, #100]	@ (8017b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8017aa6:	617b      	str	r3, [r7, #20]
      break;
 8017aa8:	e002      	b.n	8017ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8017aaa:	69fb      	ldr	r3, [r7, #28]
 8017aac:	617b      	str	r3, [r7, #20]
      break;
 8017aae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8017ab0:	4b13      	ldr	r3, [pc, #76]	@ (8017b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8017ab2:	68db      	ldr	r3, [r3, #12]
 8017ab4:	091b      	lsrs	r3, r3, #4
 8017ab6:	f003 0307 	and.w	r3, r3, #7
 8017aba:	3301      	adds	r3, #1
 8017abc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8017abe:	4b10      	ldr	r3, [pc, #64]	@ (8017b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8017ac0:	68db      	ldr	r3, [r3, #12]
 8017ac2:	0a1b      	lsrs	r3, r3, #8
 8017ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017ac8:	697a      	ldr	r2, [r7, #20]
 8017aca:	fb03 f202 	mul.w	r2, r3, r2
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8017ad4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8017ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8017b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8017ad8:	68db      	ldr	r3, [r3, #12]
 8017ada:	0e5b      	lsrs	r3, r3, #25
 8017adc:	f003 0303 	and.w	r3, r3, #3
 8017ae0:	3301      	adds	r3, #1
 8017ae2:	005b      	lsls	r3, r3, #1
 8017ae4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8017ae6:	697a      	ldr	r2, [r7, #20]
 8017ae8:	683b      	ldr	r3, [r7, #0]
 8017aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8017aee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8017af0:	69bb      	ldr	r3, [r7, #24]
}
 8017af2:	4618      	mov	r0, r3
 8017af4:	3724      	adds	r7, #36	@ 0x24
 8017af6:	46bd      	mov	sp, r7
 8017af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017afc:	4770      	bx	lr
 8017afe:	bf00      	nop
 8017b00:	40021000 	.word	0x40021000
 8017b04:	0801a828 	.word	0x0801a828
 8017b08:	00f42400 	.word	0x00f42400
 8017b0c:	007a1200 	.word	0x007a1200

08017b10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017b10:	b480      	push	{r7}
 8017b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8017b14:	4b03      	ldr	r3, [pc, #12]	@ (8017b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8017b16:	681b      	ldr	r3, [r3, #0]
}
 8017b18:	4618      	mov	r0, r3
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b20:	4770      	bx	lr
 8017b22:	bf00      	nop
 8017b24:	20000384 	.word	0x20000384

08017b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8017b2c:	f7ff fff0 	bl	8017b10 <HAL_RCC_GetHCLKFreq>
 8017b30:	4602      	mov	r2, r0
 8017b32:	4b06      	ldr	r3, [pc, #24]	@ (8017b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8017b34:	689b      	ldr	r3, [r3, #8]
 8017b36:	0a1b      	lsrs	r3, r3, #8
 8017b38:	f003 0307 	and.w	r3, r3, #7
 8017b3c:	4904      	ldr	r1, [pc, #16]	@ (8017b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8017b3e:	5ccb      	ldrb	r3, [r1, r3]
 8017b40:	f003 031f 	and.w	r3, r3, #31
 8017b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017b48:	4618      	mov	r0, r3
 8017b4a:	bd80      	pop	{r7, pc}
 8017b4c:	40021000 	.word	0x40021000
 8017b50:	0801a820 	.word	0x0801a820

08017b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8017b54:	b580      	push	{r7, lr}
 8017b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8017b58:	f7ff ffda 	bl	8017b10 <HAL_RCC_GetHCLKFreq>
 8017b5c:	4602      	mov	r2, r0
 8017b5e:	4b06      	ldr	r3, [pc, #24]	@ (8017b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8017b60:	689b      	ldr	r3, [r3, #8]
 8017b62:	0adb      	lsrs	r3, r3, #11
 8017b64:	f003 0307 	and.w	r3, r3, #7
 8017b68:	4904      	ldr	r1, [pc, #16]	@ (8017b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8017b6a:	5ccb      	ldrb	r3, [r1, r3]
 8017b6c:	f003 031f 	and.w	r3, r3, #31
 8017b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017b74:	4618      	mov	r0, r3
 8017b76:	bd80      	pop	{r7, pc}
 8017b78:	40021000 	.word	0x40021000
 8017b7c:	0801a820 	.word	0x0801a820

08017b80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b086      	sub	sp, #24
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8017b88:	2300      	movs	r3, #0
 8017b8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8017b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8017c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8017b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d003      	beq.n	8017ba0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8017b98:	f7ff f9ee 	bl	8016f78 <HAL_PWREx_GetVoltageRange>
 8017b9c:	6178      	str	r0, [r7, #20]
 8017b9e:	e014      	b.n	8017bca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8017ba0:	4b25      	ldr	r3, [pc, #148]	@ (8017c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8017ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017ba4:	4a24      	ldr	r2, [pc, #144]	@ (8017c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8017ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8017baa:	6593      	str	r3, [r2, #88]	@ 0x58
 8017bac:	4b22      	ldr	r3, [pc, #136]	@ (8017c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8017bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017bb4:	60fb      	str	r3, [r7, #12]
 8017bb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8017bb8:	f7ff f9de 	bl	8016f78 <HAL_PWREx_GetVoltageRange>
 8017bbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8017bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8017c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8017bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8017c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8017bc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8017bc8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8017bca:	697b      	ldr	r3, [r7, #20]
 8017bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017bd0:	d10b      	bne.n	8017bea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	2b80      	cmp	r3, #128	@ 0x80
 8017bd6:	d919      	bls.n	8017c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	2ba0      	cmp	r3, #160	@ 0xa0
 8017bdc:	d902      	bls.n	8017be4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8017bde:	2302      	movs	r3, #2
 8017be0:	613b      	str	r3, [r7, #16]
 8017be2:	e013      	b.n	8017c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8017be4:	2301      	movs	r3, #1
 8017be6:	613b      	str	r3, [r7, #16]
 8017be8:	e010      	b.n	8017c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	2b80      	cmp	r3, #128	@ 0x80
 8017bee:	d902      	bls.n	8017bf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8017bf0:	2303      	movs	r3, #3
 8017bf2:	613b      	str	r3, [r7, #16]
 8017bf4:	e00a      	b.n	8017c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	2b80      	cmp	r3, #128	@ 0x80
 8017bfa:	d102      	bne.n	8017c02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8017bfc:	2302      	movs	r3, #2
 8017bfe:	613b      	str	r3, [r7, #16]
 8017c00:	e004      	b.n	8017c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	2b70      	cmp	r3, #112	@ 0x70
 8017c06:	d101      	bne.n	8017c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8017c08:	2301      	movs	r3, #1
 8017c0a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8017c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8017c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	f023 0207 	bic.w	r2, r3, #7
 8017c14:	4909      	ldr	r1, [pc, #36]	@ (8017c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8017c16:	693b      	ldr	r3, [r7, #16]
 8017c18:	4313      	orrs	r3, r2
 8017c1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8017c1c:	4b07      	ldr	r3, [pc, #28]	@ (8017c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	f003 0307 	and.w	r3, r3, #7
 8017c24:	693a      	ldr	r2, [r7, #16]
 8017c26:	429a      	cmp	r2, r3
 8017c28:	d001      	beq.n	8017c2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8017c2a:	2301      	movs	r3, #1
 8017c2c:	e000      	b.n	8017c30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8017c2e:	2300      	movs	r3, #0
}
 8017c30:	4618      	mov	r0, r3
 8017c32:	3718      	adds	r7, #24
 8017c34:	46bd      	mov	sp, r7
 8017c36:	bd80      	pop	{r7, pc}
 8017c38:	40021000 	.word	0x40021000
 8017c3c:	40022000 	.word	0x40022000

08017c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8017c40:	b580      	push	{r7, lr}
 8017c42:	b086      	sub	sp, #24
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8017c48:	2300      	movs	r3, #0
 8017c4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d041      	beq.n	8017ce0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017c60:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8017c64:	d02a      	beq.n	8017cbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8017c66:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8017c6a:	d824      	bhi.n	8017cb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8017c6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8017c70:	d008      	beq.n	8017c84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8017c72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8017c76:	d81e      	bhi.n	8017cb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d00a      	beq.n	8017c92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8017c7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8017c80:	d010      	beq.n	8017ca4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8017c82:	e018      	b.n	8017cb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8017c84:	4b86      	ldr	r3, [pc, #536]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017c86:	68db      	ldr	r3, [r3, #12]
 8017c88:	4a85      	ldr	r2, [pc, #532]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8017c8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8017c90:	e015      	b.n	8017cbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	3304      	adds	r3, #4
 8017c96:	2100      	movs	r1, #0
 8017c98:	4618      	mov	r0, r3
 8017c9a:	f000 fabb 	bl	8018214 <RCCEx_PLLSAI1_Config>
 8017c9e:	4603      	mov	r3, r0
 8017ca0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8017ca2:	e00c      	b.n	8017cbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	3320      	adds	r3, #32
 8017ca8:	2100      	movs	r1, #0
 8017caa:	4618      	mov	r0, r3
 8017cac:	f000 fba6 	bl	80183fc <RCCEx_PLLSAI2_Config>
 8017cb0:	4603      	mov	r3, r0
 8017cb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8017cb4:	e003      	b.n	8017cbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8017cb6:	2301      	movs	r3, #1
 8017cb8:	74fb      	strb	r3, [r7, #19]
      break;
 8017cba:	e000      	b.n	8017cbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8017cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8017cbe:	7cfb      	ldrb	r3, [r7, #19]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d10b      	bne.n	8017cdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8017cc4:	4b76      	ldr	r3, [pc, #472]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017cca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017cd2:	4973      	ldr	r1, [pc, #460]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017cd4:	4313      	orrs	r3, r2
 8017cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8017cda:	e001      	b.n	8017ce0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017cdc:	7cfb      	ldrb	r3, [r7, #19]
 8017cde:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d041      	beq.n	8017d70 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017cf0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8017cf4:	d02a      	beq.n	8017d4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8017cf6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8017cfa:	d824      	bhi.n	8017d46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8017cfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017d00:	d008      	beq.n	8017d14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8017d02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017d06:	d81e      	bhi.n	8017d46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d00a      	beq.n	8017d22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8017d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017d10:	d010      	beq.n	8017d34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8017d12:	e018      	b.n	8017d46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8017d14:	4b62      	ldr	r3, [pc, #392]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017d16:	68db      	ldr	r3, [r3, #12]
 8017d18:	4a61      	ldr	r2, [pc, #388]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8017d1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8017d20:	e015      	b.n	8017d4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	3304      	adds	r3, #4
 8017d26:	2100      	movs	r1, #0
 8017d28:	4618      	mov	r0, r3
 8017d2a:	f000 fa73 	bl	8018214 <RCCEx_PLLSAI1_Config>
 8017d2e:	4603      	mov	r3, r0
 8017d30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8017d32:	e00c      	b.n	8017d4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	3320      	adds	r3, #32
 8017d38:	2100      	movs	r1, #0
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	f000 fb5e 	bl	80183fc <RCCEx_PLLSAI2_Config>
 8017d40:	4603      	mov	r3, r0
 8017d42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8017d44:	e003      	b.n	8017d4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8017d46:	2301      	movs	r3, #1
 8017d48:	74fb      	strb	r3, [r7, #19]
      break;
 8017d4a:	e000      	b.n	8017d4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8017d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8017d4e:	7cfb      	ldrb	r3, [r7, #19]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d10b      	bne.n	8017d6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8017d54:	4b52      	ldr	r3, [pc, #328]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017d5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017d62:	494f      	ldr	r1, [pc, #316]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017d64:	4313      	orrs	r3, r2
 8017d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8017d6a:	e001      	b.n	8017d70 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017d6c:	7cfb      	ldrb	r3, [r7, #19]
 8017d6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	f000 80a0 	beq.w	8017ebe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017d7e:	2300      	movs	r3, #0
 8017d80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8017d82:	4b47      	ldr	r3, [pc, #284]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d101      	bne.n	8017d92 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8017d8e:	2301      	movs	r3, #1
 8017d90:	e000      	b.n	8017d94 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8017d92:	2300      	movs	r3, #0
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d00d      	beq.n	8017db4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017d98:	4b41      	ldr	r3, [pc, #260]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017d9c:	4a40      	ldr	r2, [pc, #256]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017d9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8017da2:	6593      	str	r3, [r2, #88]	@ 0x58
 8017da4:	4b3e      	ldr	r3, [pc, #248]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017dac:	60bb      	str	r3, [r7, #8]
 8017dae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8017db0:	2301      	movs	r3, #1
 8017db2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8017db4:	4b3b      	ldr	r3, [pc, #236]	@ (8017ea4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	4a3a      	ldr	r2, [pc, #232]	@ (8017ea4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8017dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017dbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8017dc0:	f7fc ff04 	bl	8014bcc <HAL_GetTick>
 8017dc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8017dc6:	e009      	b.n	8017ddc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017dc8:	f7fc ff00 	bl	8014bcc <HAL_GetTick>
 8017dcc:	4602      	mov	r2, r0
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	1ad3      	subs	r3, r2, r3
 8017dd2:	2b02      	cmp	r3, #2
 8017dd4:	d902      	bls.n	8017ddc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8017dd6:	2303      	movs	r3, #3
 8017dd8:	74fb      	strb	r3, [r7, #19]
        break;
 8017dda:	e005      	b.n	8017de8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8017ddc:	4b31      	ldr	r3, [pc, #196]	@ (8017ea4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d0ef      	beq.n	8017dc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8017de8:	7cfb      	ldrb	r3, [r7, #19]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d15c      	bne.n	8017ea8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8017dee:	4b2c      	ldr	r3, [pc, #176]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017df4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8017df8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8017dfa:	697b      	ldr	r3, [r7, #20]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d01f      	beq.n	8017e40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017e06:	697a      	ldr	r2, [r7, #20]
 8017e08:	429a      	cmp	r2, r3
 8017e0a:	d019      	beq.n	8017e40 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8017e0c:	4b24      	ldr	r3, [pc, #144]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017e12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017e16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8017e18:	4b21      	ldr	r3, [pc, #132]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017e1e:	4a20      	ldr	r2, [pc, #128]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8017e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8017e28:	4b1d      	ldr	r3, [pc, #116]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017e30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8017e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8017e38:	4a19      	ldr	r2, [pc, #100]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017e3a:	697b      	ldr	r3, [r7, #20]
 8017e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8017e40:	697b      	ldr	r3, [r7, #20]
 8017e42:	f003 0301 	and.w	r3, r3, #1
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d016      	beq.n	8017e78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017e4a:	f7fc febf 	bl	8014bcc <HAL_GetTick>
 8017e4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017e50:	e00b      	b.n	8017e6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017e52:	f7fc febb 	bl	8014bcc <HAL_GetTick>
 8017e56:	4602      	mov	r2, r0
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	1ad3      	subs	r3, r2, r3
 8017e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017e60:	4293      	cmp	r3, r2
 8017e62:	d902      	bls.n	8017e6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8017e64:	2303      	movs	r3, #3
 8017e66:	74fb      	strb	r3, [r7, #19]
            break;
 8017e68:	e006      	b.n	8017e78 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017e70:	f003 0302 	and.w	r3, r3, #2
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d0ec      	beq.n	8017e52 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8017e78:	7cfb      	ldrb	r3, [r7, #19]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d10c      	bne.n	8017e98 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8017e7e:	4b08      	ldr	r3, [pc, #32]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017e84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017e8e:	4904      	ldr	r1, [pc, #16]	@ (8017ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8017e90:	4313      	orrs	r3, r2
 8017e92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8017e96:	e009      	b.n	8017eac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8017e98:	7cfb      	ldrb	r3, [r7, #19]
 8017e9a:	74bb      	strb	r3, [r7, #18]
 8017e9c:	e006      	b.n	8017eac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8017e9e:	bf00      	nop
 8017ea0:	40021000 	.word	0x40021000
 8017ea4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017ea8:	7cfb      	ldrb	r3, [r7, #19]
 8017eaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8017eac:	7c7b      	ldrb	r3, [r7, #17]
 8017eae:	2b01      	cmp	r3, #1
 8017eb0:	d105      	bne.n	8017ebe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017eb2:	4b9e      	ldr	r3, [pc, #632]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017eb6:	4a9d      	ldr	r2, [pc, #628]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017eb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8017ebc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	f003 0301 	and.w	r3, r3, #1
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d00a      	beq.n	8017ee0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8017eca:	4b98      	ldr	r3, [pc, #608]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017ed0:	f023 0203 	bic.w	r2, r3, #3
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017ed8:	4994      	ldr	r1, [pc, #592]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017eda:	4313      	orrs	r3, r2
 8017edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	f003 0302 	and.w	r3, r3, #2
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d00a      	beq.n	8017f02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8017eec:	4b8f      	ldr	r3, [pc, #572]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017ef2:	f023 020c 	bic.w	r2, r3, #12
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017efa:	498c      	ldr	r1, [pc, #560]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017efc:	4313      	orrs	r3, r2
 8017efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	f003 0304 	and.w	r3, r3, #4
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d00a      	beq.n	8017f24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8017f0e:	4b87      	ldr	r3, [pc, #540]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017f14:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017f1c:	4983      	ldr	r1, [pc, #524]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017f1e:	4313      	orrs	r3, r2
 8017f20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	f003 0308 	and.w	r3, r3, #8
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d00a      	beq.n	8017f46 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8017f30:	4b7e      	ldr	r3, [pc, #504]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017f36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017f3e:	497b      	ldr	r1, [pc, #492]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017f40:	4313      	orrs	r3, r2
 8017f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	f003 0310 	and.w	r3, r3, #16
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d00a      	beq.n	8017f68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8017f52:	4b76      	ldr	r3, [pc, #472]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017f58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017f60:	4972      	ldr	r1, [pc, #456]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017f62:	4313      	orrs	r3, r2
 8017f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	f003 0320 	and.w	r3, r3, #32
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d00a      	beq.n	8017f8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8017f74:	4b6d      	ldr	r3, [pc, #436]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017f7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017f82:	496a      	ldr	r1, [pc, #424]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017f84:	4313      	orrs	r3, r2
 8017f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d00a      	beq.n	8017fac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8017f96:	4b65      	ldr	r3, [pc, #404]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017f9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017fa4:	4961      	ldr	r1, [pc, #388]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017fa6:	4313      	orrs	r3, r2
 8017fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d00a      	beq.n	8017fce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8017fb8:	4b5c      	ldr	r3, [pc, #368]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017fbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017fc6:	4959      	ldr	r1, [pc, #356]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017fc8:	4313      	orrs	r3, r2
 8017fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d00a      	beq.n	8017ff0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8017fda:	4b54      	ldr	r3, [pc, #336]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017fe0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017fe8:	4950      	ldr	r1, [pc, #320]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017fea:	4313      	orrs	r3, r2
 8017fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d00a      	beq.n	8018012 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8017ffc:	4b4b      	ldr	r3, [pc, #300]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8017ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018002:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801800a:	4948      	ldr	r1, [pc, #288]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801800c:	4313      	orrs	r3, r2
 801800e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801801a:	2b00      	cmp	r3, #0
 801801c:	d00a      	beq.n	8018034 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801801e:	4b43      	ldr	r3, [pc, #268]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8018020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018024:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801802c:	493f      	ldr	r1, [pc, #252]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801802e:	4313      	orrs	r3, r2
 8018030:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801803c:	2b00      	cmp	r3, #0
 801803e:	d028      	beq.n	8018092 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8018040:	4b3a      	ldr	r3, [pc, #232]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8018042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018046:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801804e:	4937      	ldr	r1, [pc, #220]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8018050:	4313      	orrs	r3, r2
 8018052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801805a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801805e:	d106      	bne.n	801806e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018060:	4b32      	ldr	r3, [pc, #200]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8018062:	68db      	ldr	r3, [r3, #12]
 8018064:	4a31      	ldr	r2, [pc, #196]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8018066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801806a:	60d3      	str	r3, [r2, #12]
 801806c:	e011      	b.n	8018092 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018072:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8018076:	d10c      	bne.n	8018092 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	3304      	adds	r3, #4
 801807c:	2101      	movs	r1, #1
 801807e:	4618      	mov	r0, r3
 8018080:	f000 f8c8 	bl	8018214 <RCCEx_PLLSAI1_Config>
 8018084:	4603      	mov	r3, r0
 8018086:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8018088:	7cfb      	ldrb	r3, [r7, #19]
 801808a:	2b00      	cmp	r3, #0
 801808c:	d001      	beq.n	8018092 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 801808e:	7cfb      	ldrb	r3, [r7, #19]
 8018090:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801809a:	2b00      	cmp	r3, #0
 801809c:	d028      	beq.n	80180f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801809e:	4b23      	ldr	r3, [pc, #140]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80180a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80180a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80180ac:	491f      	ldr	r1, [pc, #124]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80180ae:	4313      	orrs	r3, r2
 80180b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80180b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80180bc:	d106      	bne.n	80180cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80180be:	4b1b      	ldr	r3, [pc, #108]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80180c0:	68db      	ldr	r3, [r3, #12]
 80180c2:	4a1a      	ldr	r2, [pc, #104]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80180c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80180c8:	60d3      	str	r3, [r2, #12]
 80180ca:	e011      	b.n	80180f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80180d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80180d4:	d10c      	bne.n	80180f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	3304      	adds	r3, #4
 80180da:	2101      	movs	r1, #1
 80180dc:	4618      	mov	r0, r3
 80180de:	f000 f899 	bl	8018214 <RCCEx_PLLSAI1_Config>
 80180e2:	4603      	mov	r3, r0
 80180e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80180e6:	7cfb      	ldrb	r3, [r7, #19]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d001      	beq.n	80180f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80180ec:	7cfb      	ldrb	r3, [r7, #19]
 80180ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d02b      	beq.n	8018154 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80180fc:	4b0b      	ldr	r3, [pc, #44]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80180fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018102:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801810a:	4908      	ldr	r1, [pc, #32]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801810c:	4313      	orrs	r3, r2
 801810e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018116:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801811a:	d109      	bne.n	8018130 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801811c:	4b03      	ldr	r3, [pc, #12]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801811e:	68db      	ldr	r3, [r3, #12]
 8018120:	4a02      	ldr	r2, [pc, #8]	@ (801812c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8018122:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018126:	60d3      	str	r3, [r2, #12]
 8018128:	e014      	b.n	8018154 <HAL_RCCEx_PeriphCLKConfig+0x514>
 801812a:	bf00      	nop
 801812c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018134:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8018138:	d10c      	bne.n	8018154 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	3304      	adds	r3, #4
 801813e:	2101      	movs	r1, #1
 8018140:	4618      	mov	r0, r3
 8018142:	f000 f867 	bl	8018214 <RCCEx_PLLSAI1_Config>
 8018146:	4603      	mov	r3, r0
 8018148:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801814a:	7cfb      	ldrb	r3, [r7, #19]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d001      	beq.n	8018154 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8018150:	7cfb      	ldrb	r3, [r7, #19]
 8018152:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801815c:	2b00      	cmp	r3, #0
 801815e:	d02f      	beq.n	80181c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8018160:	4b2b      	ldr	r3, [pc, #172]	@ (8018210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8018162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018166:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801816e:	4928      	ldr	r1, [pc, #160]	@ (8018210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8018170:	4313      	orrs	r3, r2
 8018172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801817a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801817e:	d10d      	bne.n	801819c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	3304      	adds	r3, #4
 8018184:	2102      	movs	r1, #2
 8018186:	4618      	mov	r0, r3
 8018188:	f000 f844 	bl	8018214 <RCCEx_PLLSAI1_Config>
 801818c:	4603      	mov	r3, r0
 801818e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8018190:	7cfb      	ldrb	r3, [r7, #19]
 8018192:	2b00      	cmp	r3, #0
 8018194:	d014      	beq.n	80181c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8018196:	7cfb      	ldrb	r3, [r7, #19]
 8018198:	74bb      	strb	r3, [r7, #18]
 801819a:	e011      	b.n	80181c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80181a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80181a4:	d10c      	bne.n	80181c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	3320      	adds	r3, #32
 80181aa:	2102      	movs	r1, #2
 80181ac:	4618      	mov	r0, r3
 80181ae:	f000 f925 	bl	80183fc <RCCEx_PLLSAI2_Config>
 80181b2:	4603      	mov	r3, r0
 80181b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80181b6:	7cfb      	ldrb	r3, [r7, #19]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d001      	beq.n	80181c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80181bc:	7cfb      	ldrb	r3, [r7, #19]
 80181be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d00a      	beq.n	80181e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80181cc:	4b10      	ldr	r3, [pc, #64]	@ (8018210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80181ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80181d2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80181da:	490d      	ldr	r1, [pc, #52]	@ (8018210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80181dc:	4313      	orrs	r3, r2
 80181de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d00b      	beq.n	8018206 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80181ee:	4b08      	ldr	r3, [pc, #32]	@ (8018210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80181f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80181f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181fe:	4904      	ldr	r1, [pc, #16]	@ (8018210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8018200:	4313      	orrs	r3, r2
 8018202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8018206:	7cbb      	ldrb	r3, [r7, #18]
}
 8018208:	4618      	mov	r0, r3
 801820a:	3718      	adds	r7, #24
 801820c:	46bd      	mov	sp, r7
 801820e:	bd80      	pop	{r7, pc}
 8018210:	40021000 	.word	0x40021000

08018214 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b084      	sub	sp, #16
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
 801821c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801821e:	2300      	movs	r3, #0
 8018220:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8018222:	4b75      	ldr	r3, [pc, #468]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8018224:	68db      	ldr	r3, [r3, #12]
 8018226:	f003 0303 	and.w	r3, r3, #3
 801822a:	2b00      	cmp	r3, #0
 801822c:	d018      	beq.n	8018260 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801822e:	4b72      	ldr	r3, [pc, #456]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8018230:	68db      	ldr	r3, [r3, #12]
 8018232:	f003 0203 	and.w	r2, r3, #3
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	429a      	cmp	r2, r3
 801823c:	d10d      	bne.n	801825a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	681b      	ldr	r3, [r3, #0]
       ||
 8018242:	2b00      	cmp	r3, #0
 8018244:	d009      	beq.n	801825a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8018246:	4b6c      	ldr	r3, [pc, #432]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8018248:	68db      	ldr	r3, [r3, #12]
 801824a:	091b      	lsrs	r3, r3, #4
 801824c:	f003 0307 	and.w	r3, r3, #7
 8018250:	1c5a      	adds	r2, r3, #1
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	685b      	ldr	r3, [r3, #4]
       ||
 8018256:	429a      	cmp	r2, r3
 8018258:	d047      	beq.n	80182ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801825a:	2301      	movs	r3, #1
 801825c:	73fb      	strb	r3, [r7, #15]
 801825e:	e044      	b.n	80182ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	2b03      	cmp	r3, #3
 8018266:	d018      	beq.n	801829a <RCCEx_PLLSAI1_Config+0x86>
 8018268:	2b03      	cmp	r3, #3
 801826a:	d825      	bhi.n	80182b8 <RCCEx_PLLSAI1_Config+0xa4>
 801826c:	2b01      	cmp	r3, #1
 801826e:	d002      	beq.n	8018276 <RCCEx_PLLSAI1_Config+0x62>
 8018270:	2b02      	cmp	r3, #2
 8018272:	d009      	beq.n	8018288 <RCCEx_PLLSAI1_Config+0x74>
 8018274:	e020      	b.n	80182b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8018276:	4b60      	ldr	r3, [pc, #384]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	f003 0302 	and.w	r3, r3, #2
 801827e:	2b00      	cmp	r3, #0
 8018280:	d11d      	bne.n	80182be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8018282:	2301      	movs	r3, #1
 8018284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018286:	e01a      	b.n	80182be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8018288:	4b5b      	ldr	r3, [pc, #364]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8018290:	2b00      	cmp	r3, #0
 8018292:	d116      	bne.n	80182c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8018294:	2301      	movs	r3, #1
 8018296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018298:	e013      	b.n	80182c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801829a:	4b57      	ldr	r3, [pc, #348]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801829c:	681b      	ldr	r3, [r3, #0]
 801829e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d10f      	bne.n	80182c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80182a6:	4b54      	ldr	r3, [pc, #336]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d109      	bne.n	80182c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80182b2:	2301      	movs	r3, #1
 80182b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80182b6:	e006      	b.n	80182c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80182b8:	2301      	movs	r3, #1
 80182ba:	73fb      	strb	r3, [r7, #15]
      break;
 80182bc:	e004      	b.n	80182c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80182be:	bf00      	nop
 80182c0:	e002      	b.n	80182c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80182c2:	bf00      	nop
 80182c4:	e000      	b.n	80182c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80182c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80182c8:	7bfb      	ldrb	r3, [r7, #15]
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d10d      	bne.n	80182ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80182ce:	4b4a      	ldr	r3, [pc, #296]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80182d0:	68db      	ldr	r3, [r3, #12]
 80182d2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	6819      	ldr	r1, [r3, #0]
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	685b      	ldr	r3, [r3, #4]
 80182de:	3b01      	subs	r3, #1
 80182e0:	011b      	lsls	r3, r3, #4
 80182e2:	430b      	orrs	r3, r1
 80182e4:	4944      	ldr	r1, [pc, #272]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80182e6:	4313      	orrs	r3, r2
 80182e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80182ea:	7bfb      	ldrb	r3, [r7, #15]
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d17d      	bne.n	80183ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80182f0:	4b41      	ldr	r3, [pc, #260]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	4a40      	ldr	r2, [pc, #256]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80182f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80182fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80182fc:	f7fc fc66 	bl	8014bcc <HAL_GetTick>
 8018300:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8018302:	e009      	b.n	8018318 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018304:	f7fc fc62 	bl	8014bcc <HAL_GetTick>
 8018308:	4602      	mov	r2, r0
 801830a:	68bb      	ldr	r3, [r7, #8]
 801830c:	1ad3      	subs	r3, r2, r3
 801830e:	2b02      	cmp	r3, #2
 8018310:	d902      	bls.n	8018318 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8018312:	2303      	movs	r3, #3
 8018314:	73fb      	strb	r3, [r7, #15]
        break;
 8018316:	e005      	b.n	8018324 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8018318:	4b37      	ldr	r3, [pc, #220]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018320:	2b00      	cmp	r3, #0
 8018322:	d1ef      	bne.n	8018304 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8018324:	7bfb      	ldrb	r3, [r7, #15]
 8018326:	2b00      	cmp	r3, #0
 8018328:	d160      	bne.n	80183ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801832a:	683b      	ldr	r3, [r7, #0]
 801832c:	2b00      	cmp	r3, #0
 801832e:	d111      	bne.n	8018354 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8018330:	4b31      	ldr	r3, [pc, #196]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8018332:	691b      	ldr	r3, [r3, #16]
 8018334:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8018338:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801833c:	687a      	ldr	r2, [r7, #4]
 801833e:	6892      	ldr	r2, [r2, #8]
 8018340:	0211      	lsls	r1, r2, #8
 8018342:	687a      	ldr	r2, [r7, #4]
 8018344:	68d2      	ldr	r2, [r2, #12]
 8018346:	0912      	lsrs	r2, r2, #4
 8018348:	0452      	lsls	r2, r2, #17
 801834a:	430a      	orrs	r2, r1
 801834c:	492a      	ldr	r1, [pc, #168]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801834e:	4313      	orrs	r3, r2
 8018350:	610b      	str	r3, [r1, #16]
 8018352:	e027      	b.n	80183a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8018354:	683b      	ldr	r3, [r7, #0]
 8018356:	2b01      	cmp	r3, #1
 8018358:	d112      	bne.n	8018380 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801835a:	4b27      	ldr	r3, [pc, #156]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801835c:	691b      	ldr	r3, [r3, #16]
 801835e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8018362:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8018366:	687a      	ldr	r2, [r7, #4]
 8018368:	6892      	ldr	r2, [r2, #8]
 801836a:	0211      	lsls	r1, r2, #8
 801836c:	687a      	ldr	r2, [r7, #4]
 801836e:	6912      	ldr	r2, [r2, #16]
 8018370:	0852      	lsrs	r2, r2, #1
 8018372:	3a01      	subs	r2, #1
 8018374:	0552      	lsls	r2, r2, #21
 8018376:	430a      	orrs	r2, r1
 8018378:	491f      	ldr	r1, [pc, #124]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801837a:	4313      	orrs	r3, r2
 801837c:	610b      	str	r3, [r1, #16]
 801837e:	e011      	b.n	80183a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8018380:	4b1d      	ldr	r3, [pc, #116]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8018382:	691b      	ldr	r3, [r3, #16]
 8018384:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8018388:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 801838c:	687a      	ldr	r2, [r7, #4]
 801838e:	6892      	ldr	r2, [r2, #8]
 8018390:	0211      	lsls	r1, r2, #8
 8018392:	687a      	ldr	r2, [r7, #4]
 8018394:	6952      	ldr	r2, [r2, #20]
 8018396:	0852      	lsrs	r2, r2, #1
 8018398:	3a01      	subs	r2, #1
 801839a:	0652      	lsls	r2, r2, #25
 801839c:	430a      	orrs	r2, r1
 801839e:	4916      	ldr	r1, [pc, #88]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80183a0:	4313      	orrs	r3, r2
 80183a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80183a4:	4b14      	ldr	r3, [pc, #80]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	4a13      	ldr	r2, [pc, #76]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80183aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80183ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80183b0:	f7fc fc0c 	bl	8014bcc <HAL_GetTick>
 80183b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80183b6:	e009      	b.n	80183cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80183b8:	f7fc fc08 	bl	8014bcc <HAL_GetTick>
 80183bc:	4602      	mov	r2, r0
 80183be:	68bb      	ldr	r3, [r7, #8]
 80183c0:	1ad3      	subs	r3, r2, r3
 80183c2:	2b02      	cmp	r3, #2
 80183c4:	d902      	bls.n	80183cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80183c6:	2303      	movs	r3, #3
 80183c8:	73fb      	strb	r3, [r7, #15]
          break;
 80183ca:	e005      	b.n	80183d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80183cc:	4b0a      	ldr	r3, [pc, #40]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d0ef      	beq.n	80183b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80183d8:	7bfb      	ldrb	r3, [r7, #15]
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d106      	bne.n	80183ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80183de:	4b06      	ldr	r3, [pc, #24]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80183e0:	691a      	ldr	r2, [r3, #16]
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	699b      	ldr	r3, [r3, #24]
 80183e6:	4904      	ldr	r1, [pc, #16]	@ (80183f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80183e8:	4313      	orrs	r3, r2
 80183ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80183ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80183ee:	4618      	mov	r0, r3
 80183f0:	3710      	adds	r7, #16
 80183f2:	46bd      	mov	sp, r7
 80183f4:	bd80      	pop	{r7, pc}
 80183f6:	bf00      	nop
 80183f8:	40021000 	.word	0x40021000

080183fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80183fc:	b580      	push	{r7, lr}
 80183fe:	b084      	sub	sp, #16
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
 8018404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018406:	2300      	movs	r3, #0
 8018408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801840a:	4b6a      	ldr	r3, [pc, #424]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801840c:	68db      	ldr	r3, [r3, #12]
 801840e:	f003 0303 	and.w	r3, r3, #3
 8018412:	2b00      	cmp	r3, #0
 8018414:	d018      	beq.n	8018448 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8018416:	4b67      	ldr	r3, [pc, #412]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8018418:	68db      	ldr	r3, [r3, #12]
 801841a:	f003 0203 	and.w	r2, r3, #3
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	429a      	cmp	r2, r3
 8018424:	d10d      	bne.n	8018442 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	681b      	ldr	r3, [r3, #0]
       ||
 801842a:	2b00      	cmp	r3, #0
 801842c:	d009      	beq.n	8018442 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 801842e:	4b61      	ldr	r3, [pc, #388]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8018430:	68db      	ldr	r3, [r3, #12]
 8018432:	091b      	lsrs	r3, r3, #4
 8018434:	f003 0307 	and.w	r3, r3, #7
 8018438:	1c5a      	adds	r2, r3, #1
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	685b      	ldr	r3, [r3, #4]
       ||
 801843e:	429a      	cmp	r2, r3
 8018440:	d047      	beq.n	80184d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8018442:	2301      	movs	r3, #1
 8018444:	73fb      	strb	r3, [r7, #15]
 8018446:	e044      	b.n	80184d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	2b03      	cmp	r3, #3
 801844e:	d018      	beq.n	8018482 <RCCEx_PLLSAI2_Config+0x86>
 8018450:	2b03      	cmp	r3, #3
 8018452:	d825      	bhi.n	80184a0 <RCCEx_PLLSAI2_Config+0xa4>
 8018454:	2b01      	cmp	r3, #1
 8018456:	d002      	beq.n	801845e <RCCEx_PLLSAI2_Config+0x62>
 8018458:	2b02      	cmp	r3, #2
 801845a:	d009      	beq.n	8018470 <RCCEx_PLLSAI2_Config+0x74>
 801845c:	e020      	b.n	80184a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801845e:	4b55      	ldr	r3, [pc, #340]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	f003 0302 	and.w	r3, r3, #2
 8018466:	2b00      	cmp	r3, #0
 8018468:	d11d      	bne.n	80184a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 801846a:	2301      	movs	r3, #1
 801846c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801846e:	e01a      	b.n	80184a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8018470:	4b50      	ldr	r3, [pc, #320]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8018478:	2b00      	cmp	r3, #0
 801847a:	d116      	bne.n	80184aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 801847c:	2301      	movs	r3, #1
 801847e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018480:	e013      	b.n	80184aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8018482:	4b4c      	ldr	r3, [pc, #304]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801848a:	2b00      	cmp	r3, #0
 801848c:	d10f      	bne.n	80184ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801848e:	4b49      	ldr	r3, [pc, #292]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8018496:	2b00      	cmp	r3, #0
 8018498:	d109      	bne.n	80184ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 801849a:	2301      	movs	r3, #1
 801849c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801849e:	e006      	b.n	80184ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80184a0:	2301      	movs	r3, #1
 80184a2:	73fb      	strb	r3, [r7, #15]
      break;
 80184a4:	e004      	b.n	80184b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80184a6:	bf00      	nop
 80184a8:	e002      	b.n	80184b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80184aa:	bf00      	nop
 80184ac:	e000      	b.n	80184b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80184ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80184b0:	7bfb      	ldrb	r3, [r7, #15]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d10d      	bne.n	80184d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80184b6:	4b3f      	ldr	r3, [pc, #252]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80184b8:	68db      	ldr	r3, [r3, #12]
 80184ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	6819      	ldr	r1, [r3, #0]
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	685b      	ldr	r3, [r3, #4]
 80184c6:	3b01      	subs	r3, #1
 80184c8:	011b      	lsls	r3, r3, #4
 80184ca:	430b      	orrs	r3, r1
 80184cc:	4939      	ldr	r1, [pc, #228]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80184ce:	4313      	orrs	r3, r2
 80184d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80184d2:	7bfb      	ldrb	r3, [r7, #15]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d167      	bne.n	80185a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80184d8:	4b36      	ldr	r3, [pc, #216]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	4a35      	ldr	r2, [pc, #212]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80184de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80184e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80184e4:	f7fc fb72 	bl	8014bcc <HAL_GetTick>
 80184e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80184ea:	e009      	b.n	8018500 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80184ec:	f7fc fb6e 	bl	8014bcc <HAL_GetTick>
 80184f0:	4602      	mov	r2, r0
 80184f2:	68bb      	ldr	r3, [r7, #8]
 80184f4:	1ad3      	subs	r3, r2, r3
 80184f6:	2b02      	cmp	r3, #2
 80184f8:	d902      	bls.n	8018500 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80184fa:	2303      	movs	r3, #3
 80184fc:	73fb      	strb	r3, [r7, #15]
        break;
 80184fe:	e005      	b.n	801850c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8018500:	4b2c      	ldr	r3, [pc, #176]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8018508:	2b00      	cmp	r3, #0
 801850a:	d1ef      	bne.n	80184ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 801850c:	7bfb      	ldrb	r3, [r7, #15]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d14a      	bne.n	80185a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8018512:	683b      	ldr	r3, [r7, #0]
 8018514:	2b00      	cmp	r3, #0
 8018516:	d111      	bne.n	801853c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8018518:	4b26      	ldr	r3, [pc, #152]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801851a:	695b      	ldr	r3, [r3, #20]
 801851c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8018520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8018524:	687a      	ldr	r2, [r7, #4]
 8018526:	6892      	ldr	r2, [r2, #8]
 8018528:	0211      	lsls	r1, r2, #8
 801852a:	687a      	ldr	r2, [r7, #4]
 801852c:	68d2      	ldr	r2, [r2, #12]
 801852e:	0912      	lsrs	r2, r2, #4
 8018530:	0452      	lsls	r2, r2, #17
 8018532:	430a      	orrs	r2, r1
 8018534:	491f      	ldr	r1, [pc, #124]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8018536:	4313      	orrs	r3, r2
 8018538:	614b      	str	r3, [r1, #20]
 801853a:	e011      	b.n	8018560 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 801853c:	4b1d      	ldr	r3, [pc, #116]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801853e:	695b      	ldr	r3, [r3, #20]
 8018540:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8018544:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8018548:	687a      	ldr	r2, [r7, #4]
 801854a:	6892      	ldr	r2, [r2, #8]
 801854c:	0211      	lsls	r1, r2, #8
 801854e:	687a      	ldr	r2, [r7, #4]
 8018550:	6912      	ldr	r2, [r2, #16]
 8018552:	0852      	lsrs	r2, r2, #1
 8018554:	3a01      	subs	r2, #1
 8018556:	0652      	lsls	r2, r2, #25
 8018558:	430a      	orrs	r2, r1
 801855a:	4916      	ldr	r1, [pc, #88]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801855c:	4313      	orrs	r3, r2
 801855e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8018560:	4b14      	ldr	r3, [pc, #80]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	4a13      	ldr	r2, [pc, #76]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8018566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801856a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801856c:	f7fc fb2e 	bl	8014bcc <HAL_GetTick>
 8018570:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8018572:	e009      	b.n	8018588 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8018574:	f7fc fb2a 	bl	8014bcc <HAL_GetTick>
 8018578:	4602      	mov	r2, r0
 801857a:	68bb      	ldr	r3, [r7, #8]
 801857c:	1ad3      	subs	r3, r2, r3
 801857e:	2b02      	cmp	r3, #2
 8018580:	d902      	bls.n	8018588 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8018582:	2303      	movs	r3, #3
 8018584:	73fb      	strb	r3, [r7, #15]
          break;
 8018586:	e005      	b.n	8018594 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8018588:	4b0a      	ldr	r3, [pc, #40]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8018590:	2b00      	cmp	r3, #0
 8018592:	d0ef      	beq.n	8018574 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8018594:	7bfb      	ldrb	r3, [r7, #15]
 8018596:	2b00      	cmp	r3, #0
 8018598:	d106      	bne.n	80185a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 801859a:	4b06      	ldr	r3, [pc, #24]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801859c:	695a      	ldr	r2, [r3, #20]
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	695b      	ldr	r3, [r3, #20]
 80185a2:	4904      	ldr	r1, [pc, #16]	@ (80185b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80185a4:	4313      	orrs	r3, r2
 80185a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80185a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80185aa:	4618      	mov	r0, r3
 80185ac:	3710      	adds	r7, #16
 80185ae:	46bd      	mov	sp, r7
 80185b0:	bd80      	pop	{r7, pc}
 80185b2:	bf00      	nop
 80185b4:	40021000 	.word	0x40021000

080185b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80185b8:	b580      	push	{r7, lr}
 80185ba:	b084      	sub	sp, #16
 80185bc:	af00      	add	r7, sp, #0
 80185be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d101      	bne.n	80185ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80185c6:	2301      	movs	r3, #1
 80185c8:	e095      	b.n	80186f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d108      	bne.n	80185e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	685b      	ldr	r3, [r3, #4]
 80185d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80185da:	d009      	beq.n	80185f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	2200      	movs	r2, #0
 80185e0:	61da      	str	r2, [r3, #28]
 80185e2:	e005      	b.n	80185f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	2200      	movs	r2, #0
 80185e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	2200      	movs	r2, #0
 80185ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	2200      	movs	r2, #0
 80185f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80185fc:	b2db      	uxtb	r3, r3
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d106      	bne.n	8018610 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	2200      	movs	r2, #0
 8018606:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801860a:	6878      	ldr	r0, [r7, #4]
 801860c:	f7fc f8f6 	bl	80147fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	2202      	movs	r2, #2
 8018614:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	681a      	ldr	r2, [r3, #0]
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8018626:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	68db      	ldr	r3, [r3, #12]
 801862c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8018630:	d902      	bls.n	8018638 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8018632:	2300      	movs	r3, #0
 8018634:	60fb      	str	r3, [r7, #12]
 8018636:	e002      	b.n	801863e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8018638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801863c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	68db      	ldr	r3, [r3, #12]
 8018642:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8018646:	d007      	beq.n	8018658 <HAL_SPI_Init+0xa0>
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	68db      	ldr	r3, [r3, #12]
 801864c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8018650:	d002      	beq.n	8018658 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	2200      	movs	r2, #0
 8018656:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	685b      	ldr	r3, [r3, #4]
 801865c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	689b      	ldr	r3, [r3, #8]
 8018664:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8018668:	431a      	orrs	r2, r3
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	691b      	ldr	r3, [r3, #16]
 801866e:	f003 0302 	and.w	r3, r3, #2
 8018672:	431a      	orrs	r2, r3
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	695b      	ldr	r3, [r3, #20]
 8018678:	f003 0301 	and.w	r3, r3, #1
 801867c:	431a      	orrs	r2, r3
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	699b      	ldr	r3, [r3, #24]
 8018682:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018686:	431a      	orrs	r2, r3
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	69db      	ldr	r3, [r3, #28]
 801868c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018690:	431a      	orrs	r2, r3
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	6a1b      	ldr	r3, [r3, #32]
 8018696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801869a:	ea42 0103 	orr.w	r1, r2, r3
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80186a2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	430a      	orrs	r2, r1
 80186ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	699b      	ldr	r3, [r3, #24]
 80186b2:	0c1b      	lsrs	r3, r3, #16
 80186b4:	f003 0204 	and.w	r2, r3, #4
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80186bc:	f003 0310 	and.w	r3, r3, #16
 80186c0:	431a      	orrs	r2, r3
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80186c6:	f003 0308 	and.w	r3, r3, #8
 80186ca:	431a      	orrs	r2, r3
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	68db      	ldr	r3, [r3, #12]
 80186d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80186d4:	ea42 0103 	orr.w	r1, r2, r3
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	430a      	orrs	r2, r1
 80186e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	2200      	movs	r2, #0
 80186ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	2201      	movs	r2, #1
 80186f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80186f4:	2300      	movs	r3, #0
}
 80186f6:	4618      	mov	r0, r3
 80186f8:	3710      	adds	r7, #16
 80186fa:	46bd      	mov	sp, r7
 80186fc:	bd80      	pop	{r7, pc}

080186fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80186fe:	b580      	push	{r7, lr}
 8018700:	b088      	sub	sp, #32
 8018702:	af00      	add	r7, sp, #0
 8018704:	60f8      	str	r0, [r7, #12]
 8018706:	60b9      	str	r1, [r7, #8]
 8018708:	603b      	str	r3, [r7, #0]
 801870a:	4613      	mov	r3, r2
 801870c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801870e:	f7fc fa5d 	bl	8014bcc <HAL_GetTick>
 8018712:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8018714:	88fb      	ldrh	r3, [r7, #6]
 8018716:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801871e:	b2db      	uxtb	r3, r3
 8018720:	2b01      	cmp	r3, #1
 8018722:	d001      	beq.n	8018728 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8018724:	2302      	movs	r3, #2
 8018726:	e15c      	b.n	80189e2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8018728:	68bb      	ldr	r3, [r7, #8]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d002      	beq.n	8018734 <HAL_SPI_Transmit+0x36>
 801872e:	88fb      	ldrh	r3, [r7, #6]
 8018730:	2b00      	cmp	r3, #0
 8018732:	d101      	bne.n	8018738 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8018734:	2301      	movs	r3, #1
 8018736:	e154      	b.n	80189e2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 801873e:	2b01      	cmp	r3, #1
 8018740:	d101      	bne.n	8018746 <HAL_SPI_Transmit+0x48>
 8018742:	2302      	movs	r3, #2
 8018744:	e14d      	b.n	80189e2 <HAL_SPI_Transmit+0x2e4>
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	2201      	movs	r2, #1
 801874a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	2203      	movs	r2, #3
 8018752:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	2200      	movs	r2, #0
 801875a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	68ba      	ldr	r2, [r7, #8]
 8018760:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	88fa      	ldrh	r2, [r7, #6]
 8018766:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	88fa      	ldrh	r2, [r7, #6]
 801876c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	2200      	movs	r2, #0
 8018772:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8018774:	68fb      	ldr	r3, [r7, #12]
 8018776:	2200      	movs	r2, #0
 8018778:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	2200      	movs	r2, #0
 8018780:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	2200      	movs	r2, #0
 8018788:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	2200      	movs	r2, #0
 801878e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	689b      	ldr	r3, [r3, #8]
 8018794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018798:	d10f      	bne.n	80187ba <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801879a:	68fb      	ldr	r3, [r7, #12]
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	681a      	ldr	r2, [r3, #0]
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80187a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	681a      	ldr	r2, [r3, #0]
 80187b0:	68fb      	ldr	r3, [r7, #12]
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80187b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80187c4:	2b40      	cmp	r3, #64	@ 0x40
 80187c6:	d007      	beq.n	80187d8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	681a      	ldr	r2, [r3, #0]
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80187d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	68db      	ldr	r3, [r3, #12]
 80187dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80187e0:	d952      	bls.n	8018888 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	685b      	ldr	r3, [r3, #4]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d002      	beq.n	80187f0 <HAL_SPI_Transmit+0xf2>
 80187ea:	8b7b      	ldrh	r3, [r7, #26]
 80187ec:	2b01      	cmp	r3, #1
 80187ee:	d145      	bne.n	801887c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80187f0:	68fb      	ldr	r3, [r7, #12]
 80187f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80187f4:	881a      	ldrh	r2, [r3, #0]
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018800:	1c9a      	adds	r2, r3, #2
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8018806:	68fb      	ldr	r3, [r7, #12]
 8018808:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801880a:	b29b      	uxth	r3, r3
 801880c:	3b01      	subs	r3, #1
 801880e:	b29a      	uxth	r2, r3
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8018814:	e032      	b.n	801887c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	689b      	ldr	r3, [r3, #8]
 801881c:	f003 0302 	and.w	r3, r3, #2
 8018820:	2b02      	cmp	r3, #2
 8018822:	d112      	bne.n	801884a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018828:	881a      	ldrh	r2, [r3, #0]
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018834:	1c9a      	adds	r2, r3, #2
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801883e:	b29b      	uxth	r3, r3
 8018840:	3b01      	subs	r3, #1
 8018842:	b29a      	uxth	r2, r3
 8018844:	68fb      	ldr	r3, [r7, #12]
 8018846:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8018848:	e018      	b.n	801887c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801884a:	f7fc f9bf 	bl	8014bcc <HAL_GetTick>
 801884e:	4602      	mov	r2, r0
 8018850:	69fb      	ldr	r3, [r7, #28]
 8018852:	1ad3      	subs	r3, r2, r3
 8018854:	683a      	ldr	r2, [r7, #0]
 8018856:	429a      	cmp	r2, r3
 8018858:	d803      	bhi.n	8018862 <HAL_SPI_Transmit+0x164>
 801885a:	683b      	ldr	r3, [r7, #0]
 801885c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018860:	d102      	bne.n	8018868 <HAL_SPI_Transmit+0x16a>
 8018862:	683b      	ldr	r3, [r7, #0]
 8018864:	2b00      	cmp	r3, #0
 8018866:	d109      	bne.n	801887c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	2201      	movs	r2, #1
 801886c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	2200      	movs	r2, #0
 8018874:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8018878:	2303      	movs	r3, #3
 801887a:	e0b2      	b.n	80189e2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018880:	b29b      	uxth	r3, r3
 8018882:	2b00      	cmp	r3, #0
 8018884:	d1c7      	bne.n	8018816 <HAL_SPI_Transmit+0x118>
 8018886:	e083      	b.n	8018990 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8018888:	68fb      	ldr	r3, [r7, #12]
 801888a:	685b      	ldr	r3, [r3, #4]
 801888c:	2b00      	cmp	r3, #0
 801888e:	d002      	beq.n	8018896 <HAL_SPI_Transmit+0x198>
 8018890:	8b7b      	ldrh	r3, [r7, #26]
 8018892:	2b01      	cmp	r3, #1
 8018894:	d177      	bne.n	8018986 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801889a:	b29b      	uxth	r3, r3
 801889c:	2b01      	cmp	r3, #1
 801889e:	d912      	bls.n	80188c6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80188a4:	881a      	ldrh	r2, [r3, #0]
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80188b0:	1c9a      	adds	r2, r3, #2
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80188ba:	b29b      	uxth	r3, r3
 80188bc:	3b02      	subs	r3, #2
 80188be:	b29a      	uxth	r2, r3
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80188c4:	e05f      	b.n	8018986 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	330c      	adds	r3, #12
 80188d0:	7812      	ldrb	r2, [r2, #0]
 80188d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80188d8:	1c5a      	adds	r2, r3, #1
 80188da:	68fb      	ldr	r3, [r7, #12]
 80188dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80188e2:	b29b      	uxth	r3, r3
 80188e4:	3b01      	subs	r3, #1
 80188e6:	b29a      	uxth	r2, r3
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80188ec:	e04b      	b.n	8018986 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	689b      	ldr	r3, [r3, #8]
 80188f4:	f003 0302 	and.w	r3, r3, #2
 80188f8:	2b02      	cmp	r3, #2
 80188fa:	d12b      	bne.n	8018954 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018900:	b29b      	uxth	r3, r3
 8018902:	2b01      	cmp	r3, #1
 8018904:	d912      	bls.n	801892c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801890a:	881a      	ldrh	r2, [r3, #0]
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018916:	1c9a      	adds	r2, r3, #2
 8018918:	68fb      	ldr	r3, [r7, #12]
 801891a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018920:	b29b      	uxth	r3, r3
 8018922:	3b02      	subs	r3, #2
 8018924:	b29a      	uxth	r2, r3
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	87da      	strh	r2, [r3, #62]	@ 0x3e
 801892a:	e02c      	b.n	8018986 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	330c      	adds	r3, #12
 8018936:	7812      	ldrb	r2, [r2, #0]
 8018938:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801893a:	68fb      	ldr	r3, [r7, #12]
 801893c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801893e:	1c5a      	adds	r2, r3, #1
 8018940:	68fb      	ldr	r3, [r7, #12]
 8018942:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8018948:	b29b      	uxth	r3, r3
 801894a:	3b01      	subs	r3, #1
 801894c:	b29a      	uxth	r2, r3
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8018952:	e018      	b.n	8018986 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8018954:	f7fc f93a 	bl	8014bcc <HAL_GetTick>
 8018958:	4602      	mov	r2, r0
 801895a:	69fb      	ldr	r3, [r7, #28]
 801895c:	1ad3      	subs	r3, r2, r3
 801895e:	683a      	ldr	r2, [r7, #0]
 8018960:	429a      	cmp	r2, r3
 8018962:	d803      	bhi.n	801896c <HAL_SPI_Transmit+0x26e>
 8018964:	683b      	ldr	r3, [r7, #0]
 8018966:	f1b3 3fff 	cmp.w	r3, #4294967295
 801896a:	d102      	bne.n	8018972 <HAL_SPI_Transmit+0x274>
 801896c:	683b      	ldr	r3, [r7, #0]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d109      	bne.n	8018986 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	2201      	movs	r2, #1
 8018976:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	2200      	movs	r2, #0
 801897e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8018982:	2303      	movs	r3, #3
 8018984:	e02d      	b.n	80189e2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801898a:	b29b      	uxth	r3, r3
 801898c:	2b00      	cmp	r3, #0
 801898e:	d1ae      	bne.n	80188ee <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8018990:	69fa      	ldr	r2, [r7, #28]
 8018992:	6839      	ldr	r1, [r7, #0]
 8018994:	68f8      	ldr	r0, [r7, #12]
 8018996:	f000 f947 	bl	8018c28 <SPI_EndRxTxTransaction>
 801899a:	4603      	mov	r3, r0
 801899c:	2b00      	cmp	r3, #0
 801899e:	d002      	beq.n	80189a6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	2220      	movs	r2, #32
 80189a4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	689b      	ldr	r3, [r3, #8]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d10a      	bne.n	80189c4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80189ae:	2300      	movs	r3, #0
 80189b0:	617b      	str	r3, [r7, #20]
 80189b2:	68fb      	ldr	r3, [r7, #12]
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	68db      	ldr	r3, [r3, #12]
 80189b8:	617b      	str	r3, [r7, #20]
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	689b      	ldr	r3, [r3, #8]
 80189c0:	617b      	str	r3, [r7, #20]
 80189c2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	2201      	movs	r2, #1
 80189c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80189cc:	68fb      	ldr	r3, [r7, #12]
 80189ce:	2200      	movs	r2, #0
 80189d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80189d4:	68fb      	ldr	r3, [r7, #12]
 80189d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d001      	beq.n	80189e0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80189dc:	2301      	movs	r3, #1
 80189de:	e000      	b.n	80189e2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80189e0:	2300      	movs	r3, #0
  }
}
 80189e2:	4618      	mov	r0, r3
 80189e4:	3720      	adds	r7, #32
 80189e6:	46bd      	mov	sp, r7
 80189e8:	bd80      	pop	{r7, pc}
	...

080189ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b088      	sub	sp, #32
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	60f8      	str	r0, [r7, #12]
 80189f4:	60b9      	str	r1, [r7, #8]
 80189f6:	603b      	str	r3, [r7, #0]
 80189f8:	4613      	mov	r3, r2
 80189fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80189fc:	f7fc f8e6 	bl	8014bcc <HAL_GetTick>
 8018a00:	4602      	mov	r2, r0
 8018a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a04:	1a9b      	subs	r3, r3, r2
 8018a06:	683a      	ldr	r2, [r7, #0]
 8018a08:	4413      	add	r3, r2
 8018a0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8018a0c:	f7fc f8de 	bl	8014bcc <HAL_GetTick>
 8018a10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8018a12:	4b39      	ldr	r3, [pc, #228]	@ (8018af8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	015b      	lsls	r3, r3, #5
 8018a18:	0d1b      	lsrs	r3, r3, #20
 8018a1a:	69fa      	ldr	r2, [r7, #28]
 8018a1c:	fb02 f303 	mul.w	r3, r2, r3
 8018a20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8018a22:	e054      	b.n	8018ace <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8018a24:	683b      	ldr	r3, [r7, #0]
 8018a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a2a:	d050      	beq.n	8018ace <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8018a2c:	f7fc f8ce 	bl	8014bcc <HAL_GetTick>
 8018a30:	4602      	mov	r2, r0
 8018a32:	69bb      	ldr	r3, [r7, #24]
 8018a34:	1ad3      	subs	r3, r2, r3
 8018a36:	69fa      	ldr	r2, [r7, #28]
 8018a38:	429a      	cmp	r2, r3
 8018a3a:	d902      	bls.n	8018a42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8018a3c:	69fb      	ldr	r3, [r7, #28]
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d13d      	bne.n	8018abe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8018a42:	68fb      	ldr	r3, [r7, #12]
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	685a      	ldr	r2, [r3, #4]
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8018a50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	685b      	ldr	r3, [r3, #4]
 8018a56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018a5a:	d111      	bne.n	8018a80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	689b      	ldr	r3, [r3, #8]
 8018a60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018a64:	d004      	beq.n	8018a70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	689b      	ldr	r3, [r3, #8]
 8018a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018a6e:	d107      	bne.n	8018a80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	681a      	ldr	r2, [r3, #0]
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8018a7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8018a88:	d10f      	bne.n	8018aaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	681a      	ldr	r2, [r3, #0]
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8018a98:	601a      	str	r2, [r3, #0]
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	681a      	ldr	r2, [r3, #0]
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8018aa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8018aaa:	68fb      	ldr	r3, [r7, #12]
 8018aac:	2201      	movs	r2, #1
 8018aae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	2200      	movs	r2, #0
 8018ab6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8018aba:	2303      	movs	r3, #3
 8018abc:	e017      	b.n	8018aee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8018abe:	697b      	ldr	r3, [r7, #20]
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d101      	bne.n	8018ac8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8018ac4:	2300      	movs	r3, #0
 8018ac6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8018ac8:	697b      	ldr	r3, [r7, #20]
 8018aca:	3b01      	subs	r3, #1
 8018acc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	689a      	ldr	r2, [r3, #8]
 8018ad4:	68bb      	ldr	r3, [r7, #8]
 8018ad6:	4013      	ands	r3, r2
 8018ad8:	68ba      	ldr	r2, [r7, #8]
 8018ada:	429a      	cmp	r2, r3
 8018adc:	bf0c      	ite	eq
 8018ade:	2301      	moveq	r3, #1
 8018ae0:	2300      	movne	r3, #0
 8018ae2:	b2db      	uxtb	r3, r3
 8018ae4:	461a      	mov	r2, r3
 8018ae6:	79fb      	ldrb	r3, [r7, #7]
 8018ae8:	429a      	cmp	r2, r3
 8018aea:	d19b      	bne.n	8018a24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8018aec:	2300      	movs	r3, #0
}
 8018aee:	4618      	mov	r0, r3
 8018af0:	3720      	adds	r7, #32
 8018af2:	46bd      	mov	sp, r7
 8018af4:	bd80      	pop	{r7, pc}
 8018af6:	bf00      	nop
 8018af8:	20000384 	.word	0x20000384

08018afc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8018afc:	b580      	push	{r7, lr}
 8018afe:	b08a      	sub	sp, #40	@ 0x28
 8018b00:	af00      	add	r7, sp, #0
 8018b02:	60f8      	str	r0, [r7, #12]
 8018b04:	60b9      	str	r1, [r7, #8]
 8018b06:	607a      	str	r2, [r7, #4]
 8018b08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8018b0e:	f7fc f85d 	bl	8014bcc <HAL_GetTick>
 8018b12:	4602      	mov	r2, r0
 8018b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b16:	1a9b      	subs	r3, r3, r2
 8018b18:	683a      	ldr	r2, [r7, #0]
 8018b1a:	4413      	add	r3, r2
 8018b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8018b1e:	f7fc f855 	bl	8014bcc <HAL_GetTick>
 8018b22:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	330c      	adds	r3, #12
 8018b2a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8018b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8018c24 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8018b2e:	681a      	ldr	r2, [r3, #0]
 8018b30:	4613      	mov	r3, r2
 8018b32:	009b      	lsls	r3, r3, #2
 8018b34:	4413      	add	r3, r2
 8018b36:	00da      	lsls	r2, r3, #3
 8018b38:	1ad3      	subs	r3, r2, r3
 8018b3a:	0d1b      	lsrs	r3, r3, #20
 8018b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018b3e:	fb02 f303 	mul.w	r3, r2, r3
 8018b42:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8018b44:	e060      	b.n	8018c08 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8018b46:	68bb      	ldr	r3, [r7, #8]
 8018b48:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8018b4c:	d107      	bne.n	8018b5e <SPI_WaitFifoStateUntilTimeout+0x62>
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d104      	bne.n	8018b5e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8018b54:	69fb      	ldr	r3, [r7, #28]
 8018b56:	781b      	ldrb	r3, [r3, #0]
 8018b58:	b2db      	uxtb	r3, r3
 8018b5a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8018b5c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8018b5e:	683b      	ldr	r3, [r7, #0]
 8018b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b64:	d050      	beq.n	8018c08 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8018b66:	f7fc f831 	bl	8014bcc <HAL_GetTick>
 8018b6a:	4602      	mov	r2, r0
 8018b6c:	6a3b      	ldr	r3, [r7, #32]
 8018b6e:	1ad3      	subs	r3, r2, r3
 8018b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018b72:	429a      	cmp	r2, r3
 8018b74:	d902      	bls.n	8018b7c <SPI_WaitFifoStateUntilTimeout+0x80>
 8018b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d13d      	bne.n	8018bf8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	685a      	ldr	r2, [r3, #4]
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8018b8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	685b      	ldr	r3, [r3, #4]
 8018b90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8018b94:	d111      	bne.n	8018bba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	689b      	ldr	r3, [r3, #8]
 8018b9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018b9e:	d004      	beq.n	8018baa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	689b      	ldr	r3, [r3, #8]
 8018ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018ba8:	d107      	bne.n	8018bba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	681a      	ldr	r2, [r3, #0]
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8018bb8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8018bba:	68fb      	ldr	r3, [r7, #12]
 8018bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018bbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8018bc2:	d10f      	bne.n	8018be4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	681a      	ldr	r2, [r3, #0]
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8018bd2:	601a      	str	r2, [r3, #0]
 8018bd4:	68fb      	ldr	r3, [r7, #12]
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	681a      	ldr	r2, [r3, #0]
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8018be2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	2201      	movs	r2, #1
 8018be8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	2200      	movs	r2, #0
 8018bf0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8018bf4:	2303      	movs	r3, #3
 8018bf6:	e010      	b.n	8018c1a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8018bf8:	69bb      	ldr	r3, [r7, #24]
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d101      	bne.n	8018c02 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8018bfe:	2300      	movs	r3, #0
 8018c00:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8018c02:	69bb      	ldr	r3, [r7, #24]
 8018c04:	3b01      	subs	r3, #1
 8018c06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8018c08:	68fb      	ldr	r3, [r7, #12]
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	689a      	ldr	r2, [r3, #8]
 8018c0e:	68bb      	ldr	r3, [r7, #8]
 8018c10:	4013      	ands	r3, r2
 8018c12:	687a      	ldr	r2, [r7, #4]
 8018c14:	429a      	cmp	r2, r3
 8018c16:	d196      	bne.n	8018b46 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8018c18:	2300      	movs	r3, #0
}
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	3728      	adds	r7, #40	@ 0x28
 8018c1e:	46bd      	mov	sp, r7
 8018c20:	bd80      	pop	{r7, pc}
 8018c22:	bf00      	nop
 8018c24:	20000384 	.word	0x20000384

08018c28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b086      	sub	sp, #24
 8018c2c:	af02      	add	r7, sp, #8
 8018c2e:	60f8      	str	r0, [r7, #12]
 8018c30:	60b9      	str	r1, [r7, #8]
 8018c32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	9300      	str	r3, [sp, #0]
 8018c38:	68bb      	ldr	r3, [r7, #8]
 8018c3a:	2200      	movs	r2, #0
 8018c3c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8018c40:	68f8      	ldr	r0, [r7, #12]
 8018c42:	f7ff ff5b 	bl	8018afc <SPI_WaitFifoStateUntilTimeout>
 8018c46:	4603      	mov	r3, r0
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d007      	beq.n	8018c5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018c50:	f043 0220 	orr.w	r2, r3, #32
 8018c54:	68fb      	ldr	r3, [r7, #12]
 8018c56:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8018c58:	2303      	movs	r3, #3
 8018c5a:	e027      	b.n	8018cac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	9300      	str	r3, [sp, #0]
 8018c60:	68bb      	ldr	r3, [r7, #8]
 8018c62:	2200      	movs	r2, #0
 8018c64:	2180      	movs	r1, #128	@ 0x80
 8018c66:	68f8      	ldr	r0, [r7, #12]
 8018c68:	f7ff fec0 	bl	80189ec <SPI_WaitFlagStateUntilTimeout>
 8018c6c:	4603      	mov	r3, r0
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d007      	beq.n	8018c82 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018c72:	68fb      	ldr	r3, [r7, #12]
 8018c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018c76:	f043 0220 	orr.w	r2, r3, #32
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8018c7e:	2303      	movs	r3, #3
 8018c80:	e014      	b.n	8018cac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	9300      	str	r3, [sp, #0]
 8018c86:	68bb      	ldr	r3, [r7, #8]
 8018c88:	2200      	movs	r2, #0
 8018c8a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8018c8e:	68f8      	ldr	r0, [r7, #12]
 8018c90:	f7ff ff34 	bl	8018afc <SPI_WaitFifoStateUntilTimeout>
 8018c94:	4603      	mov	r3, r0
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d007      	beq.n	8018caa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018c9e:	f043 0220 	orr.w	r2, r3, #32
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8018ca6:	2303      	movs	r3, #3
 8018ca8:	e000      	b.n	8018cac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8018caa:	2300      	movs	r3, #0
}
 8018cac:	4618      	mov	r0, r3
 8018cae:	3710      	adds	r7, #16
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	bd80      	pop	{r7, pc}

08018cb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018cb4:	b580      	push	{r7, lr}
 8018cb6:	b082      	sub	sp, #8
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d101      	bne.n	8018cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018cc2:	2301      	movs	r3, #1
 8018cc4:	e040      	b.n	8018d48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d106      	bne.n	8018cdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	2200      	movs	r2, #0
 8018cd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8018cd6:	6878      	ldr	r0, [r7, #4]
 8018cd8:	f7fb fe82 	bl	80149e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	2224      	movs	r2, #36	@ 0x24
 8018ce0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	681a      	ldr	r2, [r3, #0]
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	f022 0201 	bic.w	r2, r2, #1
 8018cf0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d002      	beq.n	8018d00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8018cfa:	6878      	ldr	r0, [r7, #4]
 8018cfc:	f000 ff30 	bl	8019b60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8018d00:	6878      	ldr	r0, [r7, #4]
 8018d02:	f000 fc75 	bl	80195f0 <UART_SetConfig>
 8018d06:	4603      	mov	r3, r0
 8018d08:	2b01      	cmp	r3, #1
 8018d0a:	d101      	bne.n	8018d10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8018d0c:	2301      	movs	r3, #1
 8018d0e:	e01b      	b.n	8018d48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	685a      	ldr	r2, [r3, #4]
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8018d1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	689a      	ldr	r2, [r3, #8]
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8018d2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	681a      	ldr	r2, [r3, #0]
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	f042 0201 	orr.w	r2, r2, #1
 8018d3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018d40:	6878      	ldr	r0, [r7, #4]
 8018d42:	f000 ffaf 	bl	8019ca4 <UART_CheckIdleState>
 8018d46:	4603      	mov	r3, r0
}
 8018d48:	4618      	mov	r0, r3
 8018d4a:	3708      	adds	r7, #8
 8018d4c:	46bd      	mov	sp, r7
 8018d4e:	bd80      	pop	{r7, pc}

08018d50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018d50:	b580      	push	{r7, lr}
 8018d52:	b08a      	sub	sp, #40	@ 0x28
 8018d54:	af02      	add	r7, sp, #8
 8018d56:	60f8      	str	r0, [r7, #12]
 8018d58:	60b9      	str	r1, [r7, #8]
 8018d5a:	603b      	str	r3, [r7, #0]
 8018d5c:	4613      	mov	r3, r2
 8018d5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018d64:	2b20      	cmp	r3, #32
 8018d66:	d177      	bne.n	8018e58 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8018d68:	68bb      	ldr	r3, [r7, #8]
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d002      	beq.n	8018d74 <HAL_UART_Transmit+0x24>
 8018d6e:	88fb      	ldrh	r3, [r7, #6]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d101      	bne.n	8018d78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8018d74:	2301      	movs	r3, #1
 8018d76:	e070      	b.n	8018e5a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	2200      	movs	r2, #0
 8018d7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8018d80:	68fb      	ldr	r3, [r7, #12]
 8018d82:	2221      	movs	r2, #33	@ 0x21
 8018d84:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8018d86:	f7fb ff21 	bl	8014bcc <HAL_GetTick>
 8018d8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	88fa      	ldrh	r2, [r7, #6]
 8018d90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	88fa      	ldrh	r2, [r7, #6]
 8018d98:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018d9c:	68fb      	ldr	r3, [r7, #12]
 8018d9e:	689b      	ldr	r3, [r3, #8]
 8018da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018da4:	d108      	bne.n	8018db8 <HAL_UART_Transmit+0x68>
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	691b      	ldr	r3, [r3, #16]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d104      	bne.n	8018db8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8018dae:	2300      	movs	r3, #0
 8018db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8018db2:	68bb      	ldr	r3, [r7, #8]
 8018db4:	61bb      	str	r3, [r7, #24]
 8018db6:	e003      	b.n	8018dc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8018db8:	68bb      	ldr	r3, [r7, #8]
 8018dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8018dc0:	e02f      	b.n	8018e22 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8018dc2:	683b      	ldr	r3, [r7, #0]
 8018dc4:	9300      	str	r3, [sp, #0]
 8018dc6:	697b      	ldr	r3, [r7, #20]
 8018dc8:	2200      	movs	r2, #0
 8018dca:	2180      	movs	r1, #128	@ 0x80
 8018dcc:	68f8      	ldr	r0, [r7, #12]
 8018dce:	f001 f811 	bl	8019df4 <UART_WaitOnFlagUntilTimeout>
 8018dd2:	4603      	mov	r3, r0
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d004      	beq.n	8018de2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8018dd8:	68fb      	ldr	r3, [r7, #12]
 8018dda:	2220      	movs	r2, #32
 8018ddc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8018dde:	2303      	movs	r3, #3
 8018de0:	e03b      	b.n	8018e5a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8018de2:	69fb      	ldr	r3, [r7, #28]
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d10b      	bne.n	8018e00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8018de8:	69bb      	ldr	r3, [r7, #24]
 8018dea:	881a      	ldrh	r2, [r3, #0]
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018df4:	b292      	uxth	r2, r2
 8018df6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8018df8:	69bb      	ldr	r3, [r7, #24]
 8018dfa:	3302      	adds	r3, #2
 8018dfc:	61bb      	str	r3, [r7, #24]
 8018dfe:	e007      	b.n	8018e10 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8018e00:	69fb      	ldr	r3, [r7, #28]
 8018e02:	781a      	ldrb	r2, [r3, #0]
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8018e0a:	69fb      	ldr	r3, [r7, #28]
 8018e0c:	3301      	adds	r3, #1
 8018e0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8018e16:	b29b      	uxth	r3, r3
 8018e18:	3b01      	subs	r3, #1
 8018e1a:	b29a      	uxth	r2, r3
 8018e1c:	68fb      	ldr	r3, [r7, #12]
 8018e1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8018e22:	68fb      	ldr	r3, [r7, #12]
 8018e24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8018e28:	b29b      	uxth	r3, r3
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d1c9      	bne.n	8018dc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8018e2e:	683b      	ldr	r3, [r7, #0]
 8018e30:	9300      	str	r3, [sp, #0]
 8018e32:	697b      	ldr	r3, [r7, #20]
 8018e34:	2200      	movs	r2, #0
 8018e36:	2140      	movs	r1, #64	@ 0x40
 8018e38:	68f8      	ldr	r0, [r7, #12]
 8018e3a:	f000 ffdb 	bl	8019df4 <UART_WaitOnFlagUntilTimeout>
 8018e3e:	4603      	mov	r3, r0
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d004      	beq.n	8018e4e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	2220      	movs	r2, #32
 8018e48:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8018e4a:	2303      	movs	r3, #3
 8018e4c:	e005      	b.n	8018e5a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	2220      	movs	r2, #32
 8018e52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8018e54:	2300      	movs	r3, #0
 8018e56:	e000      	b.n	8018e5a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8018e58:	2302      	movs	r3, #2
  }
}
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	3720      	adds	r7, #32
 8018e5e:	46bd      	mov	sp, r7
 8018e60:	bd80      	pop	{r7, pc}
	...

08018e64 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8018e64:	b480      	push	{r7}
 8018e66:	b08b      	sub	sp, #44	@ 0x2c
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	60f8      	str	r0, [r7, #12]
 8018e6c:	60b9      	str	r1, [r7, #8]
 8018e6e:	4613      	mov	r3, r2
 8018e70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018e72:	68fb      	ldr	r3, [r7, #12]
 8018e74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018e76:	2b20      	cmp	r3, #32
 8018e78:	d147      	bne.n	8018f0a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8018e7a:	68bb      	ldr	r3, [r7, #8]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d002      	beq.n	8018e86 <HAL_UART_Transmit_IT+0x22>
 8018e80:	88fb      	ldrh	r3, [r7, #6]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d101      	bne.n	8018e8a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8018e86:	2301      	movs	r3, #1
 8018e88:	e040      	b.n	8018f0c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8018e8a:	68fb      	ldr	r3, [r7, #12]
 8018e8c:	68ba      	ldr	r2, [r7, #8]
 8018e8e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8018e90:	68fb      	ldr	r3, [r7, #12]
 8018e92:	88fa      	ldrh	r2, [r7, #6]
 8018e94:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	88fa      	ldrh	r2, [r7, #6]
 8018e9c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018ea6:	68fb      	ldr	r3, [r7, #12]
 8018ea8:	2200      	movs	r2, #0
 8018eaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	2221      	movs	r2, #33	@ 0x21
 8018eb2:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	689b      	ldr	r3, [r3, #8]
 8018eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018ebc:	d107      	bne.n	8018ece <HAL_UART_Transmit_IT+0x6a>
 8018ebe:	68fb      	ldr	r3, [r7, #12]
 8018ec0:	691b      	ldr	r3, [r3, #16]
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	d103      	bne.n	8018ece <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	4a13      	ldr	r2, [pc, #76]	@ (8018f18 <HAL_UART_Transmit_IT+0xb4>)
 8018eca:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018ecc:	e002      	b.n	8018ed4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8018ece:	68fb      	ldr	r3, [r7, #12]
 8018ed0:	4a12      	ldr	r2, [pc, #72]	@ (8018f1c <HAL_UART_Transmit_IT+0xb8>)
 8018ed2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018eda:	697b      	ldr	r3, [r7, #20]
 8018edc:	e853 3f00 	ldrex	r3, [r3]
 8018ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8018ee2:	693b      	ldr	r3, [r7, #16]
 8018ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	461a      	mov	r2, r3
 8018ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ef2:	623b      	str	r3, [r7, #32]
 8018ef4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018ef6:	69f9      	ldr	r1, [r7, #28]
 8018ef8:	6a3a      	ldr	r2, [r7, #32]
 8018efa:	e841 2300 	strex	r3, r2, [r1]
 8018efe:	61bb      	str	r3, [r7, #24]
   return(result);
 8018f00:	69bb      	ldr	r3, [r7, #24]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d1e6      	bne.n	8018ed4 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8018f06:	2300      	movs	r3, #0
 8018f08:	e000      	b.n	8018f0c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8018f0a:	2302      	movs	r3, #2
  }
}
 8018f0c:	4618      	mov	r0, r3
 8018f0e:	372c      	adds	r7, #44	@ 0x2c
 8018f10:	46bd      	mov	sp, r7
 8018f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f16:	4770      	bx	lr
 8018f18:	0801a207 	.word	0x0801a207
 8018f1c:	0801a151 	.word	0x0801a151

08018f20 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018f20:	b580      	push	{r7, lr}
 8018f22:	b08a      	sub	sp, #40	@ 0x28
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	60f8      	str	r0, [r7, #12]
 8018f28:	60b9      	str	r1, [r7, #8]
 8018f2a:	4613      	mov	r3, r2
 8018f2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018f34:	2b20      	cmp	r3, #32
 8018f36:	d137      	bne.n	8018fa8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8018f38:	68bb      	ldr	r3, [r7, #8]
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d002      	beq.n	8018f44 <HAL_UART_Receive_IT+0x24>
 8018f3e:	88fb      	ldrh	r3, [r7, #6]
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d101      	bne.n	8018f48 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8018f44:	2301      	movs	r3, #1
 8018f46:	e030      	b.n	8018faa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	2200      	movs	r2, #0
 8018f4c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	4a18      	ldr	r2, [pc, #96]	@ (8018fb4 <HAL_UART_Receive_IT+0x94>)
 8018f54:	4293      	cmp	r3, r2
 8018f56:	d01f      	beq.n	8018f98 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	685b      	ldr	r3, [r3, #4]
 8018f5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d018      	beq.n	8018f98 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018f6c:	697b      	ldr	r3, [r7, #20]
 8018f6e:	e853 3f00 	ldrex	r3, [r3]
 8018f72:	613b      	str	r3, [r7, #16]
   return(result);
 8018f74:	693b      	ldr	r3, [r7, #16]
 8018f76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8018f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8018f7c:	68fb      	ldr	r3, [r7, #12]
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	461a      	mov	r2, r3
 8018f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f84:	623b      	str	r3, [r7, #32]
 8018f86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018f88:	69f9      	ldr	r1, [r7, #28]
 8018f8a:	6a3a      	ldr	r2, [r7, #32]
 8018f8c:	e841 2300 	strex	r3, r2, [r1]
 8018f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8018f92:	69bb      	ldr	r3, [r7, #24]
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d1e6      	bne.n	8018f66 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8018f98:	88fb      	ldrh	r3, [r7, #6]
 8018f9a:	461a      	mov	r2, r3
 8018f9c:	68b9      	ldr	r1, [r7, #8]
 8018f9e:	68f8      	ldr	r0, [r7, #12]
 8018fa0:	f000 ff96 	bl	8019ed0 <UART_Start_Receive_IT>
 8018fa4:	4603      	mov	r3, r0
 8018fa6:	e000      	b.n	8018faa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018fa8:	2302      	movs	r3, #2
  }
}
 8018faa:	4618      	mov	r0, r3
 8018fac:	3728      	adds	r7, #40	@ 0x28
 8018fae:	46bd      	mov	sp, r7
 8018fb0:	bd80      	pop	{r7, pc}
 8018fb2:	bf00      	nop
 8018fb4:	40008000 	.word	0x40008000

08018fb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8018fb8:	b580      	push	{r7, lr}
 8018fba:	b0ba      	sub	sp, #232	@ 0xe8
 8018fbc:	af00      	add	r7, sp, #0
 8018fbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	69db      	ldr	r3, [r3, #28]
 8018fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	689b      	ldr	r3, [r3, #8]
 8018fda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8018fde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8018fe2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8018fe6:	4013      	ands	r3, r2
 8018fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8018fec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d115      	bne.n	8019020 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8018ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018ff8:	f003 0320 	and.w	r3, r3, #32
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d00f      	beq.n	8019020 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8019000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019004:	f003 0320 	and.w	r3, r3, #32
 8019008:	2b00      	cmp	r3, #0
 801900a:	d009      	beq.n	8019020 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019010:	2b00      	cmp	r3, #0
 8019012:	f000 82ca 	beq.w	80195aa <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801901a:	6878      	ldr	r0, [r7, #4]
 801901c:	4798      	blx	r3
      }
      return;
 801901e:	e2c4      	b.n	80195aa <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8019020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8019024:	2b00      	cmp	r3, #0
 8019026:	f000 8117 	beq.w	8019258 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801902a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801902e:	f003 0301 	and.w	r3, r3, #1
 8019032:	2b00      	cmp	r3, #0
 8019034:	d106      	bne.n	8019044 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8019036:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801903a:	4b85      	ldr	r3, [pc, #532]	@ (8019250 <HAL_UART_IRQHandler+0x298>)
 801903c:	4013      	ands	r3, r2
 801903e:	2b00      	cmp	r3, #0
 8019040:	f000 810a 	beq.w	8019258 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019048:	f003 0301 	and.w	r3, r3, #1
 801904c:	2b00      	cmp	r3, #0
 801904e:	d011      	beq.n	8019074 <HAL_UART_IRQHandler+0xbc>
 8019050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019058:	2b00      	cmp	r3, #0
 801905a:	d00b      	beq.n	8019074 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	2201      	movs	r2, #1
 8019062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801906a:	f043 0201 	orr.w	r2, r3, #1
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019078:	f003 0302 	and.w	r3, r3, #2
 801907c:	2b00      	cmp	r3, #0
 801907e:	d011      	beq.n	80190a4 <HAL_UART_IRQHandler+0xec>
 8019080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019084:	f003 0301 	and.w	r3, r3, #1
 8019088:	2b00      	cmp	r3, #0
 801908a:	d00b      	beq.n	80190a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	2202      	movs	r2, #2
 8019092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801909a:	f043 0204 	orr.w	r2, r3, #4
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80190a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80190a8:	f003 0304 	and.w	r3, r3, #4
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d011      	beq.n	80190d4 <HAL_UART_IRQHandler+0x11c>
 80190b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80190b4:	f003 0301 	and.w	r3, r3, #1
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d00b      	beq.n	80190d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	2204      	movs	r2, #4
 80190c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80190ca:	f043 0202 	orr.w	r2, r3, #2
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80190d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80190d8:	f003 0308 	and.w	r3, r3, #8
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d017      	beq.n	8019110 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80190e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80190e4:	f003 0320 	and.w	r3, r3, #32
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d105      	bne.n	80190f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80190ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80190f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d00b      	beq.n	8019110 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	681b      	ldr	r3, [r3, #0]
 80190fc:	2208      	movs	r2, #8
 80190fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8019106:	f043 0208 	orr.w	r2, r3, #8
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8019110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019118:	2b00      	cmp	r3, #0
 801911a:	d012      	beq.n	8019142 <HAL_UART_IRQHandler+0x18a>
 801911c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019120:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8019124:	2b00      	cmp	r3, #0
 8019126:	d00c      	beq.n	8019142 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019130:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8019138:	f043 0220 	orr.w	r2, r3, #32
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8019148:	2b00      	cmp	r3, #0
 801914a:	f000 8230 	beq.w	80195ae <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801914e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019152:	f003 0320 	and.w	r3, r3, #32
 8019156:	2b00      	cmp	r3, #0
 8019158:	d00d      	beq.n	8019176 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801915a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801915e:	f003 0320 	and.w	r3, r3, #32
 8019162:	2b00      	cmp	r3, #0
 8019164:	d007      	beq.n	8019176 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801916a:	2b00      	cmp	r3, #0
 801916c:	d003      	beq.n	8019176 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019172:	6878      	ldr	r0, [r7, #4]
 8019174:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801917c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	689b      	ldr	r3, [r3, #8]
 8019186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801918a:	2b40      	cmp	r3, #64	@ 0x40
 801918c:	d005      	beq.n	801919a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801918e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8019192:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019196:	2b00      	cmp	r3, #0
 8019198:	d04f      	beq.n	801923a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801919a:	6878      	ldr	r0, [r7, #4]
 801919c:	f000 ff5e 	bl	801a05c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	689b      	ldr	r3, [r3, #8]
 80191a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80191aa:	2b40      	cmp	r3, #64	@ 0x40
 80191ac:	d141      	bne.n	8019232 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	3308      	adds	r3, #8
 80191b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80191b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80191bc:	e853 3f00 	ldrex	r3, [r3]
 80191c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80191c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80191c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80191cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	3308      	adds	r3, #8
 80191d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80191da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80191de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80191e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80191e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80191ea:	e841 2300 	strex	r3, r2, [r1]
 80191ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80191f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d1d9      	bne.n	80191ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d013      	beq.n	801922a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019206:	4a13      	ldr	r2, [pc, #76]	@ (8019254 <HAL_UART_IRQHandler+0x29c>)
 8019208:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801920e:	4618      	mov	r0, r3
 8019210:	f7fd fc97 	bl	8016b42 <HAL_DMA_Abort_IT>
 8019214:	4603      	mov	r3, r0
 8019216:	2b00      	cmp	r3, #0
 8019218:	d017      	beq.n	801924a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801921e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019220:	687a      	ldr	r2, [r7, #4]
 8019222:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8019224:	4610      	mov	r0, r2
 8019226:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019228:	e00f      	b.n	801924a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801922a:	6878      	ldr	r0, [r7, #4]
 801922c:	f000 f9ca 	bl	80195c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019230:	e00b      	b.n	801924a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019232:	6878      	ldr	r0, [r7, #4]
 8019234:	f000 f9c6 	bl	80195c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019238:	e007      	b.n	801924a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801923a:	6878      	ldr	r0, [r7, #4]
 801923c:	f000 f9c2 	bl	80195c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	2200      	movs	r2, #0
 8019244:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8019248:	e1b1      	b.n	80195ae <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801924a:	bf00      	nop
    return;
 801924c:	e1af      	b.n	80195ae <HAL_UART_IRQHandler+0x5f6>
 801924e:	bf00      	nop
 8019250:	04000120 	.word	0x04000120
 8019254:	0801a125 	.word	0x0801a125

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801925c:	2b01      	cmp	r3, #1
 801925e:	f040 816a 	bne.w	8019536 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8019262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019266:	f003 0310 	and.w	r3, r3, #16
 801926a:	2b00      	cmp	r3, #0
 801926c:	f000 8163 	beq.w	8019536 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8019270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019274:	f003 0310 	and.w	r3, r3, #16
 8019278:	2b00      	cmp	r3, #0
 801927a:	f000 815c 	beq.w	8019536 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	2210      	movs	r2, #16
 8019284:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	689b      	ldr	r3, [r3, #8]
 801928c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019290:	2b40      	cmp	r3, #64	@ 0x40
 8019292:	f040 80d4 	bne.w	801943e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	685b      	ldr	r3, [r3, #4]
 801929e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80192a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	f000 80ad 	beq.w	8019406 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80192b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80192b6:	429a      	cmp	r2, r3
 80192b8:	f080 80a5 	bcs.w	8019406 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80192c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	f003 0320 	and.w	r3, r3, #32
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	f040 8086 	bne.w	80193e4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	681b      	ldr	r3, [r3, #0]
 80192dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80192e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80192e4:	e853 3f00 	ldrex	r3, [r3]
 80192e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80192ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80192f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80192f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	461a      	mov	r2, r3
 80192fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8019302:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8019306:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801930a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801930e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8019312:	e841 2300 	strex	r3, r2, [r1]
 8019316:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801931a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801931e:	2b00      	cmp	r3, #0
 8019320:	d1da      	bne.n	80192d8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	3308      	adds	r3, #8
 8019328:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801932a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801932c:	e853 3f00 	ldrex	r3, [r3]
 8019330:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8019332:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019334:	f023 0301 	bic.w	r3, r3, #1
 8019338:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	3308      	adds	r3, #8
 8019342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8019346:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801934a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801934c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801934e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8019352:	e841 2300 	strex	r3, r2, [r1]
 8019356:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8019358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801935a:	2b00      	cmp	r3, #0
 801935c:	d1e1      	bne.n	8019322 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	3308      	adds	r3, #8
 8019364:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019368:	e853 3f00 	ldrex	r3, [r3]
 801936c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801936e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8019374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	3308      	adds	r3, #8
 801937e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8019382:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8019384:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019386:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8019388:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801938a:	e841 2300 	strex	r3, r2, [r1]
 801938e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8019390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019392:	2b00      	cmp	r3, #0
 8019394:	d1e3      	bne.n	801935e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	2220      	movs	r2, #32
 801939a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	2200      	movs	r2, #0
 80193a2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80193aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80193ac:	e853 3f00 	ldrex	r3, [r3]
 80193b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80193b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80193b4:	f023 0310 	bic.w	r3, r3, #16
 80193b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	461a      	mov	r2, r3
 80193c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80193c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80193c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80193ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80193cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80193ce:	e841 2300 	strex	r3, r2, [r1]
 80193d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80193d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d1e4      	bne.n	80193a4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80193de:	4618      	mov	r0, r3
 80193e0:	f7fd fb71 	bl	8016ac6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	2202      	movs	r2, #2
 80193e8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80193f6:	b29b      	uxth	r3, r3
 80193f8:	1ad3      	subs	r3, r2, r3
 80193fa:	b29b      	uxth	r3, r3
 80193fc:	4619      	mov	r1, r3
 80193fe:	6878      	ldr	r0, [r7, #4]
 8019400:	f000 f8ea 	bl	80195d8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8019404:	e0d5      	b.n	80195b2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801940c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8019410:	429a      	cmp	r2, r3
 8019412:	f040 80ce 	bne.w	80195b2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	f003 0320 	and.w	r3, r3, #32
 8019422:	2b20      	cmp	r3, #32
 8019424:	f040 80c5 	bne.w	80195b2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	2202      	movs	r2, #2
 801942c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8019434:	4619      	mov	r1, r3
 8019436:	6878      	ldr	r0, [r7, #4]
 8019438:	f000 f8ce 	bl	80195d8 <HAL_UARTEx_RxEventCallback>
      return;
 801943c:	e0b9      	b.n	80195b2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801944a:	b29b      	uxth	r3, r3
 801944c:	1ad3      	subs	r3, r2, r3
 801944e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8019458:	b29b      	uxth	r3, r3
 801945a:	2b00      	cmp	r3, #0
 801945c:	f000 80ab 	beq.w	80195b6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8019460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8019464:	2b00      	cmp	r3, #0
 8019466:	f000 80a6 	beq.w	80195b6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019472:	e853 3f00 	ldrex	r3, [r3]
 8019476:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801947a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801947e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	681b      	ldr	r3, [r3, #0]
 8019486:	461a      	mov	r2, r3
 8019488:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801948c:	647b      	str	r3, [r7, #68]	@ 0x44
 801948e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019490:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019492:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019494:	e841 2300 	strex	r3, r2, [r1]
 8019498:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801949a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801949c:	2b00      	cmp	r3, #0
 801949e:	d1e4      	bne.n	801946a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	3308      	adds	r3, #8
 80194a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194aa:	e853 3f00 	ldrex	r3, [r3]
 80194ae:	623b      	str	r3, [r7, #32]
   return(result);
 80194b0:	6a3b      	ldr	r3, [r7, #32]
 80194b2:	f023 0301 	bic.w	r3, r3, #1
 80194b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	3308      	adds	r3, #8
 80194c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80194c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80194c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80194c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80194ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80194cc:	e841 2300 	strex	r3, r2, [r1]
 80194d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80194d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d1e3      	bne.n	80194a0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	2220      	movs	r2, #32
 80194dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	2200      	movs	r2, #0
 80194e4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	2200      	movs	r2, #0
 80194ea:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194f2:	693b      	ldr	r3, [r7, #16]
 80194f4:	e853 3f00 	ldrex	r3, [r3]
 80194f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	f023 0310 	bic.w	r3, r3, #16
 8019500:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	461a      	mov	r2, r3
 801950a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801950e:	61fb      	str	r3, [r7, #28]
 8019510:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019512:	69b9      	ldr	r1, [r7, #24]
 8019514:	69fa      	ldr	r2, [r7, #28]
 8019516:	e841 2300 	strex	r3, r2, [r1]
 801951a:	617b      	str	r3, [r7, #20]
   return(result);
 801951c:	697b      	ldr	r3, [r7, #20]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d1e4      	bne.n	80194ec <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	2202      	movs	r2, #2
 8019526:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8019528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801952c:	4619      	mov	r1, r3
 801952e:	6878      	ldr	r0, [r7, #4]
 8019530:	f000 f852 	bl	80195d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8019534:	e03f      	b.n	80195b6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8019536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801953a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801953e:	2b00      	cmp	r3, #0
 8019540:	d00e      	beq.n	8019560 <HAL_UART_IRQHandler+0x5a8>
 8019542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801954a:	2b00      	cmp	r3, #0
 801954c:	d008      	beq.n	8019560 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8019556:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8019558:	6878      	ldr	r0, [r7, #4]
 801955a:	f001 f89b 	bl	801a694 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801955e:	e02d      	b.n	80195bc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8019560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019568:	2b00      	cmp	r3, #0
 801956a:	d00e      	beq.n	801958a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801956c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019574:	2b00      	cmp	r3, #0
 8019576:	d008      	beq.n	801958a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801957c:	2b00      	cmp	r3, #0
 801957e:	d01c      	beq.n	80195ba <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019584:	6878      	ldr	r0, [r7, #4]
 8019586:	4798      	blx	r3
    }
    return;
 8019588:	e017      	b.n	80195ba <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801958a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801958e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019592:	2b00      	cmp	r3, #0
 8019594:	d012      	beq.n	80195bc <HAL_UART_IRQHandler+0x604>
 8019596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801959a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d00c      	beq.n	80195bc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80195a2:	6878      	ldr	r0, [r7, #4]
 80195a4:	f000 fe8f 	bl	801a2c6 <UART_EndTransmit_IT>
    return;
 80195a8:	e008      	b.n	80195bc <HAL_UART_IRQHandler+0x604>
      return;
 80195aa:	bf00      	nop
 80195ac:	e006      	b.n	80195bc <HAL_UART_IRQHandler+0x604>
    return;
 80195ae:	bf00      	nop
 80195b0:	e004      	b.n	80195bc <HAL_UART_IRQHandler+0x604>
      return;
 80195b2:	bf00      	nop
 80195b4:	e002      	b.n	80195bc <HAL_UART_IRQHandler+0x604>
      return;
 80195b6:	bf00      	nop
 80195b8:	e000      	b.n	80195bc <HAL_UART_IRQHandler+0x604>
    return;
 80195ba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80195bc:	37e8      	adds	r7, #232	@ 0xe8
 80195be:	46bd      	mov	sp, r7
 80195c0:	bd80      	pop	{r7, pc}
 80195c2:	bf00      	nop

080195c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80195c4:	b480      	push	{r7}
 80195c6:	b083      	sub	sp, #12
 80195c8:	af00      	add	r7, sp, #0
 80195ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80195cc:	bf00      	nop
 80195ce:	370c      	adds	r7, #12
 80195d0:	46bd      	mov	sp, r7
 80195d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195d6:	4770      	bx	lr

080195d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80195d8:	b480      	push	{r7}
 80195da:	b083      	sub	sp, #12
 80195dc:	af00      	add	r7, sp, #0
 80195de:	6078      	str	r0, [r7, #4]
 80195e0:	460b      	mov	r3, r1
 80195e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80195e4:	bf00      	nop
 80195e6:	370c      	adds	r7, #12
 80195e8:	46bd      	mov	sp, r7
 80195ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ee:	4770      	bx	lr

080195f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80195f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80195f4:	b08a      	sub	sp, #40	@ 0x28
 80195f6:	af00      	add	r7, sp, #0
 80195f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80195fa:	2300      	movs	r3, #0
 80195fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	689a      	ldr	r2, [r3, #8]
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	691b      	ldr	r3, [r3, #16]
 8019608:	431a      	orrs	r2, r3
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	695b      	ldr	r3, [r3, #20]
 801960e:	431a      	orrs	r2, r3
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	69db      	ldr	r3, [r3, #28]
 8019614:	4313      	orrs	r3, r2
 8019616:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	681a      	ldr	r2, [r3, #0]
 801961e:	4ba4      	ldr	r3, [pc, #656]	@ (80198b0 <UART_SetConfig+0x2c0>)
 8019620:	4013      	ands	r3, r2
 8019622:	68fa      	ldr	r2, [r7, #12]
 8019624:	6812      	ldr	r2, [r2, #0]
 8019626:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019628:	430b      	orrs	r3, r1
 801962a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801962c:	68fb      	ldr	r3, [r7, #12]
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	685b      	ldr	r3, [r3, #4]
 8019632:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	68da      	ldr	r2, [r3, #12]
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	430a      	orrs	r2, r1
 8019640:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8019642:	68fb      	ldr	r3, [r7, #12]
 8019644:	699b      	ldr	r3, [r3, #24]
 8019646:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8019648:	68fb      	ldr	r3, [r7, #12]
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	4a99      	ldr	r2, [pc, #612]	@ (80198b4 <UART_SetConfig+0x2c4>)
 801964e:	4293      	cmp	r3, r2
 8019650:	d004      	beq.n	801965c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	6a1b      	ldr	r3, [r3, #32]
 8019656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019658:	4313      	orrs	r3, r2
 801965a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801965c:	68fb      	ldr	r3, [r7, #12]
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	689b      	ldr	r3, [r3, #8]
 8019662:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801966c:	430a      	orrs	r2, r1
 801966e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	4a90      	ldr	r2, [pc, #576]	@ (80198b8 <UART_SetConfig+0x2c8>)
 8019676:	4293      	cmp	r3, r2
 8019678:	d126      	bne.n	80196c8 <UART_SetConfig+0xd8>
 801967a:	4b90      	ldr	r3, [pc, #576]	@ (80198bc <UART_SetConfig+0x2cc>)
 801967c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019680:	f003 0303 	and.w	r3, r3, #3
 8019684:	2b03      	cmp	r3, #3
 8019686:	d81b      	bhi.n	80196c0 <UART_SetConfig+0xd0>
 8019688:	a201      	add	r2, pc, #4	@ (adr r2, 8019690 <UART_SetConfig+0xa0>)
 801968a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801968e:	bf00      	nop
 8019690:	080196a1 	.word	0x080196a1
 8019694:	080196b1 	.word	0x080196b1
 8019698:	080196a9 	.word	0x080196a9
 801969c:	080196b9 	.word	0x080196b9
 80196a0:	2301      	movs	r3, #1
 80196a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80196a6:	e116      	b.n	80198d6 <UART_SetConfig+0x2e6>
 80196a8:	2302      	movs	r3, #2
 80196aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80196ae:	e112      	b.n	80198d6 <UART_SetConfig+0x2e6>
 80196b0:	2304      	movs	r3, #4
 80196b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80196b6:	e10e      	b.n	80198d6 <UART_SetConfig+0x2e6>
 80196b8:	2308      	movs	r3, #8
 80196ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80196be:	e10a      	b.n	80198d6 <UART_SetConfig+0x2e6>
 80196c0:	2310      	movs	r3, #16
 80196c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80196c6:	e106      	b.n	80198d6 <UART_SetConfig+0x2e6>
 80196c8:	68fb      	ldr	r3, [r7, #12]
 80196ca:	681b      	ldr	r3, [r3, #0]
 80196cc:	4a7c      	ldr	r2, [pc, #496]	@ (80198c0 <UART_SetConfig+0x2d0>)
 80196ce:	4293      	cmp	r3, r2
 80196d0:	d138      	bne.n	8019744 <UART_SetConfig+0x154>
 80196d2:	4b7a      	ldr	r3, [pc, #488]	@ (80198bc <UART_SetConfig+0x2cc>)
 80196d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80196d8:	f003 030c 	and.w	r3, r3, #12
 80196dc:	2b0c      	cmp	r3, #12
 80196de:	d82d      	bhi.n	801973c <UART_SetConfig+0x14c>
 80196e0:	a201      	add	r2, pc, #4	@ (adr r2, 80196e8 <UART_SetConfig+0xf8>)
 80196e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80196e6:	bf00      	nop
 80196e8:	0801971d 	.word	0x0801971d
 80196ec:	0801973d 	.word	0x0801973d
 80196f0:	0801973d 	.word	0x0801973d
 80196f4:	0801973d 	.word	0x0801973d
 80196f8:	0801972d 	.word	0x0801972d
 80196fc:	0801973d 	.word	0x0801973d
 8019700:	0801973d 	.word	0x0801973d
 8019704:	0801973d 	.word	0x0801973d
 8019708:	08019725 	.word	0x08019725
 801970c:	0801973d 	.word	0x0801973d
 8019710:	0801973d 	.word	0x0801973d
 8019714:	0801973d 	.word	0x0801973d
 8019718:	08019735 	.word	0x08019735
 801971c:	2300      	movs	r3, #0
 801971e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8019722:	e0d8      	b.n	80198d6 <UART_SetConfig+0x2e6>
 8019724:	2302      	movs	r3, #2
 8019726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801972a:	e0d4      	b.n	80198d6 <UART_SetConfig+0x2e6>
 801972c:	2304      	movs	r3, #4
 801972e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8019732:	e0d0      	b.n	80198d6 <UART_SetConfig+0x2e6>
 8019734:	2308      	movs	r3, #8
 8019736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801973a:	e0cc      	b.n	80198d6 <UART_SetConfig+0x2e6>
 801973c:	2310      	movs	r3, #16
 801973e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8019742:	e0c8      	b.n	80198d6 <UART_SetConfig+0x2e6>
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	4a5e      	ldr	r2, [pc, #376]	@ (80198c4 <UART_SetConfig+0x2d4>)
 801974a:	4293      	cmp	r3, r2
 801974c:	d125      	bne.n	801979a <UART_SetConfig+0x1aa>
 801974e:	4b5b      	ldr	r3, [pc, #364]	@ (80198bc <UART_SetConfig+0x2cc>)
 8019750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019754:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8019758:	2b30      	cmp	r3, #48	@ 0x30
 801975a:	d016      	beq.n	801978a <UART_SetConfig+0x19a>
 801975c:	2b30      	cmp	r3, #48	@ 0x30
 801975e:	d818      	bhi.n	8019792 <UART_SetConfig+0x1a2>
 8019760:	2b20      	cmp	r3, #32
 8019762:	d00a      	beq.n	801977a <UART_SetConfig+0x18a>
 8019764:	2b20      	cmp	r3, #32
 8019766:	d814      	bhi.n	8019792 <UART_SetConfig+0x1a2>
 8019768:	2b00      	cmp	r3, #0
 801976a:	d002      	beq.n	8019772 <UART_SetConfig+0x182>
 801976c:	2b10      	cmp	r3, #16
 801976e:	d008      	beq.n	8019782 <UART_SetConfig+0x192>
 8019770:	e00f      	b.n	8019792 <UART_SetConfig+0x1a2>
 8019772:	2300      	movs	r3, #0
 8019774:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8019778:	e0ad      	b.n	80198d6 <UART_SetConfig+0x2e6>
 801977a:	2302      	movs	r3, #2
 801977c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8019780:	e0a9      	b.n	80198d6 <UART_SetConfig+0x2e6>
 8019782:	2304      	movs	r3, #4
 8019784:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8019788:	e0a5      	b.n	80198d6 <UART_SetConfig+0x2e6>
 801978a:	2308      	movs	r3, #8
 801978c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8019790:	e0a1      	b.n	80198d6 <UART_SetConfig+0x2e6>
 8019792:	2310      	movs	r3, #16
 8019794:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8019798:	e09d      	b.n	80198d6 <UART_SetConfig+0x2e6>
 801979a:	68fb      	ldr	r3, [r7, #12]
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	4a4a      	ldr	r2, [pc, #296]	@ (80198c8 <UART_SetConfig+0x2d8>)
 80197a0:	4293      	cmp	r3, r2
 80197a2:	d125      	bne.n	80197f0 <UART_SetConfig+0x200>
 80197a4:	4b45      	ldr	r3, [pc, #276]	@ (80198bc <UART_SetConfig+0x2cc>)
 80197a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80197aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80197ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80197b0:	d016      	beq.n	80197e0 <UART_SetConfig+0x1f0>
 80197b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80197b4:	d818      	bhi.n	80197e8 <UART_SetConfig+0x1f8>
 80197b6:	2b80      	cmp	r3, #128	@ 0x80
 80197b8:	d00a      	beq.n	80197d0 <UART_SetConfig+0x1e0>
 80197ba:	2b80      	cmp	r3, #128	@ 0x80
 80197bc:	d814      	bhi.n	80197e8 <UART_SetConfig+0x1f8>
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d002      	beq.n	80197c8 <UART_SetConfig+0x1d8>
 80197c2:	2b40      	cmp	r3, #64	@ 0x40
 80197c4:	d008      	beq.n	80197d8 <UART_SetConfig+0x1e8>
 80197c6:	e00f      	b.n	80197e8 <UART_SetConfig+0x1f8>
 80197c8:	2300      	movs	r3, #0
 80197ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80197ce:	e082      	b.n	80198d6 <UART_SetConfig+0x2e6>
 80197d0:	2302      	movs	r3, #2
 80197d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80197d6:	e07e      	b.n	80198d6 <UART_SetConfig+0x2e6>
 80197d8:	2304      	movs	r3, #4
 80197da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80197de:	e07a      	b.n	80198d6 <UART_SetConfig+0x2e6>
 80197e0:	2308      	movs	r3, #8
 80197e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80197e6:	e076      	b.n	80198d6 <UART_SetConfig+0x2e6>
 80197e8:	2310      	movs	r3, #16
 80197ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80197ee:	e072      	b.n	80198d6 <UART_SetConfig+0x2e6>
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	4a35      	ldr	r2, [pc, #212]	@ (80198cc <UART_SetConfig+0x2dc>)
 80197f6:	4293      	cmp	r3, r2
 80197f8:	d12a      	bne.n	8019850 <UART_SetConfig+0x260>
 80197fa:	4b30      	ldr	r3, [pc, #192]	@ (80198bc <UART_SetConfig+0x2cc>)
 80197fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019800:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8019804:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8019808:	d01a      	beq.n	8019840 <UART_SetConfig+0x250>
 801980a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801980e:	d81b      	bhi.n	8019848 <UART_SetConfig+0x258>
 8019810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019814:	d00c      	beq.n	8019830 <UART_SetConfig+0x240>
 8019816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801981a:	d815      	bhi.n	8019848 <UART_SetConfig+0x258>
 801981c:	2b00      	cmp	r3, #0
 801981e:	d003      	beq.n	8019828 <UART_SetConfig+0x238>
 8019820:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019824:	d008      	beq.n	8019838 <UART_SetConfig+0x248>
 8019826:	e00f      	b.n	8019848 <UART_SetConfig+0x258>
 8019828:	2300      	movs	r3, #0
 801982a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801982e:	e052      	b.n	80198d6 <UART_SetConfig+0x2e6>
 8019830:	2302      	movs	r3, #2
 8019832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8019836:	e04e      	b.n	80198d6 <UART_SetConfig+0x2e6>
 8019838:	2304      	movs	r3, #4
 801983a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801983e:	e04a      	b.n	80198d6 <UART_SetConfig+0x2e6>
 8019840:	2308      	movs	r3, #8
 8019842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8019846:	e046      	b.n	80198d6 <UART_SetConfig+0x2e6>
 8019848:	2310      	movs	r3, #16
 801984a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801984e:	e042      	b.n	80198d6 <UART_SetConfig+0x2e6>
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	4a17      	ldr	r2, [pc, #92]	@ (80198b4 <UART_SetConfig+0x2c4>)
 8019856:	4293      	cmp	r3, r2
 8019858:	d13a      	bne.n	80198d0 <UART_SetConfig+0x2e0>
 801985a:	4b18      	ldr	r3, [pc, #96]	@ (80198bc <UART_SetConfig+0x2cc>)
 801985c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019860:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8019864:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8019868:	d01a      	beq.n	80198a0 <UART_SetConfig+0x2b0>
 801986a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801986e:	d81b      	bhi.n	80198a8 <UART_SetConfig+0x2b8>
 8019870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019874:	d00c      	beq.n	8019890 <UART_SetConfig+0x2a0>
 8019876:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801987a:	d815      	bhi.n	80198a8 <UART_SetConfig+0x2b8>
 801987c:	2b00      	cmp	r3, #0
 801987e:	d003      	beq.n	8019888 <UART_SetConfig+0x298>
 8019880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019884:	d008      	beq.n	8019898 <UART_SetConfig+0x2a8>
 8019886:	e00f      	b.n	80198a8 <UART_SetConfig+0x2b8>
 8019888:	2300      	movs	r3, #0
 801988a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801988e:	e022      	b.n	80198d6 <UART_SetConfig+0x2e6>
 8019890:	2302      	movs	r3, #2
 8019892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8019896:	e01e      	b.n	80198d6 <UART_SetConfig+0x2e6>
 8019898:	2304      	movs	r3, #4
 801989a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801989e:	e01a      	b.n	80198d6 <UART_SetConfig+0x2e6>
 80198a0:	2308      	movs	r3, #8
 80198a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80198a6:	e016      	b.n	80198d6 <UART_SetConfig+0x2e6>
 80198a8:	2310      	movs	r3, #16
 80198aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80198ae:	e012      	b.n	80198d6 <UART_SetConfig+0x2e6>
 80198b0:	efff69f3 	.word	0xefff69f3
 80198b4:	40008000 	.word	0x40008000
 80198b8:	40013800 	.word	0x40013800
 80198bc:	40021000 	.word	0x40021000
 80198c0:	40004400 	.word	0x40004400
 80198c4:	40004800 	.word	0x40004800
 80198c8:	40004c00 	.word	0x40004c00
 80198cc:	40005000 	.word	0x40005000
 80198d0:	2310      	movs	r3, #16
 80198d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	4a9f      	ldr	r2, [pc, #636]	@ (8019b58 <UART_SetConfig+0x568>)
 80198dc:	4293      	cmp	r3, r2
 80198de:	d17a      	bne.n	80199d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80198e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80198e4:	2b08      	cmp	r3, #8
 80198e6:	d824      	bhi.n	8019932 <UART_SetConfig+0x342>
 80198e8:	a201      	add	r2, pc, #4	@ (adr r2, 80198f0 <UART_SetConfig+0x300>)
 80198ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198ee:	bf00      	nop
 80198f0:	08019915 	.word	0x08019915
 80198f4:	08019933 	.word	0x08019933
 80198f8:	0801991d 	.word	0x0801991d
 80198fc:	08019933 	.word	0x08019933
 8019900:	08019923 	.word	0x08019923
 8019904:	08019933 	.word	0x08019933
 8019908:	08019933 	.word	0x08019933
 801990c:	08019933 	.word	0x08019933
 8019910:	0801992b 	.word	0x0801992b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019914:	f7fe f908 	bl	8017b28 <HAL_RCC_GetPCLK1Freq>
 8019918:	61f8      	str	r0, [r7, #28]
        break;
 801991a:	e010      	b.n	801993e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801991c:	4b8f      	ldr	r3, [pc, #572]	@ (8019b5c <UART_SetConfig+0x56c>)
 801991e:	61fb      	str	r3, [r7, #28]
        break;
 8019920:	e00d      	b.n	801993e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8019922:	f7fe f869 	bl	80179f8 <HAL_RCC_GetSysClockFreq>
 8019926:	61f8      	str	r0, [r7, #28]
        break;
 8019928:	e009      	b.n	801993e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801992a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801992e:	61fb      	str	r3, [r7, #28]
        break;
 8019930:	e005      	b.n	801993e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8019932:	2300      	movs	r3, #0
 8019934:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8019936:	2301      	movs	r3, #1
 8019938:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 801993c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801993e:	69fb      	ldr	r3, [r7, #28]
 8019940:	2b00      	cmp	r3, #0
 8019942:	f000 80fb 	beq.w	8019b3c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8019946:	68fb      	ldr	r3, [r7, #12]
 8019948:	685a      	ldr	r2, [r3, #4]
 801994a:	4613      	mov	r3, r2
 801994c:	005b      	lsls	r3, r3, #1
 801994e:	4413      	add	r3, r2
 8019950:	69fa      	ldr	r2, [r7, #28]
 8019952:	429a      	cmp	r2, r3
 8019954:	d305      	bcc.n	8019962 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8019956:	68fb      	ldr	r3, [r7, #12]
 8019958:	685b      	ldr	r3, [r3, #4]
 801995a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801995c:	69fa      	ldr	r2, [r7, #28]
 801995e:	429a      	cmp	r2, r3
 8019960:	d903      	bls.n	801996a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8019962:	2301      	movs	r3, #1
 8019964:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8019968:	e0e8      	b.n	8019b3c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801996a:	69fb      	ldr	r3, [r7, #28]
 801996c:	2200      	movs	r2, #0
 801996e:	461c      	mov	r4, r3
 8019970:	4615      	mov	r5, r2
 8019972:	f04f 0200 	mov.w	r2, #0
 8019976:	f04f 0300 	mov.w	r3, #0
 801997a:	022b      	lsls	r3, r5, #8
 801997c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8019980:	0222      	lsls	r2, r4, #8
 8019982:	68f9      	ldr	r1, [r7, #12]
 8019984:	6849      	ldr	r1, [r1, #4]
 8019986:	0849      	lsrs	r1, r1, #1
 8019988:	2000      	movs	r0, #0
 801998a:	4688      	mov	r8, r1
 801998c:	4681      	mov	r9, r0
 801998e:	eb12 0a08 	adds.w	sl, r2, r8
 8019992:	eb43 0b09 	adc.w	fp, r3, r9
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	685b      	ldr	r3, [r3, #4]
 801999a:	2200      	movs	r2, #0
 801999c:	603b      	str	r3, [r7, #0]
 801999e:	607a      	str	r2, [r7, #4]
 80199a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80199a4:	4650      	mov	r0, sl
 80199a6:	4659      	mov	r1, fp
 80199a8:	f7e6 ffcc 	bl	8000944 <__aeabi_uldivmod>
 80199ac:	4602      	mov	r2, r0
 80199ae:	460b      	mov	r3, r1
 80199b0:	4613      	mov	r3, r2
 80199b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80199b4:	69bb      	ldr	r3, [r7, #24]
 80199b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80199ba:	d308      	bcc.n	80199ce <UART_SetConfig+0x3de>
 80199bc:	69bb      	ldr	r3, [r7, #24]
 80199be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80199c2:	d204      	bcs.n	80199ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	681b      	ldr	r3, [r3, #0]
 80199c8:	69ba      	ldr	r2, [r7, #24]
 80199ca:	60da      	str	r2, [r3, #12]
 80199cc:	e0b6      	b.n	8019b3c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80199ce:	2301      	movs	r3, #1
 80199d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80199d4:	e0b2      	b.n	8019b3c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	69db      	ldr	r3, [r3, #28]
 80199da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80199de:	d15e      	bne.n	8019a9e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80199e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80199e4:	2b08      	cmp	r3, #8
 80199e6:	d828      	bhi.n	8019a3a <UART_SetConfig+0x44a>
 80199e8:	a201      	add	r2, pc, #4	@ (adr r2, 80199f0 <UART_SetConfig+0x400>)
 80199ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199ee:	bf00      	nop
 80199f0:	08019a15 	.word	0x08019a15
 80199f4:	08019a1d 	.word	0x08019a1d
 80199f8:	08019a25 	.word	0x08019a25
 80199fc:	08019a3b 	.word	0x08019a3b
 8019a00:	08019a2b 	.word	0x08019a2b
 8019a04:	08019a3b 	.word	0x08019a3b
 8019a08:	08019a3b 	.word	0x08019a3b
 8019a0c:	08019a3b 	.word	0x08019a3b
 8019a10:	08019a33 	.word	0x08019a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019a14:	f7fe f888 	bl	8017b28 <HAL_RCC_GetPCLK1Freq>
 8019a18:	61f8      	str	r0, [r7, #28]
        break;
 8019a1a:	e014      	b.n	8019a46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019a1c:	f7fe f89a 	bl	8017b54 <HAL_RCC_GetPCLK2Freq>
 8019a20:	61f8      	str	r0, [r7, #28]
        break;
 8019a22:	e010      	b.n	8019a46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8019a24:	4b4d      	ldr	r3, [pc, #308]	@ (8019b5c <UART_SetConfig+0x56c>)
 8019a26:	61fb      	str	r3, [r7, #28]
        break;
 8019a28:	e00d      	b.n	8019a46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8019a2a:	f7fd ffe5 	bl	80179f8 <HAL_RCC_GetSysClockFreq>
 8019a2e:	61f8      	str	r0, [r7, #28]
        break;
 8019a30:	e009      	b.n	8019a46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019a36:	61fb      	str	r3, [r7, #28]
        break;
 8019a38:	e005      	b.n	8019a46 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8019a3a:	2300      	movs	r3, #0
 8019a3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8019a3e:	2301      	movs	r3, #1
 8019a40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8019a44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8019a46:	69fb      	ldr	r3, [r7, #28]
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d077      	beq.n	8019b3c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8019a4c:	69fb      	ldr	r3, [r7, #28]
 8019a4e:	005a      	lsls	r2, r3, #1
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	685b      	ldr	r3, [r3, #4]
 8019a54:	085b      	lsrs	r3, r3, #1
 8019a56:	441a      	add	r2, r3
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	685b      	ldr	r3, [r3, #4]
 8019a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019a60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019a62:	69bb      	ldr	r3, [r7, #24]
 8019a64:	2b0f      	cmp	r3, #15
 8019a66:	d916      	bls.n	8019a96 <UART_SetConfig+0x4a6>
 8019a68:	69bb      	ldr	r3, [r7, #24]
 8019a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019a6e:	d212      	bcs.n	8019a96 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8019a70:	69bb      	ldr	r3, [r7, #24]
 8019a72:	b29b      	uxth	r3, r3
 8019a74:	f023 030f 	bic.w	r3, r3, #15
 8019a78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019a7a:	69bb      	ldr	r3, [r7, #24]
 8019a7c:	085b      	lsrs	r3, r3, #1
 8019a7e:	b29b      	uxth	r3, r3
 8019a80:	f003 0307 	and.w	r3, r3, #7
 8019a84:	b29a      	uxth	r2, r3
 8019a86:	8afb      	ldrh	r3, [r7, #22]
 8019a88:	4313      	orrs	r3, r2
 8019a8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	681b      	ldr	r3, [r3, #0]
 8019a90:	8afa      	ldrh	r2, [r7, #22]
 8019a92:	60da      	str	r2, [r3, #12]
 8019a94:	e052      	b.n	8019b3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8019a96:	2301      	movs	r3, #1
 8019a98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8019a9c:	e04e      	b.n	8019b3c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8019a9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8019aa2:	2b08      	cmp	r3, #8
 8019aa4:	d827      	bhi.n	8019af6 <UART_SetConfig+0x506>
 8019aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8019aac <UART_SetConfig+0x4bc>)
 8019aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019aac:	08019ad1 	.word	0x08019ad1
 8019ab0:	08019ad9 	.word	0x08019ad9
 8019ab4:	08019ae1 	.word	0x08019ae1
 8019ab8:	08019af7 	.word	0x08019af7
 8019abc:	08019ae7 	.word	0x08019ae7
 8019ac0:	08019af7 	.word	0x08019af7
 8019ac4:	08019af7 	.word	0x08019af7
 8019ac8:	08019af7 	.word	0x08019af7
 8019acc:	08019aef 	.word	0x08019aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019ad0:	f7fe f82a 	bl	8017b28 <HAL_RCC_GetPCLK1Freq>
 8019ad4:	61f8      	str	r0, [r7, #28]
        break;
 8019ad6:	e014      	b.n	8019b02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019ad8:	f7fe f83c 	bl	8017b54 <HAL_RCC_GetPCLK2Freq>
 8019adc:	61f8      	str	r0, [r7, #28]
        break;
 8019ade:	e010      	b.n	8019b02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8019ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8019b5c <UART_SetConfig+0x56c>)
 8019ae2:	61fb      	str	r3, [r7, #28]
        break;
 8019ae4:	e00d      	b.n	8019b02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8019ae6:	f7fd ff87 	bl	80179f8 <HAL_RCC_GetSysClockFreq>
 8019aea:	61f8      	str	r0, [r7, #28]
        break;
 8019aec:	e009      	b.n	8019b02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019af2:	61fb      	str	r3, [r7, #28]
        break;
 8019af4:	e005      	b.n	8019b02 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8019af6:	2300      	movs	r3, #0
 8019af8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8019afa:	2301      	movs	r3, #1
 8019afc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8019b00:	bf00      	nop
    }

    if (pclk != 0U)
 8019b02:	69fb      	ldr	r3, [r7, #28]
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d019      	beq.n	8019b3c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	685b      	ldr	r3, [r3, #4]
 8019b0c:	085a      	lsrs	r2, r3, #1
 8019b0e:	69fb      	ldr	r3, [r7, #28]
 8019b10:	441a      	add	r2, r3
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	685b      	ldr	r3, [r3, #4]
 8019b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8019b1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019b1c:	69bb      	ldr	r3, [r7, #24]
 8019b1e:	2b0f      	cmp	r3, #15
 8019b20:	d909      	bls.n	8019b36 <UART_SetConfig+0x546>
 8019b22:	69bb      	ldr	r3, [r7, #24]
 8019b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019b28:	d205      	bcs.n	8019b36 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8019b2a:	69bb      	ldr	r3, [r7, #24]
 8019b2c:	b29a      	uxth	r2, r3
 8019b2e:	68fb      	ldr	r3, [r7, #12]
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	60da      	str	r2, [r3, #12]
 8019b34:	e002      	b.n	8019b3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8019b36:	2301      	movs	r3, #1
 8019b38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	2200      	movs	r2, #0
 8019b40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	2200      	movs	r2, #0
 8019b46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8019b48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8019b4c:	4618      	mov	r0, r3
 8019b4e:	3728      	adds	r7, #40	@ 0x28
 8019b50:	46bd      	mov	sp, r7
 8019b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019b56:	bf00      	nop
 8019b58:	40008000 	.word	0x40008000
 8019b5c:	00f42400 	.word	0x00f42400

08019b60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8019b60:	b480      	push	{r7}
 8019b62:	b083      	sub	sp, #12
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b6c:	f003 0308 	and.w	r3, r3, #8
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d00a      	beq.n	8019b8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	685b      	ldr	r3, [r3, #4]
 8019b7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	430a      	orrs	r2, r1
 8019b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b8e:	f003 0301 	and.w	r3, r3, #1
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d00a      	beq.n	8019bac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	685b      	ldr	r3, [r3, #4]
 8019b9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	430a      	orrs	r2, r1
 8019baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019bb0:	f003 0302 	and.w	r3, r3, #2
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d00a      	beq.n	8019bce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	685b      	ldr	r3, [r3, #4]
 8019bbe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	430a      	orrs	r2, r1
 8019bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019bd2:	f003 0304 	and.w	r3, r3, #4
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d00a      	beq.n	8019bf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	685b      	ldr	r3, [r3, #4]
 8019be0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	430a      	orrs	r2, r1
 8019bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019bf4:	f003 0310 	and.w	r3, r3, #16
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d00a      	beq.n	8019c12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	689b      	ldr	r3, [r3, #8]
 8019c02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	430a      	orrs	r2, r1
 8019c10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019c16:	f003 0320 	and.w	r3, r3, #32
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d00a      	beq.n	8019c34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	689b      	ldr	r3, [r3, #8]
 8019c24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	430a      	orrs	r2, r1
 8019c32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d01a      	beq.n	8019c76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	685b      	ldr	r3, [r3, #4]
 8019c46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	430a      	orrs	r2, r1
 8019c54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019c5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019c5e:	d10a      	bne.n	8019c76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	685b      	ldr	r3, [r3, #4]
 8019c66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	430a      	orrs	r2, r1
 8019c74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019c7e:	2b00      	cmp	r3, #0
 8019c80:	d00a      	beq.n	8019c98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	685b      	ldr	r3, [r3, #4]
 8019c88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	430a      	orrs	r2, r1
 8019c96:	605a      	str	r2, [r3, #4]
  }
}
 8019c98:	bf00      	nop
 8019c9a:	370c      	adds	r7, #12
 8019c9c:	46bd      	mov	sp, r7
 8019c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ca2:	4770      	bx	lr

08019ca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019ca4:	b580      	push	{r7, lr}
 8019ca6:	b098      	sub	sp, #96	@ 0x60
 8019ca8:	af02      	add	r7, sp, #8
 8019caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	2200      	movs	r2, #0
 8019cb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019cb4:	f7fa ff8a 	bl	8014bcc <HAL_GetTick>
 8019cb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	f003 0308 	and.w	r3, r3, #8
 8019cc4:	2b08      	cmp	r3, #8
 8019cc6:	d12e      	bne.n	8019d26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019cc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019ccc:	9300      	str	r3, [sp, #0]
 8019cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019cd0:	2200      	movs	r2, #0
 8019cd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8019cd6:	6878      	ldr	r0, [r7, #4]
 8019cd8:	f000 f88c 	bl	8019df4 <UART_WaitOnFlagUntilTimeout>
 8019cdc:	4603      	mov	r3, r0
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d021      	beq.n	8019d26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cea:	e853 3f00 	ldrex	r3, [r3]
 8019cee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019cf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019cf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	461a      	mov	r2, r3
 8019cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8019d02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019d06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019d08:	e841 2300 	strex	r3, r2, [r1]
 8019d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019d10:	2b00      	cmp	r3, #0
 8019d12:	d1e6      	bne.n	8019ce2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	2220      	movs	r2, #32
 8019d18:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	2200      	movs	r2, #0
 8019d1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019d22:	2303      	movs	r3, #3
 8019d24:	e062      	b.n	8019dec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	f003 0304 	and.w	r3, r3, #4
 8019d30:	2b04      	cmp	r3, #4
 8019d32:	d149      	bne.n	8019dc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019d34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019d38:	9300      	str	r3, [sp, #0]
 8019d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019d3c:	2200      	movs	r2, #0
 8019d3e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8019d42:	6878      	ldr	r0, [r7, #4]
 8019d44:	f000 f856 	bl	8019df4 <UART_WaitOnFlagUntilTimeout>
 8019d48:	4603      	mov	r3, r0
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d03c      	beq.n	8019dc8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d56:	e853 3f00 	ldrex	r3, [r3]
 8019d5a:	623b      	str	r3, [r7, #32]
   return(result);
 8019d5c:	6a3b      	ldr	r3, [r7, #32]
 8019d5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	461a      	mov	r2, r3
 8019d6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8019d6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019d74:	e841 2300 	strex	r3, r2, [r1]
 8019d78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d1e6      	bne.n	8019d4e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	3308      	adds	r3, #8
 8019d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d88:	693b      	ldr	r3, [r7, #16]
 8019d8a:	e853 3f00 	ldrex	r3, [r3]
 8019d8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8019d90:	68fb      	ldr	r3, [r7, #12]
 8019d92:	f023 0301 	bic.w	r3, r3, #1
 8019d96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	3308      	adds	r3, #8
 8019d9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019da0:	61fa      	str	r2, [r7, #28]
 8019da2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019da4:	69b9      	ldr	r1, [r7, #24]
 8019da6:	69fa      	ldr	r2, [r7, #28]
 8019da8:	e841 2300 	strex	r3, r2, [r1]
 8019dac:	617b      	str	r3, [r7, #20]
   return(result);
 8019dae:	697b      	ldr	r3, [r7, #20]
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d1e5      	bne.n	8019d80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	2220      	movs	r2, #32
 8019db8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	2200      	movs	r2, #0
 8019dc0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019dc4:	2303      	movs	r3, #3
 8019dc6:	e011      	b.n	8019dec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	2220      	movs	r2, #32
 8019dcc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	2220      	movs	r2, #32
 8019dd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	2200      	movs	r2, #0
 8019dda:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	2200      	movs	r2, #0
 8019de0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	2200      	movs	r2, #0
 8019de6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8019dea:	2300      	movs	r3, #0
}
 8019dec:	4618      	mov	r0, r3
 8019dee:	3758      	adds	r7, #88	@ 0x58
 8019df0:	46bd      	mov	sp, r7
 8019df2:	bd80      	pop	{r7, pc}

08019df4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8019df4:	b580      	push	{r7, lr}
 8019df6:	b084      	sub	sp, #16
 8019df8:	af00      	add	r7, sp, #0
 8019dfa:	60f8      	str	r0, [r7, #12]
 8019dfc:	60b9      	str	r1, [r7, #8]
 8019dfe:	603b      	str	r3, [r7, #0]
 8019e00:	4613      	mov	r3, r2
 8019e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019e04:	e04f      	b.n	8019ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019e06:	69bb      	ldr	r3, [r7, #24]
 8019e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e0c:	d04b      	beq.n	8019ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019e0e:	f7fa fedd 	bl	8014bcc <HAL_GetTick>
 8019e12:	4602      	mov	r2, r0
 8019e14:	683b      	ldr	r3, [r7, #0]
 8019e16:	1ad3      	subs	r3, r2, r3
 8019e18:	69ba      	ldr	r2, [r7, #24]
 8019e1a:	429a      	cmp	r2, r3
 8019e1c:	d302      	bcc.n	8019e24 <UART_WaitOnFlagUntilTimeout+0x30>
 8019e1e:	69bb      	ldr	r3, [r7, #24]
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d101      	bne.n	8019e28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8019e24:	2303      	movs	r3, #3
 8019e26:	e04e      	b.n	8019ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	681b      	ldr	r3, [r3, #0]
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	f003 0304 	and.w	r3, r3, #4
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d037      	beq.n	8019ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8019e36:	68bb      	ldr	r3, [r7, #8]
 8019e38:	2b80      	cmp	r3, #128	@ 0x80
 8019e3a:	d034      	beq.n	8019ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8019e3c:	68bb      	ldr	r3, [r7, #8]
 8019e3e:	2b40      	cmp	r3, #64	@ 0x40
 8019e40:	d031      	beq.n	8019ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	69db      	ldr	r3, [r3, #28]
 8019e48:	f003 0308 	and.w	r3, r3, #8
 8019e4c:	2b08      	cmp	r3, #8
 8019e4e:	d110      	bne.n	8019e72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	2208      	movs	r2, #8
 8019e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019e58:	68f8      	ldr	r0, [r7, #12]
 8019e5a:	f000 f8ff 	bl	801a05c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8019e5e:	68fb      	ldr	r3, [r7, #12]
 8019e60:	2208      	movs	r2, #8
 8019e62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	2200      	movs	r2, #0
 8019e6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8019e6e:	2301      	movs	r3, #1
 8019e70:	e029      	b.n	8019ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	69db      	ldr	r3, [r3, #28]
 8019e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019e7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019e80:	d111      	bne.n	8019ea6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019e8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019e8c:	68f8      	ldr	r0, [r7, #12]
 8019e8e:	f000 f8e5 	bl	801a05c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	2220      	movs	r2, #32
 8019e96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019e9a:	68fb      	ldr	r3, [r7, #12]
 8019e9c:	2200      	movs	r2, #0
 8019e9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8019ea2:	2303      	movs	r3, #3
 8019ea4:	e00f      	b.n	8019ec6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	69da      	ldr	r2, [r3, #28]
 8019eac:	68bb      	ldr	r3, [r7, #8]
 8019eae:	4013      	ands	r3, r2
 8019eb0:	68ba      	ldr	r2, [r7, #8]
 8019eb2:	429a      	cmp	r2, r3
 8019eb4:	bf0c      	ite	eq
 8019eb6:	2301      	moveq	r3, #1
 8019eb8:	2300      	movne	r3, #0
 8019eba:	b2db      	uxtb	r3, r3
 8019ebc:	461a      	mov	r2, r3
 8019ebe:	79fb      	ldrb	r3, [r7, #7]
 8019ec0:	429a      	cmp	r2, r3
 8019ec2:	d0a0      	beq.n	8019e06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8019ec4:	2300      	movs	r3, #0
}
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	3710      	adds	r7, #16
 8019eca:	46bd      	mov	sp, r7
 8019ecc:	bd80      	pop	{r7, pc}
	...

08019ed0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019ed0:	b480      	push	{r7}
 8019ed2:	b097      	sub	sp, #92	@ 0x5c
 8019ed4:	af00      	add	r7, sp, #0
 8019ed6:	60f8      	str	r0, [r7, #12]
 8019ed8:	60b9      	str	r1, [r7, #8]
 8019eda:	4613      	mov	r3, r2
 8019edc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	68ba      	ldr	r2, [r7, #8]
 8019ee2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	88fa      	ldrh	r2, [r7, #6]
 8019ee8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8019eec:	68fb      	ldr	r3, [r7, #12]
 8019eee:	88fa      	ldrh	r2, [r7, #6]
 8019ef0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	2200      	movs	r2, #0
 8019ef8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	689b      	ldr	r3, [r3, #8]
 8019efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019f02:	d10e      	bne.n	8019f22 <UART_Start_Receive_IT+0x52>
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	691b      	ldr	r3, [r3, #16]
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d105      	bne.n	8019f18 <UART_Start_Receive_IT+0x48>
 8019f0c:	68fb      	ldr	r3, [r7, #12]
 8019f0e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8019f12:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8019f16:	e02d      	b.n	8019f74 <UART_Start_Receive_IT+0xa4>
 8019f18:	68fb      	ldr	r3, [r7, #12]
 8019f1a:	22ff      	movs	r2, #255	@ 0xff
 8019f1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8019f20:	e028      	b.n	8019f74 <UART_Start_Receive_IT+0xa4>
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	689b      	ldr	r3, [r3, #8]
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d10d      	bne.n	8019f46 <UART_Start_Receive_IT+0x76>
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	691b      	ldr	r3, [r3, #16]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d104      	bne.n	8019f3c <UART_Start_Receive_IT+0x6c>
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	22ff      	movs	r2, #255	@ 0xff
 8019f36:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8019f3a:	e01b      	b.n	8019f74 <UART_Start_Receive_IT+0xa4>
 8019f3c:	68fb      	ldr	r3, [r7, #12]
 8019f3e:	227f      	movs	r2, #127	@ 0x7f
 8019f40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8019f44:	e016      	b.n	8019f74 <UART_Start_Receive_IT+0xa4>
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	689b      	ldr	r3, [r3, #8]
 8019f4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019f4e:	d10d      	bne.n	8019f6c <UART_Start_Receive_IT+0x9c>
 8019f50:	68fb      	ldr	r3, [r7, #12]
 8019f52:	691b      	ldr	r3, [r3, #16]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d104      	bne.n	8019f62 <UART_Start_Receive_IT+0x92>
 8019f58:	68fb      	ldr	r3, [r7, #12]
 8019f5a:	227f      	movs	r2, #127	@ 0x7f
 8019f5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8019f60:	e008      	b.n	8019f74 <UART_Start_Receive_IT+0xa4>
 8019f62:	68fb      	ldr	r3, [r7, #12]
 8019f64:	223f      	movs	r2, #63	@ 0x3f
 8019f66:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8019f6a:	e003      	b.n	8019f74 <UART_Start_Receive_IT+0xa4>
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	2200      	movs	r2, #0
 8019f70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	2200      	movs	r2, #0
 8019f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	2222      	movs	r2, #34	@ 0x22
 8019f80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	3308      	adds	r3, #8
 8019f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019f8e:	e853 3f00 	ldrex	r3, [r3]
 8019f92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f96:	f043 0301 	orr.w	r3, r3, #1
 8019f9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	3308      	adds	r3, #8
 8019fa2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019fa4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8019fa6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019fa8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019faa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019fac:	e841 2300 	strex	r3, r2, [r1]
 8019fb0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8019fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d1e5      	bne.n	8019f84 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	689b      	ldr	r3, [r3, #8]
 8019fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019fc0:	d107      	bne.n	8019fd2 <UART_Start_Receive_IT+0x102>
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	691b      	ldr	r3, [r3, #16]
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d103      	bne.n	8019fd2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8019fca:	68fb      	ldr	r3, [r7, #12]
 8019fcc:	4a21      	ldr	r2, [pc, #132]	@ (801a054 <UART_Start_Receive_IT+0x184>)
 8019fce:	669a      	str	r2, [r3, #104]	@ 0x68
 8019fd0:	e002      	b.n	8019fd8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8019fd2:	68fb      	ldr	r3, [r7, #12]
 8019fd4:	4a20      	ldr	r2, [pc, #128]	@ (801a058 <UART_Start_Receive_IT+0x188>)
 8019fd6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8019fd8:	68fb      	ldr	r3, [r7, #12]
 8019fda:	691b      	ldr	r3, [r3, #16]
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	d019      	beq.n	801a014 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019fe8:	e853 3f00 	ldrex	r3, [r3]
 8019fec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ff0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8019ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019ff6:	68fb      	ldr	r3, [r7, #12]
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	461a      	mov	r2, r3
 8019ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ffe:	637b      	str	r3, [r7, #52]	@ 0x34
 801a000:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a002:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801a004:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a006:	e841 2300 	strex	r3, r2, [r1]
 801a00a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801a00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d1e6      	bne.n	8019fe0 <UART_Start_Receive_IT+0x110>
 801a012:	e018      	b.n	801a046 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801a014:	68fb      	ldr	r3, [r7, #12]
 801a016:	681b      	ldr	r3, [r3, #0]
 801a018:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a01a:	697b      	ldr	r3, [r7, #20]
 801a01c:	e853 3f00 	ldrex	r3, [r3]
 801a020:	613b      	str	r3, [r7, #16]
   return(result);
 801a022:	693b      	ldr	r3, [r7, #16]
 801a024:	f043 0320 	orr.w	r3, r3, #32
 801a028:	653b      	str	r3, [r7, #80]	@ 0x50
 801a02a:	68fb      	ldr	r3, [r7, #12]
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	461a      	mov	r2, r3
 801a030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a032:	623b      	str	r3, [r7, #32]
 801a034:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a036:	69f9      	ldr	r1, [r7, #28]
 801a038:	6a3a      	ldr	r2, [r7, #32]
 801a03a:	e841 2300 	strex	r3, r2, [r1]
 801a03e:	61bb      	str	r3, [r7, #24]
   return(result);
 801a040:	69bb      	ldr	r3, [r7, #24]
 801a042:	2b00      	cmp	r3, #0
 801a044:	d1e6      	bne.n	801a014 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 801a046:	2300      	movs	r3, #0
}
 801a048:	4618      	mov	r0, r3
 801a04a:	375c      	adds	r7, #92	@ 0x5c
 801a04c:	46bd      	mov	sp, r7
 801a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a052:	4770      	bx	lr
 801a054:	0801a4d9 	.word	0x0801a4d9
 801a058:	0801a31d 	.word	0x0801a31d

0801a05c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801a05c:	b480      	push	{r7}
 801a05e:	b095      	sub	sp, #84	@ 0x54
 801a060:	af00      	add	r7, sp, #0
 801a062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a06a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a06c:	e853 3f00 	ldrex	r3, [r3]
 801a070:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a074:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a078:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	461a      	mov	r2, r3
 801a080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a082:	643b      	str	r3, [r7, #64]	@ 0x40
 801a084:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a086:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a088:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a08a:	e841 2300 	strex	r3, r2, [r1]
 801a08e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a092:	2b00      	cmp	r3, #0
 801a094:	d1e6      	bne.n	801a064 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	3308      	adds	r3, #8
 801a09c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a09e:	6a3b      	ldr	r3, [r7, #32]
 801a0a0:	e853 3f00 	ldrex	r3, [r3]
 801a0a4:	61fb      	str	r3, [r7, #28]
   return(result);
 801a0a6:	69fb      	ldr	r3, [r7, #28]
 801a0a8:	f023 0301 	bic.w	r3, r3, #1
 801a0ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	3308      	adds	r3, #8
 801a0b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a0b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a0b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a0ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a0bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a0be:	e841 2300 	strex	r3, r2, [r1]
 801a0c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d1e5      	bne.n	801a096 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a0ce:	2b01      	cmp	r3, #1
 801a0d0:	d118      	bne.n	801a104 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	e853 3f00 	ldrex	r3, [r3]
 801a0de:	60bb      	str	r3, [r7, #8]
   return(result);
 801a0e0:	68bb      	ldr	r3, [r7, #8]
 801a0e2:	f023 0310 	bic.w	r3, r3, #16
 801a0e6:	647b      	str	r3, [r7, #68]	@ 0x44
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	461a      	mov	r2, r3
 801a0ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a0f0:	61bb      	str	r3, [r7, #24]
 801a0f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a0f4:	6979      	ldr	r1, [r7, #20]
 801a0f6:	69ba      	ldr	r2, [r7, #24]
 801a0f8:	e841 2300 	strex	r3, r2, [r1]
 801a0fc:	613b      	str	r3, [r7, #16]
   return(result);
 801a0fe:	693b      	ldr	r3, [r7, #16]
 801a100:	2b00      	cmp	r3, #0
 801a102:	d1e6      	bne.n	801a0d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	2220      	movs	r2, #32
 801a108:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	2200      	movs	r2, #0
 801a110:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	2200      	movs	r2, #0
 801a116:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801a118:	bf00      	nop
 801a11a:	3754      	adds	r7, #84	@ 0x54
 801a11c:	46bd      	mov	sp, r7
 801a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a122:	4770      	bx	lr

0801a124 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801a124:	b580      	push	{r7, lr}
 801a126:	b084      	sub	sp, #16
 801a128:	af00      	add	r7, sp, #0
 801a12a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a130:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	2200      	movs	r2, #0
 801a136:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	2200      	movs	r2, #0
 801a13e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801a142:	68f8      	ldr	r0, [r7, #12]
 801a144:	f7ff fa3e 	bl	80195c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a148:	bf00      	nop
 801a14a:	3710      	adds	r7, #16
 801a14c:	46bd      	mov	sp, r7
 801a14e:	bd80      	pop	{r7, pc}

0801a150 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 801a150:	b480      	push	{r7}
 801a152:	b08f      	sub	sp, #60	@ 0x3c
 801a154:	af00      	add	r7, sp, #0
 801a156:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a15c:	2b21      	cmp	r3, #33	@ 0x21
 801a15e:	d14c      	bne.n	801a1fa <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801a166:	b29b      	uxth	r3, r3
 801a168:	2b00      	cmp	r3, #0
 801a16a:	d132      	bne.n	801a1d2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a172:	6a3b      	ldr	r3, [r7, #32]
 801a174:	e853 3f00 	ldrex	r3, [r3]
 801a178:	61fb      	str	r3, [r7, #28]
   return(result);
 801a17a:	69fb      	ldr	r3, [r7, #28]
 801a17c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a180:	637b      	str	r3, [r7, #52]	@ 0x34
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	681b      	ldr	r3, [r3, #0]
 801a186:	461a      	mov	r2, r3
 801a188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a18a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a18c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a18e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a192:	e841 2300 	strex	r3, r2, [r1]
 801a196:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d1e6      	bne.n	801a16c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1a4:	68fb      	ldr	r3, [r7, #12]
 801a1a6:	e853 3f00 	ldrex	r3, [r3]
 801a1aa:	60bb      	str	r3, [r7, #8]
   return(result);
 801a1ac:	68bb      	ldr	r3, [r7, #8]
 801a1ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a1b2:	633b      	str	r3, [r7, #48]	@ 0x30
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	461a      	mov	r2, r3
 801a1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1bc:	61bb      	str	r3, [r7, #24]
 801a1be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1c0:	6979      	ldr	r1, [r7, #20]
 801a1c2:	69ba      	ldr	r2, [r7, #24]
 801a1c4:	e841 2300 	strex	r3, r2, [r1]
 801a1c8:	613b      	str	r3, [r7, #16]
   return(result);
 801a1ca:	693b      	ldr	r3, [r7, #16]
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d1e6      	bne.n	801a19e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 801a1d0:	e013      	b.n	801a1fa <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a1d6:	781a      	ldrb	r2, [r3, #0]
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a1e2:	1c5a      	adds	r2, r3, #1
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801a1ee:	b29b      	uxth	r3, r3
 801a1f0:	3b01      	subs	r3, #1
 801a1f2:	b29a      	uxth	r2, r3
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 801a1fa:	bf00      	nop
 801a1fc:	373c      	adds	r7, #60	@ 0x3c
 801a1fe:	46bd      	mov	sp, r7
 801a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a204:	4770      	bx	lr

0801a206 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 801a206:	b480      	push	{r7}
 801a208:	b091      	sub	sp, #68	@ 0x44
 801a20a:	af00      	add	r7, sp, #0
 801a20c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a212:	2b21      	cmp	r3, #33	@ 0x21
 801a214:	d151      	bne.n	801a2ba <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801a21c:	b29b      	uxth	r3, r3
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d132      	bne.n	801a288 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a22a:	e853 3f00 	ldrex	r3, [r3]
 801a22e:	623b      	str	r3, [r7, #32]
   return(result);
 801a230:	6a3b      	ldr	r3, [r7, #32]
 801a232:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a236:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	461a      	mov	r2, r3
 801a23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a240:	633b      	str	r3, [r7, #48]	@ 0x30
 801a242:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a244:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a248:	e841 2300 	strex	r3, r2, [r1]
 801a24c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a250:	2b00      	cmp	r3, #0
 801a252:	d1e6      	bne.n	801a222 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	681b      	ldr	r3, [r3, #0]
 801a258:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a25a:	693b      	ldr	r3, [r7, #16]
 801a25c:	e853 3f00 	ldrex	r3, [r3]
 801a260:	60fb      	str	r3, [r7, #12]
   return(result);
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a268:	637b      	str	r3, [r7, #52]	@ 0x34
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	681b      	ldr	r3, [r3, #0]
 801a26e:	461a      	mov	r2, r3
 801a270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a272:	61fb      	str	r3, [r7, #28]
 801a274:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a276:	69b9      	ldr	r1, [r7, #24]
 801a278:	69fa      	ldr	r2, [r7, #28]
 801a27a:	e841 2300 	strex	r3, r2, [r1]
 801a27e:	617b      	str	r3, [r7, #20]
   return(result);
 801a280:	697b      	ldr	r3, [r7, #20]
 801a282:	2b00      	cmp	r3, #0
 801a284:	d1e6      	bne.n	801a254 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801a286:	e018      	b.n	801a2ba <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a28c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801a28e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a290:	881a      	ldrh	r2, [r3, #0]
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801a29a:	b292      	uxth	r2, r2
 801a29c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a2a2:	1c9a      	adds	r2, r3, #2
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801a2ae:	b29b      	uxth	r3, r3
 801a2b0:	3b01      	subs	r3, #1
 801a2b2:	b29a      	uxth	r2, r3
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 801a2ba:	bf00      	nop
 801a2bc:	3744      	adds	r7, #68	@ 0x44
 801a2be:	46bd      	mov	sp, r7
 801a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2c4:	4770      	bx	lr

0801a2c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a2c6:	b580      	push	{r7, lr}
 801a2c8:	b088      	sub	sp, #32
 801a2ca:	af00      	add	r7, sp, #0
 801a2cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a2d4:	68fb      	ldr	r3, [r7, #12]
 801a2d6:	e853 3f00 	ldrex	r3, [r3]
 801a2da:	60bb      	str	r3, [r7, #8]
   return(result);
 801a2dc:	68bb      	ldr	r3, [r7, #8]
 801a2de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a2e2:	61fb      	str	r3, [r7, #28]
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	461a      	mov	r2, r3
 801a2ea:	69fb      	ldr	r3, [r7, #28]
 801a2ec:	61bb      	str	r3, [r7, #24]
 801a2ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a2f0:	6979      	ldr	r1, [r7, #20]
 801a2f2:	69ba      	ldr	r2, [r7, #24]
 801a2f4:	e841 2300 	strex	r3, r2, [r1]
 801a2f8:	613b      	str	r3, [r7, #16]
   return(result);
 801a2fa:	693b      	ldr	r3, [r7, #16]
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d1e6      	bne.n	801a2ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	2220      	movs	r2, #32
 801a304:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	2200      	movs	r2, #0
 801a30a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801a30c:	6878      	ldr	r0, [r7, #4]
 801a30e:	f7fa fa13 	bl	8014738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a312:	bf00      	nop
 801a314:	3720      	adds	r7, #32
 801a316:	46bd      	mov	sp, r7
 801a318:	bd80      	pop	{r7, pc}
	...

0801a31c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801a31c:	b580      	push	{r7, lr}
 801a31e:	b09c      	sub	sp, #112	@ 0x70
 801a320:	af00      	add	r7, sp, #0
 801a322:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a32a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a334:	2b22      	cmp	r3, #34	@ 0x22
 801a336:	f040 80be 	bne.w	801a4b6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801a340:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a344:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801a348:	b2d9      	uxtb	r1, r3
 801a34a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a34e:	b2da      	uxtb	r2, r3
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a354:	400a      	ands	r2, r1
 801a356:	b2d2      	uxtb	r2, r2
 801a358:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a35e:	1c5a      	adds	r2, r3, #1
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801a36a:	b29b      	uxth	r3, r3
 801a36c:	3b01      	subs	r3, #1
 801a36e:	b29a      	uxth	r2, r3
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801a37c:	b29b      	uxth	r3, r3
 801a37e:	2b00      	cmp	r3, #0
 801a380:	f040 80a3 	bne.w	801a4ca <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a38a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a38c:	e853 3f00 	ldrex	r3, [r3]
 801a390:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a394:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a398:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	681b      	ldr	r3, [r3, #0]
 801a39e:	461a      	mov	r2, r3
 801a3a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a3a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a3a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a3a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a3a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a3aa:	e841 2300 	strex	r3, r2, [r1]
 801a3ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a3b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d1e6      	bne.n	801a384 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	3308      	adds	r3, #8
 801a3bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a3c0:	e853 3f00 	ldrex	r3, [r3]
 801a3c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a3c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3c8:	f023 0301 	bic.w	r3, r3, #1
 801a3cc:	667b      	str	r3, [r7, #100]	@ 0x64
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	3308      	adds	r3, #8
 801a3d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801a3d6:	647a      	str	r2, [r7, #68]	@ 0x44
 801a3d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a3da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a3dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a3de:	e841 2300 	strex	r3, r2, [r1]
 801a3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a3e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d1e5      	bne.n	801a3b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	2220      	movs	r2, #32
 801a3ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	2200      	movs	r2, #0
 801a3f6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	2200      	movs	r2, #0
 801a3fc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	4a34      	ldr	r2, [pc, #208]	@ (801a4d4 <UART_RxISR_8BIT+0x1b8>)
 801a404:	4293      	cmp	r3, r2
 801a406:	d01f      	beq.n	801a448 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	685b      	ldr	r3, [r3, #4]
 801a40e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a412:	2b00      	cmp	r3, #0
 801a414:	d018      	beq.n	801a448 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a41e:	e853 3f00 	ldrex	r3, [r3]
 801a422:	623b      	str	r3, [r7, #32]
   return(result);
 801a424:	6a3b      	ldr	r3, [r7, #32]
 801a426:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a42a:	663b      	str	r3, [r7, #96]	@ 0x60
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	461a      	mov	r2, r3
 801a432:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a434:	633b      	str	r3, [r7, #48]	@ 0x30
 801a436:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a438:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a43a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a43c:	e841 2300 	strex	r3, r2, [r1]
 801a440:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a444:	2b00      	cmp	r3, #0
 801a446:	d1e6      	bne.n	801a416 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a44c:	2b01      	cmp	r3, #1
 801a44e:	d12e      	bne.n	801a4ae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	2200      	movs	r2, #0
 801a454:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	681b      	ldr	r3, [r3, #0]
 801a45a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a45c:	693b      	ldr	r3, [r7, #16]
 801a45e:	e853 3f00 	ldrex	r3, [r3]
 801a462:	60fb      	str	r3, [r7, #12]
   return(result);
 801a464:	68fb      	ldr	r3, [r7, #12]
 801a466:	f023 0310 	bic.w	r3, r3, #16
 801a46a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	461a      	mov	r2, r3
 801a472:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a474:	61fb      	str	r3, [r7, #28]
 801a476:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a478:	69b9      	ldr	r1, [r7, #24]
 801a47a:	69fa      	ldr	r2, [r7, #28]
 801a47c:	e841 2300 	strex	r3, r2, [r1]
 801a480:	617b      	str	r3, [r7, #20]
   return(result);
 801a482:	697b      	ldr	r3, [r7, #20]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d1e6      	bne.n	801a456 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	69db      	ldr	r3, [r3, #28]
 801a48e:	f003 0310 	and.w	r3, r3, #16
 801a492:	2b10      	cmp	r3, #16
 801a494:	d103      	bne.n	801a49e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	2210      	movs	r2, #16
 801a49c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801a4a4:	4619      	mov	r1, r3
 801a4a6:	6878      	ldr	r0, [r7, #4]
 801a4a8:	f7ff f896 	bl	80195d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a4ac:	e00d      	b.n	801a4ca <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 801a4ae:	6878      	ldr	r0, [r7, #4]
 801a4b0:	f7fa f8f4 	bl	801469c <HAL_UART_RxCpltCallback>
}
 801a4b4:	e009      	b.n	801a4ca <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	8b1b      	ldrh	r3, [r3, #24]
 801a4bc:	b29a      	uxth	r2, r3
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	f042 0208 	orr.w	r2, r2, #8
 801a4c6:	b292      	uxth	r2, r2
 801a4c8:	831a      	strh	r2, [r3, #24]
}
 801a4ca:	bf00      	nop
 801a4cc:	3770      	adds	r7, #112	@ 0x70
 801a4ce:	46bd      	mov	sp, r7
 801a4d0:	bd80      	pop	{r7, pc}
 801a4d2:	bf00      	nop
 801a4d4:	40008000 	.word	0x40008000

0801a4d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801a4d8:	b580      	push	{r7, lr}
 801a4da:	b09c      	sub	sp, #112	@ 0x70
 801a4dc:	af00      	add	r7, sp, #0
 801a4de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a4e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801a4f0:	2b22      	cmp	r3, #34	@ 0x22
 801a4f2:	f040 80be 	bne.w	801a672 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801a4fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a504:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801a506:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801a50a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a50e:	4013      	ands	r3, r2
 801a510:	b29a      	uxth	r2, r3
 801a512:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a514:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a51a:	1c9a      	adds	r2, r3, #2
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801a526:	b29b      	uxth	r3, r3
 801a528:	3b01      	subs	r3, #1
 801a52a:	b29a      	uxth	r2, r3
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801a538:	b29b      	uxth	r3, r3
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	f040 80a3 	bne.w	801a686 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a546:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a548:	e853 3f00 	ldrex	r3, [r3]
 801a54c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a54e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a554:	667b      	str	r3, [r7, #100]	@ 0x64
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	681b      	ldr	r3, [r3, #0]
 801a55a:	461a      	mov	r2, r3
 801a55c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a55e:	657b      	str	r3, [r7, #84]	@ 0x54
 801a560:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a562:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a564:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a566:	e841 2300 	strex	r3, r2, [r1]
 801a56a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a56c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d1e6      	bne.n	801a540 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	3308      	adds	r3, #8
 801a578:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a57a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a57c:	e853 3f00 	ldrex	r3, [r3]
 801a580:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a584:	f023 0301 	bic.w	r3, r3, #1
 801a588:	663b      	str	r3, [r7, #96]	@ 0x60
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	3308      	adds	r3, #8
 801a590:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a592:	643a      	str	r2, [r7, #64]	@ 0x40
 801a594:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a596:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a598:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a59a:	e841 2300 	strex	r3, r2, [r1]
 801a59e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d1e5      	bne.n	801a572 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	2220      	movs	r2, #32
 801a5aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	2200      	movs	r2, #0
 801a5b2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	2200      	movs	r2, #0
 801a5b8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	4a34      	ldr	r2, [pc, #208]	@ (801a690 <UART_RxISR_16BIT+0x1b8>)
 801a5c0:	4293      	cmp	r3, r2
 801a5c2:	d01f      	beq.n	801a604 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	685b      	ldr	r3, [r3, #4]
 801a5ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d018      	beq.n	801a604 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	681b      	ldr	r3, [r3, #0]
 801a5d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a5d8:	6a3b      	ldr	r3, [r7, #32]
 801a5da:	e853 3f00 	ldrex	r3, [r3]
 801a5de:	61fb      	str	r3, [r7, #28]
   return(result);
 801a5e0:	69fb      	ldr	r3, [r7, #28]
 801a5e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a5e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	461a      	mov	r2, r3
 801a5ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a5f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a5f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a5f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a5f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a5f8:	e841 2300 	strex	r3, r2, [r1]
 801a5fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a600:	2b00      	cmp	r3, #0
 801a602:	d1e6      	bne.n	801a5d2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a608:	2b01      	cmp	r3, #1
 801a60a:	d12e      	bne.n	801a66a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	2200      	movs	r2, #0
 801a610:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	681b      	ldr	r3, [r3, #0]
 801a616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	e853 3f00 	ldrex	r3, [r3]
 801a61e:	60bb      	str	r3, [r7, #8]
   return(result);
 801a620:	68bb      	ldr	r3, [r7, #8]
 801a622:	f023 0310 	bic.w	r3, r3, #16
 801a626:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	461a      	mov	r2, r3
 801a62e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a630:	61bb      	str	r3, [r7, #24]
 801a632:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a634:	6979      	ldr	r1, [r7, #20]
 801a636:	69ba      	ldr	r2, [r7, #24]
 801a638:	e841 2300 	strex	r3, r2, [r1]
 801a63c:	613b      	str	r3, [r7, #16]
   return(result);
 801a63e:	693b      	ldr	r3, [r7, #16]
 801a640:	2b00      	cmp	r3, #0
 801a642:	d1e6      	bne.n	801a612 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	69db      	ldr	r3, [r3, #28]
 801a64a:	f003 0310 	and.w	r3, r3, #16
 801a64e:	2b10      	cmp	r3, #16
 801a650:	d103      	bne.n	801a65a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	2210      	movs	r2, #16
 801a658:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801a660:	4619      	mov	r1, r3
 801a662:	6878      	ldr	r0, [r7, #4]
 801a664:	f7fe ffb8 	bl	80195d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a668:	e00d      	b.n	801a686 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 801a66a:	6878      	ldr	r0, [r7, #4]
 801a66c:	f7fa f816 	bl	801469c <HAL_UART_RxCpltCallback>
}
 801a670:	e009      	b.n	801a686 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	8b1b      	ldrh	r3, [r3, #24]
 801a678:	b29a      	uxth	r2, r3
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	f042 0208 	orr.w	r2, r2, #8
 801a682:	b292      	uxth	r2, r2
 801a684:	831a      	strh	r2, [r3, #24]
}
 801a686:	bf00      	nop
 801a688:	3770      	adds	r7, #112	@ 0x70
 801a68a:	46bd      	mov	sp, r7
 801a68c:	bd80      	pop	{r7, pc}
 801a68e:	bf00      	nop
 801a690:	40008000 	.word	0x40008000

0801a694 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801a694:	b480      	push	{r7}
 801a696:	b083      	sub	sp, #12
 801a698:	af00      	add	r7, sp, #0
 801a69a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801a69c:	bf00      	nop
 801a69e:	370c      	adds	r7, #12
 801a6a0:	46bd      	mov	sp, r7
 801a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6a6:	4770      	bx	lr

0801a6a8 <memset>:
 801a6a8:	4402      	add	r2, r0
 801a6aa:	4603      	mov	r3, r0
 801a6ac:	4293      	cmp	r3, r2
 801a6ae:	d100      	bne.n	801a6b2 <memset+0xa>
 801a6b0:	4770      	bx	lr
 801a6b2:	f803 1b01 	strb.w	r1, [r3], #1
 801a6b6:	e7f9      	b.n	801a6ac <memset+0x4>

0801a6b8 <__libc_init_array>:
 801a6b8:	b570      	push	{r4, r5, r6, lr}
 801a6ba:	4d0d      	ldr	r5, [pc, #52]	@ (801a6f0 <__libc_init_array+0x38>)
 801a6bc:	4c0d      	ldr	r4, [pc, #52]	@ (801a6f4 <__libc_init_array+0x3c>)
 801a6be:	1b64      	subs	r4, r4, r5
 801a6c0:	10a4      	asrs	r4, r4, #2
 801a6c2:	2600      	movs	r6, #0
 801a6c4:	42a6      	cmp	r6, r4
 801a6c6:	d109      	bne.n	801a6dc <__libc_init_array+0x24>
 801a6c8:	4d0b      	ldr	r5, [pc, #44]	@ (801a6f8 <__libc_init_array+0x40>)
 801a6ca:	4c0c      	ldr	r4, [pc, #48]	@ (801a6fc <__libc_init_array+0x44>)
 801a6cc:	f000 f818 	bl	801a700 <_init>
 801a6d0:	1b64      	subs	r4, r4, r5
 801a6d2:	10a4      	asrs	r4, r4, #2
 801a6d4:	2600      	movs	r6, #0
 801a6d6:	42a6      	cmp	r6, r4
 801a6d8:	d105      	bne.n	801a6e6 <__libc_init_array+0x2e>
 801a6da:	bd70      	pop	{r4, r5, r6, pc}
 801a6dc:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6e0:	4798      	blx	r3
 801a6e2:	3601      	adds	r6, #1
 801a6e4:	e7ee      	b.n	801a6c4 <__libc_init_array+0xc>
 801a6e6:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6ea:	4798      	blx	r3
 801a6ec:	3601      	adds	r6, #1
 801a6ee:	e7f2      	b.n	801a6d6 <__libc_init_array+0x1e>
 801a6f0:	0801a860 	.word	0x0801a860
 801a6f4:	0801a860 	.word	0x0801a860
 801a6f8:	0801a860 	.word	0x0801a860
 801a6fc:	0801a864 	.word	0x0801a864

0801a700 <_init>:
 801a700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a702:	bf00      	nop
 801a704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a706:	bc08      	pop	{r3}
 801a708:	469e      	mov	lr, r3
 801a70a:	4770      	bx	lr

0801a70c <_fini>:
 801a70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a70e:	bf00      	nop
 801a710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a712:	bc08      	pop	{r3}
 801a714:	469e      	mov	lr, r3
 801a716:	4770      	bx	lr
